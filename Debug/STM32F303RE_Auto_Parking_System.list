
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b858  0800b858  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b858  0800b858  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b858  0800b858  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b858  0800b858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800b860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          00001f48  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002018  20002018  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ecaa  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000458f  00000000  00000000  0003eded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001708  00000000  00000000  00043380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011ca  00000000  00000000  00044a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000250de  00000000  00000000  00045c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f3b8  00000000  00000000  0006ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d72a2  00000000  00000000  0008a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000065dc  00000000  00000000  0016138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00167968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b520 	.word	0x0800b520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800b520 	.word	0x0800b520

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000284:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <MX_FREERTOS_Init+0x48>)
 8000286:	2100      	movs	r1, #0
 8000288:	4810      	ldr	r0, [pc, #64]	; (80002cc <MX_FREERTOS_Init+0x4c>)
 800028a:	f007 fb7f 	bl	800798c <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <MX_FREERTOS_Init+0x50>)
 8000292:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 8000294:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <MX_FREERTOS_Init+0x54>)
 8000296:	2100      	movs	r1, #0
 8000298:	480f      	ldr	r0, [pc, #60]	; (80002d8 <MX_FREERTOS_Init+0x58>)
 800029a:	f007 fb77 	bl	800798c <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <MX_FREERTOS_Init+0x5c>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <MX_FREERTOS_Init+0x60>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	480e      	ldr	r0, [pc, #56]	; (80002e4 <MX_FREERTOS_Init+0x64>)
 80002aa:	f007 fb6f 	bl	800798c <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <MX_FREERTOS_Init+0x68>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_recive */
  bluetooth_reciveHandle = osThreadNew(RTOS_Bluetooth_Recive, NULL, &bluetooth_recive_attributes);
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <MX_FREERTOS_Init+0x6c>)
 80002b6:	2100      	movs	r1, #0
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <MX_FREERTOS_Init+0x70>)
 80002ba:	f007 fb67 	bl	800798c <osThreadNew>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <MX_FREERTOS_Init+0x74>)
 80002c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	0800b75c 	.word	0x0800b75c
 80002cc:	080002f9 	.word	0x080002f9
 80002d0:	200000ec 	.word	0x200000ec
 80002d4:	0800b780 	.word	0x0800b780
 80002d8:	08000335 	.word	0x08000335
 80002dc:	200000f0 	.word	0x200000f0
 80002e0:	0800b7a4 	.word	0x0800b7a4
 80002e4:	080003e5 	.word	0x080003e5
 80002e8:	200000f4 	.word	0x200000f4
 80002ec:	0800b7c8 	.word	0x0800b7c8
 80002f0:	08000411 	.word	0x08000411
 80002f4:	200000f8 	.word	0x200000f8

080002f8 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */

	ECU_Bluetooth_ReciveData(&bluetooth);
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <DefaultTask+0x30>)
 8000302:	f001 fc53 	bl	8001bac <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000306:	4809      	ldr	r0, [pc, #36]	; (800032c <DefaultTask+0x34>)
 8000308:	f001 fc6a 	bl	8001be0 <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask is Running\n");
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <DefaultTask+0x38>)
 800030e:	f00a fa3b 	bl	800a788 <puts>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 8000312:	f007 fbe5 	bl	8007ae0 <osThreadGetId>
 8000316:	4603      	mov	r3, r0
 8000318:	4618      	mov	r0, r3
 800031a:	f007 fc07 	bl	8007b2c <osThreadSuspend>
    osDelay(1000);
 800031e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000322:	f007 fc37 	bl	8007b94 <osDelay>
	  printf("DefaultTask is Running\n");
 8000326:	e7f1      	b.n	800030c <DefaultTask+0x14>
 8000328:	20000058 	.word	0x20000058
 800032c:	20000048 	.word	0x20000048
 8000330:	0800b57c 	.word	0x0800b57c

08000334 <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Ultrasonics_Read */
  /* Infinite loop */
  for(;;)
  {
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 800033c:	481c      	ldr	r0, [pc, #112]	; (80003b0 <RTOS_Ultrasonics_Read+0x7c>)
 800033e:	f001 ff51 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4619      	mov	r1, r3
 8000348:	481b      	ldr	r0, [pc, #108]	; (80003b8 <RTOS_Ultrasonics_Read+0x84>)
 800034a:	f00a f9b7 	bl	800a6bc <iprintf>

	  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 800034e:	481b      	ldr	r0, [pc, #108]	; (80003bc <RTOS_Ultrasonics_Read+0x88>)
 8000350:	f001 ff48 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4619      	mov	r1, r3
 800035a:	4819      	ldr	r0, [pc, #100]	; (80003c0 <RTOS_Ultrasonics_Read+0x8c>)
 800035c:	f00a f9ae 	bl	800a6bc <iprintf>

	  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <RTOS_Ultrasonics_Read+0x90>)
 8000362:	f001 ff3f 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	4619      	mov	r1, r3
 800036c:	4816      	ldr	r0, [pc, #88]	; (80003c8 <RTOS_Ultrasonics_Read+0x94>)
 800036e:	f00a f9a5 	bl	800a6bc <iprintf>

	  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 8000372:	4816      	ldr	r0, [pc, #88]	; (80003cc <RTOS_Ultrasonics_Read+0x98>)
 8000374:	f001 ff36 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("LeftFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4619      	mov	r1, r3
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <RTOS_Ultrasonics_Read+0x9c>)
 8000380:	f00a f99c 	bl	800a6bc <iprintf>

	  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <RTOS_Ultrasonics_Read+0xa0>)
 8000386:	f001 ff2d 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	4619      	mov	r1, r3
 8000390:	4811      	ldr	r0, [pc, #68]	; (80003d8 <RTOS_Ultrasonics_Read+0xa4>)
 8000392:	f00a f993 	bl	800a6bc <iprintf>

	  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000396:	4811      	ldr	r0, [pc, #68]	; (80003dc <RTOS_Ultrasonics_Read+0xa8>)
 8000398:	f001 ff24 	bl	80021e4 <ECU_Ultrasonic_Read>
	  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <RTOS_Ultrasonics_Read+0x80>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4619      	mov	r1, r3
 80003a2:	480f      	ldr	r0, [pc, #60]	; (80003e0 <RTOS_Ultrasonics_Read+0xac>)
 80003a4:	f00a f98a 	bl	800a6bc <iprintf>

    osDelay(200);
 80003a8:	20c8      	movs	r0, #200	; 0xc8
 80003aa:	f007 fbf3 	bl	8007b94 <osDelay>
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003ae:	e7c5      	b.n	800033c <RTOS_Ultrasonics_Read+0x8>
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000474 	.word	0x20000474
 80003b8:	0800b594 	.word	0x0800b594
 80003bc:	2000000c 	.word	0x2000000c
 80003c0:	0800b5b8 	.word	0x0800b5b8
 80003c4:	20000018 	.word	0x20000018
 80003c8:	0800b5e0 	.word	0x0800b5e0
 80003cc:	20000024 	.word	0x20000024
 80003d0:	0800b608 	.word	0x0800b608
 80003d4:	20000030 	.word	0x20000030
 80003d8:	0800b630 	.word	0x0800b630
 80003dc:	2000003c 	.word	0x2000003c
 80003e0:	0800b658 	.word	0x0800b658

080003e4 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  printf("RTOS_Car_Next_Step is Running\n");
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <RTOS_Car_Next_Step+0x20>)
 80003ee:	f00a f9cb 	bl	800a788 <puts>
	  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <RTOS_Car_Next_Step+0x24>)
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <RTOS_Car_Next_Step+0x28>)
 80003f6:	f001 fc83 	bl	8001d00 <ECU_Motor_NextStep>

	  osDelay(500);
 80003fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003fe:	f007 fbc9 	bl	8007b94 <osDelay>
	  printf("RTOS_Car_Next_Step is Running\n");
 8000402:	e7f3      	b.n	80003ec <RTOS_Car_Next_Step+0x8>
 8000404:	0800b67c 	.word	0x0800b67c
 8000408:	20000064 	.word	0x20000064
 800040c:	20000048 	.word	0x20000048

08000410 <RTOS_Bluetooth_Recive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Bluetooth_Recive */
void RTOS_Bluetooth_Recive(void *argument)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Bluetooth_Recive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000418:	2001      	movs	r0, #1
 800041a:	f007 fbbb 	bl	8007b94 <osDelay>
 800041e:	e7fb      	b.n	8000418 <RTOS_Bluetooth_Recive+0x8>

08000420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b41      	ldr	r3, [pc, #260]	; (800053c <MX_GPIO_Init+0x11c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a40      	ldr	r2, [pc, #256]	; (800053c <MX_GPIO_Init+0x11c>)
 800043c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b3e      	ldr	r3, [pc, #248]	; (800053c <MX_GPIO_Init+0x11c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <MX_GPIO_Init+0x11c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a3a      	ldr	r2, [pc, #232]	; (800053c <MX_GPIO_Init+0x11c>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b38      	ldr	r3, [pc, #224]	; (800053c <MX_GPIO_Init+0x11c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b35      	ldr	r3, [pc, #212]	; (800053c <MX_GPIO_Init+0x11c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a34      	ldr	r2, [pc, #208]	; (800053c <MX_GPIO_Init+0x11c>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b32      	ldr	r3, [pc, #200]	; (800053c <MX_GPIO_Init+0x11c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b2f      	ldr	r3, [pc, #188]	; (800053c <MX_GPIO_Init+0x11c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a2e      	ldr	r2, [pc, #184]	; (800053c <MX_GPIO_Init+0x11c>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b2c      	ldr	r3, [pc, #176]	; (800053c <MX_GPIO_Init+0x11c>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f002 faf0 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80004a4:	2200      	movs	r2, #0
 80004a6:	f643 4106 	movw	r1, #15366	; 0x3c06
 80004aa:	4825      	ldr	r0, [pc, #148]	; (8000540 <MX_GPIO_Init+0x120>)
 80004ac:	f002 faea 	bl	8002a84 <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004b6:	4823      	ldr	r0, [pc, #140]	; (8000544 <MX_GPIO_Init+0x124>)
 80004b8:	f002 fae4 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	481c      	ldr	r0, [pc, #112]	; (8000544 <MX_GPIO_Init+0x124>)
 80004d4:	f002 f94c 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 80004d8:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f002 f93c 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80004f8:	f643 4306 	movw	r3, #15366	; 0x3c06
 80004fc:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0x120>)
 8000512:	f002 f92d 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 8000516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_GPIO_Init+0x124>)
 8000530:	f002 f91e 	bl	8002770 <HAL_GPIO_Init>

}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	; 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	48000400 	.word	0x48000400
 8000544:	48000800 	.word	0x48000800

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f001 ff80 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f81c 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f7ff ff64 	bl	8000420 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000558:	f000 fa96 	bl	8000a88 <MX_TIM1_Init>
  MX_TIM2_Init();
 800055c:	f000 fb64 	bl	8000c28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000560:	f000 fbfc 	bl	8000d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000564:	f000 fc96 	bl	8000e94 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000568:	f000 fd30 	bl	8000fcc <MX_TIM8_Init>
  MX_TIM15_Init();
 800056c:	f000 fdfe 	bl	800116c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000570:	f000 fec4 	bl	80012fc <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000574:	f001 fa08 	bl	8001988 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000578:	f001 f9d6 	bl	8001928 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800057c:	f007 f99e 	bl	80078bc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000580:	f7ff fe7e 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000584:	f007 f9ce 	bl	8007924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x40>
	...

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0a6      	sub	sp, #152	; 0x98
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000596:	2228      	movs	r2, #40	; 0x28
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f00a f9d4 	bl	800a948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2258      	movs	r2, #88	; 0x58
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00a f9c6 	bl	800a948 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fa6d 	bl	8002ab4 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005e0:	f000 f848 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 faac 	bl	8003b5c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060a:	f000 f833 	bl	8000674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <SystemClock_Config+0xc0>)
 8000610:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800061a:	2300      	movs	r3, #0
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800061e:	2300      	movs	r3, #0
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000622:	2300      	movs	r3, #0
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000626:	2300      	movs	r3, #0
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800062a:	2300      	movs	r3, #0
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800062e:	2300      	movs	r3, #0
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fcf9 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000640:	f000 f818 	bl	8000674 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3798      	adds	r7, #152	; 0x98
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	00f0300a 	.word	0x00f0300a

08000650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d101      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000662:	f001 ff0b 	bl	800247c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40001000 	.word	0x40001000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_MspInit+0x4c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <HAL_MspInit+0x4c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_MspInit+0x4c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <HAL_MspInit+0x4c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_MspInit+0x4c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	210f      	movs	r1, #15
 80006ba:	f06f 0001 	mvn.w	r0, #1
 80006be:	f001 ffb5 	bl	800262c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <HAL_InitTick+0xe0>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <HAL_InitTick+0xe0>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_InitTick+0xe0>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006f8:	f107 0210 	add.w	r2, r7, #16
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fc60 	bl	8003fc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070e:	2b00      	cmp	r3, #0
 8000710:	d103      	bne.n	800071a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000712:	f003 fc15 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 8000716:	6378      	str	r0, [r7, #52]	; 0x34
 8000718:	e004      	b.n	8000724 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800071a:	f003 fc11 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 800071e:	4603      	mov	r3, r0
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <HAL_InitTick+0xe4>)
 8000728:	fba2 2303 	umull	r2, r3, r2, r3
 800072c:	0c9b      	lsrs	r3, r3, #18
 800072e:	3b01      	subs	r3, #1
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <HAL_InitTick+0xe8>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <HAL_InitTick+0xec>)
 8000736:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <HAL_InitTick+0xe8>)
 800073a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000740:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <HAL_InitTick+0xe8>)
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_InitTick+0xe8>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_InitTick+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_InitTick+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <HAL_InitTick+0xe8>)
 800075a:	f003 fe85 	bl	8004468 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11b      	bne.n	80007a4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <HAL_InitTick+0xe8>)
 800076e:	f003 fed3 	bl	8004518 <HAL_TIM_Base_Start_IT>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800077c:	2b00      	cmp	r3, #0
 800077e:	d111      	bne.n	80007a4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000780:	2036      	movs	r0, #54	; 0x36
 8000782:	f001 ff6f 	bl	8002664 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d808      	bhi.n	800079e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	2036      	movs	r0, #54	; 0x36
 8000792:	f001 ff4b 	bl	800262c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_InitTick+0xf0>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	e002      	b.n	80007a4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3738      	adds	r7, #56	; 0x38
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	431bde83 	.word	0x431bde83
 80007b8:	200000fc 	.word	0x200000fc
 80007bc:	40001000 	.word	0x40001000
 80007c0:	20000068 	.word	0x20000068

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80007f6:	2205      	movs	r2, #5
 80007f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80007fc:	f004 fb70 	bl	8004ee0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000802:	f004 fb6d 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000048c 	.word	0x2000048c
 8000810:	2000014c 	.word	0x2000014c
 8000814:	200002c8 	.word	0x200002c8

08000818 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <TIM1_CC_IRQHandler+0x14>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <TIM1_CC_IRQHandler+0x18>)
 8000824:	f004 fb5c 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000048c 	.word	0x2000048c
 8000830:	2000014c 	.word	0x2000014c

08000834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <TIM2_IRQHandler+0x14>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <TIM2_IRQHandler+0x18>)
 8000840:	f004 fb4e 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000048c 	.word	0x2000048c
 800084c:	20000198 	.word	0x20000198

08000850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <TIM3_IRQHandler+0x14>)
 8000856:	2202      	movs	r2, #2
 8000858:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <TIM3_IRQHandler+0x18>)
 800085c:	f004 fb40 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000048c 	.word	0x2000048c
 8000868:	200001e4 	.word	0x200001e4

0800086c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <TIM4_IRQHandler+0x14>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <TIM4_IRQHandler+0x18>)
 8000878:	f004 fb32 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000048c 	.word	0x2000048c
 8000884:	20000230 	.word	0x20000230

08000888 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <TIM8_CC_IRQHandler+0x14>)
 800088e:	2204      	movs	r2, #4
 8000890:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <TIM8_CC_IRQHandler+0x18>)
 8000894:	f004 fb24 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000048c 	.word	0x2000048c
 80008a0:	2000027c 	.word	0x2000027c

080008a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <UART4_IRQHandler+0x10>)
 80008aa:	f005 fe5f 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000360 	.word	0x20000360

080008b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM6_DAC_IRQHandler+0x10>)
 80008be:	f004 fb0f 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000fc 	.word	0x200000fc

080008cc <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <Custom_ITM_sendChar_Ch0+0x48>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <Custom_ITM_sendChar_Ch0+0x48>)
 80008dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e0:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <Custom_ITM_sendChar_Ch0+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <Custom_ITM_sendChar_Ch0+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008ee:	bf00      	nop
 80008f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 80008fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	6013      	str	r3, [r2, #0]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000edfc 	.word	0xe000edfc
 8000918:	e0000e00 	.word	0xe0000e00

0800091c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
  }

  return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ffab 	bl	80008cc <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
  }
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
  return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f00a f832 	bl	800aa90 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20010000 	.word	0x20010000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000148 	.word	0x20000148
 8000a60:	20002018 	.word	0x20002018

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	; 0x78
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	222c      	movs	r2, #44	; 0x2c
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f009 ff39 	bl	800a948 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad6:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000ad8:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <MX_TIM1_Init+0x19c>)
 8000ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000adc:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ae8:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b02:	4847      	ldr	r0, [pc, #284]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b04:	f003 fcb0 	bl	8004468 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b0e:	f7ff fdb1 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4840      	ldr	r0, [pc, #256]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b20:	f004 fcae 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b2a:	f7ff fda3 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b2e:	483c      	ldr	r0, [pc, #240]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b30:	f003 fd62 	bl	80045f8 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b3a:	f7ff fd9b 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b3e:	4838      	ldr	r0, [pc, #224]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b40:	f003 ff64 	bl	8004a0c <HAL_TIM_IC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b4a:	f7ff fd93 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482f      	ldr	r0, [pc, #188]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b62:	f005 fb41 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000b6c:	f7ff fd82 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000b74:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000b78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000b98:	f004 fb5e 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000ba2:	f7ff fd67 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000bc0:	f004 faad 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000bca:	f7ff fd53 	bl	8000674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000c04:	f005 fb7c 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000c0e:	f7ff fd31 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM1_Init+0x198>)
 8000c14:	f000 fd74 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3778      	adds	r7, #120	; 0x78
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000014c 	.word	0x2000014c
 8000c24:	40012c00 	.word	0x40012c00

08000c28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b092      	sub	sp, #72	; 0x48
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c72:	2207      	movs	r2, #7
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c90:	4831      	ldr	r0, [pc, #196]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000c92:	f003 fbe9 	bl	8004468 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c9c:	f7ff fcea 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000caa:	4619      	mov	r1, r3
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000cae:	f004 fbe7 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cb8:	f7ff fcdc 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cbc:	4826      	ldr	r0, [pc, #152]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000cbe:	f003 fc9b 	bl	80045f8 <HAL_TIM_PWM_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000cc8:	f7ff fcd4 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ccc:	4822      	ldr	r0, [pc, #136]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000cce:	f003 fe9d 	bl	8004a0c <HAL_TIM_IC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cd8:	f7ff fccc 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000cec:	f005 fa7c 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000cf6:	f7ff fcbd 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	; 0x60
 8000cfc:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000cfe:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000d02:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4810      	ldr	r0, [pc, #64]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000d16:	f004 fa9f 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000d20:	f7ff fca8 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2204      	movs	r2, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000d3c:	f004 f9ef 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000d46:	f7ff fc95 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <MX_TIM2_Init+0x130>)
 8000d4c:	f000 fcd8 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000d50:	bf00      	nop
 8000d52:	3748      	adds	r7, #72	; 0x48
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000198 	.word	0x20000198

08000d5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b092      	sub	sp, #72	; 0x48
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000d9e:	4a3c      	ldr	r2, [pc, #240]	; (8000e90 <MX_TIM3_Init+0x134>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc2:	4832      	ldr	r0, [pc, #200]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000dc4:	f003 fb50 	bl	8004468 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000dce:	f7ff fc51 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482b      	ldr	r0, [pc, #172]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000de0:	f004 fb4e 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dea:	f7ff fc43 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dee:	4827      	ldr	r0, [pc, #156]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000df0:	f003 fc02 	bl	80045f8 <HAL_TIM_PWM_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000dfa:	f7ff fc3b 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000e00:	f003 fe04 	bl	8004a0c <HAL_TIM_IC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e0a:	f7ff fc33 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481b      	ldr	r0, [pc, #108]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000e1e:	f005 f9e3 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000e28:	f7ff fc24 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2c:	2360      	movs	r3, #96	; 0x60
 8000e2e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000e30:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000e34:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000e48:	f004 fa06 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000e52:	f7ff fc0f 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000e6e:	f004 f956 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000e78:	f7ff fbfc 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM3_Init+0x130>)
 8000e7e:	f000 fc3f 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3748      	adds	r7, #72	; 0x48
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001e4 	.word	0x200001e4
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b092      	sub	sp, #72	; 0x48
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000ed6:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <MX_TIM4_Init+0x134>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000efa:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000efc:	f003 fab4 	bl	8004468 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000f06:	f7ff fbb5 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	4619      	mov	r1, r3
 8000f16:	482b      	ldr	r0, [pc, #172]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000f18:	f004 fab2 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f22:	f7ff fba7 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f26:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000f28:	f003 fb66 	bl	80045f8 <HAL_TIM_PWM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000f32:	f7ff fb9f 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000f38:	f003 fd68 	bl	8004a0c <HAL_TIM_IC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f7ff fb97 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000f56:	f005 f947 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000f60:	f7ff fb88 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2360      	movs	r3, #96	; 0x60
 8000f66:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000f68:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000f6c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000f80:	f004 f96a 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000f8a:	f7ff fb73 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000fa6:	f004 f8ba 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8000fb0:	f7ff fb60 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM4_Init+0x130>)
 8000fb6:	f000 fba3 	bl	8001700 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3748      	adds	r7, #72	; 0x48
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000230 	.word	0x20000230
 8000fc8:	40000800 	.word	0x40000800

08000fcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09e      	sub	sp, #120	; 0x78
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	222c      	movs	r2, #44	; 0x2c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fc97 	bl	800a948 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800101a:	4b52      	ldr	r3, [pc, #328]	; (8001164 <MX_TIM8_Init+0x198>)
 800101c:	4a52      	ldr	r2, [pc, #328]	; (8001168 <MX_TIM8_Init+0x19c>)
 800101e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001020:	4b50      	ldr	r3, [pc, #320]	; (8001164 <MX_TIM8_Init+0x198>)
 8001022:	2207      	movs	r2, #7
 8001024:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <MX_TIM8_Init+0x198>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MX_TIM8_Init+0x198>)
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <MX_TIM8_Init+0x198>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_TIM8_Init+0x198>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <MX_TIM8_Init+0x198>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001046:	4847      	ldr	r0, [pc, #284]	; (8001164 <MX_TIM8_Init+0x198>)
 8001048:	f003 fa0e 	bl	8004468 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001052:	f7ff fb0f 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001060:	4619      	mov	r1, r3
 8001062:	4840      	ldr	r0, [pc, #256]	; (8001164 <MX_TIM8_Init+0x198>)
 8001064:	f004 fa0c 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800106e:	f7ff fb01 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001072:	483c      	ldr	r0, [pc, #240]	; (8001164 <MX_TIM8_Init+0x198>)
 8001074:	f003 fac0 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800107e:	f7ff faf9 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001082:	4838      	ldr	r0, [pc, #224]	; (8001164 <MX_TIM8_Init+0x198>)
 8001084:	f003 fcc2 	bl	8004a0c <HAL_TIM_IC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800108e:	f7ff faf1 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800109e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a2:	4619      	mov	r1, r3
 80010a4:	482f      	ldr	r0, [pc, #188]	; (8001164 <MX_TIM8_Init+0x198>)
 80010a6:	f005 f89f 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80010b0:	f7ff fae0 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80010b8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4822      	ldr	r0, [pc, #136]	; (8001164 <MX_TIM8_Init+0x198>)
 80010dc:	f004 f8bc 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80010e6:	f7ff fac5 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ee:	2301      	movs	r3, #1
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fe:	2204      	movs	r2, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_TIM8_Init+0x198>)
 8001104:	f004 f80b 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 800110e:	f7ff fab1 	bl	8000674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM8_Init+0x198>)
 8001148:	f005 f8da 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8001152:	f7ff fa8f 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM8_Init+0x198>)
 8001158:	f000 fad2 	bl	8001700 <HAL_TIM_MspPostInit>

}
 800115c:	bf00      	nop
 800115e:	3778      	adds	r7, #120	; 0x78
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000027c 	.word	0x2000027c
 8001168:	40013400 	.word	0x40013400

0800116c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09e      	sub	sp, #120	; 0x78
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	222c      	movs	r2, #44	; 0x2c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f009 fbc7 	bl	800a948 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80011ba:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <MX_TIM15_Init+0x18c>)
 80011be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80011cc:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011e6:	4843      	ldr	r0, [pc, #268]	; (80012f4 <MX_TIM15_Init+0x188>)
 80011e8:	f003 f93e 	bl	8004468 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80011f2:	f7ff fa3f 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001200:	4619      	mov	r1, r3
 8001202:	483c      	ldr	r0, [pc, #240]	; (80012f4 <MX_TIM15_Init+0x188>)
 8001204:	f004 f93c 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800120e:	f7ff fa31 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001212:	4838      	ldr	r0, [pc, #224]	; (80012f4 <MX_TIM15_Init+0x188>)
 8001214:	f003 f9f0 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 800121e:	f7ff fa29 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001222:	4834      	ldr	r0, [pc, #208]	; (80012f4 <MX_TIM15_Init+0x188>)
 8001224:	f003 fbf2 	bl	8004a0c <HAL_TIM_IC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800122e:	f7ff fa21 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800123a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800123e:	4619      	mov	r1, r3
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <MX_TIM15_Init+0x188>)
 8001242:	f004 ffd1 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 800124c:	f7ff fa12 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001250:	2360      	movs	r3, #96	; 0x60
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001254:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	481f      	ldr	r0, [pc, #124]	; (80012f4 <MX_TIM15_Init+0x188>)
 8001278:	f003 ffee 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 8001282:	f7ff f9f7 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_TIM15_Init+0x188>)
 80012a0:	f003 ff3d 	bl	800511e <HAL_TIM_IC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80012aa:	f7ff f9e3 	bl	8000674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM15_Init+0x188>)
 80012d6:	f005 f813 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 80012e0:	f7ff f9c8 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM15_Init+0x188>)
 80012e6:	f000 fa0b 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3778      	adds	r7, #120	; 0x78
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002c8 	.word	0x200002c8
 80012f8:	40014000 	.word	0x40014000

080012fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b092      	sub	sp, #72	; 0x48
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	222c      	movs	r2, #44	; 0x2c
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f009 fb13 	bl	800a948 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001324:	4a31      	ldr	r2, [pc, #196]	; (80013ec <MX_TIM16_Init+0xf0>)
 8001326:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_TIM16_Init+0xec>)
 800132a:	2207      	movs	r2, #7
 800132c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_TIM16_Init+0xec>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_TIM16_Init+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800134e:	4826      	ldr	r0, [pc, #152]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001350:	f003 f88a 	bl	8004468 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800135a:	f7ff f98b 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800135e:	4822      	ldr	r0, [pc, #136]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001360:	f003 f94a 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800136a:	f7ff f983 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 8001372:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM16_Init+0xec>)
 8001396:	f003 ff5f 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80013a0:	f7ff f968 	bl	8000674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM16_Init+0xec>)
 80013cc:	f004 ff98 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80013d6:	f7ff f94d 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM16_Init+0xec>)
 80013dc:	f000 f990 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80013e0:	bf00      	nop
 80013e2:	3748      	adds	r7, #72	; 0x48
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000314 	.word	0x20000314
 80013ec:	40014400 	.word	0x40014400

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	; 0x50
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4aa7      	ldr	r2, [pc, #668]	; (80016ac <HAL_TIM_Base_MspInit+0x2bc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d138      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	4ba7      	ldr	r3, [pc, #668]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4aa6      	ldr	r2, [pc, #664]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141c:	6193      	str	r3, [r2, #24]
 800141e:	4ba4      	ldr	r3, [pc, #656]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
 8001428:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4ba1      	ldr	r3, [pc, #644]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4aa0      	ldr	r2, [pc, #640]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b9e      	ldr	r3, [pc, #632]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001442:	2302      	movs	r3, #2
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001452:	2302      	movs	r3, #2
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800145a:	4619      	mov	r1, r3
 800145c:	4895      	ldr	r0, [pc, #596]	; (80016b4 <HAL_TIM_Base_MspInit+0x2c4>)
 800145e:	f001 f987 	bl	8002770 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2018      	movs	r0, #24
 8001468:	f001 f8e0 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800146c:	2018      	movs	r0, #24
 800146e:	f001 f8f9 	bl	8002664 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	201b      	movs	r0, #27
 8001478:	f001 f8d8 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800147c:	201b      	movs	r0, #27
 800147e:	f001 f8f1 	bl	8002664 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001482:	e134      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d131      	bne.n	80014f2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4a81      	ldr	r2, [pc, #516]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	6153      	str	r3, [r2, #20]
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014be:	2302      	movs	r3, #2
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f001 f948 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	201c      	movs	r0, #28
 80014e6:	f001 f8a1 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ea:	201c      	movs	r0, #28
 80014ec:	f001 f8ba 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 80014f0:	e0fd      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a70      	ldr	r2, [pc, #448]	; (80016b8 <HAL_TIM_Base_MspInit+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d131      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fc:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a6b      	ldr	r2, [pc, #428]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800151a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151e:	6153      	str	r3, [r2, #20]
 8001520:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152c:	2310      	movs	r3, #16
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153c:	2302      	movs	r3, #2
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f001 f911 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2105      	movs	r1, #5
 8001552:	201d      	movs	r0, #29
 8001554:	f001 f86a 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001558:	201d      	movs	r0, #29
 800155a:	f001 f883 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 800155e:	e0c6      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a55      	ldr	r2, [pc, #340]	; (80016bc <HAL_TIM_Base_MspInit+0x2cc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d132      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80015ac:	230a      	movs	r3, #10
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f001 f8d9 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	201e      	movs	r0, #30
 80015c4:	f001 f832 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015c8:	201e      	movs	r0, #30
 80015ca:	f001 f84b 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 80015ce:	e08e      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3a      	ldr	r2, [pc, #232]	; (80016c0 <HAL_TIM_Base_MspInit+0x2d0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d130      	bne.n	800163c <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015da:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80015e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 80015f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800161a:	2304      	movs	r3, #4
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001622:	4619      	mov	r1, r3
 8001624:	4823      	ldr	r0, [pc, #140]	; (80016b4 <HAL_TIM_Base_MspInit+0x2c4>)
 8001626:	f001 f8a3 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	202e      	movs	r0, #46	; 0x2e
 8001630:	f000 fffc 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001634:	202e      	movs	r0, #46	; 0x2e
 8001636:	f001 f815 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 800163a:	e058      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <HAL_TIM_Base_MspInit+0x2d4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d142      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_TIM_Base_MspInit+0x2c0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001688:	2301      	movs	r3, #1
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <HAL_TIM_Base_MspInit+0x2d8>)
 8001694:	f001 f86c 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2105      	movs	r1, #5
 800169c:	2018      	movs	r0, #24
 800169e:	f000 ffc5 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80016a2:	2018      	movs	r0, #24
 80016a4:	f000 ffde 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 80016a8:	e021      	b.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
 80016aa:	bf00      	nop
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	40000400 	.word	0x40000400
 80016bc:	40000800 	.word	0x40000800
 80016c0:	40013400 	.word	0x40013400
 80016c4:	40014000 	.word	0x40014000
 80016c8:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_TIM_Base_MspInit+0x308>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10b      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_TIM_Base_MspInit+0x30c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_TIM_Base_MspInit+0x30c>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_TIM_Base_MspInit+0x30c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
}
 80016ee:	bf00      	nop
 80016f0:	3750      	adds	r7, #80	; 0x50
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40014400 	.word	0x40014400
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a79      	ldr	r2, [pc, #484]	; (8001904 <HAL_TIM_MspPostInit+0x204>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d11c      	bne.n	800175c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b79      	ldr	r3, [pc, #484]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a78      	ldr	r2, [pc, #480]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800173a:	2301      	movs	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001742:	2302      	movs	r3, #2
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800174a:	2302      	movs	r3, #2
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	486d      	ldr	r0, [pc, #436]	; (800190c <HAL_TIM_MspPostInit+0x20c>)
 8001756:	f001 f80b 	bl	8002770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800175a:	e0cf      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001764:	d11d      	bne.n	80017a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a67      	ldr	r2, [pc, #412]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177e:	2301      	movs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001786:	2302      	movs	r3, #2
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800178e:	2301      	movs	r3, #1
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f000 ffe8 	bl	8002770 <HAL_GPIO_Init>
}
 80017a0:	e0ac      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_TIM_MspPostInit+0x210>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d11d      	bne.n	80017e8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	4a55      	ldr	r2, [pc, #340]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	6153      	str	r3, [r2, #20]
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017cc:	2302      	movs	r3, #2
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d4:	2302      	movs	r3, #2
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f000 ffc5 	bl	8002770 <HAL_GPIO_Init>
}
 80017e6:	e089      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a49      	ldr	r2, [pc, #292]	; (8001914 <HAL_TIM_MspPostInit+0x214>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d11e      	bne.n	8001830 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b45      	ldr	r3, [pc, #276]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a44      	ldr	r2, [pc, #272]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800180a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001814:	2302      	movs	r3, #2
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800181c:	230a      	movs	r3, #10
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f000 ffa1 	bl	8002770 <HAL_GPIO_Init>
}
 800182e:	e065      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_TIM_MspPostInit+0x218>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d11c      	bne.n	8001874 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800185a:	2302      	movs	r3, #2
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001862:	2304      	movs	r3, #4
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4827      	ldr	r0, [pc, #156]	; (800190c <HAL_TIM_MspPostInit+0x20c>)
 800186e:	f000 ff7f 	bl	8002770 <HAL_GPIO_Init>
}
 8001872:	e043      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_TIM_MspPostInit+0x21c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11d      	bne.n	80018ba <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80018a8:	2301      	movs	r3, #1
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	481b      	ldr	r0, [pc, #108]	; (8001920 <HAL_TIM_MspPostInit+0x220>)
 80018b4:	f000 ff5c 	bl	8002770 <HAL_GPIO_Init>
}
 80018b8:	e020      	b.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_TIM_MspPostInit+0x224>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d11b      	bne.n	80018fc <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ce:	6153      	str	r3, [r2, #20]
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_TIM_MspPostInit+0x208>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018dc:	2310      	movs	r3, #16
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80018ec:	2301      	movs	r3, #1
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	480a      	ldr	r0, [pc, #40]	; (8001920 <HAL_TIM_MspPostInit+0x220>)
 80018f8:	f000 ff3a 	bl	8002770 <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40021000 	.word	0x40021000
 800190c:	48000800 	.word	0x48000800
 8001910:	40000400 	.word	0x40000400
 8001914:	40000800 	.word	0x40000800
 8001918:	40013400 	.word	0x40013400
 800191c:	40014000 	.word	0x40014000
 8001920:	48000400 	.word	0x48000400
 8001924:	40014400 	.word	0x40014400

08001928 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_UART4_Init+0x58>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_UART4_Init+0x5c>)
 8001930:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_UART4_Init+0x58>)
 8001934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001938:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_UART4_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_UART4_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_UART4_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_UART4_Init+0x58>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_UART4_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_UART4_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_UART4_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_UART4_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_UART4_Init+0x58>)
 800196c:	f004 fd6c 	bl	8006448 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001976:	f7fe fe7d 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000360 	.word	0x20000360
 8001984:	40004c00 	.word	0x40004c00

08001988 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_USART2_UART_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 8001994:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART2_UART_Init+0x58>)
 80019cc:	f004 fd3c 	bl	8006448 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019d6:	f7fe fe4d 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003e8 	.word	0x200003e8
 80019e4:	40004400 	.word	0x40004400

080019e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a33      	ldr	r2, [pc, #204]	; (8001ad4 <HAL_UART_MspInit+0xec>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d131      	bne.n	8001a6e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a2c:	6153      	str	r3, [r2, #20]
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4821      	ldr	r0, [pc, #132]	; (8001adc <HAL_UART_MspInit+0xf4>)
 8001a58:	f000 fe8a 	bl	8002770 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	2034      	movs	r0, #52	; 0x34
 8001a62:	f000 fde3 	bl	800262c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a66:	2034      	movs	r0, #52	; 0x34
 8001a68:	f000 fdfc 	bl	8002664 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a6c:	e02d      	b.n	8001aca <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <HAL_UART_MspInit+0xf8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d128      	bne.n	8001aca <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a82:	61d3      	str	r3, [r2, #28]
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	6153      	str	r3, [r2, #20]
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0xf0>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f000 fe53 	bl	8002770 <HAL_GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004c00 	.word	0x40004c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7fe ffbc 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	; (8001b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <LoopForever+0xe>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	; (8001b30 <LoopForever+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f008 ffc3 	bl	800aa9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b16:	f7fe fd17 	bl	8000548 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001b28:	0800b860 	.word	0x0800b860
  ldr r2, =_sbss
 8001b2c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001b30:	20002018 	.word	0x20002018

08001b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_2_IRQHandler>
	...

08001b38 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if( (temp == 'F') || (temp == 'B') || (temp == 'G') || (temp == 'I') || (temp == 'H') || (temp == 'J')
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b46      	cmp	r3, #70	; 0x46
 8001b46:	d01f      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b42      	cmp	r3, #66	; 0x42
 8001b4e:	d01b      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b47      	cmp	r3, #71	; 0x47
 8001b56:	d017      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b49      	cmp	r3, #73	; 0x49
 8001b5e:	d013      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b48      	cmp	r3, #72	; 0x48
 8001b66:	d00f      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b4a      	cmp	r3, #74	; 0x4a
 8001b6e:	d00b      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
			 || (temp == 'R') || (temp == 'L') || (temp == 'S') ){
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b52      	cmp	r3, #82	; 0x52
 8001b76:	d007      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b7e:	d003      	beq.n	8001b88 <HAL_UART_RxCpltCallback+0x50>
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b53      	cmp	r3, #83	; 0x53
 8001b86:	d103      	bne.n	8001b90 <HAL_UART_RxCpltCallback+0x58>
		Bluetooth_RX_Data = temp;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_UART_RxCpltCallback+0x70>)
 8001b8e:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_UART_RxCpltCallback+0x6c>)
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f004 fca5 	bl	80064e4 <HAL_UART_Receive_IT>

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000470 	.word	0x20000470
 8001ba8:	20000064 	.word	0x20000064

08001bac <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e009      	b.n	8001bd2 <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4904      	ldr	r1, [pc, #16]	; (8001bdc <ECU_Bluetooth_ReciveData+0x30>)
 8001bcc:	f004 fc8a 	bl	80064e4 <HAL_UART_Receive_IT>

	return ECU_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000470 	.word	0x20000470

08001be0 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07e      	b.n	8001cf4 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <ECU_Motor_GeneratePWM+0x34>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e045      	b.n	8001ca0 <ECU_Motor_GeneratePWM+0xc0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d10a      	bne.n	8001c32 <ECU_Motor_GeneratePWM+0x52>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	e036      	b.n	8001ca0 <ECU_Motor_GeneratePWM+0xc0>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d10a      	bne.n	8001c50 <ECU_Motor_GeneratePWM+0x70>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e027      	b.n	8001ca0 <ECU_Motor_GeneratePWM+0xc0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d10a      	bne.n	8001c6e <ECU_Motor_GeneratePWM+0x8e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	e018      	b.n	8001ca0 <ECU_Motor_GeneratePWM+0xc0>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d10a      	bne.n	8001c8c <ECU_Motor_GeneratePWM+0xac>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e009      	b.n	8001ca0 <ECU_Motor_GeneratePWM+0xc0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e025      	b.n	8001cf4 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <ECU_Motor_GeneratePWM+0x11c>)
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 2a90 	vmov	r2, s15
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f002 fce5 	bl	80046bc <HAL_TIM_PWM_Start>

	return ECU_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	000f4240 	.word	0x000f4240

08001d00 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <ECU_Motor_NextStep+0x16>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e055      	b.n	8001dc6 <ECU_Motor_NextStep+0xc6>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b42      	subs	r3, #66	; 0x42
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d84b      	bhi.n	8001dbc <ECU_Motor_NextStep+0xbc>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <ECU_Motor_NextStep+0x2c>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001dbd 	.word	0x08001dbd
 8001d34:	08001dbd 	.word	0x08001dbd
 8001d38:	08001dbd 	.word	0x08001dbd
 8001d3c:	08001d75 	.word	0x08001d75
 8001d40:	08001d85 	.word	0x08001d85
 8001d44:	08001d95 	.word	0x08001d95
 8001d48:	08001d8d 	.word	0x08001d8d
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001dbd 	.word	0x08001dbd
 8001d54:	08001dad 	.word	0x08001dad
 8001d58:	08001dbd 	.word	0x08001dbd
 8001d5c:	08001dbd 	.word	0x08001dbd
 8001d60:	08001dbd 	.word	0x08001dbd
 8001d64:	08001dbd 	.word	0x08001dbd
 8001d68:	08001dbd 	.word	0x08001dbd
 8001d6c:	08001da5 	.word	0x08001da5
 8001d70:	08001db5 	.word	0x08001db5
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f82b 	bl	8001dd0 <ECU_Motor_MoveForward>
 8001d7a:	e023      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f84f 	bl	8001e20 <ECU_Motor_MoveReverse>
 8001d82:	e01f      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8a9 	bl	8001edc <ECU_Motor_MoveForwardLeft>
 8001d8a:	e01b      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f86f 	bl	8001e70 <ECU_Motor_MoveForwardRight>
 8001d92:	e017      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f90d 	bl	8001fb4 <ECU_Motor_MoveReverseLeft>
 8001d9a:	e013      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8d3 	bl	8001f48 <ECU_Motor_MoveReverseRight>
 8001da2:	e00f      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f971 	bl	800208c <ECU_Motor_MoveRight>
 8001daa:	e00b      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f995 	bl	80020dc <ECU_Motor_MoveLeft>
 8001db2:	e007      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f933 	bl	8002020 <ECU_Motor_Stop>
 8001dba:	e003      	b.n	8001dc4 <ECU_Motor_NextStep+0xc4>
		default :           ECU_Motor_Stop            (motor_obj); break;
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f92f 	bl	8002020 <ECU_Motor_Stop>
 8001dc2:	bf00      	nop
	}

	return ECU_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop

08001dd0 <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e018      	b.n	8001e14 <ECU_Motor_MoveForward+0x44>
	}

	printf("Motor_MoveForward\n");
 8001de2:	480e      	ldr	r0, [pc, #56]	; (8001e1c <ECU_Motor_MoveForward+0x4c>)
 8001de4:	f008 fcd0 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f000 fe47 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f000 fe40 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f000 fe39 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	0800b69c 	.word	0x0800b69c

08001e20 <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e018      	b.n	8001e64 <ECU_Motor_MoveReverse+0x44>
	}

	printf("MoveReverse\n");
 8001e32:	480e      	ldr	r0, [pc, #56]	; (8001e6c <ECU_Motor_MoveReverse+0x4c>)
 8001e34:	f008 fca8 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f000 fe1f 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f000 fe18 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f000 fe11 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	0800b6b0 	.word	0x0800b6b0

08001e70 <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e024      	b.n	8001ecc <ECU_Motor_MoveForwardRight+0x5c>
	}

	printf("MoveForwardRight\n");
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <ECU_Motor_MoveForwardRight+0x64>)
 8001e84:	f008 fc80 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e92:	f000 fdf7 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9c:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <ECU_Motor_MoveForwardRight+0x68>)
 8001e9e:	f000 fdf1 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <ECU_Motor_MoveForwardRight+0x68>)
 8001eaa:	f000 fdeb 	bl	8002a84 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f000 fde4 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	f000 fddd 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800b6bc 	.word	0x0800b6bc
 8001ed8:	48000800 	.word	0x48000800

08001edc <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e024      	b.n	8001f38 <ECU_Motor_MoveForwardLeft+0x5c>
	}

	printf("MoveForwardLeft\n");
 8001eee:	4814      	ldr	r0, [pc, #80]	; (8001f40 <ECU_Motor_MoveForwardLeft+0x64>)
 8001ef0:	f008 fc4a 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f000 fdc1 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f08:	480e      	ldr	r0, [pc, #56]	; (8001f44 <ECU_Motor_MoveForwardLeft+0x68>)
 8001f0a:	f000 fdbb 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <ECU_Motor_MoveForwardLeft+0x68>)
 8001f16:	f000 fdb5 	bl	8002a84 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f000 fdae 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f32:	f000 fda7 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	0800b6d0 	.word	0x0800b6d0
 8001f44:	48000800 	.word	0x48000800

08001f48 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e024      	b.n	8001fa4 <ECU_Motor_MoveReverseRight+0x5c>
	}

	printf("MoveReverseRight\n");
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <ECU_Motor_MoveReverseRight+0x64>)
 8001f5c:	f008 fc14 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6a:	f000 fd8b 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f74:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <ECU_Motor_MoveReverseRight+0x68>)
 8001f76:	f000 fd85 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <ECU_Motor_MoveReverseRight+0x68>)
 8001f82:	f000 fd7f 	bl	8002a84 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f000 fd78 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f000 fd71 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	0800b6e0 	.word	0x0800b6e0
 8001fb0:	48000800 	.word	0x48000800

08001fb4 <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e024      	b.n	8002010 <ECU_Motor_MoveReverseLeft+0x5c>
	}

	printf("MoveReverseLeft\n");
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <ECU_Motor_MoveReverseLeft+0x64>)
 8001fc8:	f008 fbde 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f000 fd55 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	480e      	ldr	r0, [pc, #56]	; (800201c <ECU_Motor_MoveReverseLeft+0x68>)
 8001fe2:	f000 fd4f 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <ECU_Motor_MoveReverseLeft+0x68>)
 8001fee:	f000 fd49 	bl	8002a84 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f000 fd42 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f000 fd3b 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0800b6f4 	.word	0x0800b6f4
 800201c:	48000800 	.word	0x48000800

08002020 <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e024      	b.n	800207c <ECU_Motor_Stop+0x5c>
	}

	printf("Stop\n");
 8002032:	4814      	ldr	r0, [pc, #80]	; (8002084 <ECU_Motor_Stop+0x64>)
 8002034:	f008 fba8 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f000 fd1f 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800204c:	480e      	ldr	r0, [pc, #56]	; (8002088 <ECU_Motor_Stop+0x68>)
 800204e:	f000 fd19 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <ECU_Motor_Stop+0x68>)
 800205a:	f000 fd13 	bl	8002a84 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f000 fd0c 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f000 fd05 	bl	8002a84 <HAL_GPIO_WritePin>

	return ECU_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0800b704 	.word	0x0800b704
 8002088:	48000800 	.word	0x48000800

0800208c <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e016      	b.n	80020cc <ECU_Motor_MoveRight+0x40>
	}

	printf("MoveRight\n");
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <ECU_Motor_MoveRight+0x48>)
 80020a0:	f008 fb72 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f000 fce9 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <ECU_Motor_MoveRight+0x4c>)
 80020ba:	f000 fce3 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <ECU_Motor_MoveRight+0x4c>)
 80020c6:	f000 fcdd 	bl	8002a84 <HAL_GPIO_WritePin>


	return ECU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	0800b70c 	.word	0x0800b70c
 80020d8:	48000800 	.word	0x48000800

080020dc <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e016      	b.n	800211c <ECU_Motor_MoveLeft+0x40>
	}

	printf("MoveLeft\n");
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <ECU_Motor_MoveLeft+0x48>)
 80020f0:	f008 fb4a 	bl	800a788 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f000 fcc1 	bl	8002a84 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002108:	4807      	ldr	r0, [pc, #28]	; (8002128 <ECU_Motor_MoveLeft+0x4c>)
 800210a:	f000 fcbb 	bl	8002a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <ECU_Motor_MoveLeft+0x4c>)
 8002116:	f000 fcb5 	bl	8002a84 <HAL_GPIO_WritePin>


	return ECU_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0800b718 	.word	0x0800b718
 8002128:	48000800 	.word	0x48000800

0800212c <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b085      	sub	sp, #20
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7f1b      	ldrb	r3, [r3, #28]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d145      	bne.n	80021c8 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d114      	bne.n	8002176 <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002156:	4413      	add	r3, r2
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4611      	mov	r1, r2
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002162:	440a      	add	r2, r1
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8e4 	bl	8002334 <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 800216c:	2100      	movs	r1, #0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f002 fbb0 	bl	80048d4 <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 8002174:	e028      	b.n	80021c8 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d120      	bne.n	80021c8 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002190:	1899      	adds	r1, r3, r2
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_TIM_IC_CaptureCallback+0xb0>)
 800219c:	441a      	add	r2, r3
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	480e      	ldr	r0, [pc, #56]	; (80021e0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80021a8:	4418      	add	r0, r3
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461c      	mov	r4, r3
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80021b4:	4423      	add	r3, r4
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4603      	mov	r3, r0
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8e4 	bl	8002388 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80021c0:	2104      	movs	r1, #4
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f002 fdce 	bl	8004d64 <HAL_TIM_IC_Stop_IT>
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	2000048c 	.word	0x2000048c
 80021d4:	20000490 	.word	0x20000490
 80021d8:	20000498 	.word	0x20000498
 80021dc:	200004b0 	.word	0x200004b0
 80021e0:	200004c8 	.word	0x200004c8

080021e4 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80021f6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002220 <ECU_Ultrasonic_Read+0x3c>
 80021fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f810 	bl	8002224 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f002 fc5e 	bl	8004ad0 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	3a83126f 	.word	0x3a83126f

08002224 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e077      	b.n	800232c <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <ECU_Ultrasonic_GenerateTrigger+0x36>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	e045      	b.n	80022e6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d10a      	bne.n	8002278 <ECU_Ultrasonic_GenerateTrigger+0x54>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e036      	b.n	80022e6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d10a      	bne.n	8002296 <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e027      	b.n	80022e6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d10a      	bne.n	80022b4 <ECU_Ultrasonic_GenerateTrigger+0x90>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e018      	b.n	80022e6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d10a      	bne.n	80022d2 <ECU_Ultrasonic_GenerateTrigger+0xae>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e009      	b.n	80022e6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01e      	b.n	800232c <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002302:	edd7 7a01 	vldr	s15, [r7, #4]
 8002306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002314:	ee17 2a90 	vmov	r2, s15
 8002318:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f002 f9c9 	bl	80046bc <HAL_TIM_PWM_Start>

	return ECU_OK;;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002340:	2104      	movs	r1, #4
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f003 f966 	bl	8005614 <HAL_TIM_ReadCapturedValue>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800236c:	621a      	str	r2, [r3, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1a      	ldr	r2, [r3, #32]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	621a      	str	r2, [r3, #32]
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002396:	2104      	movs	r1, #4
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f003 f93b 	bl	8005614 <HAL_TIM_ReadCapturedValue>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d307      	bcc.n	80023c8 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1ad2      	subs	r2, r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e011      	b.n	80023ec <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80023d6:	33ff      	adds	r3, #255	; 0xff
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <IC_second_Capture+0xb8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	4619      	mov	r1, r3
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <IC_second_Capture+0xbc>)
 80023e8:	f008 f968 	bl	800a6bc <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002448 <IC_second_Capture+0xc0>
 80023fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <IC_second_Capture+0xb8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240c:	ee17 1a90 	vmov	r1, s15
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <IC_second_Capture+0xc4>)
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800242a:	621a      	str	r2, [r3, #32]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a12      	ldr	r2, [r2, #32]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000048c 	.word	0x2000048c
 8002444:	0800b724 	.word	0x0800b724
 8002448:	42680000 	.word	0x42680000
 800244c:	20000474 	.word	0x20000474

08002450 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x28>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x28>)
 800245a:	f043 0310 	orr.w	r3, r3, #16
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f8d8 	bl	8002616 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	200f      	movs	r0, #15
 8002468:	f7fe f932 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7fe f908 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	2000006c 	.word	0x2000006c
 80024a0:	200004e0 	.word	0x200004e0

080024a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200004e0 	.word	0x200004e0

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff4c 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263e:	f7ff ff61 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002642:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f7ff ffb1 	bl	80025b0 <NVIC_EncodePriority>
 800264e:	4602      	mov	r2, r0
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff80 	bl	800255c <__NVIC_SetPriority>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff54 	bl	8002520 <__NVIC_EnableIRQ>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268e:	2b02      	cmp	r3, #2
 8002690:	d008      	beq.n	80026a4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e020      	b.n	80026e6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 020e 	bic.w	r2, r2, #14
 80026b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002704:	2b02      	cmp	r3, #2
 8002706:	d005      	beq.n	8002714 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2204      	movs	r2, #4
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e027      	b.n	8002764 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 020e 	bic.w	r2, r2, #14
 8002722:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f202 	lsl.w	r2, r1, r2
 8002742:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
    } 
  }
  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277e:	e160      	b.n	8002a42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8152 	beq.w	8002a3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d005      	beq.n	80027b0 <HAL_GPIO_Init+0x40>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d130      	bne.n	8002812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e6:	2201      	movs	r2, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0201 	and.w	r2, r3, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b03      	cmp	r3, #3
 800281c:	d017      	beq.n	800284e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d123      	bne.n	80028a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	6939      	ldr	r1, [r7, #16]
 800289e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80ac 	beq.w	8002a3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_GPIO_Init+0x2f0>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_GPIO_Init+0x2f0>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6193      	str	r3, [r2, #24]
 80028f0:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_GPIO_Init+0x2f0>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028fc:	4a59      	ldr	r2, [pc, #356]	; (8002a64 <HAL_GPIO_Init+0x2f4>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002926:	d025      	beq.n	8002974 <HAL_GPIO_Init+0x204>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <HAL_GPIO_Init+0x2f8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01f      	beq.n	8002970 <HAL_GPIO_Init+0x200>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d019      	beq.n	800296c <HAL_GPIO_Init+0x1fc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_GPIO_Init+0x300>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x1f8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x1f4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_GPIO_Init+0x308>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x1f0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x1ec>
 8002958:	2306      	movs	r3, #6
 800295a:	e00c      	b.n	8002976 <HAL_GPIO_Init+0x206>
 800295c:	2307      	movs	r3, #7
 800295e:	e00a      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002960:	2305      	movs	r3, #5
 8002962:	e008      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002964:	2304      	movs	r3, #4
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002968:	2303      	movs	r3, #3
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x206>
 800296c:	2302      	movs	r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002974:	2300      	movs	r3, #0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002986:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_GPIO_Init+0x2f4>)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002994:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f ae97 	bne.w	8002780 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000c00 	.word	0x48000c00
 8002a74:	48001000 	.word	0x48001000
 8002a78:	48001400 	.word	0x48001400
 8002a7c:	48001800 	.word	0x48001800
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ac4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f001 b83a 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 816f 	beq.w	8002dce <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002af0:	4bb5      	ldr	r3, [pc, #724]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002afc:	4bb2      	ldr	r3, [pc, #712]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d15c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x10e>
 8002b08:	4baf      	ldr	r3, [pc, #700]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d155      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x10e>
 8002b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_OscConfig+0x94>
 8002b42:	4ba1      	ldr	r3, [pc, #644]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e015      	b.n	8002b74 <HAL_RCC_OscConfig+0xc0>
 8002b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b70:	4b95      	ldr	r3, [pc, #596]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b78:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002b7c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002b80:	fa92 f2a2 	rbit	r2, r2
 8002b84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002b88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b8c:	fab2 f282 	clz	r2, r2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f002 021f 	and.w	r2, r2, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8111 	beq.w	8002dcc <HAL_RCC_OscConfig+0x318>
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8108 	bne.w	8002dcc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f000 bfc6 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12e>
 8002bd4:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7b      	ldr	r2, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e036      	b.n	8002c50 <HAL_RCC_OscConfig+0x19c>
 8002be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x158>
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a74      	ldr	r2, [pc, #464]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e021      	b.n	8002c50 <HAL_RCC_OscConfig+0x19c>
 8002c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x184>
 8002c1e:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a69      	ldr	r2, [pc, #420]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a66      	ldr	r2, [pc, #408]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x19c>
 8002c38:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a62      	ldr	r2, [pc, #392]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5f      	ldr	r2, [pc, #380]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d059      	beq.n	8002d14 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fc20 	bl	80024a4 <HAL_GetTick>
 8002c64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6a:	f7ff fc1b 	bl	80024a4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d902      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f000 bf67 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8002c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002c94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1fe>
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	e015      	b.n	8002cde <HAL_RCC_OscConfig+0x22a>
 8002cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ce2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ce6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002cea:	fa92 f2a2 	rbit	r2, r2
 8002cee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002cf2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cf6:	fab2 f282 	clz	r2, r2
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f002 021f 	and.w	r2, r2, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ab      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1b6>
 8002d12:	e05c      	b.n	8002dce <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fbc6 	bl	80024a4 <HAL_GetTick>
 8002d18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1e:	f7ff fbc1 	bl	80024a4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d902      	bls.n	8002d34 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	f000 bf0d 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8002d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2b2>
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x2de>
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_RCC_OscConfig+0x314>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002d9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002da6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f042 0220 	orr.w	r2, r2, #32
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f002 021f 	and.w	r2, r2, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ab      	bne.n	8002d1e <HAL_RCC_OscConfig+0x26a>
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_OscConfig+0x31a>
 8002dc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 817f 	beq.w	80030e2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002de4:	4ba7      	ldr	r3, [pc, #668]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002df0:	4ba4      	ldr	r3, [pc, #656]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d173      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x430>
 8002dfc:	4ba1      	ldr	r3, [pc, #644]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e08:	d16c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x430>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_OscConfig+0x386>
 8002e34:	4b93      	ldr	r3, [pc, #588]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	e013      	b.n	8002e62 <HAL_RCC_OscConfig+0x3ae>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e52:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e5e:	4b89      	ldr	r3, [pc, #548]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2202      	movs	r2, #2
 8002e64:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e68:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCC_OscConfig+0x3f6>
 8002e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f000 be52 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	21f8      	movs	r1, #248	; 0xf8
 8002ec0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ec8:	fa91 f1a1 	rbit	r1, r1
 8002ecc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ed0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ed4:	fab1 f181 	clz	r1, r1
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	408b      	lsls	r3, r1
 8002edc:	4969      	ldr	r1, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e0fe      	b.n	80030e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8088 	beq.w	8003006 <HAL_RCC_OscConfig+0x552>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2301      	movs	r3, #1
 8002f20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7ff fabf 	bl	80024a4 <HAL_GetTick>
 8002f26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7ff faba 	bl	80024a4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d902      	bls.n	8002f42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	f000 be06 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4be>
 8002f6c:	4b45      	ldr	r3, [pc, #276]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e013      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e6>
 8002f72:	2302      	movs	r3, #2
 8002f74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f84:	2302      	movs	r3, #2
 8002f86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002fa0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002fa4:	fa92 f2a2 	rbit	r2, r2
 8002fa8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002fac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f002 021f 	and.w	r2, r2, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0af      	beq.n	8002f2c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	21f8      	movs	r1, #248	; 0xf8
 8002fe2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002fea:	fa91 f1a1 	rbit	r1, r1
 8002fee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ff2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ff6:	fab1 f181 	clz	r1, r1
 8002ffa:	b2c9      	uxtb	r1, r1
 8002ffc:	408b      	lsls	r3, r1
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e06d      	b.n	80030e2 <HAL_RCC_OscConfig+0x62e>
 8003006:	2301      	movs	r3, #1
 8003008:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003018:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003026:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7ff fa37 	bl	80024a4 <HAL_GetTick>
 8003036:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303c:	f7ff fa32 	bl	80024a4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	f000 bd7e 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003052:	2302      	movs	r3, #2
 8003054:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003064:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x5d4>
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <HAL_RCC_OscConfig+0x5d0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	e016      	b.n	80030b0 <HAL_RCC_OscConfig+0x5fc>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800309a:	2302      	movs	r3, #2
 800309c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030ac:	4bbf      	ldr	r3, [pc, #764]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2202      	movs	r2, #2
 80030b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80030c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030c6:	fab2 f282 	clz	r2, r2
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	f042 0220 	orr.w	r2, r2, #32
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	f002 021f 	and.w	r2, r2, #31
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ac      	bne.n	800303c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8113 	beq.w	800331e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d07c      	beq.n	8003202 <HAL_RCC_OscConfig+0x74e>
 8003108:	2301      	movs	r3, #1
 800310a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800311a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	4ba2      	ldr	r3, [pc, #648]	; (80033b0 <HAL_RCC_OscConfig+0x8fc>)
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7ff f9b7 	bl	80024a4 <HAL_GetTick>
 8003136:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7ff f9b2 	bl	80024a4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d902      	bls.n	8003152 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	f000 bcfe 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003152:	2302      	movs	r3, #2
 8003154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003164:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003172:	2202      	movs	r2, #2
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003192:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003196:	2202      	movs	r2, #2
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f2a3 	rbit	r2, r3
 80031a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 80031b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031be:	2102      	movs	r1, #2
 80031c0:	6019      	str	r1, [r3, #0]
 80031c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f1a3 	rbit	r1, r3
 80031d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031d8:	6019      	str	r1, [r3, #0]
  return result;
 80031da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d09d      	beq.n	800313c <HAL_RCC_OscConfig+0x688>
 8003200:	e08d      	b.n	800331e <HAL_RCC_OscConfig+0x86a>
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003212:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003224:	601a      	str	r2, [r3, #0]
  return result;
 8003226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800322e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x8fc>)
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003244:	f7ff f92e 	bl	80024a4 <HAL_GetTick>
 8003248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324e:	f7ff f929 	bl	80024a4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f000 bc75 	b.w	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003268:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800326c:	2202      	movs	r2, #2
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003274:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003282:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003290:	2202      	movs	r2, #2
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032b4:	2202      	movs	r2, #2
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	fa93 f2a3 	rbit	r2, r3
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 80032d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032dc:	2102      	movs	r1, #2
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f1a3 	rbit	r1, r3
 80032ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032f6:	6019      	str	r1, [r3, #0]
  return result;
 80032f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d197      	bne.n	800324e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 81a5 	beq.w	800367e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	61d3      	str	r3, [r2, #28]
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCC_OscConfig+0x8f8>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800335a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_RCC_OscConfig+0x900>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d121      	bne.n	80033c4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCC_OscConfig+0x900>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x900>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338c:	f7ff f88a 	bl	80024a4 <HAL_GetTick>
 8003390:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e010      	b.n	80033b8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7ff f885 	bl	80024a4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d908      	bls.n	80033b8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e3d1      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	10908120 	.word	0x10908120
 80033b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_RCC_OscConfig+0xb3c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0e8      	beq.n	8003396 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x92e>
 80033d4:	4b87      	ldr	r3, [pc, #540]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4a86      	ldr	r2, [pc, #536]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	e035      	b.n	800344e <HAL_RCC_OscConfig+0x99a>
 80033e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x958>
 80033f2:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a7f      	ldr	r2, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b7d      	ldr	r3, [pc, #500]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a7c      	ldr	r2, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e020      	b.n	800344e <HAL_RCC_OscConfig+0x99a>
 800340c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003410:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x982>
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a74      	ldr	r2, [pc, #464]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6213      	str	r3, [r2, #32]
 8003428:	4b72      	ldr	r3, [pc, #456]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4a71      	ldr	r2, [pc, #452]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0x99a>
 8003436:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6213      	str	r3, [r2, #32]
 8003442:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a6b      	ldr	r2, [pc, #428]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003452:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8081 	beq.w	8003562 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff f820 	bl	80024a4 <HAL_GetTick>
 8003464:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7ff f81b 	bl	80024a4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e365      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800348a:	2202      	movs	r2, #2
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003492:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0xa3a>
 80034e8:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	e013      	b.n	8003516 <HAL_RCC_OscConfig+0xa62>
 80034ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800351a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800351e:	2102      	movs	r1, #2
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003526:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fa92 f1a2 	rbit	r1, r2
 8003530:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003534:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003538:	6011      	str	r1, [r2, #0]
  return result;
 800353a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800353e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f002 021f 	and.w	r2, r2, #31
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d084      	beq.n	800346a <HAL_RCC_OscConfig+0x9b6>
 8003560:	e083      	b.n	800366a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe ff9f 	bl	80024a4 <HAL_GetTick>
 8003566:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe ff9a 	bl	80024a4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e2e4      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003588:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003594:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0xb44>
 80035ea:	4b02      	ldr	r3, [pc, #8]	; (80035f4 <HAL_RCC_OscConfig+0xb40>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	e017      	b.n	8003620 <HAL_RCC_OscConfig+0xb6c>
 80035f0:	40007000 	.word	0x40007000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003600:	2202      	movs	r2, #2
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003616:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4bb3      	ldr	r3, [pc, #716]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003624:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003628:	2102      	movs	r1, #2
 800362a:	6011      	str	r1, [r2, #0]
 800362c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003630:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	fa92 f1a2 	rbit	r1, r2
 800363a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800363e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003642:	6011      	str	r1, [r2, #0]
  return result;
 8003644:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003648:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	fab2 f282 	clz	r2, r2
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	f002 021f 	and.w	r2, r2, #31
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d180      	bne.n	800356c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800366a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b9e      	ldr	r3, [pc, #632]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a9d      	ldr	r2, [pc, #628]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003682:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 825e 	beq.w	8003b4c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003690:	4b96      	ldr	r3, [pc, #600]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	f000 821f 	beq.w	8003adc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	f040 8170 	bne.w	8003990 <HAL_RCC_OscConfig+0xedc>
 80036b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036d4:	601a      	str	r2, [r3, #0]
  return result;
 80036d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	461a      	mov	r2, r3
 80036f2:	2300      	movs	r3, #0
 80036f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fe fed5 	bl	80024a4 <HAL_GetTick>
 80036fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fe:	e009      	b.n	8003714 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fed0 	bl	80024a4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e21c      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800371c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003726:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	fa93 f2a3 	rbit	r2, r3
 8003730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003734:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003738:	601a      	str	r2, [r3, #0]
  return result;
 800373a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_RCC_OscConfig+0xcaa>
 8003758:	4b64      	ldr	r3, [pc, #400]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e027      	b.n	80037ae <HAL_RCC_OscConfig+0xcfa>
 800375e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003762:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003770:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003788:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800378c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003796:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037ba:	6011      	str	r1, [r2, #0]
 80037bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	fa92 f1a2 	rbit	r1, r2
 80037ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037ce:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037d2:	6011      	str	r1, [r2, #0]
  return result;
 80037d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037d8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	fab2 f282 	clz	r2, r2
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	f042 0220 	orr.w	r2, r2, #32
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f002 021f 	and.w	r2, r2, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f202 	lsl.w	r2, r1, r2
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d182      	bne.n	8003700 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	4937      	ldr	r1, [pc, #220]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800381c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a19      	ldr	r1, [r3, #32]
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	430b      	orrs	r3, r1
 8003836:	492d      	ldr	r1, [pc, #180]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003840:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003860:	601a      	str	r2, [r3, #0]
  return result;
 8003862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003866:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800386a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003876:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	461a      	mov	r2, r3
 800387e:	2301      	movs	r3, #1
 8003880:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe fe0f 	bl	80024a4 <HAL_GetTick>
 8003886:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388a:	e009      	b.n	80038a0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fe0a 	bl	80024a4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e156      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 80038a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	fa93 f2a3 	rbit	r2, r3
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038c4:	601a      	str	r2, [r3, #0]
  return result;
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0xe3c>
 80038e4:	4b01      	ldr	r3, [pc, #4]	; (80038ec <HAL_RCC_OscConfig+0xe38>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	e02a      	b.n	8003940 <HAL_RCC_OscConfig+0xe8c>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f2a3 	rbit	r2, r3
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800391e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	4b86      	ldr	r3, [pc, #536]	; (8003b58 <HAL_RCC_OscConfig+0x10a4>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003944:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003948:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003952:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	fa92 f1a2 	rbit	r1, r2
 800395c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003960:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003964:	6011      	str	r1, [r2, #0]
  return result;
 8003966:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800396a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f43f af7f 	beq.w	800388c <HAL_RCC_OscConfig+0xdd8>
 800398e:	e0dd      	b.n	8003b4c <HAL_RCC_OscConfig+0x1098>
 8003990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003994:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800399c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039b4:	601a      	str	r2, [r3, #0]
  return result;
 80039b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039be:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	461a      	mov	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe fd65 	bl	80024a4 <HAL_GetTick>
 80039da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039de:	e009      	b.n	80039f4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fd60 	bl	80024a4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0ac      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
 80039f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f2a3 	rbit	r2, r3
 8003a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a18:	601a      	str	r2, [r3, #0]
  return result;
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_OscConfig+0xf8a>
 8003a38:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x10a4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	e027      	b.n	8003a8e <HAL_RCC_OscConfig+0xfda>
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a68:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a84:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x10a4>)
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a9a:	6011      	str	r1, [r2, #0]
 8003a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aa0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	fa92 f1a2 	rbit	r1, r2
 8003aaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aae:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003ab2:	6011      	str	r1, [r2, #0]
  return result;
 8003ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ab8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f042 0220 	orr.w	r2, r2, #32
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f002 021f 	and.w	r2, r2, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d182      	bne.n	80039e0 <HAL_RCC_OscConfig+0xf2c>
 8003ada:	e037      	b.n	8003b4c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e02e      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_OscConfig+0x10a4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_RCC_OscConfig+0x10a4>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b04:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d117      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09e      	sub	sp, #120	; 0x78
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e162      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b90      	ldr	r3, [pc, #576]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d910      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b8d      	ldr	r3, [pc, #564]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	498b      	ldr	r1, [pc, #556]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b89      	ldr	r3, [pc, #548]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e14a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	497f      	ldr	r1, [pc, #508]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80dc 	beq.w	8003d88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d13c      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xf6>
 8003bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xa6>
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e00f      	b.n	8003c22 <HAL_RCC_ClockConfig+0xc6>
 8003c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
 8003c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1e:	4b67      	ldr	r3, [pc, #412]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c32:	fab2 f282 	clz	r2, r2
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	f042 0220 	orr.w	r2, r2, #32
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f002 021f 	and.w	r2, r2, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f202 	lsl.w	r2, r1, r2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d17b      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0f3      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d13c      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x178>
 8003c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c7e:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
 8003c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
 8003c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cac:	fa92 f2a2 	rbit	r2, r2
 8003cb0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0220 	orr.w	r2, r2, #32
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d13a      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b2      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x1a0>
 8003cf6:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e00d      	b.n	8003d18 <HAL_RCC_ClockConfig+0x1bc>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	2302      	movs	r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2202      	movs	r2, #2
 8003d1a:	61ba      	str	r2, [r7, #24]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	fa92 f2a2 	rbit	r2, r2
 8003d22:	617a      	str	r2, [r7, #20]
  return result;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	fab2 f282 	clz	r2, r2
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f042 0220 	orr.w	r2, r2, #32
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	f002 021f 	and.w	r2, r2, #31
 8003d36:	2101      	movs	r1, #1
 8003d38:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e079      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	491a      	ldr	r1, [pc, #104]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe fba4 	bl	80024a4 <HAL_GetTick>
 8003d5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe fba0 	bl	80024a4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e061      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_ClockConfig+0x260>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d214      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4906      	ldr	r1, [pc, #24]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e040      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2de>
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4912      	ldr	r1, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dfe:	f000 f829 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_ClockConfig+0x2e8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	22f0      	movs	r2, #240	; 0xf0
 8003e0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	fa92 f2a2 	rbit	r2, r2
 8003e16:	60fa      	str	r2, [r7, #12]
  return result;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	fab2 f282 	clz	r2, r2
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	40d3      	lsrs	r3, r2
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x2ec>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	fa21 f303 	lsr.w	r3, r1, r3
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_ClockConfig+0x2f0>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCC_ClockConfig+0x2f4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fc4c 	bl	80006d0 <HAL_InitTick>
  
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3778      	adds	r7, #120	; 0x78
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	0800b7ec 	.word	0x0800b7ec
 8003e4c:	20000060 	.word	0x20000060
 8003e50:	20000068 	.word	0x20000068

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b08b      	sub	sp, #44	; 0x2c
 8003e58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e6e:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x30>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x36>
 8003e82:	e03f      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e86:	623b      	str	r3, [r7, #32]
      break;
 8003e88:	e03f      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	fa92 f2a2 	rbit	r2, r2
 8003e9c:	607a      	str	r2, [r7, #4]
  return result;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	fab2 f282 	clz	r2, r2
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	40d3      	lsrs	r3, r2
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003eaa:	5cd3      	ldrb	r3, [r2, r3]
 8003eac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	fa92 f2a2 	rbit	r2, r2
 8003ec0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	40d3      	lsrs	r3, r2
 8003ecc:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003edc:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	e007      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	623b      	str	r3, [r7, #32]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f06:	623b      	str	r3, [r7, #32]
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	372c      	adds	r7, #44	; 0x2c
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	0800b804 	.word	0x0800b804
 8003f24:	0800b814 	.word	0x0800b814

08003f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000060 	.word	0x20000060

08003f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f46:	f7ff ffef 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	fa92 f2a2 	rbit	r2, r2
 8003f60:	603a      	str	r2, [r7, #0]
  return result;
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	40d3      	lsrs	r3, r2
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0800b7fc 	.word	0x0800b7fc

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f8a:	f7ff ffcd 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	603a      	str	r2, [r7, #0]
  return result;
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	40d3      	lsrs	r3, r2
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	0800b7fc 	.word	0x0800b7fc

08003fc8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 0203 	and.w	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <HAL_RCC_GetClockConfig+0x60>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0207 	and.w	r2, r3, #7
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	601a      	str	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	40022000 	.word	0x40022000

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b092      	sub	sp, #72	; 0x48
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80d4 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004050:	4b4e      	ldr	r3, [pc, #312]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10e      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	61d3      	str	r3, [r2, #28]
 8004068:	4b48      	ldr	r3, [pc, #288]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b45      	ldr	r3, [pc, #276]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a41      	ldr	r2, [pc, #260]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe fa07 	bl	80024a4 <HAL_GetTick>
 8004096:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe fa03 	bl	80024a4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1d6      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b38      	ldr	r3, [pc, #224]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b8:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8084 	beq.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d07c      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d8:	4b2c      	ldr	r3, [pc, #176]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	461a      	mov	r2, r3
 8004102:	2301      	movs	r3, #1
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800410a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	461a      	mov	r2, r3
 8004126:	2300      	movs	r3, #0
 8004128:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800412a:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d04b      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fe f9b3 	bl	80024a4 <HAL_GetTick>
 800413e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fe f9af 	bl	80024a4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e180      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004158:	2302      	movs	r3, #2
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
 8004164:	2302      	movs	r3, #2
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	61fb      	str	r3, [r7, #28]
  return result;
 8004170:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d108      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004186:	4b01      	ldr	r3, [pc, #4]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	e00d      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	10908100 	.word	0x10908100
 8004198:	2302      	movs	r3, #2
 800419a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	4b9a      	ldr	r3, [pc, #616]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2202      	movs	r2, #2
 80041aa:	613a      	str	r2, [r7, #16]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	fa92 f2a2 	rbit	r2, r2
 80041b2:	60fa      	str	r2, [r7, #12]
  return result;
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	fab2 f282 	clz	r2, r2
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f002 021f 	and.w	r2, r2, #31
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0b7      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041d2:	4b8f      	ldr	r3, [pc, #572]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	498c      	ldr	r1, [pc, #560]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4a87      	ldr	r2, [pc, #540]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004204:	4b82      	ldr	r3, [pc, #520]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f023 0203 	bic.w	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	497f      	ldr	r1, [pc, #508]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004222:	4b7b      	ldr	r3, [pc, #492]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4978      	ldr	r1, [pc, #480]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004240:	4b73      	ldr	r3, [pc, #460]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4970      	ldr	r1, [pc, #448]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425e:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f023 0210 	bic.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4969      	ldr	r1, [pc, #420]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800427c:	4b64      	ldr	r3, [pc, #400]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	4961      	ldr	r1, [pc, #388]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429a:	4b5d      	ldr	r3, [pc, #372]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f023 0220 	bic.w	r2, r3, #32
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	495a      	ldr	r1, [pc, #360]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042b8:	4b55      	ldr	r3, [pc, #340]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	4952      	ldr	r1, [pc, #328]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	494b      	ldr	r1, [pc, #300]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f4:	4b46      	ldr	r3, [pc, #280]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	4943      	ldr	r1, [pc, #268]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004312:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	493c      	ldr	r1, [pc, #240]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004330:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	4934      	ldr	r1, [pc, #208]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	492d      	ldr	r1, [pc, #180]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	4925      	ldr	r1, [pc, #148]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800438a:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	491e      	ldr	r1, [pc, #120]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	490f      	ldr	r1, [pc, #60]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	4907      	ldr	r1, [pc, #28]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004402:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	4913      	ldr	r1, [pc, #76]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004418:	4313      	orrs	r3, r2
 800441a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	490b      	ldr	r1, [pc, #44]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004436:	4313      	orrs	r3, r2
 8004438:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004454:	4313      	orrs	r3, r2
 8004456:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3748      	adds	r7, #72	; 0x48
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e049      	b.n	800450e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc ffae 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f001 f916 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e04f      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a23      	ldr	r2, [pc, #140]	; (80045dc <HAL_TIM_Base_Start_IT+0xc4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d018      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIM_Base_Start_IT+0x76>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d115      	bne.n	80045ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004596:	4013      	ands	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d015      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0xb4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a6:	d011      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b8:	e008      	b.n	80045cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e000      	b.n	80045ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40015000 	.word	0x40015000
 80045f4:	00010007 	.word	0x00010007

080045f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e049      	b.n	800469e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f841 	bl	80046a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f001 f84e 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_TIM_PWM_Start+0x24>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e03c      	b.n	800475a <HAL_TIM_PWM_Start+0x9e>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d109      	bne.n	80046fa <HAL_TIM_PWM_Start+0x3e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	e02f      	b.n	800475a <HAL_TIM_PWM_Start+0x9e>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d109      	bne.n	8004714 <HAL_TIM_PWM_Start+0x58>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e022      	b.n	800475a <HAL_TIM_PWM_Start+0x9e>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d109      	bne.n	800472e <HAL_TIM_PWM_Start+0x72>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e015      	b.n	800475a <HAL_TIM_PWM_Start+0x9e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b10      	cmp	r3, #16
 8004732:	d109      	bne.n	8004748 <HAL_TIM_PWM_Start+0x8c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e008      	b.n	800475a <HAL_TIM_PWM_Start+0x9e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0a1      	b.n	80048a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_TIM_PWM_Start+0xb6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004770:	e023      	b.n	80047ba <HAL_TIM_PWM_Start+0xfe>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b04      	cmp	r3, #4
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xc6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	e01b      	b.n	80047ba <HAL_TIM_PWM_Start+0xfe>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xd6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	e013      	b.n	80047ba <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xe6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a0:	e00b      	b.n	80047ba <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xf6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b0:	e003      	b.n	80047ba <HAL_TIM_PWM_Start+0xfe>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fcea 	bl	800619c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a38      	ldr	r2, [pc, #224]	; (80048b0 <HAL_TIM_PWM_Start+0x1f4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <HAL_TIM_PWM_Start+0x148>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <HAL_TIM_PWM_Start+0x1f8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_TIM_PWM_Start+0x148>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a35      	ldr	r2, [pc, #212]	; (80048b8 <HAL_TIM_PWM_Start+0x1fc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_TIM_PWM_Start+0x148>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <HAL_TIM_PWM_Start+0x200>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_TIM_PWM_Start+0x148>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a32      	ldr	r2, [pc, #200]	; (80048c0 <HAL_TIM_PWM_Start+0x204>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIM_PWM_Start+0x148>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a31      	ldr	r2, [pc, #196]	; (80048c4 <HAL_TIM_PWM_Start+0x208>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <HAL_TIM_PWM_Start+0x14c>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_TIM_PWM_Start+0x14e>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <HAL_TIM_PWM_Start+0x1f4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d018      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <HAL_TIM_PWM_Start+0x20c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <HAL_TIM_PWM_Start+0x210>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <HAL_TIM_PWM_Start+0x1f8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_TIM_PWM_Start+0x1fc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIM_PWM_Start+0x1a8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_TIM_PWM_Start+0x208>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d115      	bne.n	8004890 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_TIM_PWM_Start+0x214>)
 800486c:	4013      	ands	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d015      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x1e6>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d011      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	e008      	b.n	80048a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40013400 	.word	0x40013400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	40015000 	.word	0x40015000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	00010007 	.word	0x00010007

080048d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fc58 	bl	800619c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <HAL_TIM_PWM_Stop+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <HAL_TIM_PWM_Stop+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3d      	ldr	r2, [pc, #244]	; (80049fc <HAL_TIM_PWM_Stop+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <HAL_TIM_PWM_Stop+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3a      	ldr	r2, [pc, #232]	; (8004a04 <HAL_TIM_PWM_Stop+0x130>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_PWM_Stop+0x54>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a39      	ldr	r2, [pc, #228]	; (8004a08 <HAL_TIM_PWM_Stop+0x134>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_TIM_PWM_Stop+0x58>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_TIM_PWM_Stop+0x5a>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d017      	beq.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	f241 1311 	movw	r3, #4369	; 0x1111
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	f240 4344 	movw	r3, #1092	; 0x444
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <HAL_TIM_PWM_Stop+0x8e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	f241 1311 	movw	r3, #4369	; 0x1111
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_TIM_PWM_Stop+0xbe>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	f240 4344 	movw	r3, #1092	; 0x444
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_TIM_PWM_Stop+0xbe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Stop+0xce>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	e023      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Stop+0xde>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	e01b      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Stop+0xee>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	e013      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Stop+0xfe>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d0:	e00b      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0x10e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e0:	e003      	b.n	80049ea <HAL_TIM_PWM_Stop+0x116>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40015000 	.word	0x40015000

08004a0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e049      	b.n	8004ab2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f841 	bl	8004aba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fe44 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0x1e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e023      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x66>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0x2e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	e01b      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x66>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_IC_Start_IT+0x3e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e013      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x66>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_IC_Start_IT+0x4e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e00b      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x66>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0x5e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e003      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x66>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <HAL_TIM_IC_Start_IT+0x78>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e013      	b.n	8004b70 <HAL_TIM_IC_Start_IT+0xa0>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d104      	bne.n	8004b58 <HAL_TIM_IC_Start_IT+0x88>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e00b      	b.n	8004b70 <HAL_TIM_IC_Start_IT+0xa0>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d104      	bne.n	8004b68 <HAL_TIM_IC_Start_IT+0x98>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e003      	b.n	8004b70 <HAL_TIM_IC_Start_IT+0xa0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	7bbb      	ldrb	r3, [r7, #14]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b78:	7b7b      	ldrb	r3, [r7, #13]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0dd      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_IC_Start_IT+0xc2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b90:	e023      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x10a>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_IC_Start_IT+0xd2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba0:	e01b      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x10a>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0xe2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x10a>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0xf2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x10a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0x102>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x10a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_IC_Start_IT+0x11a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x142>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start_IT+0x12a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x142>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_IC_Start_IT+0x13a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x142>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d841      	bhi.n	8004c9c <HAL_TIM_IC_Start_IT+0x1cc>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <HAL_TIM_IC_Start_IT+0x150>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c9d 	.word	0x08004c9d
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004c9d 	.word	0x08004c9d
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004c9d 	.word	0x08004c9d
 8004c40:	08004c79 	.word	0x08004c79
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c9d 	.word	0x08004c9d
 8004c50:	08004c8b 	.word	0x08004c8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0202 	orr.w	r2, r2, #2
 8004c62:	60da      	str	r2, [r3, #12]
      break;
 8004c64:	e01d      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0204 	orr.w	r2, r2, #4
 8004c74:	60da      	str	r2, [r3, #12]
      break;
 8004c76:	e014      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	60da      	str	r2, [r3, #12]
      break;
 8004c88:	e00b      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0210 	orr.w	r2, r2, #16
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d149      	bne.n	8004d3c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fa73 	bl	800619c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <HAL_TIM_IC_Start_IT+0x278>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d01d      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d018      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <HAL_TIM_IC_Start_IT+0x27c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_TIM_IC_Start_IT+0x280>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_TIM_IC_Start_IT+0x284>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_TIM_IC_Start_IT+0x288>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_IC_Start_IT+0x22c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_TIM_IC_Start_IT+0x28c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d115      	bne.n	8004d28 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_TIM_IC_Start_IT+0x290>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d015      	beq.n	8004d3a <HAL_TIM_IC_Start_IT+0x26a>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d14:	d011      	beq.n	8004d3a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	e008      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40015000 	.word	0x40015000
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d841      	bhi.n	8004dfc <HAL_TIM_IC_Stop_IT+0x98>
 8004d78:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <HAL_TIM_IC_Stop_IT+0x1c>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004dfd 	.word	0x08004dfd
 8004d88:	08004dfd 	.word	0x08004dfd
 8004d8c:	08004dfd 	.word	0x08004dfd
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004dfd 	.word	0x08004dfd
 8004da0:	08004dd9 	.word	0x08004dd9
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004deb 	.word	0x08004deb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0202 	bic.w	r2, r2, #2
 8004dc2:	60da      	str	r2, [r3, #12]
      break;
 8004dc4:	e01d      	b.n	8004e02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0204 	bic.w	r2, r2, #4
 8004dd4:	60da      	str	r2, [r3, #12]
      break;
 8004dd6:	e014      	b.n	8004e02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0208 	bic.w	r2, r2, #8
 8004de6:	60da      	str	r2, [r3, #12]
      break;
 8004de8:	e00b      	b.n	8004e02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0210 	bic.w	r2, r2, #16
 8004df8:	60da      	str	r2, [r3, #12]
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d166      	bne.n	8004ed6 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 f9c3 	bl	800619c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <HAL_TIM_IC_Stop_IT+0xe2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IC_Stop_IT+0xe2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_IC_Stop_IT+0xf2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e54:	e023      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x13a>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_IC_Stop_IT+0x102>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e64:	e01b      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x13a>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_IC_Stop_IT+0x112>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	e013      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x13a>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_IC_Stop_IT+0x122>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x13a>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_IC_Stop_IT+0x132>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x13a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_IC_Stop_IT+0x14a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eac:	e013      	b.n	8004ed6 <HAL_TIM_IC_Stop_IT+0x172>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_IC_Stop_IT+0x15a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	e00b      	b.n	8004ed6 <HAL_TIM_IC_Stop_IT+0x172>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_IC_Stop_IT+0x16a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ecc:	e003      	b.n	8004ed6 <HAL_TIM_IC_Stop_IT+0x172>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0202 	mvn.w	r2, #2
 8004f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd f902 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fbb6 	bl	800569c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbbd 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d122      	bne.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d11b      	bne.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0204 	mvn.w	r2, #4
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fd f8d8 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fb8c 	bl	800569c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fb93 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d122      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d11b      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0208 	mvn.w	r2, #8
 8004fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd f8ae 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fb62 	bl	800569c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fb69 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d122      	bne.n	8005038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d11b      	bne.n	8005038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0210 	mvn.w	r2, #16
 8005008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2208      	movs	r2, #8
 800500e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd f884 	bl	800212c <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fb38 	bl	800569c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fb3f 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d10e      	bne.n	8005064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0201 	mvn.w	r2, #1
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fb faf6 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b80      	cmp	r3, #128	; 0x80
 8005070:	d10e      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b80      	cmp	r3, #128	; 0x80
 800507e:	d107      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 f9c8 	bl	8006420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	d10e      	bne.n	80050be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d107      	bne.n	80050be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 f9bb 	bl	8006434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d10e      	bne.n	80050ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d107      	bne.n	80050ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 faed 	bl	80056c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d10e      	bne.n	8005116 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b20      	cmp	r3, #32
 8005104:	d107      	bne.n	8005116 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f06f 0220 	mvn.w	r2, #32
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f97b 	bl	800640c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b086      	sub	sp, #24
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005138:	2302      	movs	r3, #2
 800513a:	e088      	b.n	800524e <HAL_TIM_IC_ConfigChannel+0x130>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11b      	bne.n	8005182 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800515a:	f000 fe61 	bl	8005e20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 020c 	bic.w	r2, r2, #12
 800516c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6999      	ldr	r1, [r3, #24]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
 8005180:	e060      	b.n	8005244 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11c      	bne.n	80051c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005198:	f000 fedf 	bl	8005f5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6999      	ldr	r1, [r3, #24]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	619a      	str	r2, [r3, #24]
 80051c0:	e040      	b.n	8005244 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051d8:	f000 ff2c 	bl	8006034 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 020c 	bic.w	r2, r2, #12
 80051ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69d9      	ldr	r1, [r3, #28]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	61da      	str	r2, [r3, #28]
 80051fe:	e021      	b.n	8005244 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d11c      	bne.n	8005240 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005216:	f000 ff49 	bl	80060ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005228:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
 800523e:	e001      	b.n	8005244 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005272:	2302      	movs	r3, #2
 8005274:	e0ff      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b14      	cmp	r3, #20
 8005282:	f200 80f0 	bhi.w	8005466 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052e1 	.word	0x080052e1
 8005290:	08005467 	.word	0x08005467
 8005294:	08005467 	.word	0x08005467
 8005298:	08005467 	.word	0x08005467
 800529c:	08005321 	.word	0x08005321
 80052a0:	08005467 	.word	0x08005467
 80052a4:	08005467 	.word	0x08005467
 80052a8:	08005467 	.word	0x08005467
 80052ac:	08005363 	.word	0x08005363
 80052b0:	08005467 	.word	0x08005467
 80052b4:	08005467 	.word	0x08005467
 80052b8:	08005467 	.word	0x08005467
 80052bc:	080053a3 	.word	0x080053a3
 80052c0:	08005467 	.word	0x08005467
 80052c4:	08005467 	.word	0x08005467
 80052c8:	08005467 	.word	0x08005467
 80052cc:	080053e5 	.word	0x080053e5
 80052d0:	08005467 	.word	0x08005467
 80052d4:	08005467 	.word	0x08005467
 80052d8:	08005467 	.word	0x08005467
 80052dc:	08005425 	.word	0x08005425
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa94 	bl	8005814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0208 	orr.w	r2, r2, #8
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0204 	bic.w	r2, r2, #4
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	619a      	str	r2, [r3, #24]
      break;
 800531e:	e0a5      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fb0e 	bl	8005948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6999      	ldr	r1, [r3, #24]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	619a      	str	r2, [r3, #24]
      break;
 8005360:	e084      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fb81 	bl	8005a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0208 	orr.w	r2, r2, #8
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0204 	bic.w	r2, r2, #4
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	61da      	str	r2, [r3, #28]
      break;
 80053a0:	e064      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fbf3 	bl	8005b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69d9      	ldr	r1, [r3, #28]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	021a      	lsls	r2, r3, #8
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	61da      	str	r2, [r3, #28]
      break;
 80053e2:	e043      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fc42 	bl	8005c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0208 	orr.w	r2, r2, #8
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005422:	e023      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fc8c 	bl	8005d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005464:	e002      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
      break;
 800546a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop

08005480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIM_ConfigClockSource+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e0b6      	b.n	800560a <HAL_TIM_ConfigClockSource+0x18a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d03e      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xd8>
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	f200 8087 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	f000 8086 	beq.w	80055f6 <HAL_TIM_ConfigClockSource+0x176>
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d87f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d01a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xaa>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d87b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d050      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x11e>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d877      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d03c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0xfe>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d873      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d058      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x13e>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d86f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d064      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15e>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d86b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d060      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15e>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d867      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15e>
 8005524:	2b10      	cmp	r3, #16
 8005526:	d05a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15e>
 8005528:	e062      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	f000 fe0f 	bl	800615c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800554c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e04f      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	f000 fdf8 	bl	800615c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
      break;
 800557c:	e03c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	461a      	mov	r2, r3
 800558c:	f000 fcb6 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fdc5 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 800559c:	e02c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 fd12 	bl	8005fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fdb5 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e01c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 fc96 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fda5 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e00c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 fd9c 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 80055ee:	e003      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e000      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d831      	bhi.n	800568c <HAL_TIM_ReadCapturedValue+0x78>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_TIM_ReadCapturedValue+0x1c>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005665 	.word	0x08005665
 8005634:	0800568d 	.word	0x0800568d
 8005638:	0800568d 	.word	0x0800568d
 800563c:	0800568d 	.word	0x0800568d
 8005640:	0800566f 	.word	0x0800566f
 8005644:	0800568d 	.word	0x0800568d
 8005648:	0800568d 	.word	0x0800568d
 800564c:	0800568d 	.word	0x0800568d
 8005650:	08005679 	.word	0x08005679
 8005654:	0800568d 	.word	0x0800568d
 8005658:	0800568d 	.word	0x0800568d
 800565c:	0800568d 	.word	0x0800568d
 8005660:	08005683 	.word	0x08005683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	60fb      	str	r3, [r7, #12]

      break;
 800566c:	e00f      	b.n	800568e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	60fb      	str	r3, [r7, #12]

      break;
 8005676:	e00a      	b.n	800568e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	60fb      	str	r3, [r7, #12]

      break;
 8005680:	e005      	b.n	800568e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	60fb      	str	r3, [r7, #12]

      break;
 800568a:	e000      	b.n	800568e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800568c:	bf00      	nop
  }

  return tmpreg;
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a42      	ldr	r2, [pc, #264]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d00f      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <TIM_Base_SetConfig+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a31      	ldr	r2, [pc, #196]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2d      	ldr	r2, [pc, #180]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <TIM_Base_SetConfig+0x128>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <TIM_Base_SetConfig+0x130>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2b      	ldr	r2, [pc, #172]	; (800580c <TIM_Base_SetConfig+0x134>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <TIM_Base_SetConfig+0x138>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x9a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a25      	ldr	r2, [pc, #148]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x100>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <TIM_Base_SetConfig+0x128>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x100>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <TIM_Base_SetConfig+0x130>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x100>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <TIM_Base_SetConfig+0x134>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x100>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <TIM_Base_SetConfig+0x138>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x100>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d103      	bne.n	80057e0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	615a      	str	r2, [r3, #20]
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40013400 	.word	0x40013400
 8005804:	40015000 	.word	0x40015000
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f023 0302 	bic.w	r3, r3, #2
 8005860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a30      	ldr	r2, [pc, #192]	; (8005930 <TIM_OC1_SetConfig+0x11c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_OC1_SetConfig+0x88>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_OC1_SetConfig+0x120>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00f      	beq.n	800589c <TIM_OC1_SetConfig+0x88>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2e      	ldr	r2, [pc, #184]	; (8005938 <TIM_OC1_SetConfig+0x124>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_OC1_SetConfig+0x88>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a2d      	ldr	r2, [pc, #180]	; (800593c <TIM_OC1_SetConfig+0x128>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC1_SetConfig+0x88>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_OC1_SetConfig+0x12c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC1_SetConfig+0x88>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_OC1_SetConfig+0x130>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10c      	bne.n	80058b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0308 	bic.w	r3, r3, #8
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <TIM_OC1_SetConfig+0x11c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_OC1_SetConfig+0xd2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <TIM_OC1_SetConfig+0x120>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_OC1_SetConfig+0xd2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <TIM_OC1_SetConfig+0x124>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_OC1_SetConfig+0xd2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1a      	ldr	r2, [pc, #104]	; (800593c <TIM_OC1_SetConfig+0x128>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_OC1_SetConfig+0xd2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <TIM_OC1_SetConfig+0x12c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC1_SetConfig+0xd2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <TIM_OC1_SetConfig+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d111      	bne.n	800590a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	40015000 	.word	0x40015000

08005948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0320 	bic.w	r3, r3, #32
 8005996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <TIM_OC2_SetConfig+0x110>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC2_SetConfig+0x74>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a2b      	ldr	r2, [pc, #172]	; (8005a5c <TIM_OC2_SetConfig+0x114>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x74>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <TIM_OC2_SetConfig+0x118>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <TIM_OC2_SetConfig+0x110>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <TIM_OC2_SetConfig+0xc0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <TIM_OC2_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00f      	beq.n	8005a08 <TIM_OC2_SetConfig+0xc0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <TIM_OC2_SetConfig+0x11c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_OC2_SetConfig+0xc0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <TIM_OC2_SetConfig+0x120>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC2_SetConfig+0xc0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <TIM_OC2_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC2_SetConfig+0xc0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <TIM_OC2_SetConfig+0x118>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d113      	bne.n	8005a30 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a0e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a16:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40015000 	.word	0x40015000
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800

08005a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_OC3_SetConfig+0x10c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_OC3_SetConfig+0x72>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_OC3_SetConfig+0x110>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC3_SetConfig+0x72>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <TIM_OC3_SetConfig+0x114>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10d      	bne.n	8005afe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005afc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <TIM_OC3_SetConfig+0x10c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <TIM_OC3_SetConfig+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <TIM_OC3_SetConfig+0x110>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00f      	beq.n	8005b2e <TIM_OC3_SetConfig+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_OC3_SetConfig+0x118>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <TIM_OC3_SetConfig+0xbe>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <TIM_OC3_SetConfig+0x11c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <TIM_OC3_SetConfig+0xbe>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <TIM_OC3_SetConfig+0x120>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_OC3_SetConfig+0xbe>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <TIM_OC3_SetConfig+0x114>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d113      	bne.n	8005b56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40015000 	.word	0x40015000
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800

08005b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	031b      	lsls	r3, r3, #12
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <TIM_OC4_SetConfig+0xc8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <TIM_OC4_SetConfig+0x8c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <TIM_OC4_SetConfig+0xcc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00f      	beq.n	8005c20 <TIM_OC4_SetConfig+0x8c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <TIM_OC4_SetConfig+0xd0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_OC4_SetConfig+0x8c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <TIM_OC4_SetConfig+0xd4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_OC4_SetConfig+0x8c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <TIM_OC4_SetConfig+0xd8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC4_SetConfig+0x8c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <TIM_OC4_SetConfig+0xdc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40015000 	.word	0x40015000

08005c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <TIM_OC5_SetConfig+0xbc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <TIM_OC5_SetConfig+0xc0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <TIM_OC5_SetConfig+0xc4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x82>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <TIM_OC5_SetConfig+0xc8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x82>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <TIM_OC5_SetConfig+0xcc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x82>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <TIM_OC5_SetConfig+0xd0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d109      	bne.n	8005d0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40015000 	.word	0x40015000

08005d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	051b      	lsls	r3, r3, #20
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <TIM_OC6_SetConfig+0xc0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <TIM_OC6_SetConfig+0x84>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <TIM_OC6_SetConfig+0xc4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00f      	beq.n	8005dcc <TIM_OC6_SetConfig+0x84>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <TIM_OC6_SetConfig+0xc8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_OC6_SetConfig+0x84>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <TIM_OC6_SetConfig+0xcc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_OC6_SetConfig+0x84>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <TIM_OC6_SetConfig+0xd0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC6_SetConfig+0x84>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <TIM_OC6_SetConfig+0xd4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d109      	bne.n	8005de0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	40015000 	.word	0x40015000

08005e20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <TIM_TI1_SetConfig+0xc4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d017      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d013      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a23      	ldr	r2, [pc, #140]	; (8005ee8 <TIM_TI1_SetConfig+0xc8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a22      	ldr	r2, [pc, #136]	; (8005eec <TIM_TI1_SetConfig+0xcc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <TIM_TI1_SetConfig+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a20      	ldr	r2, [pc, #128]	; (8005ef4 <TIM_TI1_SetConfig+0xd4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_TI1_SetConfig+0x5e>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <TIM_TI1_SetConfig+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <TIM_TI1_SetConfig+0x62>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <TIM_TI1_SetConfig+0x64>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e003      	b.n	8005ea2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f023 030a 	bic.w	r3, r3, #10
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f003 030a 	and.w	r3, r3, #10
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40015000 	.word	0x40015000

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 030a 	bic.w	r3, r3, #10
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0210 	bic.w	r2, r3, #16
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 0210 	bic.w	r2, r3, #16
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	b2db      	uxtb	r3, r3
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006084:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	031b      	lsls	r3, r3, #12
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	031b      	lsls	r3, r3, #12
 8006104:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	f043 0307 	orr.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	431a      	orrs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2201      	movs	r2, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	43db      	mvns	r3, r3
 80061be:	401a      	ands	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e06d      	b.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2d      	ldr	r2, [pc, #180]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d108      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d01d      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d018      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10c      	bne.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40015000 	.word	0x40015000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40014000 	.word	0x40014000

08006300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e06a      	b.n	80063f2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a19      	ldr	r2, [pc, #100]	; (8006400 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a17      	ldr	r2, [pc, #92]	; (8006404 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d115      	bne.n	80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	051b      	lsls	r3, r3, #20
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40013400 	.word	0x40013400
 8006408:	40015000 	.word	0x40015000

0800640c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e040      	b.n	80064dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fabc 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2224      	movs	r2, #36	; 0x24
 8006474:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb76 	bl	8006b78 <UART_SetConfig>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e022      	b.n	80064dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fd3e 	bl	8006f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fdc5 	bl	8007064 <UART_CheckIdleState>
 80064da:	4603      	mov	r3, r0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d132      	bne.n	8006562 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Receive_IT+0x24>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e02b      	b.n	8006564 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d018      	beq.n	8006552 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	623b      	str	r3, [r7, #32]
 8006540:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	61bb      	str	r3, [r7, #24]
   return(result);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fe93 	bl	8007284 <UART_Start_Receive_IT>
 800655e:	4603      	mov	r3, r0
 8006560:	e000      	b.n	8006564 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0ba      	sub	sp, #232	; 0xe8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006596:	f640 030f 	movw	r3, #2063	; 0x80f
 800659a:	4013      	ands	r3, r2
 800659c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00f      	beq.n	80065d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 82ab 	beq.w	8006b20 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
      }
      return;
 80065d2:	e2a5      	b.n	8006b20 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8117 	beq.w	800680c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065ee:	4b85      	ldr	r3, [pc, #532]	; (8006804 <HAL_UART_IRQHandler+0x298>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 810a 	beq.w	800680c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <HAL_UART_IRQHandler+0xbc>
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_UART_IRQHandler+0xec>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2202      	movs	r2, #2
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_UART_IRQHandler+0x11c>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2204      	movs	r2, #4
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667e:	f043 0202 	orr.w	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <HAL_UART_IRQHandler+0x18a>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8211 	beq.w	8006b24 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006746:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800674a:	2b00      	cmp	r3, #0
 800674c:	d04f      	beq.n	80067ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fe5e 	bl	8007410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d141      	bne.n	80067e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800677c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800678e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800679a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1d9      	bne.n	8006762 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d013      	beq.n	80067de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ba:	4a13      	ldr	r2, [pc, #76]	; (8006808 <HAL_UART_IRQHandler+0x29c>)
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fb ff95 	bl	80026f2 <HAL_DMA_Abort_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d017      	beq.n	80067fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e00f      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9b4 	bl	8006b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e4:	e00b      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9b0 	bl	8006b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	e007      	b.n	80067fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9ac 	bl	8006b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80067fc:	e192      	b.n	8006b24 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	bf00      	nop
    return;
 8006800:	e190      	b.n	8006b24 <HAL_UART_IRQHandler+0x5b8>
 8006802:	bf00      	nop
 8006804:	04000120 	.word	0x04000120
 8006808:	080074d9 	.word	0x080074d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	f040 814b 	bne.w	8006aac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8144 	beq.w	8006aac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 813d 	beq.w	8006aac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2210      	movs	r2, #16
 8006838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	f040 80b5 	bne.w	80069b4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006856:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8164 	beq.w	8006b28 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800686a:	429a      	cmp	r2, r3
 800686c:	f080 815c 	bcs.w	8006b28 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b20      	cmp	r3, #32
 8006882:	f000 8086 	beq.w	8006992 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800689a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800689e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1da      	bne.n	8006886 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3308      	adds	r3, #8
 80068d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e1      	bne.n	80068d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800691c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800693e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e3      	bne.n	800690c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006974:	65bb      	str	r3, [r7, #88]	; 0x58
 8006976:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800697a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e4      	bne.n	8006952 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698c:	4618      	mov	r0, r3
 800698e:	f7fb fe77 	bl	8002680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8d7 	bl	8006b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b2:	e0b9      	b.n	8006b28 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80ab 	beq.w	8006b2c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80069d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80a6 	beq.w	8006b2c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e4      	bne.n	80069e0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	623b      	str	r3, [r7, #32]
   return(result);
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e3      	bne.n	8006a16 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	69b9      	ldr	r1, [r7, #24]
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	617b      	str	r3, [r7, #20]
   return(result);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e4      	bne.n	8006a62 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f85b 	bl	8006b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aaa:	e03f      	b.n	8006b2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x56a>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 feea 	bl	80078a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ad4:	e02d      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01c      	beq.n	8006b30 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
    }
    return;
 8006afe:	e017      	b.n	8006b30 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d012      	beq.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00c      	beq.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fcf3 	bl	8007504 <UART_EndTransmit_IT>
    return;
 8006b1e:	e008      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006b20:	bf00      	nop
 8006b22:	e006      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006b24:	bf00      	nop
 8006b26:	e004      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006b28:	bf00      	nop
 8006b2a:	e002      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006b30:	bf00      	nop
  }

}
 8006b32:	37e8      	adds	r7, #232	; 0xe8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b92      	ldr	r3, [pc, #584]	; (8006dec <UART_SetConfig+0x274>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6979      	ldr	r1, [r7, #20]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a80      	ldr	r2, [pc, #512]	; (8006df0 <UART_SetConfig+0x278>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d120      	bne.n	8006c36 <UART_SetConfig+0xbe>
 8006bf4:	4b7f      	ldr	r3, [pc, #508]	; (8006df4 <UART_SetConfig+0x27c>)
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d817      	bhi.n	8006c30 <UART_SetConfig+0xb8>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x90>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c25 	.word	0x08006c25
 8006c10:	08006c2b 	.word	0x08006c2b
 8006c14:	08006c1f 	.word	0x08006c1f
 8006c18:	2301      	movs	r3, #1
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e0b5      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e0b2      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c24:	2304      	movs	r3, #4
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e0af      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e0ac      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c30:	2310      	movs	r3, #16
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e0a9      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6f      	ldr	r2, [pc, #444]	; (8006df8 <UART_SetConfig+0x280>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d124      	bne.n	8006c8a <UART_SetConfig+0x112>
 8006c40:	4b6c      	ldr	r3, [pc, #432]	; (8006df4 <UART_SetConfig+0x27c>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c4c:	d011      	beq.n	8006c72 <UART_SetConfig+0xfa>
 8006c4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c52:	d817      	bhi.n	8006c84 <UART_SetConfig+0x10c>
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c58:	d011      	beq.n	8006c7e <UART_SetConfig+0x106>
 8006c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c5e:	d811      	bhi.n	8006c84 <UART_SetConfig+0x10c>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <UART_SetConfig+0xf4>
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d006      	beq.n	8006c78 <UART_SetConfig+0x100>
 8006c6a:	e00b      	b.n	8006c84 <UART_SetConfig+0x10c>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e08b      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c72:	2302      	movs	r3, #2
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e088      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e085      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e082      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c84:	2310      	movs	r3, #16
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e07f      	b.n	8006d8a <UART_SetConfig+0x212>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a5b      	ldr	r2, [pc, #364]	; (8006dfc <UART_SetConfig+0x284>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d124      	bne.n	8006cde <UART_SetConfig+0x166>
 8006c94:	4b57      	ldr	r3, [pc, #348]	; (8006df4 <UART_SetConfig+0x27c>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ca0:	d011      	beq.n	8006cc6 <UART_SetConfig+0x14e>
 8006ca2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ca6:	d817      	bhi.n	8006cd8 <UART_SetConfig+0x160>
 8006ca8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cac:	d011      	beq.n	8006cd2 <UART_SetConfig+0x15a>
 8006cae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cb2:	d811      	bhi.n	8006cd8 <UART_SetConfig+0x160>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x148>
 8006cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cbc:	d006      	beq.n	8006ccc <UART_SetConfig+0x154>
 8006cbe:	e00b      	b.n	8006cd8 <UART_SetConfig+0x160>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e061      	b.n	8006d8a <UART_SetConfig+0x212>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e05e      	b.n	8006d8a <UART_SetConfig+0x212>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e05b      	b.n	8006d8a <UART_SetConfig+0x212>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e058      	b.n	8006d8a <UART_SetConfig+0x212>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e055      	b.n	8006d8a <UART_SetConfig+0x212>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a47      	ldr	r2, [pc, #284]	; (8006e00 <UART_SetConfig+0x288>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d124      	bne.n	8006d32 <UART_SetConfig+0x1ba>
 8006ce8:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <UART_SetConfig+0x27c>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cf4:	d011      	beq.n	8006d1a <UART_SetConfig+0x1a2>
 8006cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cfa:	d817      	bhi.n	8006d2c <UART_SetConfig+0x1b4>
 8006cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d00:	d011      	beq.n	8006d26 <UART_SetConfig+0x1ae>
 8006d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d06:	d811      	bhi.n	8006d2c <UART_SetConfig+0x1b4>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <UART_SetConfig+0x19c>
 8006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d10:	d006      	beq.n	8006d20 <UART_SetConfig+0x1a8>
 8006d12:	e00b      	b.n	8006d2c <UART_SetConfig+0x1b4>
 8006d14:	2300      	movs	r3, #0
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e037      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e034      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d20:	2304      	movs	r3, #4
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e031      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d26:	2308      	movs	r3, #8
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e02e      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e02b      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a33      	ldr	r2, [pc, #204]	; (8006e04 <UART_SetConfig+0x28c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d124      	bne.n	8006d86 <UART_SetConfig+0x20e>
 8006d3c:	4b2d      	ldr	r3, [pc, #180]	; (8006df4 <UART_SetConfig+0x27c>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d48:	d011      	beq.n	8006d6e <UART_SetConfig+0x1f6>
 8006d4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d4e:	d817      	bhi.n	8006d80 <UART_SetConfig+0x208>
 8006d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d54:	d011      	beq.n	8006d7a <UART_SetConfig+0x202>
 8006d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d5a:	d811      	bhi.n	8006d80 <UART_SetConfig+0x208>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <UART_SetConfig+0x1f0>
 8006d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d64:	d006      	beq.n	8006d74 <UART_SetConfig+0x1fc>
 8006d66:	e00b      	b.n	8006d80 <UART_SetConfig+0x208>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e00d      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e00a      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d74:	2304      	movs	r3, #4
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e007      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e004      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d80:	2310      	movs	r3, #16
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e001      	b.n	8006d8a <UART_SetConfig+0x212>
 8006d86:	2310      	movs	r3, #16
 8006d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d92:	d16b      	bne.n	8006e6c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006d94:	7ffb      	ldrb	r3, [r7, #31]
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d838      	bhi.n	8006e0c <UART_SetConfig+0x294>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x228>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006e0d 	.word	0x08006e0d
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006e0d 	.word	0x08006e0d
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fd f8bc 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	61b8      	str	r0, [r7, #24]
        break;
 8006dca:	e024      	b.n	8006e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fd f8da 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8006dd0:	61b8      	str	r0, [r7, #24]
        break;
 8006dd2:	e020      	b.n	8006e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <UART_SetConfig+0x290>)
 8006dd6:	61bb      	str	r3, [r7, #24]
        break;
 8006dd8:	e01d      	b.n	8006e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fd f83b 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006dde:	61b8      	str	r0, [r7, #24]
        break;
 8006de0:	e019      	b.n	8006e16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de6:	61bb      	str	r3, [r7, #24]
        break;
 8006de8:	e015      	b.n	8006e16 <UART_SetConfig+0x29e>
 8006dea:	bf00      	nop
 8006dec:	efff69f3 	.word	0xefff69f3
 8006df0:	40013800 	.word	0x40013800
 8006df4:	40021000 	.word	0x40021000
 8006df8:	40004400 	.word	0x40004400
 8006dfc:	40004800 	.word	0x40004800
 8006e00:	40004c00 	.word	0x40004c00
 8006e04:	40005000 	.word	0x40005000
 8006e08:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	77bb      	strb	r3, [r7, #30]
        break;
 8006e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d073      	beq.n	8006f04 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	005a      	lsls	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	441a      	add	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d916      	bls.n	8006e66 <UART_SetConfig+0x2ee>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d212      	bcs.n	8006e66 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f023 030f 	bic.w	r3, r3, #15
 8006e48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	89fb      	ldrh	r3, [r7, #14]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	89fa      	ldrh	r2, [r7, #14]
 8006e62:	60da      	str	r2, [r3, #12]
 8006e64:	e04e      	b.n	8006f04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	77bb      	strb	r3, [r7, #30]
 8006e6a:	e04b      	b.n	8006f04 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e6c:	7ffb      	ldrb	r3, [r7, #31]
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d827      	bhi.n	8006ec2 <UART_SetConfig+0x34a>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x300>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	08006ec3 	.word	0x08006ec3
 8006e88:	08006eb3 	.word	0x08006eb3
 8006e8c:	08006ec3 	.word	0x08006ec3
 8006e90:	08006ec3 	.word	0x08006ec3
 8006e94:	08006ec3 	.word	0x08006ec3
 8006e98:	08006ebb 	.word	0x08006ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9c:	f7fd f850 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 8006ea0:	61b8      	str	r0, [r7, #24]
        break;
 8006ea2:	e013      	b.n	8006ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fd f86e 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	61b8      	str	r0, [r7, #24]
        break;
 8006eaa:	e00f      	b.n	8006ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <UART_SetConfig+0x3a4>)
 8006eae:	61bb      	str	r3, [r7, #24]
        break;
 8006eb0:	e00c      	b.n	8006ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb2:	f7fc ffcf 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8006eb6:	61b8      	str	r0, [r7, #24]
        break;
 8006eb8:	e008      	b.n	8006ecc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ebe:	61bb      	str	r3, [r7, #24]
        break;
 8006ec0:	e004      	b.n	8006ecc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eca:	bf00      	nop
    }

    if (pclk != 0U)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d018      	beq.n	8006f04 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	085a      	lsrs	r2, r3, #1
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	441a      	add	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b0f      	cmp	r3, #15
 8006eea:	d909      	bls.n	8006f00 <UART_SetConfig+0x388>
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef2:	d205      	bcs.n	8006f00 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60da      	str	r2, [r3, #12]
 8006efe:	e001      	b.n	8006f04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f10:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	007a1200 	.word	0x007a1200

08006f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800701e:	d10a      	bne.n	8007036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b098      	sub	sp, #96	; 0x60
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007074:	f7fb fa16 	bl	80024a4 <HAL_GetTick>
 8007078:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d12e      	bne.n	80070e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f88c 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b6:	653b      	str	r3, [r7, #80]	; 0x50
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	647b      	str	r3, [r7, #68]	; 0x44
 80070c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e062      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d149      	bne.n	8007188 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f856 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03c      	beq.n	8007188 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	623b      	str	r3, [r7, #32]
   return(result);
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	633b      	str	r3, [r7, #48]	; 0x30
 800712e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e011      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3758      	adds	r7, #88	; 0x58
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	e049      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d045      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fb f969 	bl	80024a4 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e048      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d031      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b08      	cmp	r3, #8
 8007202:	d110      	bne.n	8007226 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2208      	movs	r2, #8
 800720a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f8ff 	bl	8007410 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2208      	movs	r2, #8
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e029      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d111      	bne.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f8e5 	bl	8007410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e00f      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	429a      	cmp	r2, r3
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d0a6      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007284:	b480      	push	{r7}
 8007286:	b097      	sub	sp, #92	; 0x5c
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b6:	d10e      	bne.n	80072d6 <UART_Start_Receive_IT+0x52>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d105      	bne.n	80072cc <UART_Start_Receive_IT+0x48>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ca:	e02d      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	22ff      	movs	r2, #255	; 0xff
 80072d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d4:	e028      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <UART_Start_Receive_IT+0x76>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <UART_Start_Receive_IT+0x6c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	22ff      	movs	r2, #255	; 0xff
 80072ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ee:	e01b      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	227f      	movs	r2, #127	; 0x7f
 80072f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f8:	e016      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007302:	d10d      	bne.n	8007320 <UART_Start_Receive_IT+0x9c>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <UART_Start_Receive_IT+0x92>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	227f      	movs	r2, #127	; 0x7f
 8007310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007314:	e008      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	223f      	movs	r2, #63	; 0x3f
 800731a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800731e:	e003      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2222      	movs	r2, #34	; 0x22
 8007334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	657b      	str	r3, [r7, #84]	; 0x54
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007358:	64ba      	str	r2, [r7, #72]	; 0x48
 800735a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800735e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d107      	bne.n	8007386 <UART_Start_Receive_IT+0x102>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a21      	ldr	r2, [pc, #132]	; (8007408 <UART_Start_Receive_IT+0x184>)
 8007382:	669a      	str	r2, [r3, #104]	; 0x68
 8007384:	e002      	b.n	800738c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a20      	ldr	r2, [pc, #128]	; (800740c <UART_Start_Receive_IT+0x188>)
 800738a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d019      	beq.n	80073c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80073a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
 80073b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_Start_Receive_IT+0x110>
 80073c6:	e018      	b.n	80073fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	653b      	str	r3, [r7, #80]	; 0x50
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	375c      	adds	r7, #92	; 0x5c
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	08007701 	.word	0x08007701
 800740c:	08007559 	.word	0x08007559

08007410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b095      	sub	sp, #84	; 0x54
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	643b      	str	r3, [r7, #64]	; 0x40
 8007438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	61fb      	str	r3, [r7, #28]
   return(result);
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	64bb      	str	r3, [r7, #72]	; 0x48
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007482:	2b01      	cmp	r3, #1
 8007484:	d118      	bne.n	80074b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	60bb      	str	r3, [r7, #8]
   return(result);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6979      	ldr	r1, [r7, #20]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	613b      	str	r3, [r7, #16]
   return(result);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074cc:	bf00      	nop
 80074ce:	3754      	adds	r7, #84	; 0x54
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fb28 	bl	8006b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	60bb      	str	r3, [r7, #8]
   return(result);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6979      	ldr	r1, [r7, #20]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	613b      	str	r3, [r7, #16]
   return(result);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff faf4 	bl	8006b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007550:	bf00      	nop
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b09c      	sub	sp, #112	; 0x70
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007566:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007570:	2b22      	cmp	r3, #34	; 0x22
 8007572:	f040 80b9 	bne.w	80076e8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800757c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007580:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007584:	b2d9      	uxtb	r1, r3
 8007586:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	400a      	ands	r2, r1
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 809c 	bne.w	80076f8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075de:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	667b      	str	r3, [r7, #100]	; 0x64
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007612:	647a      	str	r2, [r7, #68]	; 0x44
 8007614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d018      	beq.n	800767a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	623b      	str	r3, [r7, #32]
   return(result);
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800765c:	663b      	str	r3, [r7, #96]	; 0x60
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007666:	633b      	str	r3, [r7, #48]	; 0x30
 8007668:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	2b01      	cmp	r3, #1
 8007680:	d12e      	bne.n	80076e0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	60fb      	str	r3, [r7, #12]
   return(result);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f023 0310 	bic.w	r3, r3, #16
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	69b9      	ldr	r1, [r7, #24]
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	617b      	str	r3, [r7, #20]
   return(result);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e6      	bne.n	8007688 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d103      	bne.n	80076d0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2210      	movs	r2, #16
 80076ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff fa41 	bl	8006b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076de:	e00b      	b.n	80076f8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fa fa29 	bl	8001b38 <HAL_UART_RxCpltCallback>
}
 80076e6:	e007      	b.n	80076f8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0208 	orr.w	r2, r2, #8
 80076f6:	619a      	str	r2, [r3, #24]
}
 80076f8:	bf00      	nop
 80076fa:	3770      	adds	r7, #112	; 0x70
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b09c      	sub	sp, #112	; 0x70
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800770e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007718:	2b22      	cmp	r3, #34	; 0x22
 800771a:	f040 80b9 	bne.w	8007890 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007724:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800772e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007736:	4013      	ands	r3, r2
 8007738:	b29a      	uxth	r2, r3
 800773a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800773c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 809c 	bne.w	80078a0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800777c:	667b      	str	r3, [r7, #100]	; 0x64
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
 8007788:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800778c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	663b      	str	r3, [r7, #96]	; 0x60
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ba:	643a      	str	r2, [r7, #64]	; 0x40
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d018      	beq.n	8007822 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007810:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e6      	bne.n	80077f0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	2b01      	cmp	r3, #1
 8007828:	d12e      	bne.n	8007888 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	60bb      	str	r3, [r7, #8]
   return(result);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	65bb      	str	r3, [r7, #88]	; 0x58
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	613b      	str	r3, [r7, #16]
   return(result);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e6      	bne.n	8007830 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b10      	cmp	r3, #16
 800786e:	d103      	bne.n	8007878 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2210      	movs	r2, #16
 8007876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff f96d 	bl	8006b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007886:	e00b      	b.n	80078a0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fa f955 	bl	8001b38 <HAL_UART_RxCpltCallback>
}
 800788e:	e007      	b.n	80078a0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0208 	orr.w	r2, r2, #8
 800789e:	619a      	str	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	3770      	adds	r7, #112	; 0x70
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c2:	f3ef 8305 	mrs	r3, IPSR
 80078c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ce:	f3ef 8310 	mrs	r3, PRIMASK
 80078d2:	607b      	str	r3, [r7, #4]
  return(result);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <osKernelInitialize+0x32>
 80078da:	4b11      	ldr	r3, [pc, #68]	; (8007920 <osKernelInitialize+0x64>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d109      	bne.n	80078f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e2:	f3ef 8311 	mrs	r3, BASEPRI
 80078e6:	603b      	str	r3, [r7, #0]
  return(result);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80078ee:	f06f 0305 	mvn.w	r3, #5
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e00c      	b.n	8007910 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <osKernelInitialize+0x64>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80078fe:	4b08      	ldr	r3, [pc, #32]	; (8007920 <osKernelInitialize+0x64>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e002      	b.n	8007910 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	200004e4 	.word	0x200004e4

08007924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800792a:	f3ef 8305 	mrs	r3, IPSR
 800792e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007930:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10f      	bne.n	8007956 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007936:	f3ef 8310 	mrs	r3, PRIMASK
 800793a:	607b      	str	r3, [r7, #4]
  return(result);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d109      	bne.n	8007956 <osKernelStart+0x32>
 8007942:	4b11      	ldr	r3, [pc, #68]	; (8007988 <osKernelStart+0x64>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d109      	bne.n	800795e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800794a:	f3ef 8311 	mrs	r3, BASEPRI
 800794e:	603b      	str	r3, [r7, #0]
  return(result);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007956:	f06f 0305 	mvn.w	r3, #5
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e00e      	b.n	800797c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <osKernelStart+0x64>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d107      	bne.n	8007976 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007966:	4b08      	ldr	r3, [pc, #32]	; (8007988 <osKernelStart+0x64>)
 8007968:	2202      	movs	r2, #2
 800796a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800796c:	f001 f968 	bl	8008c40 <vTaskStartScheduler>
      stat = osOK;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e002      	b.n	800797c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800797c:	68fb      	ldr	r3, [r7, #12]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200004e4 	.word	0x200004e4

0800798c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b092      	sub	sp, #72	; 0x48
 8007990:	af04      	add	r7, sp, #16
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800799c:	f3ef 8305 	mrs	r3, IPSR
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 8094 	bne.w	8007ad2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079aa:	f3ef 8310 	mrs	r3, PRIMASK
 80079ae:	623b      	str	r3, [r7, #32]
  return(result);
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 808d 	bne.w	8007ad2 <osThreadNew+0x146>
 80079b8:	4b48      	ldr	r3, [pc, #288]	; (8007adc <osThreadNew+0x150>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d106      	bne.n	80079ce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079c0:	f3ef 8311 	mrs	r3, BASEPRI
 80079c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 8082 	bne.w	8007ad2 <osThreadNew+0x146>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d07e      	beq.n	8007ad2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80079d4:	2380      	movs	r3, #128	; 0x80
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80079d8:	2318      	movs	r3, #24
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80079dc:	2300      	movs	r3, #0
 80079de:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80079e0:	f107 031b 	add.w	r3, r7, #27
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d045      	beq.n	8007a7e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <osThreadNew+0x74>
        name = attr->name;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <osThreadNew+0x9a>
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	2b38      	cmp	r3, #56	; 0x38
 8007a18:	d805      	bhi.n	8007a26 <osThreadNew+0x9a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <osThreadNew+0x9e>
        return (NULL);
 8007a26:	2300      	movs	r3, #0
 8007a28:	e054      	b.n	8007ad4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	089b      	lsrs	r3, r3, #2
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <osThreadNew+0xd4>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	2bab      	cmp	r3, #171	; 0xab
 8007a48:	d90a      	bls.n	8007a60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <osThreadNew+0xd4>
        mem = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5e:	e010      	b.n	8007a82 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <osThreadNew+0xf6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d108      	bne.n	8007a82 <osThreadNew+0xf6>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <osThreadNew+0xf6>
          mem = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a7c:	e001      	b.n	8007a82 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d110      	bne.n	8007aaa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a90:	9202      	str	r2, [sp, #8]
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fe74 	bl	800878c <xTaskCreateStatic>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e013      	b.n	8007ad2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d110      	bne.n	8007ad2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 febe 	bl	8008844 <xTaskCreate>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d001      	beq.n	8007ad2 <osThreadNew+0x146>
          hTask = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ad2:	697b      	ldr	r3, [r7, #20]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3738      	adds	r7, #56	; 0x38
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200004e4 	.word	0x200004e4

08007ae0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae6:	f3ef 8305 	mrs	r3, IPSR
 8007aea:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aec:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10f      	bne.n	8007b12 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af2:	f3ef 8310 	mrs	r3, PRIMASK
 8007af6:	607b      	str	r3, [r7, #4]
  return(result);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <osThreadGetId+0x32>
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <osThreadGetId+0x48>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d108      	bne.n	8007b18 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b06:	f3ef 8311 	mrs	r3, BASEPRI
 8007b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <osThreadGetId+0x38>
    id = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	e002      	b.n	8007b1e <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8007b18:	f001 fcf8 	bl	800950c <xTaskGetCurrentTaskHandle>
 8007b1c:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	200004e4 	.word	0x200004e4

08007b2c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b38:	f3ef 8305 	mrs	r3, IPSR
 8007b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b3e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
 8007b48:	613b      	str	r3, [r7, #16]
  return(result);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <osThreadSuspend+0x38>
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <osThreadSuspend+0x64>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d109      	bne.n	8007b6c <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b58:	f3ef 8311 	mrs	r3, BASEPRI
 8007b5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007b64:	f06f 0305 	mvn.w	r3, #5
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	e00b      	b.n	8007b84 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007b72:	f06f 0303 	mvn.w	r3, #3
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	e004      	b.n	8007b84 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007b7e:	69b8      	ldr	r0, [r7, #24]
 8007b80:	f000 ffe8 	bl	8008b54 <vTaskSuspend>
  }

  return (stat);
 8007b84:	69fb      	ldr	r3, [r7, #28]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200004e4 	.word	0x200004e4

08007b94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b9c:	f3ef 8305 	mrs	r3, IPSR
 8007ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10f      	bne.n	8007bc8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <osDelay+0x34>
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <osDelay+0x58>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d109      	bne.n	8007bd0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <osDelay+0x3c>
    stat = osErrorISR;
 8007bc8:	f06f 0305 	mvn.w	r3, #5
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e007      	b.n	8007be0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 ff86 	bl	8008aec <vTaskDelay>
    }
  }

  return (stat);
 8007be0:	697b      	ldr	r3, [r7, #20]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200004e4 	.word	0x200004e4

08007bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a06      	ldr	r2, [pc, #24]	; (8007c20 <vApplicationGetIdleTaskMemory+0x30>)
 8007c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2280      	movs	r2, #128	; 0x80
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	200004e8 	.word	0x200004e8
 8007c20:	20000594 	.word	0x20000594

08007c24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a07      	ldr	r2, [pc, #28]	; (8007c50 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4a06      	ldr	r2, [pc, #24]	; (8007c54 <vApplicationGetTimerTaskMemory+0x30>)
 8007c3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000794 	.word	0x20000794
 8007c54:	20000840 	.word	0x20000840

08007c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f103 0208 	add.w	r2, r3, #8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f103 0208 	add.w	r2, r3, #8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f103 0208 	add.w	r2, r3, #8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d103      	bne.n	8007d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	e00c      	b.n	8007d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e002      	b.n	8007d28 <vListInsert+0x2e>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d2f6      	bcs.n	8007d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
}
 8007d60:	bf00      	nop
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6892      	ldr	r2, [r2, #8]
 8007d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6852      	ldr	r2, [r2, #4]
 8007d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d103      	bne.n	8007da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	1e5a      	subs	r2, r3, #1
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dea:	f002 f8bb 	bl	8009f64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	441a      	add	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d114      	bne.n	8007e6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01a      	beq.n	8007e7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3310      	adds	r3, #16
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 f995 	bl	800917c <xTaskRemoveFromEventList>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <xQueueGenericReset+0xcc>)
 8007e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	e009      	b.n	8007e7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3310      	adds	r3, #16
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fef2 	bl	8007c58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3324      	adds	r3, #36	; 0x24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff feed 	bl	8007c58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e7e:	f002 f8a1 	bl	8009fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e82:	2301      	movs	r3, #1
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08e      	sub	sp, #56	; 0x38
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <xQueueGenericCreateStatic+0x52>
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <xQueueGenericCreateStatic+0x56>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericCreateStatic+0x58>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	623b      	str	r3, [r7, #32]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <xQueueGenericCreateStatic+0x7e>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <xQueueGenericCreateStatic+0x82>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <xQueueGenericCreateStatic+0x84>
 8007f12:	2300      	movs	r3, #0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	61fb      	str	r3, [r7, #28]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f2e:	2350      	movs	r3, #80	; 0x50
 8007f30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b50      	cmp	r3, #80	; 0x50
 8007f36:	d00a      	beq.n	8007f4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	61bb      	str	r3, [r7, #24]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00d      	beq.n	8007f74 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f60:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f805 	bl	8007f7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3730      	adds	r7, #48	; 0x30
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e002      	b.n	8007fa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fac:	2101      	movs	r1, #1
 8007fae:	69b8      	ldr	r0, [r7, #24]
 8007fb0:	f7ff ff06 	bl	8007dc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08e      	sub	sp, #56	; 0x38
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueGenericSend+0x32>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <xQueueGenericSend+0x40>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <xQueueGenericSend+0x44>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <xQueueGenericSend+0x46>
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xQueueGenericSend+0x60>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d103      	bne.n	8008032 <xQueueGenericSend+0x6e>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <xQueueGenericSend+0x72>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueGenericSend+0x74>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericSend+0x8e>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008052:	f001 fa6b 	bl	800952c <xTaskGetSchedulerState>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <xQueueGenericSend+0x9e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <xQueueGenericSend+0xa2>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueGenericSend+0xa4>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueGenericSend+0xbe>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61fb      	str	r3, [r7, #28]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008082:	f001 ff6f 	bl	8009f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <xQueueGenericSend+0xd4>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d129      	bne.n	80080ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	f000 fa07 	bl	80084b0 <prvCopyDataToQueue>
 80080a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d010      	beq.n	80080ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	3324      	adds	r3, #36	; 0x24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f863 	bl	800917c <xTaskRemoveFromEventList>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d013      	beq.n	80080e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080bc:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <xQueueGenericSend+0x1f8>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	e00a      	b.n	80080e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080d4:	4b39      	ldr	r3, [pc, #228]	; (80081bc <xQueueGenericSend+0x1f8>)
 80080d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080e4:	f001 ff6e 	bl	8009fc4 <vPortExitCritical>
				return pdPASS;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e063      	b.n	80081b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080f2:	f001 ff67 	bl	8009fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e05c      	b.n	80081b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	4618      	mov	r0, r3
 8008106:	f001 f89d 	bl	8009244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800810a:	2301      	movs	r3, #1
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800810e:	f001 ff59 	bl	8009fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008112:	f000 fe05 	bl	8008d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008116:	f001 ff25 	bl	8009f64 <vPortEnterCritical>
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008120:	b25b      	sxtb	r3, r3
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d103      	bne.n	8008130 <xQueueGenericSend+0x16c>
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008136:	b25b      	sxtb	r3, r3
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d103      	bne.n	8008146 <xQueueGenericSend+0x182>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008146:	f001 ff3d 	bl	8009fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800814a:	1d3a      	adds	r2, r7, #4
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f001 f88c 	bl	8009270 <xTaskCheckForTimeOut>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d124      	bne.n	80081a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800815e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008160:	f000 fa9e 	bl	80086a0 <prvIsQueueFull>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d018      	beq.n	800819c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	3310      	adds	r3, #16
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	4611      	mov	r1, r2
 8008172:	4618      	mov	r0, r3
 8008174:	f000 ffb2 	bl	80090dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817a:	f000 fa29 	bl	80085d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800817e:	f000 fddd 	bl	8008d3c <xTaskResumeAll>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	f47f af7c 	bne.w	8008082 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <xQueueGenericSend+0x1f8>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	e772      	b.n	8008082 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800819c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800819e:	f000 fa17 	bl	80085d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081a2:	f000 fdcb 	bl	8008d3c <xTaskResumeAll>
 80081a6:	e76c      	b.n	8008082 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081aa:	f000 fa11 	bl	80085d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ae:	f000 fdc5 	bl	8008d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081b2:	2300      	movs	r3, #0
		}
	}
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3738      	adds	r7, #56	; 0x38
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08e      	sub	sp, #56	; 0x38
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <xQueueGenericSendFromISR+0x3c>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <xQueueGenericSendFromISR+0x40>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <xQueueGenericSendFromISR+0x42>
 8008200:	2300      	movs	r3, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	623b      	str	r3, [r7, #32]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d103      	bne.n	800822a <xQueueGenericSendFromISR+0x6a>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <xQueueGenericSendFromISR+0x6e>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueGenericSendFromISR+0x70>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61fb      	str	r3, [r7, #28]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800824a:	f001 ff6d 	bl	800a128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800824e:	f3ef 8211 	mrs	r2, BASEPRI
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	61ba      	str	r2, [r7, #24]
 8008264:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008266:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	429a      	cmp	r2, r3
 8008274:	d302      	bcc.n	800827c <xQueueGenericSendFromISR+0xbc>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d12c      	bne.n	80082d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828c:	f000 f910 	bl	80084b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008290:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d112      	bne.n	80082c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	3324      	adds	r3, #36	; 0x24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 ff68 	bl	800917c <xTaskRemoveFromEventList>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00e      	beq.n	80082d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e007      	b.n	80082d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	b25a      	sxtb	r2, r3
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082d0:	2301      	movs	r3, #1
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082d4:	e001      	b.n	80082da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3738      	adds	r7, #56	; 0x38
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08c      	sub	sp, #48	; 0x30
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <xQueueReceive+0x30>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	623b      	str	r3, [r7, #32]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <xQueueReceive+0x3e>
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <xQueueReceive+0x42>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <xQueueReceive+0x44>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <xQueueReceive+0x5e>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	61fb      	str	r3, [r7, #28]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834e:	f001 f8ed 	bl	800952c <xTaskGetSchedulerState>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <xQueueReceive+0x6e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueReceive+0x72>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueReceive+0x74>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <xQueueReceive+0x8e>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	61bb      	str	r3, [r7, #24]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800837e:	f001 fdf1 	bl	8009f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01f      	beq.n	80083ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008392:	f000 f8f7 	bl	8008584 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00f      	beq.n	80083c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	3310      	adds	r3, #16
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fee6 	bl	800917c <xTaskRemoveFromEventList>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083b6:	4b3d      	ldr	r3, [pc, #244]	; (80084ac <xQueueReceive+0x1bc>)
 80083b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083c6:	f001 fdfd 	bl	8009fc4 <vPortExitCritical>
				return pdPASS;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e069      	b.n	80084a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083d4:	f001 fdf6 	bl	8009fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083d8:	2300      	movs	r3, #0
 80083da:	e062      	b.n	80084a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083e2:	f107 0310 	add.w	r3, r7, #16
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ff2c 	bl	8009244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ec:	2301      	movs	r3, #1
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083f0:	f001 fde8 	bl	8009fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083f4:	f000 fc94 	bl	8008d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083f8:	f001 fdb4 	bl	8009f64 <vPortEnterCritical>
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008402:	b25b      	sxtb	r3, r3
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d103      	bne.n	8008412 <xQueueReceive+0x122>
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008418:	b25b      	sxtb	r3, r3
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d103      	bne.n	8008428 <xQueueReceive+0x138>
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008428:	f001 fdcc 	bl	8009fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800842c:	1d3a      	adds	r2, r7, #4
 800842e:	f107 0310 	add.w	r3, r7, #16
 8008432:	4611      	mov	r1, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f000 ff1b 	bl	8009270 <xTaskCheckForTimeOut>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d123      	bne.n	8008488 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008442:	f000 f917 	bl	8008674 <prvIsQueueEmpty>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d017      	beq.n	800847c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fe41 	bl	80090dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800845a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845c:	f000 f8b8 	bl	80085d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008460:	f000 fc6c 	bl	8008d3c <xTaskResumeAll>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d189      	bne.n	800837e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800846a:	4b10      	ldr	r3, [pc, #64]	; (80084ac <xQueueReceive+0x1bc>)
 800846c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	e780      	b.n	800837e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800847c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847e:	f000 f8a7 	bl	80085d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008482:	f000 fc5b 	bl	8008d3c <xTaskResumeAll>
 8008486:	e77a      	b.n	800837e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848a:	f000 f8a1 	bl	80085d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800848e:	f000 fc55 	bl	8008d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008494:	f000 f8ee 	bl	8008674 <prvIsQueueEmpty>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	f43f af6f 	beq.w	800837e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3730      	adds	r7, #48	; 0x30
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d14d      	bne.n	8008572 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f844 	bl	8009568 <xTaskPriorityDisinherit>
 80084e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	605a      	str	r2, [r3, #4]
 80084e8:	e043      	b.n	8008572 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d119      	bne.n	8008524 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6898      	ldr	r0, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	461a      	mov	r2, r3
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	f002 faf4 	bl	800aae8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	441a      	add	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	429a      	cmp	r2, r3
 8008518:	d32b      	bcc.n	8008572 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	609a      	str	r2, [r3, #8]
 8008522:	e026      	b.n	8008572 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68d8      	ldr	r0, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	461a      	mov	r2, r3
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	f002 fada 	bl	800aae8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	425b      	negs	r3, r3
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d207      	bcs.n	8008560 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008558:	425b      	negs	r3, r3
 800855a:	441a      	add	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d105      	bne.n	8008572 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	3b01      	subs	r3, #1
 8008570:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800857a:	697b      	ldr	r3, [r7, #20]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	d018      	beq.n	80085c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	441a      	add	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d303      	bcc.n	80085b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68d9      	ldr	r1, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	461a      	mov	r2, r3
 80085c2:	6838      	ldr	r0, [r7, #0]
 80085c4:	f002 fa90 	bl	800aae8 <memcpy>
	}
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085d8:	f001 fcc4 	bl	8009f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085e4:	e011      	b.n	800860a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d012      	beq.n	8008614 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3324      	adds	r3, #36	; 0x24
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fdc2 	bl	800917c <xTaskRemoveFromEventList>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085fe:	f000 fe99 	bl	8009334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	3b01      	subs	r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800860a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	dce9      	bgt.n	80085e6 <prvUnlockQueue+0x16>
 8008612:	e000      	b.n	8008616 <prvUnlockQueue+0x46>
					break;
 8008614:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	22ff      	movs	r2, #255	; 0xff
 800861a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800861e:	f001 fcd1 	bl	8009fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008622:	f001 fc9f 	bl	8009f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800862e:	e011      	b.n	8008654 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d012      	beq.n	800865e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3310      	adds	r3, #16
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fd9d 	bl	800917c <xTaskRemoveFromEventList>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008648:	f000 fe74 	bl	8009334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	3b01      	subs	r3, #1
 8008650:	b2db      	uxtb	r3, r3
 8008652:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dce9      	bgt.n	8008630 <prvUnlockQueue+0x60>
 800865c:	e000      	b.n	8008660 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800865e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	22ff      	movs	r2, #255	; 0xff
 8008664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008668:	f001 fcac 	bl	8009fc4 <vPortExitCritical>
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800867c:	f001 fc72 	bl	8009f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e001      	b.n	8008692 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008692:	f001 fc97 	bl	8009fc4 <vPortExitCritical>

	return xReturn;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086a8:	f001 fc5c 	bl	8009f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d102      	bne.n	80086be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e001      	b.n	80086c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086c2:	f001 fc7f 	bl	8009fc4 <vPortExitCritical>

	return xReturn;
 80086c6:	68fb      	ldr	r3, [r7, #12]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	e014      	b.n	800870a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086e0:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <vQueueAddToRegistry+0x50>)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086ec:	490c      	ldr	r1, [pc, #48]	; (8008720 <vQueueAddToRegistry+0x50>)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086f6:	4a0a      	ldr	r2, [pc, #40]	; (8008720 <vQueueAddToRegistry+0x50>)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	4413      	add	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008702:	e006      	b.n	8008712 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3301      	adds	r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b07      	cmp	r3, #7
 800870e:	d9e7      	bls.n	80086e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000c40 	.word	0x20000c40

08008724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008734:	f001 fc16 	bl	8009f64 <vPortEnterCritical>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800873e:	b25b      	sxtb	r3, r3
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008744:	d103      	bne.n	800874e <vQueueWaitForMessageRestricted+0x2a>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008754:	b25b      	sxtb	r3, r3
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875a:	d103      	bne.n	8008764 <vQueueWaitForMessageRestricted+0x40>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008764:	f001 fc2e 	bl	8009fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fcd3 	bl	8009124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800877e:	6978      	ldr	r0, [r7, #20]
 8008780:	f7ff ff26 	bl	80085d0 <prvUnlockQueue>
	}
 8008784:	bf00      	nop
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	; 0x38
 8008790:	af04      	add	r7, sp, #16
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61fb      	str	r3, [r7, #28]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087d2:	23ac      	movs	r3, #172	; 0xac
 80087d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2bac      	cmp	r3, #172	; 0xac
 80087da:	d00a      	beq.n	80087f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	61bb      	str	r3, [r7, #24]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01e      	beq.n	8008836 <xTaskCreateStatic+0xaa>
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01b      	beq.n	8008836 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008806:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	2202      	movs	r2, #2
 800880c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008810:	2300      	movs	r3, #0
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	9302      	str	r3, [sp, #8]
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f851 	bl	80088d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800882e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008830:	f000 f8ec 	bl	8008a0c <prvAddNewTaskToReadyList>
 8008834:	e001      	b.n	800883a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800883a:	697b      	ldr	r3, [r7, #20]
	}
 800883c:	4618      	mov	r0, r3
 800883e:	3728      	adds	r7, #40	; 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08c      	sub	sp, #48	; 0x30
 8008848:	af04      	add	r7, sp, #16
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008854:	88fb      	ldrh	r3, [r7, #6]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4618      	mov	r0, r3
 800885a:	f001 fca5 	bl	800a1a8 <pvPortMalloc>
 800885e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00e      	beq.n	8008884 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008866:	20ac      	movs	r0, #172	; 0xac
 8008868:	f001 fc9e 	bl	800a1a8 <pvPortMalloc>
 800886c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
 800887a:	e005      	b.n	8008888 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f001 fd57 	bl	800a330 <vPortFree>
 8008882:	e001      	b.n	8008888 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d017      	beq.n	80088be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f80f 	bl	80088d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088b2:	69f8      	ldr	r0, [r7, #28]
 80088b4:	f000 f8aa 	bl	8008a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088b8:	2301      	movs	r3, #1
 80088ba:	61bb      	str	r3, [r7, #24]
 80088bc:	e002      	b.n	80088c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
 80088c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088c4:	69bb      	ldr	r3, [r7, #24]
	}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	461a      	mov	r2, r3
 80088e8:	21a5      	movs	r1, #165	; 0xa5
 80088ea:	f002 f82d 	bl	800a948 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088f8:	3b01      	subs	r3, #1
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f023 0307 	bic.w	r3, r3, #7
 8008906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	617b      	str	r3, [r7, #20]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	e012      	b.n	8008954 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	7819      	ldrb	r1, [r3, #0]
 8008936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	3334      	adds	r3, #52	; 0x34
 800893e:	460a      	mov	r2, r1
 8008940:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4413      	add	r3, r2
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	3301      	adds	r3, #1
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	2b13      	cmp	r3, #19
 8008958:	d9e9      	bls.n	800892e <prvInitialiseNewTask+0x5e>
 800895a:	e000      	b.n	800895e <prvInitialiseNewTask+0x8e>
		{
			break;
 800895c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	2b37      	cmp	r3, #55	; 0x37
 800896a:	d901      	bls.n	8008970 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800896c:	2337      	movs	r3, #55	; 0x37
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2200      	movs	r2, #0
 8008980:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff f986 	bl	8007c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	3318      	adds	r3, #24
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff f981 	bl	8007c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	3358      	adds	r3, #88	; 0x58
 80089c0:	224c      	movs	r2, #76	; 0x4c
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 ffbf 	bl	800a948 <memset>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	4a0c      	ldr	r2, [pc, #48]	; (8008a00 <prvInitialiseNewTask+0x130>)
 80089ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <prvInitialiseNewTask+0x134>)
 80089d4:	661a      	str	r2, [r3, #96]	; 0x60
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <prvInitialiseNewTask+0x138>)
 80089da:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	69b8      	ldr	r0, [r7, #24]
 80089e2:	f001 f995 	bl	8009d10 <pxPortInitialiseStack>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089f8:	bf00      	nop
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20001ecc 	.word	0x20001ecc
 8008a04:	20001f34 	.word	0x20001f34
 8008a08:	20001f9c 	.word	0x20001f9c

08008a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a14:	f001 faa6 	bl	8009f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a18:	4b2d      	ldr	r3, [pc, #180]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4a2c      	ldr	r2, [pc, #176]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a22:	4b2c      	ldr	r3, [pc, #176]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a30:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <prvAddNewTaskToReadyList+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d110      	bne.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a38:	f000 fca0 	bl	800937c <prvInitialiseTaskLists>
 8008a3c:	e00d      	b.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a3e:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <prvAddNewTaskToReadyList+0xcc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a46:	4b23      	ldr	r3, [pc, #140]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d802      	bhi.n	8008a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a64:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <prvAddNewTaskToReadyList+0xd0>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <prvAddNewTaskToReadyList+0xd4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d903      	bls.n	8008a80 <prvAddNewTaskToReadyList+0x74>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <prvAddNewTaskToReadyList+0xd4>)
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4a15      	ldr	r2, [pc, #84]	; (8008ae4 <prvAddNewTaskToReadyList+0xd8>)
 8008a8e:	441a      	add	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f7ff f90b 	bl	8007cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a9c:	f001 fa92 	bl	8009fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <prvAddNewTaskToReadyList+0xcc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00e      	beq.n	8008ac6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvAddNewTaskToReadyList+0xc8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d207      	bcs.n	8008ac6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvAddNewTaskToReadyList+0xdc>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001154 	.word	0x20001154
 8008ad4:	20000c80 	.word	0x20000c80
 8008ad8:	20001160 	.word	0x20001160
 8008adc:	20001170 	.word	0x20001170
 8008ae0:	2000115c 	.word	0x2000115c
 8008ae4:	20000c84 	.word	0x20000c84
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d017      	beq.n	8008b2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <vTaskDelay+0x60>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <vTaskDelay+0x30>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b1c:	f000 f900 	bl	8008d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fd8e 	bl	8009644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b28:	f000 f908 	bl	8008d3c <xTaskResumeAll>
 8008b2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d107      	bne.n	8008b44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b34:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <vTaskDelay+0x64>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	2000117c 	.word	0x2000117c
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008b5c:	f001 fa02 	bl	8009f64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <vTaskSuspend+0x18>
 8008b66:	4b30      	ldr	r3, [pc, #192]	; (8008c28 <vTaskSuspend+0xd4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	e000      	b.n	8008b6e <vTaskSuspend+0x1a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff f8f9 	bl	8007d6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3318      	adds	r3, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff f8f0 	bl	8007d6c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4826      	ldr	r0, [pc, #152]	; (8008c2c <vTaskSuspend+0xd8>)
 8008b94:	f7ff f88d 	bl	8007cb2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d103      	bne.n	8008bac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008bac:	f001 fa0a 	bl	8009fc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008bb0:	4b1f      	ldr	r3, [pc, #124]	; (8008c30 <vTaskSuspend+0xdc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008bb8:	f001 f9d4 	bl	8009f64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008bbc:	f000 fc80 	bl	80094c0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008bc0:	f001 fa00 	bl	8009fc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008bc4:	4b18      	ldr	r3, [pc, #96]	; (8008c28 <vTaskSuspend+0xd4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d127      	bne.n	8008c1e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8008bce:	4b18      	ldr	r3, [pc, #96]	; (8008c30 <vTaskSuspend+0xdc>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d017      	beq.n	8008c06 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008bd6:	4b17      	ldr	r3, [pc, #92]	; (8008c34 <vTaskSuspend+0xe0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <vTaskSuspend+0xa0>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60bb      	str	r3, [r7, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008bf4:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <vTaskSuspend+0xe4>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c04:	e00b      	b.n	8008c1e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008c06:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <vTaskSuspend+0xd8>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vTaskSuspend+0xe8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d103      	bne.n	8008c1a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <vTaskSuspend+0xd4>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
	}
 8008c18:	e001      	b.n	8008c1e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008c1a:	f000 f9fb 	bl	8009014 <vTaskSwitchContext>
	}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000c80 	.word	0x20000c80
 8008c2c:	20001140 	.word	0x20001140
 8008c30:	20001160 	.word	0x20001160
 8008c34:	2000117c 	.word	0x2000117c
 8008c38:	e000ed04 	.word	0xe000ed04
 8008c3c:	20001154 	.word	0x20001154

08008c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	; 0x28
 8008c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c4e:	463a      	mov	r2, r7
 8008c50:	1d39      	adds	r1, r7, #4
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe ffca 	bl	8007bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	9202      	str	r2, [sp, #8]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	460a      	mov	r2, r1
 8008c6e:	4924      	ldr	r1, [pc, #144]	; (8008d00 <vTaskStartScheduler+0xc0>)
 8008c70:	4824      	ldr	r0, [pc, #144]	; (8008d04 <vTaskStartScheduler+0xc4>)
 8008c72:	f7ff fd8b 	bl	800878c <xTaskCreateStatic>
 8008c76:	4603      	mov	r3, r0
 8008c78:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <vTaskStartScheduler+0xc8>)
 8008c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c7c:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <vTaskStartScheduler+0xc8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e001      	b.n	8008c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d102      	bne.n	8008c9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c94:	f000 fd2a 	bl	80096ec <xTimerCreateTimerTask>
 8008c98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d11b      	bne.n	8008cd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	613b      	str	r3, [r7, #16]
}
 8008cb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <vTaskStartScheduler+0xcc>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3358      	adds	r3, #88	; 0x58
 8008cba:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <vTaskStartScheduler+0xd0>)
 8008cbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <vTaskStartScheduler+0xd4>)
 8008cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <vTaskStartScheduler+0xd8>)
 8008cc8:	2201      	movs	r2, #1
 8008cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ccc:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <vTaskStartScheduler+0xdc>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cd2:	f001 f8a5 	bl	8009e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cd6:	e00e      	b.n	8008cf6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d10a      	bne.n	8008cf6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	60fb      	str	r3, [r7, #12]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <vTaskStartScheduler+0xb4>
}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	0800b744 	.word	0x0800b744
 8008d04:	0800934d 	.word	0x0800934d
 8008d08:	20001178 	.word	0x20001178
 8008d0c:	20000c80 	.word	0x20000c80
 8008d10:	200000cc 	.word	0x200000cc
 8008d14:	20001174 	.word	0x20001174
 8008d18:	20001160 	.word	0x20001160
 8008d1c:	20001158 	.word	0x20001158

08008d20 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <vTaskSuspendAll+0x18>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a03      	ldr	r2, [pc, #12]	; (8008d38 <vTaskSuspendAll+0x18>)
 8008d2c:	6013      	str	r3, [r2, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	2000117c 	.word	0x2000117c

08008d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d4a:	4b42      	ldr	r3, [pc, #264]	; (8008e54 <xTaskResumeAll+0x118>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	603b      	str	r3, [r7, #0]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d68:	f001 f8fc 	bl	8009f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d6c:	4b39      	ldr	r3, [pc, #228]	; (8008e54 <xTaskResumeAll+0x118>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	4a38      	ldr	r2, [pc, #224]	; (8008e54 <xTaskResumeAll+0x118>)
 8008d74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d76:	4b37      	ldr	r3, [pc, #220]	; (8008e54 <xTaskResumeAll+0x118>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d162      	bne.n	8008e44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d7e:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <xTaskResumeAll+0x11c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d05e      	beq.n	8008e44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d86:	e02f      	b.n	8008de8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d88:	4b34      	ldr	r3, [pc, #208]	; (8008e5c <xTaskResumeAll+0x120>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3318      	adds	r3, #24
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe ffe9 	bl	8007d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe ffe4 	bl	8007d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4b2d      	ldr	r3, [pc, #180]	; (8008e60 <xTaskResumeAll+0x124>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d903      	bls.n	8008db8 <xTaskResumeAll+0x7c>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <xTaskResumeAll+0x124>)
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4a27      	ldr	r2, [pc, #156]	; (8008e64 <xTaskResumeAll+0x128>)
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe ff6f 	bl	8007cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd8:	4b23      	ldr	r3, [pc, #140]	; (8008e68 <xTaskResumeAll+0x12c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008de2:	4b22      	ldr	r3, [pc, #136]	; (8008e6c <xTaskResumeAll+0x130>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008de8:	4b1c      	ldr	r3, [pc, #112]	; (8008e5c <xTaskResumeAll+0x120>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1cb      	bne.n	8008d88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008df6:	f000 fb63 	bl	80094c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dfa:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <xTaskResumeAll+0x134>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d010      	beq.n	8008e28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e06:	f000 f847 	bl	8008e98 <xTaskIncrementTick>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e10:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <xTaskResumeAll+0x130>)
 8008e12:	2201      	movs	r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1f1      	bne.n	8008e06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <xTaskResumeAll+0x134>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <xTaskResumeAll+0x130>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <xTaskResumeAll+0x138>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e44:	f001 f8be 	bl	8009fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008e48:	68bb      	ldr	r3, [r7, #8]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	2000117c 	.word	0x2000117c
 8008e58:	20001154 	.word	0x20001154
 8008e5c:	20001114 	.word	0x20001114
 8008e60:	2000115c 	.word	0x2000115c
 8008e64:	20000c84 	.word	0x20000c84
 8008e68:	20000c80 	.word	0x20000c80
 8008e6c:	20001168 	.word	0x20001168
 8008e70:	20001164 	.word	0x20001164
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <xTaskGetTickCount+0x1c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e84:	687b      	ldr	r3, [r7, #4]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20001158 	.word	0x20001158

08008e98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea2:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <xTaskIncrementTick+0x150>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 808e 	bne.w	8008fc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eac:	4b4f      	ldr	r3, [pc, #316]	; (8008fec <xTaskIncrementTick+0x154>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008eb4:	4a4d      	ldr	r2, [pc, #308]	; (8008fec <xTaskIncrementTick+0x154>)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d120      	bne.n	8008f02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ec0:	4b4b      	ldr	r3, [pc, #300]	; (8008ff0 <xTaskIncrementTick+0x158>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	603b      	str	r3, [r7, #0]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <xTaskIncrementTick+0x46>
 8008ee0:	4b43      	ldr	r3, [pc, #268]	; (8008ff0 <xTaskIncrementTick+0x158>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	4b43      	ldr	r3, [pc, #268]	; (8008ff4 <xTaskIncrementTick+0x15c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a41      	ldr	r2, [pc, #260]	; (8008ff0 <xTaskIncrementTick+0x158>)
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	4a41      	ldr	r2, [pc, #260]	; (8008ff4 <xTaskIncrementTick+0x15c>)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	4b40      	ldr	r3, [pc, #256]	; (8008ff8 <xTaskIncrementTick+0x160>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <xTaskIncrementTick+0x160>)
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	f000 fadf 	bl	80094c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f02:	4b3e      	ldr	r3, [pc, #248]	; (8008ffc <xTaskIncrementTick+0x164>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d34e      	bcc.n	8008faa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f0c:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <xTaskIncrementTick+0x158>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <xTaskIncrementTick+0x82>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <xTaskIncrementTick+0x84>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f20:	4b36      	ldr	r3, [pc, #216]	; (8008ffc <xTaskIncrementTick+0x164>)
 8008f22:	f04f 32ff 	mov.w	r2, #4294967295
 8008f26:	601a      	str	r2, [r3, #0]
					break;
 8008f28:	e03f      	b.n	8008faa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f2a:	4b31      	ldr	r3, [pc, #196]	; (8008ff0 <xTaskIncrementTick+0x158>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d203      	bcs.n	8008f4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f42:	4a2e      	ldr	r2, [pc, #184]	; (8008ffc <xTaskIncrementTick+0x164>)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6013      	str	r3, [r2, #0]
						break;
 8008f48:	e02f      	b.n	8008faa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe ff0c 	bl	8007d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3318      	adds	r3, #24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe ff03 	bl	8007d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6a:	4b25      	ldr	r3, [pc, #148]	; (8009000 <xTaskIncrementTick+0x168>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d903      	bls.n	8008f7a <xTaskIncrementTick+0xe2>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a22      	ldr	r2, [pc, #136]	; (8009000 <xTaskIncrementTick+0x168>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4a1f      	ldr	r2, [pc, #124]	; (8009004 <xTaskIncrementTick+0x16c>)
 8008f88:	441a      	add	r2, r3
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fe fe8e 	bl	8007cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <xTaskIncrementTick+0x170>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3b3      	bcc.n	8008f0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa8:	e7b0      	b.n	8008f0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008faa:	4b17      	ldr	r3, [pc, #92]	; (8009008 <xTaskIncrementTick+0x170>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4914      	ldr	r1, [pc, #80]	; (8009004 <xTaskIncrementTick+0x16c>)
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d907      	bls.n	8008fd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e004      	b.n	8008fd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008fc8:	4b10      	ldr	r3, [pc, #64]	; (800900c <xTaskIncrementTick+0x174>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	4a0f      	ldr	r2, [pc, #60]	; (800900c <xTaskIncrementTick+0x174>)
 8008fd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <xTaskIncrementTick+0x178>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008fde:	697b      	ldr	r3, [r7, #20]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	2000117c 	.word	0x2000117c
 8008fec:	20001158 	.word	0x20001158
 8008ff0:	2000110c 	.word	0x2000110c
 8008ff4:	20001110 	.word	0x20001110
 8008ff8:	2000116c 	.word	0x2000116c
 8008ffc:	20001174 	.word	0x20001174
 8009000:	2000115c 	.word	0x2000115c
 8009004:	20000c84 	.word	0x20000c84
 8009008:	20000c80 	.word	0x20000c80
 800900c:	20001164 	.word	0x20001164
 8009010:	20001168 	.word	0x20001168

08009014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800901a:	4b2a      	ldr	r3, [pc, #168]	; (80090c4 <vTaskSwitchContext+0xb0>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009022:	4b29      	ldr	r3, [pc, #164]	; (80090c8 <vTaskSwitchContext+0xb4>)
 8009024:	2201      	movs	r2, #1
 8009026:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009028:	e046      	b.n	80090b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800902a:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <vTaskSwitchContext+0xb4>)
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009030:	4b26      	ldr	r3, [pc, #152]	; (80090cc <vTaskSwitchContext+0xb8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	e010      	b.n	800905a <vTaskSwitchContext+0x46>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <vTaskSwitchContext+0x40>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	607b      	str	r3, [r7, #4]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <vTaskSwitchContext+0x3e>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3b01      	subs	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	491d      	ldr	r1, [pc, #116]	; (80090d0 <vTaskSwitchContext+0xbc>)
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0e4      	beq.n	8009038 <vTaskSwitchContext+0x24>
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4a15      	ldr	r2, [pc, #84]	; (80090d0 <vTaskSwitchContext+0xbc>)
 800907a:	4413      	add	r3, r2
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3308      	adds	r3, #8
 8009090:	429a      	cmp	r2, r3
 8009092:	d104      	bne.n	800909e <vTaskSwitchContext+0x8a>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	605a      	str	r2, [r3, #4]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	4a0b      	ldr	r2, [pc, #44]	; (80090d4 <vTaskSwitchContext+0xc0>)
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <vTaskSwitchContext+0xb8>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <vTaskSwitchContext+0xc0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3358      	adds	r3, #88	; 0x58
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <vTaskSwitchContext+0xc4>)
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	2000117c 	.word	0x2000117c
 80090c8:	20001168 	.word	0x20001168
 80090cc:	2000115c 	.word	0x2000115c
 80090d0:	20000c84 	.word	0x20000c84
 80090d4:	20000c80 	.word	0x20000c80
 80090d8:	200000cc 	.word	0x200000cc

080090dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <vTaskPlaceOnEventList+0x44>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3318      	adds	r3, #24
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fe fdf5 	bl	8007cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009110:	2101      	movs	r1, #1
 8009112:	6838      	ldr	r0, [r7, #0]
 8009114:	f000 fa96 	bl	8009644 <prvAddCurrentTaskToDelayedList>
}
 8009118:	bf00      	nop
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20000c80 	.word	0x20000c80

08009124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	617b      	str	r3, [r7, #20]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <vTaskPlaceOnEventListRestricted+0x54>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3318      	adds	r3, #24
 8009152:	4619      	mov	r1, r3
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7fe fdac 	bl	8007cb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009160:	f04f 33ff 	mov.w	r3, #4294967295
 8009164:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	68b8      	ldr	r0, [r7, #8]
 800916a:	f000 fa6b 	bl	8009644 <prvAddCurrentTaskToDelayedList>
	}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000c80 	.word	0x20000c80

0800917c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	e7fe      	b.n	80091a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3318      	adds	r3, #24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe fddd 	bl	8007d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b2:	4b1e      	ldr	r3, [pc, #120]	; (800922c <xTaskRemoveFromEventList+0xb0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d11d      	bne.n	80091f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fdd4 	bl	8007d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <xTaskRemoveFromEventList+0xb4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d903      	bls.n	80091d8 <xTaskRemoveFromEventList+0x5c>
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a16      	ldr	r2, [pc, #88]	; (8009230 <xTaskRemoveFromEventList+0xb4>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4a13      	ldr	r2, [pc, #76]	; (8009234 <xTaskRemoveFromEventList+0xb8>)
 80091e6:	441a      	add	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fe fd5f 	bl	8007cb2 <vListInsertEnd>
 80091f4:	e005      	b.n	8009202 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3318      	adds	r3, #24
 80091fa:	4619      	mov	r1, r3
 80091fc:	480e      	ldr	r0, [pc, #56]	; (8009238 <xTaskRemoveFromEventList+0xbc>)
 80091fe:	f7fe fd58 	bl	8007cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	4b0d      	ldr	r3, [pc, #52]	; (800923c <xTaskRemoveFromEventList+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	429a      	cmp	r2, r3
 800920e:	d905      	bls.n	800921c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009214:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <xTaskRemoveFromEventList+0xc4>)
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e001      	b.n	8009220 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009220:	697b      	ldr	r3, [r7, #20]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	2000117c 	.word	0x2000117c
 8009230:	2000115c 	.word	0x2000115c
 8009234:	20000c84 	.word	0x20000c84
 8009238:	20001114 	.word	0x20001114
 800923c:	20000c80 	.word	0x20000c80
 8009240:	20001168 	.word	0x20001168

08009244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <vTaskInternalSetTimeOutState+0x24>)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <vTaskInternalSetTimeOutState+0x28>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	2000116c 	.word	0x2000116c
 800926c:	20001158 	.word	0x20001158

08009270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	613b      	str	r3, [r7, #16]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092b2:	f000 fe57 	bl	8009f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092b6:	4b1d      	ldr	r3, [pc, #116]	; (800932c <xTaskCheckForTimeOut+0xbc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d102      	bne.n	80092d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e023      	b.n	800931e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <xTaskCheckForTimeOut+0xc0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d007      	beq.n	80092f2 <xTaskCheckForTimeOut+0x82>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d302      	bcc.n	80092f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e015      	b.n	800931e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d20b      	bcs.n	8009314 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff ff9b 	bl	8009244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e004      	b.n	800931e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800931e:	f000 fe51 	bl	8009fc4 <vPortExitCritical>

	return xReturn;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20001158 	.word	0x20001158
 8009330:	2000116c 	.word	0x2000116c

08009334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009338:	4b03      	ldr	r3, [pc, #12]	; (8009348 <vTaskMissedYield+0x14>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
}
 800933e:	bf00      	nop
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	20001168 	.word	0x20001168

0800934c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009354:	f000 f852 	bl	80093fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <prvIdleTask+0x28>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d9f9      	bls.n	8009354 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009360:	4b05      	ldr	r3, [pc, #20]	; (8009378 <prvIdleTask+0x2c>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009370:	e7f0      	b.n	8009354 <prvIdleTask+0x8>
 8009372:	bf00      	nop
 8009374:	20000c84 	.word	0x20000c84
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009382:	2300      	movs	r3, #0
 8009384:	607b      	str	r3, [r7, #4]
 8009386:	e00c      	b.n	80093a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a12      	ldr	r2, [pc, #72]	; (80093dc <prvInitialiseTaskLists+0x60>)
 8009394:	4413      	add	r3, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fc5e 	bl	8007c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3301      	adds	r3, #1
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b37      	cmp	r3, #55	; 0x37
 80093a6:	d9ef      	bls.n	8009388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093a8:	480d      	ldr	r0, [pc, #52]	; (80093e0 <prvInitialiseTaskLists+0x64>)
 80093aa:	f7fe fc55 	bl	8007c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093ae:	480d      	ldr	r0, [pc, #52]	; (80093e4 <prvInitialiseTaskLists+0x68>)
 80093b0:	f7fe fc52 	bl	8007c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093b4:	480c      	ldr	r0, [pc, #48]	; (80093e8 <prvInitialiseTaskLists+0x6c>)
 80093b6:	f7fe fc4f 	bl	8007c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ba:	480c      	ldr	r0, [pc, #48]	; (80093ec <prvInitialiseTaskLists+0x70>)
 80093bc:	f7fe fc4c 	bl	8007c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093c0:	480b      	ldr	r0, [pc, #44]	; (80093f0 <prvInitialiseTaskLists+0x74>)
 80093c2:	f7fe fc49 	bl	8007c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093c6:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <prvInitialiseTaskLists+0x78>)
 80093c8:	4a05      	ldr	r2, [pc, #20]	; (80093e0 <prvInitialiseTaskLists+0x64>)
 80093ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <prvInitialiseTaskLists+0x7c>)
 80093ce:	4a05      	ldr	r2, [pc, #20]	; (80093e4 <prvInitialiseTaskLists+0x68>)
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000c84 	.word	0x20000c84
 80093e0:	200010e4 	.word	0x200010e4
 80093e4:	200010f8 	.word	0x200010f8
 80093e8:	20001114 	.word	0x20001114
 80093ec:	20001128 	.word	0x20001128
 80093f0:	20001140 	.word	0x20001140
 80093f4:	2000110c 	.word	0x2000110c
 80093f8:	20001110 	.word	0x20001110

080093fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009402:	e019      	b.n	8009438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009404:	f000 fdae 	bl	8009f64 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009408:	4b10      	ldr	r3, [pc, #64]	; (800944c <prvCheckTasksWaitingTermination+0x50>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fca9 	bl	8007d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <prvCheckTasksWaitingTermination+0x54>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3b01      	subs	r3, #1
 8009420:	4a0b      	ldr	r2, [pc, #44]	; (8009450 <prvCheckTasksWaitingTermination+0x54>)
 8009422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009424:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3b01      	subs	r3, #1
 800942a:	4a0a      	ldr	r2, [pc, #40]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 800942c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800942e:	f000 fdc9 	bl	8009fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f810 	bl	8009458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e1      	bne.n	8009404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20001128 	.word	0x20001128
 8009450:	20001154 	.word	0x20001154
 8009454:	2000113c 	.word	0x2000113c

08009458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3358      	adds	r3, #88	; 0x58
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fa87 	bl	800a978 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009470:	2b00      	cmp	r3, #0
 8009472:	d108      	bne.n	8009486 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	4618      	mov	r0, r3
 800947a:	f000 ff59 	bl	800a330 <vPortFree>
				vPortFree( pxTCB );
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 ff56 	bl	800a330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009484:	e018      	b.n	80094b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800948c:	2b01      	cmp	r3, #1
 800948e:	d103      	bne.n	8009498 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 ff4d 	bl	800a330 <vPortFree>
	}
 8009496:	e00f      	b.n	80094b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d00a      	beq.n	80094b8 <prvDeleteTCB+0x60>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	60fb      	str	r3, [r7, #12]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <prvDeleteTCB+0x5e>
	}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <prvResetNextTaskUnblockTime+0x44>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <prvResetNextTaskUnblockTime+0x14>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <prvResetNextTaskUnblockTime+0x16>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d004      	beq.n	80094e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094da:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <prvResetNextTaskUnblockTime+0x48>)
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094e2:	e008      	b.n	80094f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80094e4:	4b07      	ldr	r3, [pc, #28]	; (8009504 <prvResetNextTaskUnblockTime+0x44>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4a05      	ldr	r2, [pc, #20]	; (8009508 <prvResetNextTaskUnblockTime+0x48>)
 80094f4:	6013      	str	r3, [r2, #0]
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	2000110c 	.word	0x2000110c
 8009508:	20001174 	.word	0x20001174

0800950c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <xTaskGetCurrentTaskHandle+0x1c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009518:	687b      	ldr	r3, [r7, #4]
	}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	20000c80 	.word	0x20000c80

0800952c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <xTaskGetSchedulerState+0x34>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800953a:	2301      	movs	r3, #1
 800953c:	607b      	str	r3, [r7, #4]
 800953e:	e008      	b.n	8009552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <xTaskGetSchedulerState+0x38>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009548:	2302      	movs	r3, #2
 800954a:	607b      	str	r3, [r7, #4]
 800954c:	e001      	b.n	8009552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800954e:	2300      	movs	r3, #0
 8009550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009552:	687b      	ldr	r3, [r7, #4]
	}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	20001160 	.word	0x20001160
 8009564:	2000117c 	.word	0x2000117c

08009568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d056      	beq.n	800962c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800957e:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <xTaskPriorityDisinherit+0xd0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	d00a      	beq.n	800959e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	60bb      	str	r3, [r7, #8]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d02c      	beq.n	800962c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d128      	bne.n	800962c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	3304      	adds	r3, #4
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fbc4 	bl	8007d6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <xTaskPriorityDisinherit+0xd4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskPriorityDisinherit+0xa4>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <xTaskPriorityDisinherit+0xd4>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a09      	ldr	r2, [pc, #36]	; (8009640 <xTaskPriorityDisinherit+0xd8>)
 800961a:	441a      	add	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe fb45 	bl	8007cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800962c:	697b      	ldr	r3, [r7, #20]
	}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000c80 	.word	0x20000c80
 800963c:	2000115c 	.word	0x2000115c
 8009640:	20000c84 	.word	0x20000c84

08009644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800964e:	4b21      	ldr	r3, [pc, #132]	; (80096d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009654:	4b20      	ldr	r3, [pc, #128]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3304      	adds	r3, #4
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fb86 	bl	8007d6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d10a      	bne.n	800967e <prvAddCurrentTaskToDelayedList+0x3a>
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966e:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4819      	ldr	r0, [pc, #100]	; (80096dc <prvAddCurrentTaskToDelayedList+0x98>)
 8009678:	f7fe fb1b 	bl	8007cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800967c:	e026      	b.n	80096cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4413      	add	r3, r2
 8009684:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	429a      	cmp	r2, r3
 8009694:	d209      	bcs.n	80096aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f7fe fb29 	bl	8007cfa <vListInsert>
}
 80096a8:	e010      	b.n	80096cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096aa:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fe fb1f 	bl	8007cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d202      	bcs.n	80096cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096c6:	4a08      	ldr	r2, [pc, #32]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6013      	str	r3, [r2, #0]
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20001158 	.word	0x20001158
 80096d8:	20000c80 	.word	0x20000c80
 80096dc:	20001140 	.word	0x20001140
 80096e0:	20001110 	.word	0x20001110
 80096e4:	2000110c 	.word	0x2000110c
 80096e8:	20001174 	.word	0x20001174

080096ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08a      	sub	sp, #40	; 0x28
 80096f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096f6:	f000 facb 	bl	8009c90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <xTimerCreateTimerTask+0x80>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d021      	beq.n	8009746 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800970a:	1d3a      	adds	r2, r7, #4
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	f107 030c 	add.w	r3, r7, #12
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fa85 	bl	8007c24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	9202      	str	r2, [sp, #8]
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	2302      	movs	r3, #2
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	2300      	movs	r3, #0
 800972a:	460a      	mov	r2, r1
 800972c:	4910      	ldr	r1, [pc, #64]	; (8009770 <xTimerCreateTimerTask+0x84>)
 800972e:	4811      	ldr	r0, [pc, #68]	; (8009774 <xTimerCreateTimerTask+0x88>)
 8009730:	f7ff f82c 	bl	800878c <xTaskCreateStatic>
 8009734:	4603      	mov	r3, r0
 8009736:	4a10      	ldr	r2, [pc, #64]	; (8009778 <xTimerCreateTimerTask+0x8c>)
 8009738:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <xTimerCreateTimerTask+0x8c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009742:	2301      	movs	r3, #1
 8009744:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	613b      	str	r3, [r7, #16]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009762:	697b      	ldr	r3, [r7, #20]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200011b0 	.word	0x200011b0
 8009770:	0800b74c 	.word	0x0800b74c
 8009774:	08009899 	.word	0x08009899
 8009778:	200011b4 	.word	0x200011b4

0800977c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	; 0x28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	623b      	str	r3, [r7, #32]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097aa:	4b1a      	ldr	r3, [pc, #104]	; (8009814 <xTimerGenericCommand+0x98>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d02a      	beq.n	8009808 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b05      	cmp	r3, #5
 80097c2:	dc18      	bgt.n	80097f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097c4:	f7ff feb2 	bl	800952c <xTaskGetSchedulerState>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d109      	bne.n	80097e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097ce:	4b11      	ldr	r3, [pc, #68]	; (8009814 <xTimerGenericCommand+0x98>)
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f107 0110 	add.w	r1, r7, #16
 80097d6:	2300      	movs	r3, #0
 80097d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097da:	f7fe fbf3 	bl	8007fc4 <xQueueGenericSend>
 80097de:	6278      	str	r0, [r7, #36]	; 0x24
 80097e0:	e012      	b.n	8009808 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097e2:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <xTimerGenericCommand+0x98>)
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f107 0110 	add.w	r1, r7, #16
 80097ea:	2300      	movs	r3, #0
 80097ec:	2200      	movs	r2, #0
 80097ee:	f7fe fbe9 	bl	8007fc4 <xQueueGenericSend>
 80097f2:	6278      	str	r0, [r7, #36]	; 0x24
 80097f4:	e008      	b.n	8009808 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <xTimerGenericCommand+0x98>)
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	f107 0110 	add.w	r1, r7, #16
 80097fe:	2300      	movs	r3, #0
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	f7fe fcdd 	bl	80081c0 <xQueueGenericSendFromISR>
 8009806:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800980a:	4618      	mov	r0, r3
 800980c:	3728      	adds	r7, #40	; 0x28
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	200011b0 	.word	0x200011b0

08009818 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009822:	4b1c      	ldr	r3, [pc, #112]	; (8009894 <prvProcessExpiredTimer+0x7c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	3304      	adds	r3, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fa9b 	bl	8007d6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d122      	bne.n	8009884 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	699a      	ldr	r2, [r3, #24]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	18d1      	adds	r1, r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	6978      	ldr	r0, [r7, #20]
 800984c:	f000 f8c8 	bl	80099e0 <prvInsertTimerInActiveList>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d016      	beq.n	8009884 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009856:	2300      	movs	r3, #0
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	2100      	movs	r1, #0
 8009860:	6978      	ldr	r0, [r7, #20]
 8009862:	f7ff ff8b 	bl	800977c <xTimerGenericCommand>
 8009866:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	4798      	blx	r3
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	200011a8 	.word	0x200011a8

08009898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 f857 	bl	8009958 <prvGetNextExpireTime>
 80098aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4619      	mov	r1, r3
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 f803 	bl	80098bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098b6:	f000 f8d5 	bl	8009a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098ba:	e7f1      	b.n	80098a0 <prvTimerTask+0x8>

080098bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098c6:	f7ff fa2b 	bl	8008d20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ca:	f107 0308 	add.w	r3, r7, #8
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f866 	bl	80099a0 <prvSampleTimeNow>
 80098d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d130      	bne.n	800993e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <prvProcessTimerOrBlockTask+0x3c>
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d806      	bhi.n	80098f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098ea:	f7ff fa27 	bl	8008d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff ff91 	bl	8009818 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098f6:	e024      	b.n	8009942 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <prvProcessTimerOrBlockTask+0x90>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf0c      	ite	eq
 8009908:	2301      	moveq	r3, #1
 800990a:	2300      	movne	r3, #0
 800990c:	b2db      	uxtb	r3, r3
 800990e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <prvProcessTimerOrBlockTask+0x94>)
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	4619      	mov	r1, r3
 800991e:	f7fe ff01 	bl	8008724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009922:	f7ff fa0b 	bl	8008d3c <xTaskResumeAll>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <prvProcessTimerOrBlockTask+0x98>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
}
 800993c:	e001      	b.n	8009942 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800993e:	f7ff f9fd 	bl	8008d3c <xTaskResumeAll>
}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200011ac 	.word	0x200011ac
 8009950:	200011b0 	.word	0x200011b0
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009960:	4b0e      	ldr	r3, [pc, #56]	; (800999c <prvGetNextExpireTime+0x44>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bf0c      	ite	eq
 800996a:	2301      	moveq	r3, #1
 800996c:	2300      	movne	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800997e:	4b07      	ldr	r3, [pc, #28]	; (800999c <prvGetNextExpireTime+0x44>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	e001      	b.n	800998e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800998e:	68fb      	ldr	r3, [r7, #12]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	200011a8 	.word	0x200011a8

080099a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099a8:	f7ff fa66 	bl	8008e78 <xTaskGetTickCount>
 80099ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <prvSampleTimeNow+0x3c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d205      	bcs.n	80099c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099b8:	f000 f908 	bl	8009bcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e002      	b.n	80099ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099ca:	4a04      	ldr	r2, [pc, #16]	; (80099dc <prvSampleTimeNow+0x3c>)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099d0:	68fb      	ldr	r3, [r7, #12]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200011b8 	.word	0x200011b8

080099e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d812      	bhi.n	8009a2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d302      	bcc.n	8009a1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a14:	2301      	movs	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	e01b      	b.n	8009a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a1a:	4b10      	ldr	r3, [pc, #64]	; (8009a5c <prvInsertTimerInActiveList+0x7c>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7fe f968 	bl	8007cfa <vListInsert>
 8009a2a:	e012      	b.n	8009a52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d206      	bcs.n	8009a42 <prvInsertTimerInActiveList+0x62>
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d302      	bcc.n	8009a42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e007      	b.n	8009a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a42:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <prvInsertTimerInActiveList+0x80>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f7fe f954 	bl	8007cfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a52:	697b      	ldr	r3, [r7, #20]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	200011ac 	.word	0x200011ac
 8009a60:	200011a8 	.word	0x200011a8

08009a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	; 0x38
 8009a68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a6a:	e09d      	b.n	8009ba8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da18      	bge.n	8009aa4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a72:	1d3b      	adds	r3, r7, #4
 8009a74:	3304      	adds	r3, #4
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	61fb      	str	r3, [r7, #28]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a9a:	6850      	ldr	r0, [r2, #4]
 8009a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a9e:	6892      	ldr	r2, [r2, #8]
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	db7e      	blt.n	8009ba8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe f956 	bl	8007d6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ac0:	463b      	mov	r3, r7
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff ff6c 	bl	80099a0 <prvSampleTimeNow>
 8009ac8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b09      	cmp	r3, #9
 8009ace:	d86a      	bhi.n	8009ba6 <prvProcessReceivedCommands+0x142>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <prvProcessReceivedCommands+0x74>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b01 	.word	0x08009b01
 8009ae4:	08009ba9 	.word	0x08009ba9
 8009ae8:	08009b5d 	.word	0x08009b5d
 8009aec:	08009b95 	.word	0x08009b95
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b01 	.word	0x08009b01
 8009af8:	08009ba9 	.word	0x08009ba9
 8009afc:	08009b5d 	.word	0x08009b5d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	18d1      	adds	r1, r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0e:	f7ff ff67 	bl	80099e0 <prvInsertTimerInActiveList>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d047      	beq.n	8009ba8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d13f      	bne.n	8009ba8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	441a      	add	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	2100      	movs	r1, #0
 8009b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3a:	f7ff fe1f 	bl	800977c <xTimerGenericCommand>
 8009b3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d130      	bne.n	8009ba8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	61bb      	str	r3, [r7, #24]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10a      	bne.n	8009b80 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	617b      	str	r3, [r7, #20]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	18d1      	adds	r1, r2, r3
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b8e:	f7ff ff27 	bl	80099e0 <prvInsertTimerInActiveList>
					break;
 8009b92:	e009      	b.n	8009ba8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f000 fbc6 	bl	800a330 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ba4:	e000      	b.n	8009ba8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8009ba6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <prvProcessReceivedCommands+0x164>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	1d39      	adds	r1, r7, #4
 8009bae:	2200      	movs	r2, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fb9d 	bl	80082f0 <xQueueReceive>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f47f af57 	bne.w	8009a6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	3730      	adds	r7, #48	; 0x30
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200011b0 	.word	0x200011b0

08009bcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bd2:	e045      	b.n	8009c60 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd4:	4b2c      	ldr	r3, [pc, #176]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bde:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3304      	adds	r3, #4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe f8bd 	bl	8007d6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d12e      	bne.n	8009c60 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d90e      	bls.n	8009c32 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c20:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fe f865 	bl	8007cfa <vListInsert>
 8009c30:	e016      	b.n	8009c60 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c32:	2300      	movs	r3, #0
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2300      	movs	r3, #0
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f7ff fd9d 	bl	800977c <xTimerGenericCommand>
 8009c42:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	603b      	str	r3, [r7, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1b4      	bne.n	8009bd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c70:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <prvSwitchTimerLists+0xc0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a04      	ldr	r2, [pc, #16]	; (8009c88 <prvSwitchTimerLists+0xbc>)
 8009c76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c78:	4a04      	ldr	r2, [pc, #16]	; (8009c8c <prvSwitchTimerLists+0xc0>)
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	6013      	str	r3, [r2, #0]
}
 8009c7e:	bf00      	nop
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200011a8 	.word	0x200011a8
 8009c8c:	200011ac 	.word	0x200011ac

08009c90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c96:	f000 f965 	bl	8009f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c9a:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <prvCheckForValidListAndQueue+0x60>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d120      	bne.n	8009ce4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ca2:	4814      	ldr	r0, [pc, #80]	; (8009cf4 <prvCheckForValidListAndQueue+0x64>)
 8009ca4:	f7fd ffd8 	bl	8007c58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ca8:	4813      	ldr	r0, [pc, #76]	; (8009cf8 <prvCheckForValidListAndQueue+0x68>)
 8009caa:	f7fd ffd5 	bl	8007c58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <prvCheckForValidListAndQueue+0x6c>)
 8009cb0:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <prvCheckForValidListAndQueue+0x64>)
 8009cb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cb4:	4b12      	ldr	r3, [pc, #72]	; (8009d00 <prvCheckForValidListAndQueue+0x70>)
 8009cb6:	4a10      	ldr	r2, [pc, #64]	; (8009cf8 <prvCheckForValidListAndQueue+0x68>)
 8009cb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <prvCheckForValidListAndQueue+0x74>)
 8009cc0:	4a11      	ldr	r2, [pc, #68]	; (8009d08 <prvCheckForValidListAndQueue+0x78>)
 8009cc2:	2110      	movs	r1, #16
 8009cc4:	200a      	movs	r0, #10
 8009cc6:	f7fe f8e3 	bl	8007e90 <xQueueGenericCreateStatic>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	4a08      	ldr	r2, [pc, #32]	; (8009cf0 <prvCheckForValidListAndQueue+0x60>)
 8009cce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <prvCheckForValidListAndQueue+0x60>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <prvCheckForValidListAndQueue+0x60>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	490b      	ldr	r1, [pc, #44]	; (8009d0c <prvCheckForValidListAndQueue+0x7c>)
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fcf6 	bl	80086d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ce4:	f000 f96e 	bl	8009fc4 <vPortExitCritical>
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	200011b0 	.word	0x200011b0
 8009cf4:	20001180 	.word	0x20001180
 8009cf8:	20001194 	.word	0x20001194
 8009cfc:	200011a8 	.word	0x200011a8
 8009d00:	200011ac 	.word	0x200011ac
 8009d04:	2000125c 	.word	0x2000125c
 8009d08:	200011bc 	.word	0x200011bc
 8009d0c:	0800b754 	.word	0x0800b754

08009d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3b04      	subs	r3, #4
 8009d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f023 0201 	bic.w	r2, r3, #1
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d40:	4a0c      	ldr	r2, [pc, #48]	; (8009d74 <pxPortInitialiseStack+0x64>)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3b14      	subs	r3, #20
 8009d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3b04      	subs	r3, #4
 8009d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f06f 0202 	mvn.w	r2, #2
 8009d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3b20      	subs	r3, #32
 8009d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d66:	68fb      	ldr	r3, [r7, #12]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	08009d79 	.word	0x08009d79

08009d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <prvTaskExitError+0x54>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	d00a      	beq.n	8009da2 <prvTaskExitError+0x2a>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <prvTaskExitError+0x28>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60bb      	str	r3, [r7, #8]
}
 8009db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009db6:	bf00      	nop
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0fc      	beq.n	8009db8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000070 	.word	0x20000070

08009dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009dd0:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <pxCurrentTCBConst2>)
 8009dd2:	6819      	ldr	r1, [r3, #0]
 8009dd4:	6808      	ldr	r0, [r1, #0]
 8009dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dda:	f380 8809 	msr	PSP, r0
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f04f 0000 	mov.w	r0, #0
 8009de6:	f380 8811 	msr	BASEPRI, r0
 8009dea:	4770      	bx	lr
 8009dec:	f3af 8000 	nop.w

08009df0 <pxCurrentTCBConst2>:
 8009df0:	20000c80 	.word	0x20000c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop

08009df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009df8:	4808      	ldr	r0, [pc, #32]	; (8009e1c <prvPortStartFirstTask+0x24>)
 8009dfa:	6800      	ldr	r0, [r0, #0]
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	f380 8808 	msr	MSP, r0
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8814 	msr	CONTROL, r0
 8009e0a:	b662      	cpsie	i
 8009e0c:	b661      	cpsie	f
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	df00      	svc	0
 8009e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e1a:	bf00      	nop
 8009e1c:	e000ed08 	.word	0xe000ed08

08009e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e26:	4b46      	ldr	r3, [pc, #280]	; (8009f40 <xPortStartScheduler+0x120>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a46      	ldr	r2, [pc, #280]	; (8009f44 <xPortStartScheduler+0x124>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d10a      	bne.n	8009e46 <xPortStartScheduler+0x26>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	613b      	str	r3, [r7, #16]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e46:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <xPortStartScheduler+0x120>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a3f      	ldr	r2, [pc, #252]	; (8009f48 <xPortStartScheduler+0x128>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d10a      	bne.n	8009e66 <xPortStartScheduler+0x46>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	60fb      	str	r3, [r7, #12]
}
 8009e62:	bf00      	nop
 8009e64:	e7fe      	b.n	8009e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e66:	4b39      	ldr	r3, [pc, #228]	; (8009f4c <xPortStartScheduler+0x12c>)
 8009e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	22ff      	movs	r2, #255	; 0xff
 8009e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b31      	ldr	r3, [pc, #196]	; (8009f50 <xPortStartScheduler+0x130>)
 8009e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e8e:	4b31      	ldr	r3, [pc, #196]	; (8009f54 <xPortStartScheduler+0x134>)
 8009e90:	2207      	movs	r2, #7
 8009e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e94:	e009      	b.n	8009eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e96:	4b2f      	ldr	r3, [pc, #188]	; (8009f54 <xPortStartScheduler+0x134>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	4a2d      	ldr	r2, [pc, #180]	; (8009f54 <xPortStartScheduler+0x134>)
 8009e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb2:	2b80      	cmp	r3, #128	; 0x80
 8009eb4:	d0ef      	beq.n	8009e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eb6:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <xPortStartScheduler+0x134>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f1c3 0307 	rsb	r3, r3, #7
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d00a      	beq.n	8009ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60bb      	str	r3, [r7, #8]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ed8:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <xPortStartScheduler+0x134>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	4a1d      	ldr	r2, [pc, #116]	; (8009f54 <xPortStartScheduler+0x134>)
 8009ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <xPortStartScheduler+0x134>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009eea:	4a1a      	ldr	r2, [pc, #104]	; (8009f54 <xPortStartScheduler+0x134>)
 8009eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ef6:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <xPortStartScheduler+0x138>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a17      	ldr	r2, [pc, #92]	; (8009f58 <xPortStartScheduler+0x138>)
 8009efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f02:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <xPortStartScheduler+0x138>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a14      	ldr	r2, [pc, #80]	; (8009f58 <xPortStartScheduler+0x138>)
 8009f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f0e:	f000 f8dd 	bl	800a0cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f12:	4b12      	ldr	r3, [pc, #72]	; (8009f5c <xPortStartScheduler+0x13c>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f18:	f000 f8fc 	bl	800a114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f1c:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <xPortStartScheduler+0x140>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <xPortStartScheduler+0x140>)
 8009f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f28:	f7ff ff66 	bl	8009df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f2c:	f7ff f872 	bl	8009014 <vTaskSwitchContext>
	prvTaskExitError();
 8009f30:	f7ff ff22 	bl	8009d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	e000ed00 	.word	0xe000ed00
 8009f44:	410fc271 	.word	0x410fc271
 8009f48:	410fc270 	.word	0x410fc270
 8009f4c:	e000e400 	.word	0xe000e400
 8009f50:	200012ac 	.word	0x200012ac
 8009f54:	200012b0 	.word	0x200012b0
 8009f58:	e000ed20 	.word	0xe000ed20
 8009f5c:	20000070 	.word	0x20000070
 8009f60:	e000ef34 	.word	0xe000ef34

08009f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	607b      	str	r3, [r7, #4]
}
 8009f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f7e:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <vPortEnterCritical+0x58>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3301      	adds	r3, #1
 8009f84:	4a0d      	ldr	r2, [pc, #52]	; (8009fbc <vPortEnterCritical+0x58>)
 8009f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <vPortEnterCritical+0x58>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d10f      	bne.n	8009fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <vPortEnterCritical+0x5c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	603b      	str	r3, [r7, #0]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <vPortEnterCritical+0x4a>
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20000070 	.word	0x20000070
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fca:	4b12      	ldr	r3, [pc, #72]	; (800a014 <vPortExitCritical+0x50>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <vPortExitCritical+0x24>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	607b      	str	r3, [r7, #4]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <vPortExitCritical+0x50>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	4a09      	ldr	r2, [pc, #36]	; (800a014 <vPortExitCritical+0x50>)
 8009ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ff2:	4b08      	ldr	r3, [pc, #32]	; (800a014 <vPortExitCritical+0x50>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <vPortExitCritical+0x42>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f383 8811 	msr	BASEPRI, r3
}
 800a004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20000070 	.word	0x20000070
	...

0800a020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a020:	f3ef 8009 	mrs	r0, PSP
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <pxCurrentTCBConst>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	f01e 0f10 	tst.w	lr, #16
 800a030:	bf08      	it	eq
 800a032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	6010      	str	r0, [r2, #0]
 800a03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a040:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a044:	f380 8811 	msr	BASEPRI, r0
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f7fe ffe0 	bl	8009014 <vTaskSwitchContext>
 800a054:	f04f 0000 	mov.w	r0, #0
 800a058:	f380 8811 	msr	BASEPRI, r0
 800a05c:	bc09      	pop	{r0, r3}
 800a05e:	6819      	ldr	r1, [r3, #0]
 800a060:	6808      	ldr	r0, [r1, #0]
 800a062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a066:	f01e 0f10 	tst.w	lr, #16
 800a06a:	bf08      	it	eq
 800a06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a070:	f380 8809 	msr	PSP, r0
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w

0800a080 <pxCurrentTCBConst>:
 800a080:	20000c80 	.word	0x20000c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop

0800a088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	607b      	str	r3, [r7, #4]
}
 800a0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0a2:	f7fe fef9 	bl	8008e98 <xTaskIncrementTick>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <SysTick_Handler+0x40>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f383 8811 	msr	BASEPRI, r3
}
 800a0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <vPortSetupTimerInterrupt+0x34>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <vPortSetupTimerInterrupt+0x38>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <vPortSetupTimerInterrupt+0x3c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <vPortSetupTimerInterrupt+0x40>)
 800a0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e6:	099b      	lsrs	r3, r3, #6
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <vPortSetupTimerInterrupt+0x44>)
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ee:	4b04      	ldr	r3, [pc, #16]	; (800a100 <vPortSetupTimerInterrupt+0x34>)
 800a0f0:	2207      	movs	r2, #7
 800a0f2:	601a      	str	r2, [r3, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	e000e010 	.word	0xe000e010
 800a104:	e000e018 	.word	0xe000e018
 800a108:	20000060 	.word	0x20000060
 800a10c:	10624dd3 	.word	0x10624dd3
 800a110:	e000e014 	.word	0xe000e014

0800a114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a124 <vPortEnableVFP+0x10>
 800a118:	6801      	ldr	r1, [r0, #0]
 800a11a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a11e:	6001      	str	r1, [r0, #0]
 800a120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a122:	bf00      	nop
 800a124:	e000ed88 	.word	0xe000ed88

0800a128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a12e:	f3ef 8305 	mrs	r3, IPSR
 800a132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b0f      	cmp	r3, #15
 800a138:	d914      	bls.n	800a164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a13a:	4a17      	ldr	r2, [pc, #92]	; (800a198 <vPortValidateInterruptPriority+0x70>)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4413      	add	r3, r2
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a144:	4b15      	ldr	r3, [pc, #84]	; (800a19c <vPortValidateInterruptPriority+0x74>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	7afa      	ldrb	r2, [r7, #11]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d20a      	bcs.n	800a164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	607b      	str	r3, [r7, #4]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <vPortValidateInterruptPriority+0x78>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <vPortValidateInterruptPriority+0x7c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d90a      	bls.n	800a18a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	603b      	str	r3, [r7, #0]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <vPortValidateInterruptPriority+0x60>
	}
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	e000e3f0 	.word	0xe000e3f0
 800a19c:	200012ac 	.word	0x200012ac
 800a1a0:	e000ed0c 	.word	0xe000ed0c
 800a1a4:	200012b0 	.word	0x200012b0

0800a1a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1b4:	f7fe fdb4 	bl	8008d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1b8:	4b58      	ldr	r3, [pc, #352]	; (800a31c <pvPortMalloc+0x174>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1c0:	f000 f910 	bl	800a3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1c4:	4b56      	ldr	r3, [pc, #344]	; (800a320 <pvPortMalloc+0x178>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 808e 	bne.w	800a2ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01d      	beq.n	800a214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1d8:	2208      	movs	r2, #8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d014      	beq.n	800a214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f023 0307 	bic.w	r3, r3, #7
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <pvPortMalloc+0x6c>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	617b      	str	r3, [r7, #20]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d069      	beq.n	800a2ee <pvPortMalloc+0x146>
 800a21a:	4b42      	ldr	r3, [pc, #264]	; (800a324 <pvPortMalloc+0x17c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d864      	bhi.n	800a2ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a224:	4b40      	ldr	r3, [pc, #256]	; (800a328 <pvPortMalloc+0x180>)
 800a226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a228:	4b3f      	ldr	r3, [pc, #252]	; (800a328 <pvPortMalloc+0x180>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a22e:	e004      	b.n	800a23a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d903      	bls.n	800a24c <pvPortMalloc+0xa4>
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1f1      	bne.n	800a230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a24c:	4b33      	ldr	r3, [pc, #204]	; (800a31c <pvPortMalloc+0x174>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a252:	429a      	cmp	r2, r3
 800a254:	d04b      	beq.n	800a2ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2208      	movs	r2, #8
 800a25c:	4413      	add	r3, r2
 800a25e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	2308      	movs	r3, #8
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	429a      	cmp	r2, r3
 800a276:	d91f      	bls.n	800a2b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	613b      	str	r3, [r7, #16]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2b2:	69b8      	ldr	r0, [r7, #24]
 800a2b4:	f000 f8f8 	bl	800a4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2b8:	4b1a      	ldr	r3, [pc, #104]	; (800a324 <pvPortMalloc+0x17c>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	4a18      	ldr	r2, [pc, #96]	; (800a324 <pvPortMalloc+0x17c>)
 800a2c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2c6:	4b17      	ldr	r3, [pc, #92]	; (800a324 <pvPortMalloc+0x17c>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b18      	ldr	r3, [pc, #96]	; (800a32c <pvPortMalloc+0x184>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d203      	bcs.n	800a2da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <pvPortMalloc+0x17c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a15      	ldr	r2, [pc, #84]	; (800a32c <pvPortMalloc+0x184>)
 800a2d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	4b10      	ldr	r3, [pc, #64]	; (800a320 <pvPortMalloc+0x178>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2ee:	f7fe fd25 	bl	8008d3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f003 0307 	and.w	r3, r3, #7
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <pvPortMalloc+0x16a>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	60fb      	str	r3, [r7, #12]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <pvPortMalloc+0x168>
	return pvReturn;
 800a312:	69fb      	ldr	r3, [r7, #28]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3728      	adds	r7, #40	; 0x28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20001ebc 	.word	0x20001ebc
 800a320:	20001ec8 	.word	0x20001ec8
 800a324:	20001ec0 	.word	0x20001ec0
 800a328:	20001eb4 	.word	0x20001eb4
 800a32c:	20001ec4 	.word	0x20001ec4

0800a330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d048      	beq.n	800a3d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a342:	2308      	movs	r3, #8
 800a344:	425b      	negs	r3, r3
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	4b21      	ldr	r3, [pc, #132]	; (800a3dc <vPortFree+0xac>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4013      	ands	r3, r2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <vPortFree+0x44>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	60fb      	str	r3, [r7, #12]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <vPortFree+0x62>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	60bb      	str	r3, [r7, #8]
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <vPortFree+0xac>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4013      	ands	r3, r2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d019      	beq.n	800a3d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d115      	bne.n	800a3d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <vPortFree+0xac>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	401a      	ands	r2, r3
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3b8:	f7fe fcb2 	bl	8008d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <vPortFree+0xb0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4a06      	ldr	r2, [pc, #24]	; (800a3e0 <vPortFree+0xb0>)
 800a3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3ca:	6938      	ldr	r0, [r7, #16]
 800a3cc:	f000 f86c 	bl	800a4a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a3d0:	f7fe fcb4 	bl	8008d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3d4:	bf00      	nop
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20001ec8 	.word	0x20001ec8
 800a3e0:	20001ec0 	.word	0x20001ec0

0800a3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3f0:	4b27      	ldr	r3, [pc, #156]	; (800a490 <prvHeapInit+0xac>)
 800a3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00c      	beq.n	800a418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3307      	adds	r3, #7
 800a402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	4a1f      	ldr	r2, [pc, #124]	; (800a490 <prvHeapInit+0xac>)
 800a414:	4413      	add	r3, r2
 800a416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a41c:	4a1d      	ldr	r2, [pc, #116]	; (800a494 <prvHeapInit+0xb0>)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <prvHeapInit+0xb0>)
 800a424:	2200      	movs	r2, #0
 800a426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	4413      	add	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a430:	2208      	movs	r2, #8
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0307 	bic.w	r3, r3, #7
 800a43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4a15      	ldr	r2, [pc, #84]	; (800a498 <prvHeapInit+0xb4>)
 800a444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a446:	4b14      	ldr	r3, [pc, #80]	; (800a498 <prvHeapInit+0xb4>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2200      	movs	r2, #0
 800a44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <prvHeapInit+0xb4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a464:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <prvHeapInit+0xb4>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <prvHeapInit+0xb8>)
 800a472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <prvHeapInit+0xbc>)
 800a47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a47c:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <prvHeapInit+0xc0>)
 800a47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a482:	601a      	str	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	200012b4 	.word	0x200012b4
 800a494:	20001eb4 	.word	0x20001eb4
 800a498:	20001ebc 	.word	0x20001ebc
 800a49c:	20001ec4 	.word	0x20001ec4
 800a4a0:	20001ec0 	.word	0x20001ec0
 800a4a4:	20001ec8 	.word	0x20001ec8

0800a4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4b0:	4b28      	ldr	r3, [pc, #160]	; (800a554 <prvInsertBlockIntoFreeList+0xac>)
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e002      	b.n	800a4bc <prvInsertBlockIntoFreeList+0x14>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d8f7      	bhi.n	800a4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d108      	bne.n	800a4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	441a      	add	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d118      	bne.n	800a530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <prvInsertBlockIntoFreeList+0xb0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d00d      	beq.n	800a526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	441a      	add	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e008      	b.n	800a538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a526:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <prvInsertBlockIntoFreeList+0xb0>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e003      	b.n	800a538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d002      	beq.n	800a546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a546:	bf00      	nop
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	20001eb4 	.word	0x20001eb4
 800a558:	20001ebc 	.word	0x20001ebc

0800a55c <std>:
 800a55c:	2300      	movs	r3, #0
 800a55e:	b510      	push	{r4, lr}
 800a560:	4604      	mov	r4, r0
 800a562:	e9c0 3300 	strd	r3, r3, [r0]
 800a566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a56a:	6083      	str	r3, [r0, #8]
 800a56c:	8181      	strh	r1, [r0, #12]
 800a56e:	6643      	str	r3, [r0, #100]	; 0x64
 800a570:	81c2      	strh	r2, [r0, #14]
 800a572:	6183      	str	r3, [r0, #24]
 800a574:	4619      	mov	r1, r3
 800a576:	2208      	movs	r2, #8
 800a578:	305c      	adds	r0, #92	; 0x5c
 800a57a:	f000 f9e5 	bl	800a948 <memset>
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <std+0x38>)
 800a580:	6263      	str	r3, [r4, #36]	; 0x24
 800a582:	4b05      	ldr	r3, [pc, #20]	; (800a598 <std+0x3c>)
 800a584:	62a3      	str	r3, [r4, #40]	; 0x28
 800a586:	4b05      	ldr	r3, [pc, #20]	; (800a59c <std+0x40>)
 800a588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <std+0x44>)
 800a58c:	6224      	str	r4, [r4, #32]
 800a58e:	6323      	str	r3, [r4, #48]	; 0x30
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop
 800a594:	0800a799 	.word	0x0800a799
 800a598:	0800a7bb 	.word	0x0800a7bb
 800a59c:	0800a7f3 	.word	0x0800a7f3
 800a5a0:	0800a817 	.word	0x0800a817

0800a5a4 <stdio_exit_handler>:
 800a5a4:	4a02      	ldr	r2, [pc, #8]	; (800a5b0 <stdio_exit_handler+0xc>)
 800a5a6:	4903      	ldr	r1, [pc, #12]	; (800a5b4 <stdio_exit_handler+0x10>)
 800a5a8:	4803      	ldr	r0, [pc, #12]	; (800a5b8 <stdio_exit_handler+0x14>)
 800a5aa:	f000 b869 	b.w	800a680 <_fwalk_sglue>
 800a5ae:	bf00      	nop
 800a5b0:	20000074 	.word	0x20000074
 800a5b4:	0800b3a9 	.word	0x0800b3a9
 800a5b8:	20000080 	.word	0x20000080

0800a5bc <cleanup_stdio>:
 800a5bc:	6841      	ldr	r1, [r0, #4]
 800a5be:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <cleanup_stdio+0x34>)
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	d001      	beq.n	800a5cc <cleanup_stdio+0x10>
 800a5c8:	f000 feee 	bl	800b3a8 <_fflush_r>
 800a5cc:	68a1      	ldr	r1, [r4, #8]
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <cleanup_stdio+0x38>)
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d002      	beq.n	800a5da <cleanup_stdio+0x1e>
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fee7 	bl	800b3a8 <_fflush_r>
 800a5da:	68e1      	ldr	r1, [r4, #12]
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <cleanup_stdio+0x3c>)
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d004      	beq.n	800a5ec <cleanup_stdio+0x30>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e8:	f000 bede 	b.w	800b3a8 <_fflush_r>
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20001ecc 	.word	0x20001ecc
 800a5f4:	20001f34 	.word	0x20001f34
 800a5f8:	20001f9c 	.word	0x20001f9c

0800a5fc <global_stdio_init.part.0>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <global_stdio_init.part.0+0x30>)
 800a600:	4c0b      	ldr	r4, [pc, #44]	; (800a630 <global_stdio_init.part.0+0x34>)
 800a602:	4a0c      	ldr	r2, [pc, #48]	; (800a634 <global_stdio_init.part.0+0x38>)
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	4620      	mov	r0, r4
 800a608:	2200      	movs	r2, #0
 800a60a:	2104      	movs	r1, #4
 800a60c:	f7ff ffa6 	bl	800a55c <std>
 800a610:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a614:	2201      	movs	r2, #1
 800a616:	2109      	movs	r1, #9
 800a618:	f7ff ffa0 	bl	800a55c <std>
 800a61c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a620:	2202      	movs	r2, #2
 800a622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a626:	2112      	movs	r1, #18
 800a628:	f7ff bf98 	b.w	800a55c <std>
 800a62c:	20002004 	.word	0x20002004
 800a630:	20001ecc 	.word	0x20001ecc
 800a634:	0800a5a5 	.word	0x0800a5a5

0800a638 <__sfp_lock_acquire>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__sfp_lock_acquire+0x8>)
 800a63a:	f000 ba53 	b.w	800aae4 <__retarget_lock_acquire_recursive>
 800a63e:	bf00      	nop
 800a640:	2000200d 	.word	0x2000200d

0800a644 <__sfp_lock_release>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sfp_lock_release+0x8>)
 800a646:	f000 ba4e 	b.w	800aae6 <__retarget_lock_release_recursive>
 800a64a:	bf00      	nop
 800a64c:	2000200d 	.word	0x2000200d

0800a650 <__sinit>:
 800a650:	b510      	push	{r4, lr}
 800a652:	4604      	mov	r4, r0
 800a654:	f7ff fff0 	bl	800a638 <__sfp_lock_acquire>
 800a658:	6a23      	ldr	r3, [r4, #32]
 800a65a:	b11b      	cbz	r3, 800a664 <__sinit+0x14>
 800a65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a660:	f7ff bff0 	b.w	800a644 <__sfp_lock_release>
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <__sinit+0x28>)
 800a666:	6223      	str	r3, [r4, #32]
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <__sinit+0x2c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f5      	bne.n	800a65c <__sinit+0xc>
 800a670:	f7ff ffc4 	bl	800a5fc <global_stdio_init.part.0>
 800a674:	e7f2      	b.n	800a65c <__sinit+0xc>
 800a676:	bf00      	nop
 800a678:	0800a5bd 	.word	0x0800a5bd
 800a67c:	20002004 	.word	0x20002004

0800a680 <_fwalk_sglue>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	4607      	mov	r7, r0
 800a686:	4688      	mov	r8, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	2600      	movs	r6, #0
 800a68c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a690:	f1b9 0901 	subs.w	r9, r9, #1
 800a694:	d505      	bpl.n	800a6a2 <_fwalk_sglue+0x22>
 800a696:	6824      	ldr	r4, [r4, #0]
 800a698:	2c00      	cmp	r4, #0
 800a69a:	d1f7      	bne.n	800a68c <_fwalk_sglue+0xc>
 800a69c:	4630      	mov	r0, r6
 800a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d907      	bls.n	800a6b8 <_fwalk_sglue+0x38>
 800a6a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	d003      	beq.n	800a6b8 <_fwalk_sglue+0x38>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	4306      	orrs	r6, r0
 800a6b8:	3568      	adds	r5, #104	; 0x68
 800a6ba:	e7e9      	b.n	800a690 <_fwalk_sglue+0x10>

0800a6bc <iprintf>:
 800a6bc:	b40f      	push	{r0, r1, r2, r3}
 800a6be:	b507      	push	{r0, r1, r2, lr}
 800a6c0:	4906      	ldr	r1, [pc, #24]	; (800a6dc <iprintf+0x20>)
 800a6c2:	ab04      	add	r3, sp, #16
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ca:	6881      	ldr	r1, [r0, #8]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	f000 fb3b 	bl	800ad48 <_vfiprintf_r>
 800a6d2:	b003      	add	sp, #12
 800a6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d8:	b004      	add	sp, #16
 800a6da:	4770      	bx	lr
 800a6dc:	200000cc 	.word	0x200000cc

0800a6e0 <_puts_r>:
 800a6e0:	6a03      	ldr	r3, [r0, #32]
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	6884      	ldr	r4, [r0, #8]
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	460e      	mov	r6, r1
 800a6ea:	b90b      	cbnz	r3, 800a6f0 <_puts_r+0x10>
 800a6ec:	f7ff ffb0 	bl	800a650 <__sinit>
 800a6f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f2:	07db      	lsls	r3, r3, #31
 800a6f4:	d405      	bmi.n	800a702 <_puts_r+0x22>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	0598      	lsls	r0, r3, #22
 800a6fa:	d402      	bmi.n	800a702 <_puts_r+0x22>
 800a6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6fe:	f000 f9f1 	bl	800aae4 <__retarget_lock_acquire_recursive>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d513      	bpl.n	800a730 <_puts_r+0x50>
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	b18b      	cbz	r3, 800a730 <_puts_r+0x50>
 800a70c:	3e01      	subs	r6, #1
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a714:	3b01      	subs	r3, #1
 800a716:	60a3      	str	r3, [r4, #8]
 800a718:	b9e9      	cbnz	r1, 800a756 <_puts_r+0x76>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da2e      	bge.n	800a77c <_puts_r+0x9c>
 800a71e:	4622      	mov	r2, r4
 800a720:	210a      	movs	r1, #10
 800a722:	4628      	mov	r0, r5
 800a724:	f000 f87b 	bl	800a81e <__swbuf_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	d007      	beq.n	800a73c <_puts_r+0x5c>
 800a72c:	250a      	movs	r5, #10
 800a72e:	e007      	b.n	800a740 <_puts_r+0x60>
 800a730:	4621      	mov	r1, r4
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f8b0 	bl	800a898 <__swsetup_r>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0e7      	beq.n	800a70c <_puts_r+0x2c>
 800a73c:	f04f 35ff 	mov.w	r5, #4294967295
 800a740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a742:	07da      	lsls	r2, r3, #31
 800a744:	d405      	bmi.n	800a752 <_puts_r+0x72>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	059b      	lsls	r3, r3, #22
 800a74a:	d402      	bmi.n	800a752 <_puts_r+0x72>
 800a74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74e:	f000 f9ca 	bl	800aae6 <__retarget_lock_release_recursive>
 800a752:	4628      	mov	r0, r5
 800a754:	bd70      	pop	{r4, r5, r6, pc}
 800a756:	2b00      	cmp	r3, #0
 800a758:	da04      	bge.n	800a764 <_puts_r+0x84>
 800a75a:	69a2      	ldr	r2, [r4, #24]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	dc06      	bgt.n	800a76e <_puts_r+0x8e>
 800a760:	290a      	cmp	r1, #10
 800a762:	d004      	beq.n	800a76e <_puts_r+0x8e>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	7019      	strb	r1, [r3, #0]
 800a76c:	e7cf      	b.n	800a70e <_puts_r+0x2e>
 800a76e:	4622      	mov	r2, r4
 800a770:	4628      	mov	r0, r5
 800a772:	f000 f854 	bl	800a81e <__swbuf_r>
 800a776:	3001      	adds	r0, #1
 800a778:	d1c9      	bne.n	800a70e <_puts_r+0x2e>
 800a77a:	e7df      	b.n	800a73c <_puts_r+0x5c>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	250a      	movs	r5, #10
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	6022      	str	r2, [r4, #0]
 800a784:	701d      	strb	r5, [r3, #0]
 800a786:	e7db      	b.n	800a740 <_puts_r+0x60>

0800a788 <puts>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <puts+0xc>)
 800a78a:	4601      	mov	r1, r0
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f7ff bfa7 	b.w	800a6e0 <_puts_r>
 800a792:	bf00      	nop
 800a794:	200000cc 	.word	0x200000cc

0800a798 <__sread>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f952 	bl	800aa48 <_read_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	bfab      	itete	ge
 800a7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a7ac:	181b      	addge	r3, r3, r0
 800a7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7b2:	bfac      	ite	ge
 800a7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7b6:	81a3      	strhlt	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__swrite>:
 800a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	461f      	mov	r7, r3
 800a7c0:	898b      	ldrh	r3, [r1, #12]
 800a7c2:	05db      	lsls	r3, r3, #23
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	d505      	bpl.n	800a7d8 <__swrite+0x1e>
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f000 f926 	bl	800aa24 <_lseek_r>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	f000 b93d 	b.w	800aa6c <_write_r>

0800a7f2 <__sseek>:
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 f913 	bl	800aa24 <_lseek_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	bf15      	itete	ne
 800a804:	6560      	strne	r0, [r4, #84]	; 0x54
 800a806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a80e:	81a3      	strheq	r3, [r4, #12]
 800a810:	bf18      	it	ne
 800a812:	81a3      	strhne	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__sclose>:
 800a816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81a:	f000 b89d 	b.w	800a958 <_close_r>

0800a81e <__swbuf_r>:
 800a81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a820:	460e      	mov	r6, r1
 800a822:	4614      	mov	r4, r2
 800a824:	4605      	mov	r5, r0
 800a826:	b118      	cbz	r0, 800a830 <__swbuf_r+0x12>
 800a828:	6a03      	ldr	r3, [r0, #32]
 800a82a:	b90b      	cbnz	r3, 800a830 <__swbuf_r+0x12>
 800a82c:	f7ff ff10 	bl	800a650 <__sinit>
 800a830:	69a3      	ldr	r3, [r4, #24]
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	071a      	lsls	r2, r3, #28
 800a838:	d525      	bpl.n	800a886 <__swbuf_r+0x68>
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	b31b      	cbz	r3, 800a886 <__swbuf_r+0x68>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	1a98      	subs	r0, r3, r2
 800a844:	6963      	ldr	r3, [r4, #20]
 800a846:	b2f6      	uxtb	r6, r6
 800a848:	4283      	cmp	r3, r0
 800a84a:	4637      	mov	r7, r6
 800a84c:	dc04      	bgt.n	800a858 <__swbuf_r+0x3a>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 fda9 	bl	800b3a8 <_fflush_r>
 800a856:	b9e0      	cbnz	r0, 800a892 <__swbuf_r+0x74>
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	701e      	strb	r6, [r3, #0]
 800a866:	6962      	ldr	r2, [r4, #20]
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d004      	beq.n	800a878 <__swbuf_r+0x5a>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	07db      	lsls	r3, r3, #31
 800a872:	d506      	bpl.n	800a882 <__swbuf_r+0x64>
 800a874:	2e0a      	cmp	r6, #10
 800a876:	d104      	bne.n	800a882 <__swbuf_r+0x64>
 800a878:	4621      	mov	r1, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 fd94 	bl	800b3a8 <_fflush_r>
 800a880:	b938      	cbnz	r0, 800a892 <__swbuf_r+0x74>
 800a882:	4638      	mov	r0, r7
 800a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 f805 	bl	800a898 <__swsetup_r>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d0d5      	beq.n	800a83e <__swbuf_r+0x20>
 800a892:	f04f 37ff 	mov.w	r7, #4294967295
 800a896:	e7f4      	b.n	800a882 <__swbuf_r+0x64>

0800a898 <__swsetup_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4b2a      	ldr	r3, [pc, #168]	; (800a944 <__swsetup_r+0xac>)
 800a89c:	4605      	mov	r5, r0
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	b118      	cbz	r0, 800a8ac <__swsetup_r+0x14>
 800a8a4:	6a03      	ldr	r3, [r0, #32]
 800a8a6:	b90b      	cbnz	r3, 800a8ac <__swsetup_r+0x14>
 800a8a8:	f7ff fed2 	bl	800a650 <__sinit>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b2:	0718      	lsls	r0, r3, #28
 800a8b4:	d422      	bmi.n	800a8fc <__swsetup_r+0x64>
 800a8b6:	06d9      	lsls	r1, r3, #27
 800a8b8:	d407      	bmi.n	800a8ca <__swsetup_r+0x32>
 800a8ba:	2309      	movs	r3, #9
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	e034      	b.n	800a934 <__swsetup_r+0x9c>
 800a8ca:	0758      	lsls	r0, r3, #29
 800a8cc:	d512      	bpl.n	800a8f4 <__swsetup_r+0x5c>
 800a8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8d0:	b141      	cbz	r1, 800a8e4 <__swsetup_r+0x4c>
 800a8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	d002      	beq.n	800a8e0 <__swsetup_r+0x48>
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 f912 	bl	800ab04 <_free_r>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6063      	str	r3, [r4, #4]
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f043 0308 	orr.w	r3, r3, #8
 800a8fa:	81a3      	strh	r3, [r4, #12]
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	b94b      	cbnz	r3, 800a914 <__swsetup_r+0x7c>
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a90a:	d003      	beq.n	800a914 <__swsetup_r+0x7c>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 fd98 	bl	800b444 <__smakebuf_r>
 800a914:	89a0      	ldrh	r0, [r4, #12]
 800a916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a91a:	f010 0301 	ands.w	r3, r0, #1
 800a91e:	d00a      	beq.n	800a936 <__swsetup_r+0x9e>
 800a920:	2300      	movs	r3, #0
 800a922:	60a3      	str	r3, [r4, #8]
 800a924:	6963      	ldr	r3, [r4, #20]
 800a926:	425b      	negs	r3, r3
 800a928:	61a3      	str	r3, [r4, #24]
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	b943      	cbnz	r3, 800a940 <__swsetup_r+0xa8>
 800a92e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a932:	d1c4      	bne.n	800a8be <__swsetup_r+0x26>
 800a934:	bd38      	pop	{r3, r4, r5, pc}
 800a936:	0781      	lsls	r1, r0, #30
 800a938:	bf58      	it	pl
 800a93a:	6963      	ldrpl	r3, [r4, #20]
 800a93c:	60a3      	str	r3, [r4, #8]
 800a93e:	e7f4      	b.n	800a92a <__swsetup_r+0x92>
 800a940:	2000      	movs	r0, #0
 800a942:	e7f7      	b.n	800a934 <__swsetup_r+0x9c>
 800a944:	200000cc 	.word	0x200000cc

0800a948 <memset>:
 800a948:	4402      	add	r2, r0
 800a94a:	4603      	mov	r3, r0
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d100      	bne.n	800a952 <memset+0xa>
 800a950:	4770      	bx	lr
 800a952:	f803 1b01 	strb.w	r1, [r3], #1
 800a956:	e7f9      	b.n	800a94c <memset+0x4>

0800a958 <_close_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d06      	ldr	r5, [pc, #24]	; (800a974 <_close_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	f7f6 f813 	bl	800098e <_close>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_close_r+0x1a>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_close_r+0x1a>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	20002008 	.word	0x20002008

0800a978 <_reclaim_reent>:
 800a978:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <_reclaim_reent+0xa8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4283      	cmp	r3, r0
 800a97e:	b570      	push	{r4, r5, r6, lr}
 800a980:	4604      	mov	r4, r0
 800a982:	d04b      	beq.n	800aa1c <_reclaim_reent+0xa4>
 800a984:	69c3      	ldr	r3, [r0, #28]
 800a986:	b143      	cbz	r3, 800a99a <_reclaim_reent+0x22>
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d144      	bne.n	800aa18 <_reclaim_reent+0xa0>
 800a98e:	69e3      	ldr	r3, [r4, #28]
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	b111      	cbz	r1, 800a99a <_reclaim_reent+0x22>
 800a994:	4620      	mov	r0, r4
 800a996:	f000 f8b5 	bl	800ab04 <_free_r>
 800a99a:	6961      	ldr	r1, [r4, #20]
 800a99c:	b111      	cbz	r1, 800a9a4 <_reclaim_reent+0x2c>
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f8b0 	bl	800ab04 <_free_r>
 800a9a4:	69e1      	ldr	r1, [r4, #28]
 800a9a6:	b111      	cbz	r1, 800a9ae <_reclaim_reent+0x36>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 f8ab 	bl	800ab04 <_free_r>
 800a9ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a9b0:	b111      	cbz	r1, 800a9b8 <_reclaim_reent+0x40>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f8a6 	bl	800ab04 <_free_r>
 800a9b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ba:	b111      	cbz	r1, 800a9c2 <_reclaim_reent+0x4a>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 f8a1 	bl	800ab04 <_free_r>
 800a9c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9c4:	b111      	cbz	r1, 800a9cc <_reclaim_reent+0x54>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f89c 	bl	800ab04 <_free_r>
 800a9cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9ce:	b111      	cbz	r1, 800a9d6 <_reclaim_reent+0x5e>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 f897 	bl	800ab04 <_free_r>
 800a9d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a9d8:	b111      	cbz	r1, 800a9e0 <_reclaim_reent+0x68>
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 f892 	bl	800ab04 <_free_r>
 800a9e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a9e2:	b111      	cbz	r1, 800a9ea <_reclaim_reent+0x72>
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 f88d 	bl	800ab04 <_free_r>
 800a9ea:	6a23      	ldr	r3, [r4, #32]
 800a9ec:	b1b3      	cbz	r3, 800aa1c <_reclaim_reent+0xa4>
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9f4:	4718      	bx	r3
 800a9f6:	5949      	ldr	r1, [r1, r5]
 800a9f8:	b941      	cbnz	r1, 800aa0c <_reclaim_reent+0x94>
 800a9fa:	3504      	adds	r5, #4
 800a9fc:	69e3      	ldr	r3, [r4, #28]
 800a9fe:	2d80      	cmp	r5, #128	; 0x80
 800aa00:	68d9      	ldr	r1, [r3, #12]
 800aa02:	d1f8      	bne.n	800a9f6 <_reclaim_reent+0x7e>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 f87d 	bl	800ab04 <_free_r>
 800aa0a:	e7c0      	b.n	800a98e <_reclaim_reent+0x16>
 800aa0c:	680e      	ldr	r6, [r1, #0]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 f878 	bl	800ab04 <_free_r>
 800aa14:	4631      	mov	r1, r6
 800aa16:	e7ef      	b.n	800a9f8 <_reclaim_reent+0x80>
 800aa18:	2500      	movs	r5, #0
 800aa1a:	e7ef      	b.n	800a9fc <_reclaim_reent+0x84>
 800aa1c:	bd70      	pop	{r4, r5, r6, pc}
 800aa1e:	bf00      	nop
 800aa20:	200000cc 	.word	0x200000cc

0800aa24 <_lseek_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_lseek_r+0x20>)
 800aa28:	4604      	mov	r4, r0
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	602a      	str	r2, [r5, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f7f5 ffd2 	bl	80009dc <_lseek>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_lseek_r+0x1e>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_lseek_r+0x1e>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	20002008 	.word	0x20002008

0800aa48 <_read_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d07      	ldr	r5, [pc, #28]	; (800aa68 <_read_r+0x20>)
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4611      	mov	r1, r2
 800aa52:	2200      	movs	r2, #0
 800aa54:	602a      	str	r2, [r5, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f7f5 ff60 	bl	800091c <_read>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_read_r+0x1e>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_read_r+0x1e>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	20002008 	.word	0x20002008

0800aa6c <_write_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	; (800aa8c <_write_r+0x20>)
 800aa70:	4604      	mov	r4, r0
 800aa72:	4608      	mov	r0, r1
 800aa74:	4611      	mov	r1, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f7f5 ff6b 	bl	8000956 <_write>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_write_r+0x1e>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_write_r+0x1e>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	20002008 	.word	0x20002008

0800aa90 <__errno>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	; (800aa98 <__errno+0x8>)
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	200000cc 	.word	0x200000cc

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d0d      	ldr	r5, [pc, #52]	; (800aad4 <__libc_init_array+0x38>)
 800aaa0:	4c0d      	ldr	r4, [pc, #52]	; (800aad8 <__libc_init_array+0x3c>)
 800aaa2:	1b64      	subs	r4, r4, r5
 800aaa4:	10a4      	asrs	r4, r4, #2
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	4d0b      	ldr	r5, [pc, #44]	; (800aadc <__libc_init_array+0x40>)
 800aaae:	4c0c      	ldr	r4, [pc, #48]	; (800aae0 <__libc_init_array+0x44>)
 800aab0:	f000 fd36 	bl	800b520 <_init>
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	2600      	movs	r6, #0
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800b858 	.word	0x0800b858
 800aad8:	0800b858 	.word	0x0800b858
 800aadc:	0800b858 	.word	0x0800b858
 800aae0:	0800b85c 	.word	0x0800b85c

0800aae4 <__retarget_lock_acquire_recursive>:
 800aae4:	4770      	bx	lr

0800aae6 <__retarget_lock_release_recursive>:
 800aae6:	4770      	bx	lr

0800aae8 <memcpy>:
 800aae8:	440a      	add	r2, r1
 800aaea:	4291      	cmp	r1, r2
 800aaec:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaf0:	d100      	bne.n	800aaf4 <memcpy+0xc>
 800aaf2:	4770      	bx	lr
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aafe:	4291      	cmp	r1, r2
 800ab00:	d1f9      	bne.n	800aaf6 <memcpy+0xe>
 800ab02:	bd10      	pop	{r4, pc}

0800ab04 <_free_r>:
 800ab04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab06:	2900      	cmp	r1, #0
 800ab08:	d044      	beq.n	800ab94 <_free_r+0x90>
 800ab0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0e:	9001      	str	r0, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f1a1 0404 	sub.w	r4, r1, #4
 800ab16:	bfb8      	it	lt
 800ab18:	18e4      	addlt	r4, r4, r3
 800ab1a:	f000 f8df 	bl	800acdc <__malloc_lock>
 800ab1e:	4a1e      	ldr	r2, [pc, #120]	; (800ab98 <_free_r+0x94>)
 800ab20:	9801      	ldr	r0, [sp, #4]
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	b933      	cbnz	r3, 800ab34 <_free_r+0x30>
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	6014      	str	r4, [r2, #0]
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab30:	f000 b8da 	b.w	800ace8 <__malloc_unlock>
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d908      	bls.n	800ab4a <_free_r+0x46>
 800ab38:	6825      	ldr	r5, [r4, #0]
 800ab3a:	1961      	adds	r1, r4, r5
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	bf01      	itttt	eq
 800ab40:	6819      	ldreq	r1, [r3, #0]
 800ab42:	685b      	ldreq	r3, [r3, #4]
 800ab44:	1949      	addeq	r1, r1, r5
 800ab46:	6021      	streq	r1, [r4, #0]
 800ab48:	e7ed      	b.n	800ab26 <_free_r+0x22>
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	b10b      	cbz	r3, 800ab54 <_free_r+0x50>
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d9fa      	bls.n	800ab4a <_free_r+0x46>
 800ab54:	6811      	ldr	r1, [r2, #0]
 800ab56:	1855      	adds	r5, r2, r1
 800ab58:	42a5      	cmp	r5, r4
 800ab5a:	d10b      	bne.n	800ab74 <_free_r+0x70>
 800ab5c:	6824      	ldr	r4, [r4, #0]
 800ab5e:	4421      	add	r1, r4
 800ab60:	1854      	adds	r4, r2, r1
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	6011      	str	r1, [r2, #0]
 800ab66:	d1e0      	bne.n	800ab2a <_free_r+0x26>
 800ab68:	681c      	ldr	r4, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	6053      	str	r3, [r2, #4]
 800ab6e:	440c      	add	r4, r1
 800ab70:	6014      	str	r4, [r2, #0]
 800ab72:	e7da      	b.n	800ab2a <_free_r+0x26>
 800ab74:	d902      	bls.n	800ab7c <_free_r+0x78>
 800ab76:	230c      	movs	r3, #12
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	e7d6      	b.n	800ab2a <_free_r+0x26>
 800ab7c:	6825      	ldr	r5, [r4, #0]
 800ab7e:	1961      	adds	r1, r4, r5
 800ab80:	428b      	cmp	r3, r1
 800ab82:	bf04      	itt	eq
 800ab84:	6819      	ldreq	r1, [r3, #0]
 800ab86:	685b      	ldreq	r3, [r3, #4]
 800ab88:	6063      	str	r3, [r4, #4]
 800ab8a:	bf04      	itt	eq
 800ab8c:	1949      	addeq	r1, r1, r5
 800ab8e:	6021      	streq	r1, [r4, #0]
 800ab90:	6054      	str	r4, [r2, #4]
 800ab92:	e7ca      	b.n	800ab2a <_free_r+0x26>
 800ab94:	b003      	add	sp, #12
 800ab96:	bd30      	pop	{r4, r5, pc}
 800ab98:	20002010 	.word	0x20002010

0800ab9c <sbrk_aligned>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	4e0e      	ldr	r6, [pc, #56]	; (800abd8 <sbrk_aligned+0x3c>)
 800aba0:	460c      	mov	r4, r1
 800aba2:	6831      	ldr	r1, [r6, #0]
 800aba4:	4605      	mov	r5, r0
 800aba6:	b911      	cbnz	r1, 800abae <sbrk_aligned+0x12>
 800aba8:	f000 fcaa 	bl	800b500 <_sbrk_r>
 800abac:	6030      	str	r0, [r6, #0]
 800abae:	4621      	mov	r1, r4
 800abb0:	4628      	mov	r0, r5
 800abb2:	f000 fca5 	bl	800b500 <_sbrk_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d00a      	beq.n	800abd0 <sbrk_aligned+0x34>
 800abba:	1cc4      	adds	r4, r0, #3
 800abbc:	f024 0403 	bic.w	r4, r4, #3
 800abc0:	42a0      	cmp	r0, r4
 800abc2:	d007      	beq.n	800abd4 <sbrk_aligned+0x38>
 800abc4:	1a21      	subs	r1, r4, r0
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 fc9a 	bl	800b500 <_sbrk_r>
 800abcc:	3001      	adds	r0, #1
 800abce:	d101      	bne.n	800abd4 <sbrk_aligned+0x38>
 800abd0:	f04f 34ff 	mov.w	r4, #4294967295
 800abd4:	4620      	mov	r0, r4
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	20002014 	.word	0x20002014

0800abdc <_malloc_r>:
 800abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	1ccd      	adds	r5, r1, #3
 800abe2:	f025 0503 	bic.w	r5, r5, #3
 800abe6:	3508      	adds	r5, #8
 800abe8:	2d0c      	cmp	r5, #12
 800abea:	bf38      	it	cc
 800abec:	250c      	movcc	r5, #12
 800abee:	2d00      	cmp	r5, #0
 800abf0:	4607      	mov	r7, r0
 800abf2:	db01      	blt.n	800abf8 <_malloc_r+0x1c>
 800abf4:	42a9      	cmp	r1, r5
 800abf6:	d905      	bls.n	800ac04 <_malloc_r+0x28>
 800abf8:	230c      	movs	r3, #12
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	2600      	movs	r6, #0
 800abfe:	4630      	mov	r0, r6
 800ac00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800acd8 <_malloc_r+0xfc>
 800ac08:	f000 f868 	bl	800acdc <__malloc_lock>
 800ac0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac10:	461c      	mov	r4, r3
 800ac12:	bb5c      	cbnz	r4, 800ac6c <_malloc_r+0x90>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ffc0 	bl	800ab9c <sbrk_aligned>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	4604      	mov	r4, r0
 800ac20:	d155      	bne.n	800acce <_malloc_r+0xf2>
 800ac22:	f8d8 4000 	ldr.w	r4, [r8]
 800ac26:	4626      	mov	r6, r4
 800ac28:	2e00      	cmp	r6, #0
 800ac2a:	d145      	bne.n	800acb8 <_malloc_r+0xdc>
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	d048      	beq.n	800acc2 <_malloc_r+0xe6>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	4631      	mov	r1, r6
 800ac34:	4638      	mov	r0, r7
 800ac36:	eb04 0903 	add.w	r9, r4, r3
 800ac3a:	f000 fc61 	bl	800b500 <_sbrk_r>
 800ac3e:	4581      	cmp	r9, r0
 800ac40:	d13f      	bne.n	800acc2 <_malloc_r+0xe6>
 800ac42:	6821      	ldr	r1, [r4, #0]
 800ac44:	1a6d      	subs	r5, r5, r1
 800ac46:	4629      	mov	r1, r5
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ffa7 	bl	800ab9c <sbrk_aligned>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d037      	beq.n	800acc2 <_malloc_r+0xe6>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	442b      	add	r3, r5
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	f8d8 3000 	ldr.w	r3, [r8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d038      	beq.n	800acd2 <_malloc_r+0xf6>
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	42a2      	cmp	r2, r4
 800ac64:	d12b      	bne.n	800acbe <_malloc_r+0xe2>
 800ac66:	2200      	movs	r2, #0
 800ac68:	605a      	str	r2, [r3, #4]
 800ac6a:	e00f      	b.n	800ac8c <_malloc_r+0xb0>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	1b52      	subs	r2, r2, r5
 800ac70:	d41f      	bmi.n	800acb2 <_malloc_r+0xd6>
 800ac72:	2a0b      	cmp	r2, #11
 800ac74:	d917      	bls.n	800aca6 <_malloc_r+0xca>
 800ac76:	1961      	adds	r1, r4, r5
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	6025      	str	r5, [r4, #0]
 800ac7c:	bf18      	it	ne
 800ac7e:	6059      	strne	r1, [r3, #4]
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	bf08      	it	eq
 800ac84:	f8c8 1000 	streq.w	r1, [r8]
 800ac88:	5162      	str	r2, [r4, r5]
 800ac8a:	604b      	str	r3, [r1, #4]
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f104 060b 	add.w	r6, r4, #11
 800ac92:	f000 f829 	bl	800ace8 <__malloc_unlock>
 800ac96:	f026 0607 	bic.w	r6, r6, #7
 800ac9a:	1d23      	adds	r3, r4, #4
 800ac9c:	1af2      	subs	r2, r6, r3
 800ac9e:	d0ae      	beq.n	800abfe <_malloc_r+0x22>
 800aca0:	1b9b      	subs	r3, r3, r6
 800aca2:	50a3      	str	r3, [r4, r2]
 800aca4:	e7ab      	b.n	800abfe <_malloc_r+0x22>
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	6862      	ldr	r2, [r4, #4]
 800acaa:	d1dd      	bne.n	800ac68 <_malloc_r+0x8c>
 800acac:	f8c8 2000 	str.w	r2, [r8]
 800acb0:	e7ec      	b.n	800ac8c <_malloc_r+0xb0>
 800acb2:	4623      	mov	r3, r4
 800acb4:	6864      	ldr	r4, [r4, #4]
 800acb6:	e7ac      	b.n	800ac12 <_malloc_r+0x36>
 800acb8:	4634      	mov	r4, r6
 800acba:	6876      	ldr	r6, [r6, #4]
 800acbc:	e7b4      	b.n	800ac28 <_malloc_r+0x4c>
 800acbe:	4613      	mov	r3, r2
 800acc0:	e7cc      	b.n	800ac5c <_malloc_r+0x80>
 800acc2:	230c      	movs	r3, #12
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	4638      	mov	r0, r7
 800acc8:	f000 f80e 	bl	800ace8 <__malloc_unlock>
 800accc:	e797      	b.n	800abfe <_malloc_r+0x22>
 800acce:	6025      	str	r5, [r4, #0]
 800acd0:	e7dc      	b.n	800ac8c <_malloc_r+0xb0>
 800acd2:	605b      	str	r3, [r3, #4]
 800acd4:	deff      	udf	#255	; 0xff
 800acd6:	bf00      	nop
 800acd8:	20002010 	.word	0x20002010

0800acdc <__malloc_lock>:
 800acdc:	4801      	ldr	r0, [pc, #4]	; (800ace4 <__malloc_lock+0x8>)
 800acde:	f7ff bf01 	b.w	800aae4 <__retarget_lock_acquire_recursive>
 800ace2:	bf00      	nop
 800ace4:	2000200c 	.word	0x2000200c

0800ace8 <__malloc_unlock>:
 800ace8:	4801      	ldr	r0, [pc, #4]	; (800acf0 <__malloc_unlock+0x8>)
 800acea:	f7ff befc 	b.w	800aae6 <__retarget_lock_release_recursive>
 800acee:	bf00      	nop
 800acf0:	2000200c 	.word	0x2000200c

0800acf4 <__sfputc_r>:
 800acf4:	6893      	ldr	r3, [r2, #8]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	b410      	push	{r4}
 800acfc:	6093      	str	r3, [r2, #8]
 800acfe:	da08      	bge.n	800ad12 <__sfputc_r+0x1e>
 800ad00:	6994      	ldr	r4, [r2, #24]
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	db01      	blt.n	800ad0a <__sfputc_r+0x16>
 800ad06:	290a      	cmp	r1, #10
 800ad08:	d103      	bne.n	800ad12 <__sfputc_r+0x1e>
 800ad0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad0e:	f7ff bd86 	b.w	800a81e <__swbuf_r>
 800ad12:	6813      	ldr	r3, [r2, #0]
 800ad14:	1c58      	adds	r0, r3, #1
 800ad16:	6010      	str	r0, [r2, #0]
 800ad18:	7019      	strb	r1, [r3, #0]
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <__sfputs_r>:
 800ad22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad24:	4606      	mov	r6, r0
 800ad26:	460f      	mov	r7, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	18d5      	adds	r5, r2, r3
 800ad2c:	42ac      	cmp	r4, r5
 800ad2e:	d101      	bne.n	800ad34 <__sfputs_r+0x12>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e007      	b.n	800ad44 <__sfputs_r+0x22>
 800ad34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad38:	463a      	mov	r2, r7
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ffda 	bl	800acf4 <__sfputc_r>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d1f3      	bne.n	800ad2c <__sfputs_r+0xa>
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad48 <_vfiprintf_r>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	b09d      	sub	sp, #116	; 0x74
 800ad50:	4614      	mov	r4, r2
 800ad52:	4698      	mov	r8, r3
 800ad54:	4606      	mov	r6, r0
 800ad56:	b118      	cbz	r0, 800ad60 <_vfiprintf_r+0x18>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x18>
 800ad5c:	f7ff fc78 	bl	800a650 <__sinit>
 800ad60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d405      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	059a      	lsls	r2, r3, #22
 800ad6a:	d402      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad6e:	f7ff feb9 	bl	800aae4 <__retarget_lock_acquire_recursive>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	071b      	lsls	r3, r3, #28
 800ad76:	d501      	bpl.n	800ad7c <_vfiprintf_r+0x34>
 800ad78:	692b      	ldr	r3, [r5, #16]
 800ad7a:	b99b      	cbnz	r3, 800ada4 <_vfiprintf_r+0x5c>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff fd8a 	bl	800a898 <__swsetup_r>
 800ad84:	b170      	cbz	r0, 800ada4 <_vfiprintf_r+0x5c>
 800ad86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad88:	07dc      	lsls	r4, r3, #31
 800ad8a:	d504      	bpl.n	800ad96 <_vfiprintf_r+0x4e>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b01d      	add	sp, #116	; 0x74
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	0598      	lsls	r0, r3, #22
 800ad9a:	d4f7      	bmi.n	800ad8c <_vfiprintf_r+0x44>
 800ad9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9e:	f7ff fea2 	bl	800aae6 <__retarget_lock_release_recursive>
 800ada2:	e7f3      	b.n	800ad8c <_vfiprintf_r+0x44>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9309      	str	r3, [sp, #36]	; 0x24
 800ada8:	2320      	movs	r3, #32
 800adaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adae:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb2:	2330      	movs	r3, #48	; 0x30
 800adb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af68 <_vfiprintf_r+0x220>
 800adb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adbc:	f04f 0901 	mov.w	r9, #1
 800adc0:	4623      	mov	r3, r4
 800adc2:	469a      	mov	sl, r3
 800adc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc8:	b10a      	cbz	r2, 800adce <_vfiprintf_r+0x86>
 800adca:	2a25      	cmp	r2, #37	; 0x25
 800adcc:	d1f9      	bne.n	800adc2 <_vfiprintf_r+0x7a>
 800adce:	ebba 0b04 	subs.w	fp, sl, r4
 800add2:	d00b      	beq.n	800adec <_vfiprintf_r+0xa4>
 800add4:	465b      	mov	r3, fp
 800add6:	4622      	mov	r2, r4
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ffa1 	bl	800ad22 <__sfputs_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	f000 80a9 	beq.w	800af38 <_vfiprintf_r+0x1f0>
 800ade6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade8:	445a      	add	r2, fp
 800adea:	9209      	str	r2, [sp, #36]	; 0x24
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80a1 	beq.w	800af38 <_vfiprintf_r+0x1f0>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae00:	f10a 0a01 	add.w	sl, sl, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0e:	4654      	mov	r4, sl
 800ae10:	2205      	movs	r2, #5
 800ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae16:	4854      	ldr	r0, [pc, #336]	; (800af68 <_vfiprintf_r+0x220>)
 800ae18:	f7f5 f9e2 	bl	80001e0 <memchr>
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	b9d8      	cbnz	r0, 800ae58 <_vfiprintf_r+0x110>
 800ae20:	06d1      	lsls	r1, r2, #27
 800ae22:	bf44      	itt	mi
 800ae24:	2320      	movmi	r3, #32
 800ae26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae2a:	0713      	lsls	r3, r2, #28
 800ae2c:	bf44      	itt	mi
 800ae2e:	232b      	movmi	r3, #43	; 0x2b
 800ae30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae34:	f89a 3000 	ldrb.w	r3, [sl]
 800ae38:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3a:	d015      	beq.n	800ae68 <_vfiprintf_r+0x120>
 800ae3c:	9a07      	ldr	r2, [sp, #28]
 800ae3e:	4654      	mov	r4, sl
 800ae40:	2000      	movs	r0, #0
 800ae42:	f04f 0c0a 	mov.w	ip, #10
 800ae46:	4621      	mov	r1, r4
 800ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4c:	3b30      	subs	r3, #48	; 0x30
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	d94d      	bls.n	800aeee <_vfiprintf_r+0x1a6>
 800ae52:	b1b0      	cbz	r0, 800ae82 <_vfiprintf_r+0x13a>
 800ae54:	9207      	str	r2, [sp, #28]
 800ae56:	e014      	b.n	800ae82 <_vfiprintf_r+0x13a>
 800ae58:	eba0 0308 	sub.w	r3, r0, r8
 800ae5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	46a2      	mov	sl, r4
 800ae66:	e7d2      	b.n	800ae0e <_vfiprintf_r+0xc6>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	1d19      	adds	r1, r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	9103      	str	r1, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbb      	ittet	lt
 800ae74:	425b      	neglt	r3, r3
 800ae76:	f042 0202 	orrlt.w	r2, r2, #2
 800ae7a:	9307      	strge	r3, [sp, #28]
 800ae7c:	9307      	strlt	r3, [sp, #28]
 800ae7e:	bfb8      	it	lt
 800ae80:	9204      	strlt	r2, [sp, #16]
 800ae82:	7823      	ldrb	r3, [r4, #0]
 800ae84:	2b2e      	cmp	r3, #46	; 0x2e
 800ae86:	d10c      	bne.n	800aea2 <_vfiprintf_r+0x15a>
 800ae88:	7863      	ldrb	r3, [r4, #1]
 800ae8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae8c:	d134      	bne.n	800aef8 <_vfiprintf_r+0x1b0>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	1d1a      	adds	r2, r3, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9203      	str	r2, [sp, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bfb8      	it	lt
 800ae9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9e:	3402      	adds	r4, #2
 800aea0:	9305      	str	r3, [sp, #20]
 800aea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af78 <_vfiprintf_r+0x230>
 800aea6:	7821      	ldrb	r1, [r4, #0]
 800aea8:	2203      	movs	r2, #3
 800aeaa:	4650      	mov	r0, sl
 800aeac:	f7f5 f998 	bl	80001e0 <memchr>
 800aeb0:	b138      	cbz	r0, 800aec2 <_vfiprintf_r+0x17a>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	eba0 000a 	sub.w	r0, r0, sl
 800aeb8:	2240      	movs	r2, #64	; 0x40
 800aeba:	4082      	lsls	r2, r0
 800aebc:	4313      	orrs	r3, r2
 800aebe:	3401      	adds	r4, #1
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4829      	ldr	r0, [pc, #164]	; (800af6c <_vfiprintf_r+0x224>)
 800aec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aecc:	2206      	movs	r2, #6
 800aece:	f7f5 f987 	bl	80001e0 <memchr>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d03f      	beq.n	800af56 <_vfiprintf_r+0x20e>
 800aed6:	4b26      	ldr	r3, [pc, #152]	; (800af70 <_vfiprintf_r+0x228>)
 800aed8:	bb1b      	cbnz	r3, 800af22 <_vfiprintf_r+0x1da>
 800aeda:	9b03      	ldr	r3, [sp, #12]
 800aedc:	3307      	adds	r3, #7
 800aede:	f023 0307 	bic.w	r3, r3, #7
 800aee2:	3308      	adds	r3, #8
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	443b      	add	r3, r7
 800aeea:	9309      	str	r3, [sp, #36]	; 0x24
 800aeec:	e768      	b.n	800adc0 <_vfiprintf_r+0x78>
 800aeee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef2:	460c      	mov	r4, r1
 800aef4:	2001      	movs	r0, #1
 800aef6:	e7a6      	b.n	800ae46 <_vfiprintf_r+0xfe>
 800aef8:	2300      	movs	r3, #0
 800aefa:	3401      	adds	r4, #1
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	4619      	mov	r1, r3
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4620      	mov	r0, r4
 800af06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0a:	3a30      	subs	r2, #48	; 0x30
 800af0c:	2a09      	cmp	r2, #9
 800af0e:	d903      	bls.n	800af18 <_vfiprintf_r+0x1d0>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d0c6      	beq.n	800aea2 <_vfiprintf_r+0x15a>
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	e7c4      	b.n	800aea2 <_vfiprintf_r+0x15a>
 800af18:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1c:	4604      	mov	r4, r0
 800af1e:	2301      	movs	r3, #1
 800af20:	e7f0      	b.n	800af04 <_vfiprintf_r+0x1bc>
 800af22:	ab03      	add	r3, sp, #12
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	462a      	mov	r2, r5
 800af28:	4b12      	ldr	r3, [pc, #72]	; (800af74 <_vfiprintf_r+0x22c>)
 800af2a:	a904      	add	r1, sp, #16
 800af2c:	4630      	mov	r0, r6
 800af2e:	f3af 8000 	nop.w
 800af32:	4607      	mov	r7, r0
 800af34:	1c78      	adds	r0, r7, #1
 800af36:	d1d6      	bne.n	800aee6 <_vfiprintf_r+0x19e>
 800af38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af3a:	07d9      	lsls	r1, r3, #31
 800af3c:	d405      	bmi.n	800af4a <_vfiprintf_r+0x202>
 800af3e:	89ab      	ldrh	r3, [r5, #12]
 800af40:	059a      	lsls	r2, r3, #22
 800af42:	d402      	bmi.n	800af4a <_vfiprintf_r+0x202>
 800af44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af46:	f7ff fdce 	bl	800aae6 <__retarget_lock_release_recursive>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	065b      	lsls	r3, r3, #25
 800af4e:	f53f af1d 	bmi.w	800ad8c <_vfiprintf_r+0x44>
 800af52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af54:	e71c      	b.n	800ad90 <_vfiprintf_r+0x48>
 800af56:	ab03      	add	r3, sp, #12
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	462a      	mov	r2, r5
 800af5c:	4b05      	ldr	r3, [pc, #20]	; (800af74 <_vfiprintf_r+0x22c>)
 800af5e:	a904      	add	r1, sp, #16
 800af60:	4630      	mov	r0, r6
 800af62:	f000 f879 	bl	800b058 <_printf_i>
 800af66:	e7e4      	b.n	800af32 <_vfiprintf_r+0x1ea>
 800af68:	0800b824 	.word	0x0800b824
 800af6c:	0800b82e 	.word	0x0800b82e
 800af70:	00000000 	.word	0x00000000
 800af74:	0800ad23 	.word	0x0800ad23
 800af78:	0800b82a 	.word	0x0800b82a

0800af7c <_printf_common>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4616      	mov	r6, r2
 800af82:	4699      	mov	r9, r3
 800af84:	688a      	ldr	r2, [r1, #8]
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af8c:	4293      	cmp	r3, r2
 800af8e:	bfb8      	it	lt
 800af90:	4613      	movlt	r3, r2
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af98:	4607      	mov	r7, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b10a      	cbz	r2, 800afa2 <_printf_common+0x26>
 800af9e:	3301      	adds	r3, #1
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	0699      	lsls	r1, r3, #26
 800afa6:	bf42      	ittt	mi
 800afa8:	6833      	ldrmi	r3, [r6, #0]
 800afaa:	3302      	addmi	r3, #2
 800afac:	6033      	strmi	r3, [r6, #0]
 800afae:	6825      	ldr	r5, [r4, #0]
 800afb0:	f015 0506 	ands.w	r5, r5, #6
 800afb4:	d106      	bne.n	800afc4 <_printf_common+0x48>
 800afb6:	f104 0a19 	add.w	sl, r4, #25
 800afba:	68e3      	ldr	r3, [r4, #12]
 800afbc:	6832      	ldr	r2, [r6, #0]
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dc26      	bgt.n	800b012 <_printf_common+0x96>
 800afc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afc8:	1e13      	subs	r3, r2, #0
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	bf18      	it	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	0692      	lsls	r2, r2, #26
 800afd2:	d42b      	bmi.n	800b02c <_printf_common+0xb0>
 800afd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afd8:	4649      	mov	r1, r9
 800afda:	4638      	mov	r0, r7
 800afdc:	47c0      	blx	r8
 800afde:	3001      	adds	r0, #1
 800afe0:	d01e      	beq.n	800b020 <_printf_common+0xa4>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	6922      	ldr	r2, [r4, #16]
 800afe6:	f003 0306 	and.w	r3, r3, #6
 800afea:	2b04      	cmp	r3, #4
 800afec:	bf02      	ittt	eq
 800afee:	68e5      	ldreq	r5, [r4, #12]
 800aff0:	6833      	ldreq	r3, [r6, #0]
 800aff2:	1aed      	subeq	r5, r5, r3
 800aff4:	68a3      	ldr	r3, [r4, #8]
 800aff6:	bf0c      	ite	eq
 800aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800affc:	2500      	movne	r5, #0
 800affe:	4293      	cmp	r3, r2
 800b000:	bfc4      	itt	gt
 800b002:	1a9b      	subgt	r3, r3, r2
 800b004:	18ed      	addgt	r5, r5, r3
 800b006:	2600      	movs	r6, #0
 800b008:	341a      	adds	r4, #26
 800b00a:	42b5      	cmp	r5, r6
 800b00c:	d11a      	bne.n	800b044 <_printf_common+0xc8>
 800b00e:	2000      	movs	r0, #0
 800b010:	e008      	b.n	800b024 <_printf_common+0xa8>
 800b012:	2301      	movs	r3, #1
 800b014:	4652      	mov	r2, sl
 800b016:	4649      	mov	r1, r9
 800b018:	4638      	mov	r0, r7
 800b01a:	47c0      	blx	r8
 800b01c:	3001      	adds	r0, #1
 800b01e:	d103      	bne.n	800b028 <_printf_common+0xac>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	3501      	adds	r5, #1
 800b02a:	e7c6      	b.n	800afba <_printf_common+0x3e>
 800b02c:	18e1      	adds	r1, r4, r3
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	2030      	movs	r0, #48	; 0x30
 800b032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b036:	4422      	add	r2, r4
 800b038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b040:	3302      	adds	r3, #2
 800b042:	e7c7      	b.n	800afd4 <_printf_common+0x58>
 800b044:	2301      	movs	r3, #1
 800b046:	4622      	mov	r2, r4
 800b048:	4649      	mov	r1, r9
 800b04a:	4638      	mov	r0, r7
 800b04c:	47c0      	blx	r8
 800b04e:	3001      	adds	r0, #1
 800b050:	d0e6      	beq.n	800b020 <_printf_common+0xa4>
 800b052:	3601      	adds	r6, #1
 800b054:	e7d9      	b.n	800b00a <_printf_common+0x8e>
	...

0800b058 <_printf_i>:
 800b058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	7e0f      	ldrb	r7, [r1, #24]
 800b05e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b060:	2f78      	cmp	r7, #120	; 0x78
 800b062:	4691      	mov	r9, r2
 800b064:	4680      	mov	r8, r0
 800b066:	460c      	mov	r4, r1
 800b068:	469a      	mov	sl, r3
 800b06a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b06e:	d807      	bhi.n	800b080 <_printf_i+0x28>
 800b070:	2f62      	cmp	r7, #98	; 0x62
 800b072:	d80a      	bhi.n	800b08a <_printf_i+0x32>
 800b074:	2f00      	cmp	r7, #0
 800b076:	f000 80d4 	beq.w	800b222 <_printf_i+0x1ca>
 800b07a:	2f58      	cmp	r7, #88	; 0x58
 800b07c:	f000 80c0 	beq.w	800b200 <_printf_i+0x1a8>
 800b080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b088:	e03a      	b.n	800b100 <_printf_i+0xa8>
 800b08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b08e:	2b15      	cmp	r3, #21
 800b090:	d8f6      	bhi.n	800b080 <_printf_i+0x28>
 800b092:	a101      	add	r1, pc, #4	; (adr r1, 800b098 <_printf_i+0x40>)
 800b094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b105 	.word	0x0800b105
 800b0a0:	0800b081 	.word	0x0800b081
 800b0a4:	0800b081 	.word	0x0800b081
 800b0a8:	0800b081 	.word	0x0800b081
 800b0ac:	0800b081 	.word	0x0800b081
 800b0b0:	0800b105 	.word	0x0800b105
 800b0b4:	0800b081 	.word	0x0800b081
 800b0b8:	0800b081 	.word	0x0800b081
 800b0bc:	0800b081 	.word	0x0800b081
 800b0c0:	0800b081 	.word	0x0800b081
 800b0c4:	0800b209 	.word	0x0800b209
 800b0c8:	0800b131 	.word	0x0800b131
 800b0cc:	0800b1c3 	.word	0x0800b1c3
 800b0d0:	0800b081 	.word	0x0800b081
 800b0d4:	0800b081 	.word	0x0800b081
 800b0d8:	0800b22b 	.word	0x0800b22b
 800b0dc:	0800b081 	.word	0x0800b081
 800b0e0:	0800b131 	.word	0x0800b131
 800b0e4:	0800b081 	.word	0x0800b081
 800b0e8:	0800b081 	.word	0x0800b081
 800b0ec:	0800b1cb 	.word	0x0800b1cb
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	602a      	str	r2, [r5, #0]
 800b0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b100:	2301      	movs	r3, #1
 800b102:	e09f      	b.n	800b244 <_printf_i+0x1ec>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	0607      	lsls	r7, r0, #24
 800b10a:	f103 0104 	add.w	r1, r3, #4
 800b10e:	6029      	str	r1, [r5, #0]
 800b110:	d501      	bpl.n	800b116 <_printf_i+0xbe>
 800b112:	681e      	ldr	r6, [r3, #0]
 800b114:	e003      	b.n	800b11e <_printf_i+0xc6>
 800b116:	0646      	lsls	r6, r0, #25
 800b118:	d5fb      	bpl.n	800b112 <_printf_i+0xba>
 800b11a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b11e:	2e00      	cmp	r6, #0
 800b120:	da03      	bge.n	800b12a <_printf_i+0xd2>
 800b122:	232d      	movs	r3, #45	; 0x2d
 800b124:	4276      	negs	r6, r6
 800b126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12a:	485a      	ldr	r0, [pc, #360]	; (800b294 <_printf_i+0x23c>)
 800b12c:	230a      	movs	r3, #10
 800b12e:	e012      	b.n	800b156 <_printf_i+0xfe>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	6820      	ldr	r0, [r4, #0]
 800b134:	1d19      	adds	r1, r3, #4
 800b136:	6029      	str	r1, [r5, #0]
 800b138:	0605      	lsls	r5, r0, #24
 800b13a:	d501      	bpl.n	800b140 <_printf_i+0xe8>
 800b13c:	681e      	ldr	r6, [r3, #0]
 800b13e:	e002      	b.n	800b146 <_printf_i+0xee>
 800b140:	0641      	lsls	r1, r0, #25
 800b142:	d5fb      	bpl.n	800b13c <_printf_i+0xe4>
 800b144:	881e      	ldrh	r6, [r3, #0]
 800b146:	4853      	ldr	r0, [pc, #332]	; (800b294 <_printf_i+0x23c>)
 800b148:	2f6f      	cmp	r7, #111	; 0x6f
 800b14a:	bf0c      	ite	eq
 800b14c:	2308      	moveq	r3, #8
 800b14e:	230a      	movne	r3, #10
 800b150:	2100      	movs	r1, #0
 800b152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b156:	6865      	ldr	r5, [r4, #4]
 800b158:	60a5      	str	r5, [r4, #8]
 800b15a:	2d00      	cmp	r5, #0
 800b15c:	bfa2      	ittt	ge
 800b15e:	6821      	ldrge	r1, [r4, #0]
 800b160:	f021 0104 	bicge.w	r1, r1, #4
 800b164:	6021      	strge	r1, [r4, #0]
 800b166:	b90e      	cbnz	r6, 800b16c <_printf_i+0x114>
 800b168:	2d00      	cmp	r5, #0
 800b16a:	d04b      	beq.n	800b204 <_printf_i+0x1ac>
 800b16c:	4615      	mov	r5, r2
 800b16e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b172:	fb03 6711 	mls	r7, r3, r1, r6
 800b176:	5dc7      	ldrb	r7, [r0, r7]
 800b178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b17c:	4637      	mov	r7, r6
 800b17e:	42bb      	cmp	r3, r7
 800b180:	460e      	mov	r6, r1
 800b182:	d9f4      	bls.n	800b16e <_printf_i+0x116>
 800b184:	2b08      	cmp	r3, #8
 800b186:	d10b      	bne.n	800b1a0 <_printf_i+0x148>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	07de      	lsls	r6, r3, #31
 800b18c:	d508      	bpl.n	800b1a0 <_printf_i+0x148>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	6861      	ldr	r1, [r4, #4]
 800b192:	4299      	cmp	r1, r3
 800b194:	bfde      	ittt	le
 800b196:	2330      	movle	r3, #48	; 0x30
 800b198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b19c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1a0:	1b52      	subs	r2, r2, r5
 800b1a2:	6122      	str	r2, [r4, #16]
 800b1a4:	f8cd a000 	str.w	sl, [sp]
 800b1a8:	464b      	mov	r3, r9
 800b1aa:	aa03      	add	r2, sp, #12
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	f7ff fee4 	bl	800af7c <_printf_common>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d14a      	bne.n	800b24e <_printf_i+0x1f6>
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	b004      	add	sp, #16
 800b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	f043 0320 	orr.w	r3, r3, #32
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	4833      	ldr	r0, [pc, #204]	; (800b298 <_printf_i+0x240>)
 800b1cc:	2778      	movs	r7, #120	; 0x78
 800b1ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	6829      	ldr	r1, [r5, #0]
 800b1d6:	061f      	lsls	r7, r3, #24
 800b1d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1dc:	d402      	bmi.n	800b1e4 <_printf_i+0x18c>
 800b1de:	065f      	lsls	r7, r3, #25
 800b1e0:	bf48      	it	mi
 800b1e2:	b2b6      	uxthmi	r6, r6
 800b1e4:	07df      	lsls	r7, r3, #31
 800b1e6:	bf48      	it	mi
 800b1e8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ec:	6029      	str	r1, [r5, #0]
 800b1ee:	bf48      	it	mi
 800b1f0:	6023      	strmi	r3, [r4, #0]
 800b1f2:	b91e      	cbnz	r6, 800b1fc <_printf_i+0x1a4>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	f023 0320 	bic.w	r3, r3, #32
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	e7a7      	b.n	800b150 <_printf_i+0xf8>
 800b200:	4824      	ldr	r0, [pc, #144]	; (800b294 <_printf_i+0x23c>)
 800b202:	e7e4      	b.n	800b1ce <_printf_i+0x176>
 800b204:	4615      	mov	r5, r2
 800b206:	e7bd      	b.n	800b184 <_printf_i+0x12c>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	6826      	ldr	r6, [r4, #0]
 800b20c:	6961      	ldr	r1, [r4, #20]
 800b20e:	1d18      	adds	r0, r3, #4
 800b210:	6028      	str	r0, [r5, #0]
 800b212:	0635      	lsls	r5, r6, #24
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	d501      	bpl.n	800b21c <_printf_i+0x1c4>
 800b218:	6019      	str	r1, [r3, #0]
 800b21a:	e002      	b.n	800b222 <_printf_i+0x1ca>
 800b21c:	0670      	lsls	r0, r6, #25
 800b21e:	d5fb      	bpl.n	800b218 <_printf_i+0x1c0>
 800b220:	8019      	strh	r1, [r3, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	4615      	mov	r5, r2
 800b228:	e7bc      	b.n	800b1a4 <_printf_i+0x14c>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	1d1a      	adds	r2, r3, #4
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	681d      	ldr	r5, [r3, #0]
 800b232:	6862      	ldr	r2, [r4, #4]
 800b234:	2100      	movs	r1, #0
 800b236:	4628      	mov	r0, r5
 800b238:	f7f4 ffd2 	bl	80001e0 <memchr>
 800b23c:	b108      	cbz	r0, 800b242 <_printf_i+0x1ea>
 800b23e:	1b40      	subs	r0, r0, r5
 800b240:	6060      	str	r0, [r4, #4]
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	6123      	str	r3, [r4, #16]
 800b246:	2300      	movs	r3, #0
 800b248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24c:	e7aa      	b.n	800b1a4 <_printf_i+0x14c>
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	462a      	mov	r2, r5
 800b252:	4649      	mov	r1, r9
 800b254:	4640      	mov	r0, r8
 800b256:	47d0      	blx	sl
 800b258:	3001      	adds	r0, #1
 800b25a:	d0ad      	beq.n	800b1b8 <_printf_i+0x160>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	079b      	lsls	r3, r3, #30
 800b260:	d413      	bmi.n	800b28a <_printf_i+0x232>
 800b262:	68e0      	ldr	r0, [r4, #12]
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	4298      	cmp	r0, r3
 800b268:	bfb8      	it	lt
 800b26a:	4618      	movlt	r0, r3
 800b26c:	e7a6      	b.n	800b1bc <_printf_i+0x164>
 800b26e:	2301      	movs	r3, #1
 800b270:	4632      	mov	r2, r6
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	47d0      	blx	sl
 800b278:	3001      	adds	r0, #1
 800b27a:	d09d      	beq.n	800b1b8 <_printf_i+0x160>
 800b27c:	3501      	adds	r5, #1
 800b27e:	68e3      	ldr	r3, [r4, #12]
 800b280:	9903      	ldr	r1, [sp, #12]
 800b282:	1a5b      	subs	r3, r3, r1
 800b284:	42ab      	cmp	r3, r5
 800b286:	dcf2      	bgt.n	800b26e <_printf_i+0x216>
 800b288:	e7eb      	b.n	800b262 <_printf_i+0x20a>
 800b28a:	2500      	movs	r5, #0
 800b28c:	f104 0619 	add.w	r6, r4, #25
 800b290:	e7f5      	b.n	800b27e <_printf_i+0x226>
 800b292:	bf00      	nop
 800b294:	0800b835 	.word	0x0800b835
 800b298:	0800b846 	.word	0x0800b846

0800b29c <__sflush_r>:
 800b29c:	898a      	ldrh	r2, [r1, #12]
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	0710      	lsls	r0, r2, #28
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	d458      	bmi.n	800b35c <__sflush_r+0xc0>
 800b2aa:	684b      	ldr	r3, [r1, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dc05      	bgt.n	800b2bc <__sflush_r+0x20>
 800b2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dc02      	bgt.n	800b2bc <__sflush_r+0x20>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	d0f9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2c8:	682f      	ldr	r7, [r5, #0]
 800b2ca:	6a21      	ldr	r1, [r4, #32]
 800b2cc:	602b      	str	r3, [r5, #0]
 800b2ce:	d032      	beq.n	800b336 <__sflush_r+0x9a>
 800b2d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	075a      	lsls	r2, r3, #29
 800b2d6:	d505      	bpl.n	800b2e4 <__sflush_r+0x48>
 800b2d8:	6863      	ldr	r3, [r4, #4]
 800b2da:	1ac0      	subs	r0, r0, r3
 800b2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2de:	b10b      	cbz	r3, 800b2e4 <__sflush_r+0x48>
 800b2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2e2:	1ac0      	subs	r0, r0, r3
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ea:	6a21      	ldr	r1, [r4, #32]
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	47b0      	blx	r6
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	d106      	bne.n	800b304 <__sflush_r+0x68>
 800b2f6:	6829      	ldr	r1, [r5, #0]
 800b2f8:	291d      	cmp	r1, #29
 800b2fa:	d82b      	bhi.n	800b354 <__sflush_r+0xb8>
 800b2fc:	4a29      	ldr	r2, [pc, #164]	; (800b3a4 <__sflush_r+0x108>)
 800b2fe:	410a      	asrs	r2, r1
 800b300:	07d6      	lsls	r6, r2, #31
 800b302:	d427      	bmi.n	800b354 <__sflush_r+0xb8>
 800b304:	2200      	movs	r2, #0
 800b306:	6062      	str	r2, [r4, #4]
 800b308:	04d9      	lsls	r1, r3, #19
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	6022      	str	r2, [r4, #0]
 800b30e:	d504      	bpl.n	800b31a <__sflush_r+0x7e>
 800b310:	1c42      	adds	r2, r0, #1
 800b312:	d101      	bne.n	800b318 <__sflush_r+0x7c>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b903      	cbnz	r3, 800b31a <__sflush_r+0x7e>
 800b318:	6560      	str	r0, [r4, #84]	; 0x54
 800b31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b31c:	602f      	str	r7, [r5, #0]
 800b31e:	2900      	cmp	r1, #0
 800b320:	d0c9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b326:	4299      	cmp	r1, r3
 800b328:	d002      	beq.n	800b330 <__sflush_r+0x94>
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7ff fbea 	bl	800ab04 <_free_r>
 800b330:	2000      	movs	r0, #0
 800b332:	6360      	str	r0, [r4, #52]	; 0x34
 800b334:	e7c0      	b.n	800b2b8 <__sflush_r+0x1c>
 800b336:	2301      	movs	r3, #1
 800b338:	4628      	mov	r0, r5
 800b33a:	47b0      	blx	r6
 800b33c:	1c41      	adds	r1, r0, #1
 800b33e:	d1c8      	bne.n	800b2d2 <__sflush_r+0x36>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0c5      	beq.n	800b2d2 <__sflush_r+0x36>
 800b346:	2b1d      	cmp	r3, #29
 800b348:	d001      	beq.n	800b34e <__sflush_r+0xb2>
 800b34a:	2b16      	cmp	r3, #22
 800b34c:	d101      	bne.n	800b352 <__sflush_r+0xb6>
 800b34e:	602f      	str	r7, [r5, #0]
 800b350:	e7b1      	b.n	800b2b6 <__sflush_r+0x1a>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	e7ad      	b.n	800b2b8 <__sflush_r+0x1c>
 800b35c:	690f      	ldr	r7, [r1, #16]
 800b35e:	2f00      	cmp	r7, #0
 800b360:	d0a9      	beq.n	800b2b6 <__sflush_r+0x1a>
 800b362:	0793      	lsls	r3, r2, #30
 800b364:	680e      	ldr	r6, [r1, #0]
 800b366:	bf08      	it	eq
 800b368:	694b      	ldreq	r3, [r1, #20]
 800b36a:	600f      	str	r7, [r1, #0]
 800b36c:	bf18      	it	ne
 800b36e:	2300      	movne	r3, #0
 800b370:	eba6 0807 	sub.w	r8, r6, r7
 800b374:	608b      	str	r3, [r1, #8]
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	dd9c      	ble.n	800b2b6 <__sflush_r+0x1a>
 800b37c:	6a21      	ldr	r1, [r4, #32]
 800b37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b380:	4643      	mov	r3, r8
 800b382:	463a      	mov	r2, r7
 800b384:	4628      	mov	r0, r5
 800b386:	47b0      	blx	r6
 800b388:	2800      	cmp	r0, #0
 800b38a:	dc06      	bgt.n	800b39a <__sflush_r+0xfe>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	e78e      	b.n	800b2b8 <__sflush_r+0x1c>
 800b39a:	4407      	add	r7, r0
 800b39c:	eba8 0800 	sub.w	r8, r8, r0
 800b3a0:	e7e9      	b.n	800b376 <__sflush_r+0xda>
 800b3a2:	bf00      	nop
 800b3a4:	dfbffffe 	.word	0xdfbffffe

0800b3a8 <_fflush_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	690b      	ldr	r3, [r1, #16]
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b913      	cbnz	r3, 800b3b8 <_fflush_r+0x10>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	b118      	cbz	r0, 800b3c2 <_fflush_r+0x1a>
 800b3ba:	6a03      	ldr	r3, [r0, #32]
 800b3bc:	b90b      	cbnz	r3, 800b3c2 <_fflush_r+0x1a>
 800b3be:	f7ff f947 	bl	800a650 <__sinit>
 800b3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0f3      	beq.n	800b3b2 <_fflush_r+0xa>
 800b3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3cc:	07d0      	lsls	r0, r2, #31
 800b3ce:	d404      	bmi.n	800b3da <_fflush_r+0x32>
 800b3d0:	0599      	lsls	r1, r3, #22
 800b3d2:	d402      	bmi.n	800b3da <_fflush_r+0x32>
 800b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d6:	f7ff fb85 	bl	800aae4 <__retarget_lock_acquire_recursive>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7ff ff5d 	bl	800b29c <__sflush_r>
 800b3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3e4:	07da      	lsls	r2, r3, #31
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	d4e4      	bmi.n	800b3b4 <_fflush_r+0xc>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	059b      	lsls	r3, r3, #22
 800b3ee:	d4e1      	bmi.n	800b3b4 <_fflush_r+0xc>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f2:	f7ff fb78 	bl	800aae6 <__retarget_lock_release_recursive>
 800b3f6:	e7dd      	b.n	800b3b4 <_fflush_r+0xc>

0800b3f8 <__swhatbuf_r>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b400:	2900      	cmp	r1, #0
 800b402:	b096      	sub	sp, #88	; 0x58
 800b404:	4615      	mov	r5, r2
 800b406:	461e      	mov	r6, r3
 800b408:	da0d      	bge.n	800b426 <__swhatbuf_r+0x2e>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b410:	f04f 0100 	mov.w	r1, #0
 800b414:	bf0c      	ite	eq
 800b416:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b41a:	2340      	movne	r3, #64	; 0x40
 800b41c:	2000      	movs	r0, #0
 800b41e:	6031      	str	r1, [r6, #0]
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	b016      	add	sp, #88	; 0x58
 800b424:	bd70      	pop	{r4, r5, r6, pc}
 800b426:	466a      	mov	r2, sp
 800b428:	f000 f848 	bl	800b4bc <_fstat_r>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	dbec      	blt.n	800b40a <__swhatbuf_r+0x12>
 800b430:	9901      	ldr	r1, [sp, #4]
 800b432:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b436:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b43a:	4259      	negs	r1, r3
 800b43c:	4159      	adcs	r1, r3
 800b43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b442:	e7eb      	b.n	800b41c <__swhatbuf_r+0x24>

0800b444 <__smakebuf_r>:
 800b444:	898b      	ldrh	r3, [r1, #12]
 800b446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b448:	079d      	lsls	r5, r3, #30
 800b44a:	4606      	mov	r6, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	d507      	bpl.n	800b460 <__smakebuf_r+0x1c>
 800b450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	6123      	str	r3, [r4, #16]
 800b458:	2301      	movs	r3, #1
 800b45a:	6163      	str	r3, [r4, #20]
 800b45c:	b002      	add	sp, #8
 800b45e:	bd70      	pop	{r4, r5, r6, pc}
 800b460:	ab01      	add	r3, sp, #4
 800b462:	466a      	mov	r2, sp
 800b464:	f7ff ffc8 	bl	800b3f8 <__swhatbuf_r>
 800b468:	9900      	ldr	r1, [sp, #0]
 800b46a:	4605      	mov	r5, r0
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff fbb5 	bl	800abdc <_malloc_r>
 800b472:	b948      	cbnz	r0, 800b488 <__smakebuf_r+0x44>
 800b474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b478:	059a      	lsls	r2, r3, #22
 800b47a:	d4ef      	bmi.n	800b45c <__smakebuf_r+0x18>
 800b47c:	f023 0303 	bic.w	r3, r3, #3
 800b480:	f043 0302 	orr.w	r3, r3, #2
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	e7e3      	b.n	800b450 <__smakebuf_r+0xc>
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	6020      	str	r0, [r4, #0]
 800b48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	6163      	str	r3, [r4, #20]
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	6120      	str	r0, [r4, #16]
 800b49a:	b15b      	cbz	r3, 800b4b4 <__smakebuf_r+0x70>
 800b49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f000 f81d 	bl	800b4e0 <_isatty_r>
 800b4a6:	b128      	cbz	r0, 800b4b4 <__smakebuf_r+0x70>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f023 0303 	bic.w	r3, r3, #3
 800b4ae:	f043 0301 	orr.w	r3, r3, #1
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	431d      	orrs	r5, r3
 800b4b8:	81a5      	strh	r5, [r4, #12]
 800b4ba:	e7cf      	b.n	800b45c <__smakebuf_r+0x18>

0800b4bc <_fstat_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	; (800b4dc <_fstat_r+0x20>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	602b      	str	r3, [r5, #0]
 800b4ca:	f7f5 fa6c 	bl	80009a6 <_fstat>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d102      	bne.n	800b4d8 <_fstat_r+0x1c>
 800b4d2:	682b      	ldr	r3, [r5, #0]
 800b4d4:	b103      	cbz	r3, 800b4d8 <_fstat_r+0x1c>
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	bf00      	nop
 800b4dc:	20002008 	.word	0x20002008

0800b4e0 <_isatty_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d06      	ldr	r5, [pc, #24]	; (800b4fc <_isatty_r+0x1c>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7f5 fa6b 	bl	80009c6 <_isatty>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_isatty_r+0x1a>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_isatty_r+0x1a>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20002008 	.word	0x20002008

0800b500 <_sbrk_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4d06      	ldr	r5, [pc, #24]	; (800b51c <_sbrk_r+0x1c>)
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	602b      	str	r3, [r5, #0]
 800b50c:	f7f5 fa74 	bl	80009f8 <_sbrk>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_sbrk_r+0x1a>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_sbrk_r+0x1a>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	20002008 	.word	0x20002008

0800b520 <_init>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	bf00      	nop
 800b524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b526:	bc08      	pop	{r3}
 800b528:	469e      	mov	lr, r3
 800b52a:	4770      	bx	lr

0800b52c <_fini>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	bf00      	nop
 800b530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b532:	bc08      	pop	{r3}
 800b534:	469e      	mov	lr, r3
 800b536:	4770      	bx	lr
