
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ec  0800b5ec  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5ec  0800b5ec  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5ec  0800b5ec  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800b5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          00001f3c  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000200c  2000200c  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ec1b  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004573  00000000  00000000  0003ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f8  00000000  00000000  000432d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011be  00000000  00000000  000449d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000250ac  00000000  00000000  00045b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f35f  00000000  00000000  0006ac3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d71a3  00000000  00000000  00089f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006598  00000000  00000000  0016113c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001676d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b330 	.word	0x0800b330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800b330 	.word	0x0800b330

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000284:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <MX_FREERTOS_Init+0x38>)
 8000286:	2100      	movs	r1, #0
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <MX_FREERTOS_Init+0x3c>)
 800028a:	f007 fb63 	bl	8007954 <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <MX_FREERTOS_Init+0x40>)
 8000292:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_rea */
  ultrasonics_reaHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_rea_attributes);
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <MX_FREERTOS_Init+0x44>)
 8000296:	2100      	movs	r1, #0
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <MX_FREERTOS_Init+0x48>)
 800029a:	f007 fb5b 	bl	8007954 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <MX_FREERTOS_Init+0x4c>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <MX_FREERTOS_Init+0x50>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <MX_FREERTOS_Init+0x54>)
 80002aa:	f007 fb53 	bl	8007954 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <MX_FREERTOS_Init+0x58>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	0800b514 	.word	0x0800b514
 80002bc:	080002dd 	.word	0x080002dd
 80002c0:	200000ec 	.word	0x200000ec
 80002c4:	0800b538 	.word	0x0800b538
 80002c8:	0800030d 	.word	0x0800030d
 80002cc:	200000f0 	.word	0x200000f0
 80002d0:	0800b55c 	.word	0x0800b55c
 80002d4:	080003bd 	.word	0x080003bd
 80002d8:	200000f4 	.word	0x200000f4

080002dc <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	printf("DefaultTask is Running\n");
 80002e4:	4806      	ldr	r0, [pc, #24]	; (8000300 <DefaultTask+0x24>)
 80002e6:	f00a f957 	bl	800a598 <puts>
	ECU_Bluetooth_ReciveData(&bluetooth);
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <DefaultTask+0x28>)
 80002ec:	f001 fc42 	bl	8001b74 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <DefaultTask+0x2c>)
 80002f2:	f001 fc59 	bl	8001ba8 <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f007 fbd5 	bl	8007aa8 <osDelay>
 80002fe:	e7fa      	b.n	80002f6 <DefaultTask+0x1a>
 8000300:	0800b374 	.word	0x0800b374
 8000304:	20000058 	.word	0x20000058
 8000308:	20000048 	.word	0x20000048

0800030c <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Ultrasonics_Read */
  /* Infinite loop */
  for(;;)
  {
	  ECU_Ultrasonic_Read(&ultrasonic_1);
 8000314:	481c      	ldr	r0, [pc, #112]	; (8000388 <RTOS_Ultrasonics_Read+0x7c>)
 8000316:	f001 ff49 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 1 value is %lu\n",ultrasonic_Distance_Values[0]);
 800031a:	4b1c      	ldr	r3, [pc, #112]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4619      	mov	r1, r3
 8000320:	481b      	ldr	r0, [pc, #108]	; (8000390 <RTOS_Ultrasonics_Read+0x84>)
 8000322:	f00a f8d3 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_2);
 8000326:	481b      	ldr	r0, [pc, #108]	; (8000394 <RTOS_Ultrasonics_Read+0x88>)
 8000328:	f001 ff40 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 2 value is %lu\n",ultrasonic_Distance_Values[1]);
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4619      	mov	r1, r3
 8000332:	4819      	ldr	r0, [pc, #100]	; (8000398 <RTOS_Ultrasonics_Read+0x8c>)
 8000334:	f00a f8ca 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_3);
 8000338:	4818      	ldr	r0, [pc, #96]	; (800039c <RTOS_Ultrasonics_Read+0x90>)
 800033a:	f001 ff37 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 3 value is %lu\n",ultrasonic_Distance_Values[2]);
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4619      	mov	r1, r3
 8000344:	4816      	ldr	r0, [pc, #88]	; (80003a0 <RTOS_Ultrasonics_Read+0x94>)
 8000346:	f00a f8c1 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_4);
 800034a:	4816      	ldr	r0, [pc, #88]	; (80003a4 <RTOS_Ultrasonics_Read+0x98>)
 800034c:	f001 ff2e 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 4 value is %lu\n",ultrasonic_Distance_Values[3]);
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4619      	mov	r1, r3
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <RTOS_Ultrasonics_Read+0x9c>)
 8000358:	f00a f8b8 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_5);
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <RTOS_Ultrasonics_Read+0xa0>)
 800035e:	f001 ff25 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 5 value is %lu\n",ultrasonic_Distance_Values[4]);
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	4619      	mov	r1, r3
 8000368:	4811      	ldr	r0, [pc, #68]	; (80003b0 <RTOS_Ultrasonics_Read+0xa4>)
 800036a:	f00a f8af 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_6);
 800036e:	4811      	ldr	r0, [pc, #68]	; (80003b4 <RTOS_Ultrasonics_Read+0xa8>)
 8000370:	f001 ff1c 	bl	80021ac <ECU_Ultrasonic_Read>
	  printf("ultrasonic 6 value is %lu\n",ultrasonic_Distance_Values[5]);
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <RTOS_Ultrasonics_Read+0x80>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4619      	mov	r1, r3
 800037a:	480f      	ldr	r0, [pc, #60]	; (80003b8 <RTOS_Ultrasonics_Read+0xac>)
 800037c:	f00a f8a6 	bl	800a4cc <iprintf>
	  //HAL_Delay(10);
    osDelay(200);
 8000380:	20c8      	movs	r0, #200	; 0xc8
 8000382:	f007 fb91 	bl	8007aa8 <osDelay>
	  ECU_Ultrasonic_Read(&ultrasonic_1);
 8000386:	e7c5      	b.n	8000314 <RTOS_Ultrasonics_Read+0x8>
 8000388:	20000000 	.word	0x20000000
 800038c:	20000470 	.word	0x20000470
 8000390:	0800b38c 	.word	0x0800b38c
 8000394:	2000000c 	.word	0x2000000c
 8000398:	0800b3a8 	.word	0x0800b3a8
 800039c:	20000018 	.word	0x20000018
 80003a0:	0800b3c4 	.word	0x0800b3c4
 80003a4:	20000024 	.word	0x20000024
 80003a8:	0800b3e0 	.word	0x0800b3e0
 80003ac:	20000030 	.word	0x20000030
 80003b0:	0800b3fc 	.word	0x0800b3fc
 80003b4:	2000003c 	.word	0x2000003c
 80003b8:	0800b418 	.word	0x0800b418

080003bc <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  printf("RTOS_Car_Next_Step is Running\n");
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <RTOS_Car_Next_Step+0x20>)
 80003c6:	f00a f8e7 	bl	800a598 <puts>
	  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 80003ca:	4905      	ldr	r1, [pc, #20]	; (80003e0 <RTOS_Car_Next_Step+0x24>)
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <RTOS_Car_Next_Step+0x28>)
 80003ce:	f001 fc7b 	bl	8001cc8 <ECU_Motor_NextStep>

	  osDelay(500);
 80003d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d6:	f007 fb67 	bl	8007aa8 <osDelay>
	  printf("RTOS_Car_Next_Step is Running\n");
 80003da:	e7f3      	b.n	80003c4 <RTOS_Car_Next_Step+0x8>
 80003dc:	0800b434 	.word	0x0800b434
 80003e0:	20000064 	.word	0x20000064
 80003e4:	20000048 	.word	0x20000048

080003e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b41      	ldr	r3, [pc, #260]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a40      	ldr	r2, [pc, #256]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <MX_GPIO_Init+0x11c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a3a      	ldr	r2, [pc, #232]	; (8000504 <MX_GPIO_Init+0x11c>)
 800041c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a34      	ldr	r2, [pc, #208]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <MX_GPIO_Init+0x11c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a2e      	ldr	r2, [pc, #184]	; (8000504 <MX_GPIO_Init+0x11c>)
 800044c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f002 faf0 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 800046c:	2200      	movs	r2, #0
 800046e:	f643 4106 	movw	r1, #15366	; 0x3c06
 8000472:	4825      	ldr	r0, [pc, #148]	; (8000508 <MX_GPIO_Init+0x120>)
 8000474:	f002 faea 	bl	8002a4c <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800047e:	4823      	ldr	r0, [pc, #140]	; (800050c <MX_GPIO_Init+0x124>)
 8000480:	f002 fae4 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	481c      	ldr	r0, [pc, #112]	; (800050c <MX_GPIO_Init+0x124>)
 800049c:	f002 f94c 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 80004a0:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f002 f93c 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80004c0:	f643 4306 	movw	r3, #15366	; 0x3c06
 80004c4:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <MX_GPIO_Init+0x120>)
 80004da:	f002 f92d 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80004de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_GPIO_Init+0x124>)
 80004f8:	f002 f91e 	bl	8002738 <HAL_GPIO_Init>

}
 80004fc:	bf00      	nop
 80004fe:	3728      	adds	r7, #40	; 0x28
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	48000400 	.word	0x48000400
 800050c:	48000800 	.word	0x48000800

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f001 ff80 	bl	8002418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f7ff ff64 	bl	80003e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000520:	f000 fa96 	bl	8000a50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 fb64 	bl	8000bf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 fbfc 	bl	8000d24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052c:	f000 fc96 	bl	8000e5c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000530:	f000 fd30 	bl	8000f94 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000534:	f000 fdfe 	bl	8001134 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000538:	f000 fec4 	bl	80012c4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800053c:	f001 fa08 	bl	8001950 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000540:	f001 f9d6 	bl	80018f0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000544:	f007 f99e 	bl	8007884 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000548:	f7ff fe9a 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800054c:	f007 f9ce 	bl	80078ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x40>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0a6      	sub	sp, #152	; 0x98
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00a f8f8 	bl	800a758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2258      	movs	r2, #88	; 0x58
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f00a f8ea 	bl	800a758 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fa6d 	bl	8002a7c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a8:	f000 f848 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 faac 	bl	8003b24 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005d2:	f000 f833 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <SystemClock_Config+0xc0>)
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fcf9 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000608:	f000 f818 	bl	800063c <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3798      	adds	r7, #152	; 0x98
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	00f0300a 	.word	0x00f0300a

08000618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062a:	f001 ff0b 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40001000 	.word	0x40001000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_MspInit+0x4c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_MspInit+0x4c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_MspInit+0x4c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <HAL_MspInit+0x4c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_MspInit+0x4c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_MspInit+0x4c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	210f      	movs	r1, #15
 8000682:	f06f 0001 	mvn.w	r0, #1
 8000686:	f001 ffb5 	bl	80025f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006a8:	4b33      	ldr	r3, [pc, #204]	; (8000778 <HAL_InitTick+0xe0>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4a32      	ldr	r2, [pc, #200]	; (8000778 <HAL_InitTick+0xe0>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	61d3      	str	r3, [r2, #28]
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <HAL_InitTick+0xe0>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c0:	f107 0210 	add.w	r2, r7, #16
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fc60 	bl	8003f90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006d0:	6a3b      	ldr	r3, [r7, #32]
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006da:	f003 fc15 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 80006de:	6378      	str	r0, [r7, #52]	; 0x34
 80006e0:	e004      	b.n	80006ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006e2:	f003 fc11 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 80006e6:	4603      	mov	r3, r0
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <HAL_InitTick+0xe4>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9b      	lsrs	r3, r3, #18
 80006f6:	3b01      	subs	r3, #1
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_InitTick+0xe8>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <HAL_InitTick+0xec>)
 80006fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_InitTick+0xe8>)
 8000702:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000706:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <HAL_InitTick+0xe8>)
 800070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_InitTick+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_InitTick+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_InitTick+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000720:	4817      	ldr	r0, [pc, #92]	; (8000780 <HAL_InitTick+0xe8>)
 8000722:	f003 fe85 	bl	8004430 <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800072c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11b      	bne.n	800076c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000734:	4812      	ldr	r0, [pc, #72]	; (8000780 <HAL_InitTick+0xe8>)
 8000736:	f003 fed3 	bl	80044e0 <HAL_TIM_Base_Start_IT>
 800073a:	4603      	mov	r3, r0
 800073c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000744:	2b00      	cmp	r3, #0
 8000746:	d111      	bne.n	800076c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000748:	2036      	movs	r0, #54	; 0x36
 800074a:	f001 ff6f 	bl	800262c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d808      	bhi.n	8000766 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	2036      	movs	r0, #54	; 0x36
 800075a:	f001 ff4b 	bl	80025f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_InitTick+0xf0>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	e002      	b.n	800076c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800076c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000770:	4618      	mov	r0, r3
 8000772:	3738      	adds	r7, #56	; 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	431bde83 	.word	0x431bde83
 8000780:	200000f8 	.word	0x200000f8
 8000784:	40001000 	.word	0x40001000
 8000788:	20000068 	.word	0x20000068

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80007be:	2205      	movs	r2, #5
 80007c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80007c4:	f004 fb70 	bl	8004ea8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80007ca:	f004 fb6d 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000488 	.word	0x20000488
 80007d8:	20000148 	.word	0x20000148
 80007dc:	200002c4 	.word	0x200002c4

080007e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <TIM1_CC_IRQHandler+0x14>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <TIM1_CC_IRQHandler+0x18>)
 80007ec:	f004 fb5c 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000488 	.word	0x20000488
 80007f8:	20000148 	.word	0x20000148

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <TIM2_IRQHandler+0x14>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <TIM2_IRQHandler+0x18>)
 8000808:	f004 fb4e 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000488 	.word	0x20000488
 8000814:	20000194 	.word	0x20000194

08000818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <TIM3_IRQHandler+0x14>)
 800081e:	2202      	movs	r2, #2
 8000820:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <TIM3_IRQHandler+0x18>)
 8000824:	f004 fb40 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000488 	.word	0x20000488
 8000830:	200001e0 	.word	0x200001e0

08000834 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <TIM4_IRQHandler+0x14>)
 800083a:	2203      	movs	r2, #3
 800083c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <TIM4_IRQHandler+0x18>)
 8000840:	f004 fb32 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000488 	.word	0x20000488
 800084c:	2000022c 	.word	0x2000022c

08000850 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <TIM8_CC_IRQHandler+0x14>)
 8000856:	2204      	movs	r2, #4
 8000858:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <TIM8_CC_IRQHandler+0x18>)
 800085c:	f004 fb24 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000488 	.word	0x20000488
 8000868:	20000278 	.word	0x20000278

0800086c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <UART4_IRQHandler+0x10>)
 8000872:	f005 fe5f 	bl	8006534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000035c 	.word	0x2000035c

08000880 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM6_DAC_IRQHandler+0x10>)
 8000886:	f004 fb0f 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000f8 	.word	0x200000f8

08000894 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <Custom_ITM_sendChar_Ch0+0x48>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <Custom_ITM_sendChar_Ch0+0x48>)
 80008a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008a8:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <Custom_ITM_sendChar_Ch0+0x4c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <Custom_ITM_sendChar_Ch0+0x4c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008b6:	bf00      	nop
 80008b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f8      	beq.n	80008b8 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 80008c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	6013      	str	r3, [r2, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000edfc 	.word	0xe000edfc
 80008e0:	e0000e00 	.word	0xe0000e00

080008e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f6:	f3af 8000 	nop.w
 80008fa:	4601      	mov	r1, r0
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <_read+0x12>
  }

  return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e009      	b.n	8000944 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ffab 	bl	8000894 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf1      	blt.n	8000930 <_write+0x12>
  }
  return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_close>:

int _close(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097e:	605a      	str	r2, [r3, #4]
  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_isatty>:

int _isatty(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f009 ff56 	bl	800a8a0 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20010000 	.word	0x20010000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000144 	.word	0x20000144
 8000a28:	20002010 	.word	0x20002010

08000a2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09e      	sub	sp, #120	; 0x78
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	222c      	movs	r2, #44	; 0x2c
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f009 fe5d 	bl	800a758 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b52      	ldr	r3, [pc, #328]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000aa0:	4a52      	ldr	r2, [pc, #328]	; (8000bec <MX_TIM1_Init+0x19c>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000aa4:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aca:	4847      	ldr	r0, [pc, #284]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000acc:	f003 fcb0 	bl	8004430 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000ad6:	f7ff fdb1 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4840      	ldr	r0, [pc, #256]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000ae8:	f004 fcae 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000af2:	f7ff fda3 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af6:	483c      	ldr	r0, [pc, #240]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000af8:	f003 fd62 	bl	80045c0 <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000b02:	f7ff fd9b 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b06:	4838      	ldr	r0, [pc, #224]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000b08:	f003 ff64 	bl	80049d4 <HAL_TIM_IC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b12:	f7ff fd93 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b26:	4619      	mov	r1, r3
 8000b28:	482f      	ldr	r0, [pc, #188]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000b2a:	f005 fb41 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000b34:	f7ff fd82 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	; 0x60
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000b3c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4822      	ldr	r0, [pc, #136]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000b60:	f004 fb5e 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000b6a:	f7ff fd67 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b82:	2204      	movs	r2, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000b88:	f004 faad 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000b92:	f7ff fd53 	bl	800063c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000bcc:	f005 fb7c 	bl	80062c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000bd6:	f7ff fd31 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM1_Init+0x198>)
 8000bdc:	f000 fd74 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3778      	adds	r7, #120	; 0x78
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000148 	.word	0x20000148
 8000bec:	40012c00 	.word	0x40012c00

08000bf0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b092      	sub	sp, #72	; 0x48
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c58:	4831      	ldr	r0, [pc, #196]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c5a:	f003 fbe9 	bl	8004430 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c64:	f7ff fcea 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c72:	4619      	mov	r1, r3
 8000c74:	482a      	ldr	r0, [pc, #168]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c76:	f004 fbe7 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c80:	f7ff fcdc 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c86:	f003 fc9b 	bl	80045c0 <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c90:	f7ff fcd4 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c94:	4822      	ldr	r0, [pc, #136]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000c96:	f003 fe9d 	bl	80049d4 <HAL_TIM_IC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ca0:	f7ff fccc 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000cb4:	f005 fa7c 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000cbe:	f7ff fcbd 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc2:	2360      	movs	r3, #96	; 0x60
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000cc6:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000cca:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000cde:	f004 fa9f 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000ce8:	f7ff fca8 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2204      	movs	r2, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000d04:	f004 f9ef 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000d0e:	f7ff fc95 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM2_Init+0x130>)
 8000d14:	f000 fcd8 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8000d18:	bf00      	nop
 8000d1a:	3748      	adds	r7, #72	; 0x48
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000194 	.word	0x20000194

08000d24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b092      	sub	sp, #72	; 0x48
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d64:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d66:	4a3c      	ldr	r2, [pc, #240]	; (8000e58 <MX_TIM3_Init+0x134>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d8a:	4832      	ldr	r0, [pc, #200]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000d8c:	f003 fb50 	bl	8004430 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d96:	f7ff fc51 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da4:	4619      	mov	r1, r3
 8000da6:	482b      	ldr	r0, [pc, #172]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000da8:	f004 fb4e 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000db2:	f7ff fc43 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000db8:	f003 fc02 	bl	80045c0 <HAL_TIM_PWM_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000dc2:	f7ff fc3b 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000dc6:	4823      	ldr	r0, [pc, #140]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000dc8:	f003 fe04 	bl	80049d4 <HAL_TIM_IC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f7ff fc33 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000de6:	f005 f9e3 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000df0:	f7ff fc24 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000df8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000dfc:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000e10:	f004 fa06 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000e1a:	f7ff fc0f 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e22:	2301      	movs	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000e36:	f004 f956 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000e40:	f7ff fbfc 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM3_Init+0x130>)
 8000e46:	f000 fc3f 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8000e4a:	bf00      	nop
 8000e4c:	3748      	adds	r7, #72	; 0x48
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200001e0 	.word	0x200001e0
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b092      	sub	sp, #72	; 0x48
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000e9e:	4a3c      	ldr	r2, [pc, #240]	; (8000f90 <MX_TIM4_Init+0x134>)
 8000ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ec2:	4832      	ldr	r0, [pc, #200]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000ec4:	f003 fab4 	bl	8004430 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ece:	f7ff fbb5 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000edc:	4619      	mov	r1, r3
 8000ede:	482b      	ldr	r0, [pc, #172]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000ee0:	f004 fab2 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000eea:	f7ff fba7 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eee:	4827      	ldr	r0, [pc, #156]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000ef0:	f003 fb66 	bl	80045c0 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000efa:	f7ff fb9f 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000f00:	f003 fd68 	bl	80049d4 <HAL_TIM_IC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f0a:	f7ff fb97 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481b      	ldr	r0, [pc, #108]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000f1e:	f005 f947 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000f28:	f7ff fb88 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000f30:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000f34:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000f48:	f004 f96a 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000f52:	f7ff fb73 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000f6e:	f004 f8ba 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8000f78:	f7ff fb60 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM4_Init+0x130>)
 8000f7e:	f000 fba3 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3748      	adds	r7, #72	; 0x48
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000022c 	.word	0x2000022c
 8000f90:	40000800 	.word	0x40000800

08000f94 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09e      	sub	sp, #120	; 0x78
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	222c      	movs	r2, #44	; 0x2c
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 fbbb 	bl	800a758 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <MX_TIM8_Init+0x198>)
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <MX_TIM8_Init+0x19c>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000fe8:	4b50      	ldr	r3, [pc, #320]	; (800112c <MX_TIM8_Init+0x198>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <MX_TIM8_Init+0x198>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	; (800112c <MX_TIM8_Init+0x198>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_TIM8_Init+0x198>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <MX_TIM8_Init+0x198>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_TIM8_Init+0x198>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100e:	4847      	ldr	r0, [pc, #284]	; (800112c <MX_TIM8_Init+0x198>)
 8001010:	f003 fa0e 	bl	8004430 <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800101a:	f7ff fb0f 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001028:	4619      	mov	r1, r3
 800102a:	4840      	ldr	r0, [pc, #256]	; (800112c <MX_TIM8_Init+0x198>)
 800102c:	f004 fa0c 	bl	8005448 <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001036:	f7ff fb01 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800103a:	483c      	ldr	r0, [pc, #240]	; (800112c <MX_TIM8_Init+0x198>)
 800103c:	f003 fac0 	bl	80045c0 <HAL_TIM_PWM_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001046:	f7ff faf9 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800104a:	4838      	ldr	r0, [pc, #224]	; (800112c <MX_TIM8_Init+0x198>)
 800104c:	f003 fcc2 	bl	80049d4 <HAL_TIM_IC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001056:	f7ff faf1 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001066:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800106a:	4619      	mov	r1, r3
 800106c:	482f      	ldr	r0, [pc, #188]	; (800112c <MX_TIM8_Init+0x198>)
 800106e:	f005 f89f 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 8001078:	f7ff fae0 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001080:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4822      	ldr	r0, [pc, #136]	; (800112c <MX_TIM8_Init+0x198>)
 80010a4:	f004 f8bc 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80010ae:	f7ff fac5 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	2301      	movs	r3, #1
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c6:	2204      	movs	r2, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_TIM8_Init+0x198>)
 80010cc:	f004 f80b 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80010d6:	f7ff fab1 	bl	800063c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM8_Init+0x198>)
 8001110:	f005 f8da 	bl	80062c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800111a:	f7ff fa8f 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM8_Init+0x198>)
 8001120:	f000 fad2 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3778      	adds	r7, #120	; 0x78
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000278 	.word	0x20000278
 8001130:	40013400 	.word	0x40013400

08001134 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09e      	sub	sp, #120	; 0x78
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	222c      	movs	r2, #44	; 0x2c
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f009 faeb 	bl	800a758 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001182:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <MX_TIM15_Init+0x188>)
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <MX_TIM15_Init+0x18c>)
 8001186:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <MX_TIM15_Init+0x188>)
 800118a:	2207      	movs	r2, #7
 800118c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <MX_TIM15_Init+0x188>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <MX_TIM15_Init+0x188>)
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <MX_TIM15_Init+0x188>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <MX_TIM15_Init+0x188>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b44      	ldr	r3, [pc, #272]	; (80012bc <MX_TIM15_Init+0x188>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011ae:	4843      	ldr	r0, [pc, #268]	; (80012bc <MX_TIM15_Init+0x188>)
 80011b0:	f003 f93e 	bl	8004430 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80011ba:	f7ff fa3f 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011c8:	4619      	mov	r1, r3
 80011ca:	483c      	ldr	r0, [pc, #240]	; (80012bc <MX_TIM15_Init+0x188>)
 80011cc:	f004 f93c 	bl	8005448 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80011d6:	f7ff fa31 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011da:	4838      	ldr	r0, [pc, #224]	; (80012bc <MX_TIM15_Init+0x188>)
 80011dc:	f003 f9f0 	bl	80045c0 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 80011e6:	f7ff fa29 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80011ea:	4834      	ldr	r0, [pc, #208]	; (80012bc <MX_TIM15_Init+0x188>)
 80011ec:	f003 fbf2 	bl	80049d4 <HAL_TIM_IC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80011f6:	f7ff fa21 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001202:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001206:	4619      	mov	r1, r3
 8001208:	482c      	ldr	r0, [pc, #176]	; (80012bc <MX_TIM15_Init+0x188>)
 800120a:	f004 ffd1 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8001214:	f7ff fa12 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 800121c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	481f      	ldr	r0, [pc, #124]	; (80012bc <MX_TIM15_Init+0x188>)
 8001240:	f003 ffee 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800124a:	f7ff f9f7 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001252:	2301      	movs	r3, #1
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800125e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <MX_TIM15_Init+0x188>)
 8001268:	f003 ff3d 	bl	80050e6 <HAL_TIM_IC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 8001272:	f7ff f9e3 	bl	800063c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <MX_TIM15_Init+0x188>)
 800129e:	f005 f813 	bl	80062c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 80012a8:	f7ff f9c8 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <MX_TIM15_Init+0x188>)
 80012ae:	f000 fa0b 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 80012b2:	bf00      	nop
 80012b4:	3778      	adds	r7, #120	; 0x78
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002c4 	.word	0x200002c4
 80012c0:	40014000 	.word	0x40014000

080012c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b092      	sub	sp, #72	; 0x48
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	222c      	movs	r2, #44	; 0x2c
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f009 fa37 	bl	800a758 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_TIM16_Init+0xec>)
 80012ec:	4a31      	ldr	r2, [pc, #196]	; (80013b4 <MX_TIM16_Init+0xf0>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <MX_TIM16_Init+0xec>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_TIM16_Init+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_TIM16_Init+0xec>)
 80012fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001302:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_TIM16_Init+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_TIM16_Init+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_TIM16_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001316:	4826      	ldr	r0, [pc, #152]	; (80013b0 <MX_TIM16_Init+0xec>)
 8001318:	f003 f88a 	bl	8004430 <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001322:	f7ff f98b 	bl	800063c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <MX_TIM16_Init+0xec>)
 8001328:	f003 f94a 	bl	80045c0 <HAL_TIM_PWM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001332:	f7ff f983 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800133a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_TIM16_Init+0xec>)
 800135e:	f003 ff5f 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001368:	f7ff f968 	bl	800063c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM16_Init+0xec>)
 8001394:	f004 ff98 	bl	80062c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800139e:	f7ff f94d 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM16_Init+0xec>)
 80013a4:	f000 f990 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3748      	adds	r7, #72	; 0x48
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000310 	.word	0x20000310
 80013b4:	40014400 	.word	0x40014400

080013b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4aa7      	ldr	r2, [pc, #668]	; (8001674 <HAL_TIM_Base_MspInit+0x2bc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d138      	bne.n	800144c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013da:	4ba7      	ldr	r3, [pc, #668]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4aa6      	ldr	r2, [pc, #664]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80013e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4ba4      	ldr	r3, [pc, #656]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80013f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4aa0      	ldr	r2, [pc, #640]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80013f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b9e      	ldr	r3, [pc, #632]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800140a:	2302      	movs	r3, #2
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800141a:	2302      	movs	r3, #2
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001422:	4619      	mov	r1, r3
 8001424:	4895      	ldr	r0, [pc, #596]	; (800167c <HAL_TIM_Base_MspInit+0x2c4>)
 8001426:	f001 f987 	bl	8002738 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2018      	movs	r0, #24
 8001430:	f001 f8e0 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001434:	2018      	movs	r0, #24
 8001436:	f001 f8f9 	bl	800262c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	201b      	movs	r0, #27
 8001440:	f001 f8d8 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001444:	201b      	movs	r0, #27
 8001446:	f001 f8f1 	bl	800262c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800144a:	e134      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d131      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b82      	ldr	r3, [pc, #520]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a81      	ldr	r2, [pc, #516]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b7f      	ldr	r3, [pc, #508]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001486:	2302      	movs	r3, #2
 8001488:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001496:	2301      	movs	r3, #1
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f001 f948 	bl	8002738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2105      	movs	r1, #5
 80014ac:	201c      	movs	r0, #28
 80014ae:	f001 f8a1 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b2:	201c      	movs	r0, #28
 80014b4:	f001 f8ba 	bl	800262c <HAL_NVIC_EnableIRQ>
}
 80014b8:	e0fd      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a70      	ldr	r2, [pc, #448]	; (8001680 <HAL_TIM_Base_MspInit+0x2c8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d131      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c4:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a6b      	ldr	r2, [pc, #428]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	61d3      	str	r3, [r2, #28]
 80014d0:	4b69      	ldr	r3, [pc, #420]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014f4:	2310      	movs	r3, #16
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001504:	2302      	movs	r3, #2
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f001 f911 	bl	8002738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	201d      	movs	r0, #29
 800151c:	f001 f86a 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001520:	201d      	movs	r0, #29
 8001522:	f001 f883 	bl	800262c <HAL_NVIC_EnableIRQ>
}
 8001526:	e0c6      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_TIM_Base_MspInit+0x2cc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d132      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001532:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a50      	ldr	r2, [pc, #320]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b48      	ldr	r3, [pc, #288]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001574:	230a      	movs	r3, #10
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f001 f8d9 	bl	8002738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	201e      	movs	r0, #30
 800158c:	f001 f832 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001590:	201e      	movs	r0, #30
 8001592:	f001 f84b 	bl	800262c <HAL_NVIC_EnableIRQ>
}
 8001596:	e08e      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <HAL_TIM_Base_MspInit+0x2d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d130      	bne.n	8001604 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80015e2:	2304      	movs	r3, #4
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	4619      	mov	r1, r3
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <HAL_TIM_Base_MspInit+0x2c4>)
 80015ee:	f001 f8a3 	bl	8002738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2105      	movs	r1, #5
 80015f6:	202e      	movs	r0, #46	; 0x2e
 80015f8:	f000 fffc 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80015fc:	202e      	movs	r0, #46	; 0x2e
 80015fe:	f001 f815 	bl	800262c <HAL_NVIC_EnableIRQ>
}
 8001602:	e058      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_TIM_Base_MspInit+0x2d4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d142      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_TIM_Base_MspInit+0x2c0>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800163e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001650:	2301      	movs	r3, #1
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_TIM_Base_MspInit+0x2d8>)
 800165c:	f001 f86c 	bl	8002738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2105      	movs	r1, #5
 8001664:	2018      	movs	r0, #24
 8001666:	f000 ffc5 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800166a:	2018      	movs	r0, #24
 800166c:	f000 ffde 	bl	800262c <HAL_NVIC_EnableIRQ>
}
 8001670:	e021      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
 8001672:	bf00      	nop
 8001674:	40012c00 	.word	0x40012c00
 8001678:	40021000 	.word	0x40021000
 800167c:	48000800 	.word	0x48000800
 8001680:	40000400 	.word	0x40000400
 8001684:	40000800 	.word	0x40000800
 8001688:	40013400 	.word	0x40013400
 800168c:	40014000 	.word	0x40014000
 8001690:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x308>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10b      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_TIM_Base_MspInit+0x30c>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_TIM_Base_MspInit+0x30c>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_TIM_Base_MspInit+0x30c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
}
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	; 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40014400 	.word	0x40014400
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a79      	ldr	r2, [pc, #484]	; (80018cc <HAL_TIM_MspPostInit+0x204>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d11c      	bne.n	8001724 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80016f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170a:	2302      	movs	r3, #2
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001712:	2302      	movs	r3, #2
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	486d      	ldr	r0, [pc, #436]	; (80018d4 <HAL_TIM_MspPostInit+0x20c>)
 800171e:	f001 f80b 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001722:	e0cf      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d11d      	bne.n	800176a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	6153      	str	r3, [r2, #20]
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001746:	2301      	movs	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174e:	2302      	movs	r3, #2
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001756:	2301      	movs	r3, #1
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001764:	f000 ffe8 	bl	8002738 <HAL_GPIO_Init>
}
 8001768:	e0ac      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5a      	ldr	r2, [pc, #360]	; (80018d8 <HAL_TIM_MspPostInit+0x210>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d11d      	bne.n	80017b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	6153      	str	r3, [r2, #20]
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001794:	2302      	movs	r3, #2
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800179c:	2302      	movs	r3, #2
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f000 ffc5 	bl	8002738 <HAL_GPIO_Init>
}
 80017ae:	e089      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_TIM_MspPostInit+0x214>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11e      	bne.n	80017f8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	6153      	str	r3, [r2, #20]
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017dc:	2302      	movs	r3, #2
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80017e4:	230a      	movs	r3, #10
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f000 ffa1 	bl	8002738 <HAL_GPIO_Init>
}
 80017f6:	e065      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_TIM_MspPostInit+0x218>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11c      	bne.n	800183c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001822:	2302      	movs	r3, #2
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800182a:	2304      	movs	r3, #4
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <HAL_TIM_MspPostInit+0x20c>)
 8001836:	f000 ff7f 	bl	8002738 <HAL_GPIO_Init>
}
 800183a:	e043      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <HAL_TIM_MspPostInit+0x21c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11d      	bne.n	8001882 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800185e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001868:	2302      	movs	r3, #2
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001870:	2301      	movs	r3, #1
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	481b      	ldr	r0, [pc, #108]	; (80018e8 <HAL_TIM_MspPostInit+0x220>)
 800187c:	f000 ff5c 	bl	8002738 <HAL_GPIO_Init>
}
 8001880:	e020      	b.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_TIM_MspPostInit+0x224>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d11b      	bne.n	80018c4 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6153      	str	r3, [r2, #20]
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_TIM_MspPostInit+0x208>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a4:	2310      	movs	r3, #16
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ac:	2302      	movs	r3, #2
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80018b4:	2301      	movs	r3, #1
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <HAL_TIM_MspPostInit+0x220>)
 80018c0:	f000 ff3a 	bl	8002738 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	; 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40000800 	.word	0x40000800
 80018e0:	40013400 	.word	0x40013400
 80018e4:	40014000 	.word	0x40014000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	40014400 	.word	0x40014400

080018f0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_UART4_Init+0x58>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_UART4_Init+0x5c>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_UART4_Init+0x58>)
 80018fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001900:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_UART4_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_UART4_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_UART4_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_UART4_Init+0x58>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_UART4_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_UART4_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_UART4_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_UART4_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_UART4_Init+0x58>)
 8001934:	f004 fd6c 	bl	8006410 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800193e:	f7fe fe7d 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000035c 	.word	0x2000035c
 800194c:	40004c00 	.word	0x40004c00

08001950 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <MX_USART2_UART_Init+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 800195c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART2_UART_Init+0x58>)
 8001994:	f004 fd3c 	bl	8006410 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800199e:	f7fe fe4d 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200003e4 	.word	0x200003e4
 80019ac:	40004400 	.word	0x40004400

080019b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a33      	ldr	r2, [pc, #204]	; (8001a9c <HAL_UART_MspInit+0xec>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d131      	bne.n	8001a36 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001a14:	2305      	movs	r3, #5
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <HAL_UART_MspInit+0xf4>)
 8001a20:	f000 fe8a 	bl	8002738 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2105      	movs	r1, #5
 8001a28:	2034      	movs	r0, #52	; 0x34
 8001a2a:	f000 fde3 	bl	80025f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a2e:	2034      	movs	r0, #52	; 0x34
 8001a30:	f000 fdfc 	bl	800262c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a34:	e02d      	b.n	8001a92 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_UART_MspInit+0xf8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d128      	bne.n	8001a92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	61d3      	str	r3, [r2, #28]
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a62:	6153      	str	r3, [r2, #20]
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0xf0>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a70:	230c      	movs	r3, #12
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a80:	2307      	movs	r3, #7
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f000 fe53 	bl	8002738 <HAL_GPIO_Init>
}
 8001a92:	bf00      	nop
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40004c00 	.word	0x40004c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	40004400 	.word	0x40004400

08001aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab0:	f7fe ffbc 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	; (8001aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <LoopForever+0xe>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	; (8001af8 <LoopForever+0x16>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f008 fee7 	bl	800a8ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ade:	f7fe fd17 	bl	8000510 <main>

08001ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae2:	e7fe      	b.n	8001ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001af0:	0800b5f4 	.word	0x0800b5f4
  ldr r2, =_sbss
 8001af4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001af8:	2000200c 	.word	0x2000200c

08001afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_2_IRQHandler>
	...

08001b00 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if((temp == 'F') || (temp == 'B') || (temp == 'G') || (temp == 'I') || (temp == 'H') || (temp == 'J') || (temp == 'S') || (temp == 'R') || (temp == 'L')){
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b46      	cmp	r3, #70	; 0x46
 8001b0e:	d01f      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b42      	cmp	r3, #66	; 0x42
 8001b16:	d01b      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b47      	cmp	r3, #71	; 0x47
 8001b1e:	d017      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b49      	cmp	r3, #73	; 0x49
 8001b26:	d013      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b48      	cmp	r3, #72	; 0x48
 8001b2e:	d00f      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b4a      	cmp	r3, #74	; 0x4a
 8001b36:	d00b      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b53      	cmp	r3, #83	; 0x53
 8001b3e:	d007      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b52      	cmp	r3, #82	; 0x52
 8001b46:	d003      	beq.n	8001b50 <HAL_UART_RxCpltCallback+0x50>
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b4e:	d103      	bne.n	8001b58 <HAL_UART_RxCpltCallback+0x58>
		Bluetooth_RX_Data = temp;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_UART_RxCpltCallback+0x70>)
 8001b56:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_UART_RxCpltCallback+0x6c>)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f004 fca5 	bl	80064ac <HAL_UART_Receive_IT>

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000046c 	.word	0x2000046c
 8001b70:	20000064 	.word	0x20000064

08001b74 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(bluetooth_obj_t *bluetooth_obj){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e009      	b.n	8001b9a <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <ECU_Bluetooth_ReciveData+0x30>)
 8001b94:	f004 fc8a 	bl	80064ac <HAL_UART_Receive_IT>

	return ECU_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000046c 	.word	0x2000046c

08001ba8 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07e      	b.n	8001cbc <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <ECU_Motor_GeneratePWM+0x34>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e045      	b.n	8001c68 <ECU_Motor_GeneratePWM+0xc0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d10a      	bne.n	8001bfa <ECU_Motor_GeneratePWM+0x52>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	e036      	b.n	8001c68 <ECU_Motor_GeneratePWM+0xc0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d10a      	bne.n	8001c18 <ECU_Motor_GeneratePWM+0x70>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e027      	b.n	8001c68 <ECU_Motor_GeneratePWM+0xc0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d10a      	bne.n	8001c36 <ECU_Motor_GeneratePWM+0x8e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	e018      	b.n	8001c68 <ECU_Motor_GeneratePWM+0xc0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d10a      	bne.n	8001c54 <ECU_Motor_GeneratePWM+0xac>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e009      	b.n	8001c68 <ECU_Motor_GeneratePWM+0xc0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e025      	b.n	8001cbc <ECU_Motor_GeneratePWM+0x114>
		OCIdleState = TIM_OCIDLESTATE_RESET
		OCNIdleState = TIM_OCNIDLESTATE_RESET
	*/

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <ECU_Motor_GeneratePWM+0x11c>)
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	ee17 2a90 	vmov	r2, s15
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f002 fce5 	bl	8004684 <HAL_TIM_PWM_Start>

	return ECU_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	000f4240 	.word	0x000f4240

08001cc8 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <ECU_Motor_NextStep+0x16>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e055      	b.n	8001d8e <ECU_Motor_NextStep+0xc6>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3b42      	subs	r3, #66	; 0x42
 8001ce8:	2b11      	cmp	r3, #17
 8001cea:	d84b      	bhi.n	8001d84 <ECU_Motor_NextStep+0xbc>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <ECU_Motor_NextStep+0x2c>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d85 	.word	0x08001d85
 8001cfc:	08001d85 	.word	0x08001d85
 8001d00:	08001d85 	.word	0x08001d85
 8001d04:	08001d3d 	.word	0x08001d3d
 8001d08:	08001d4d 	.word	0x08001d4d
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d55 	.word	0x08001d55
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d85 	.word	0x08001d85
 8001d1c:	08001d75 	.word	0x08001d75
 8001d20:	08001d85 	.word	0x08001d85
 8001d24:	08001d85 	.word	0x08001d85
 8001d28:	08001d85 	.word	0x08001d85
 8001d2c:	08001d85 	.word	0x08001d85
 8001d30:	08001d85 	.word	0x08001d85
 8001d34:	08001d6d 	.word	0x08001d6d
 8001d38:	08001d7d 	.word	0x08001d7d
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f82b 	bl	8001d98 <ECU_Motor_MoveForward>
 8001d42:	e023      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f84f 	bl	8001de8 <ECU_Motor_MoveReverse>
 8001d4a:	e01f      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8a9 	bl	8001ea4 <ECU_Motor_MoveForwardLeft>
 8001d52:	e01b      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f86f 	bl	8001e38 <ECU_Motor_MoveForwardRight>
 8001d5a:	e017      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f90d 	bl	8001f7c <ECU_Motor_MoveReverseLeft>
 8001d62:	e013      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8d3 	bl	8001f10 <ECU_Motor_MoveReverseRight>
 8001d6a:	e00f      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f971 	bl	8002054 <ECU_Motor_MoveRight>
 8001d72:	e00b      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f995 	bl	80020a4 <ECU_Motor_MoveLeft>
 8001d7a:	e007      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f933 	bl	8001fe8 <ECU_Motor_Stop>
 8001d82:	e003      	b.n	8001d8c <ECU_Motor_NextStep+0xc4>
		default :           ECU_Motor_Stop            (motor_obj); break;
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f92f 	bl	8001fe8 <ECU_Motor_Stop>
 8001d8a:	bf00      	nop
	}

	return ECU_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop

08001d98 <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e018      	b.n	8001ddc <ECU_Motor_MoveForward+0x44>
	}

	printf("Motor_MoveForward\n");
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <ECU_Motor_MoveForward+0x4c>)
 8001dac:	f008 fbf4 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f000 fe47 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc8:	f000 fe40 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd6:	f000 fe39 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	0800b454 	.word	0x0800b454

08001de8 <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e018      	b.n	8001e2c <ECU_Motor_MoveReverse+0x44>
	}

	printf("MoveReverse\n");
 8001dfa:	480e      	ldr	r0, [pc, #56]	; (8001e34 <ECU_Motor_MoveReverse+0x4c>)
 8001dfc:	f008 fbcc 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f000 fe1f 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f000 fe18 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f000 fe11 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0800b468 	.word	0x0800b468

08001e38 <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e024      	b.n	8001e94 <ECU_Motor_MoveForwardRight+0x5c>
	}

	printf("MoveForwardRight\n");
 8001e4a:	4814      	ldr	r0, [pc, #80]	; (8001e9c <ECU_Motor_MoveForwardRight+0x64>)
 8001e4c:	f008 fba4 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f000 fdf7 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <ECU_Motor_MoveForwardRight+0x68>)
 8001e66:	f000 fdf1 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <ECU_Motor_MoveForwardRight+0x68>)
 8001e72:	f000 fdeb 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f000 fde4 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f000 fddd 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	0800b474 	.word	0x0800b474
 8001ea0:	48000800 	.word	0x48000800

08001ea4 <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e024      	b.n	8001f00 <ECU_Motor_MoveForwardLeft+0x5c>
	}

	printf("MoveForwardLeft\n");
 8001eb6:	4814      	ldr	r0, [pc, #80]	; (8001f08 <ECU_Motor_MoveForwardLeft+0x64>)
 8001eb8:	f008 fb6e 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	f000 fdc1 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed0:	480e      	ldr	r0, [pc, #56]	; (8001f0c <ECU_Motor_MoveForwardLeft+0x68>)
 8001ed2:	f000 fdbb 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <ECU_Motor_MoveForwardLeft+0x68>)
 8001ede:	f000 fdb5 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f000 fdae 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efa:	f000 fda7 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	0800b488 	.word	0x0800b488
 8001f0c:	48000800 	.word	0x48000800

08001f10 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e024      	b.n	8001f6c <ECU_Motor_MoveReverseRight+0x5c>
	}

	printf("MoveReverseRight\n");
 8001f22:	4814      	ldr	r0, [pc, #80]	; (8001f74 <ECU_Motor_MoveReverseRight+0x64>)
 8001f24:	f008 fb38 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f32:	f000 fd8b 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f3c:	480e      	ldr	r0, [pc, #56]	; (8001f78 <ECU_Motor_MoveReverseRight+0x68>)
 8001f3e:	f000 fd85 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <ECU_Motor_MoveReverseRight+0x68>)
 8001f4a:	f000 fd7f 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f000 fd78 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f66:	f000 fd71 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800b498 	.word	0x0800b498
 8001f78:	48000800 	.word	0x48000800

08001f7c <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e024      	b.n	8001fd8 <ECU_Motor_MoveReverseLeft+0x5c>
	}

	printf("MoveReverseLeft\n");
 8001f8e:	4814      	ldr	r0, [pc, #80]	; (8001fe0 <ECU_Motor_MoveReverseLeft+0x64>)
 8001f90:	f008 fb02 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f000 fd55 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <ECU_Motor_MoveReverseLeft+0x68>)
 8001faa:	f000 fd4f 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <ECU_Motor_MoveReverseLeft+0x68>)
 8001fb6:	f000 fd49 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f000 fd42 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f000 fd3b 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800b4ac 	.word	0x0800b4ac
 8001fe4:	48000800 	.word	0x48000800

08001fe8 <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e024      	b.n	8002044 <ECU_Motor_Stop+0x5c>
	}

	printf("Stop\n");
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <ECU_Motor_Stop+0x64>)
 8001ffc:	f008 facc 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f000 fd1f 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <ECU_Motor_Stop+0x68>)
 8002016:	f000 fd19 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <ECU_Motor_Stop+0x68>)
 8002022:	f000 fd13 	bl	8002a4c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800202c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002030:	f000 fd0c 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203e:	f000 fd05 	bl	8002a4c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	0800b4bc 	.word	0x0800b4bc
 8002050:	48000800 	.word	0x48000800

08002054 <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e016      	b.n	8002094 <ECU_Motor_MoveRight+0x40>
	}

	printf("MoveRight\n");
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <ECU_Motor_MoveRight+0x48>)
 8002068:	f008 fa96 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f000 fce9 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002080:	4807      	ldr	r0, [pc, #28]	; (80020a0 <ECU_Motor_MoveRight+0x4c>)
 8002082:	f000 fce3 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <ECU_Motor_MoveRight+0x4c>)
 800208e:	f000 fcdd 	bl	8002a4c <HAL_GPIO_WritePin>


	return ECU_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0800b4c4 	.word	0x0800b4c4
 80020a0:	48000800 	.word	0x48000800

080020a4 <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e016      	b.n	80020e4 <ECU_Motor_MoveLeft+0x40>
	}

	printf("MoveLeft\n");
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <ECU_Motor_MoveLeft+0x48>)
 80020b8:	f008 fa6e 	bl	800a598 <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f000 fcc1 	bl	8002a4c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <ECU_Motor_MoveLeft+0x4c>)
 80020d2:	f000 fcbb 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <ECU_Motor_MoveLeft+0x4c>)
 80020de:	f000 fcb5 	bl	8002a4c <HAL_GPIO_WritePin>


	return ECU_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0800b4d0 	.word	0x0800b4d0
 80020f0:	48000800 	.word	0x48000800

080020f4 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7f1b      	ldrb	r3, [r3, #28]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d145      	bne.n	8002190 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d114      	bne.n	800213e <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800211e:	4413      	add	r3, r2
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800212a:	440a      	add	r2, r1
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8e4 	bl	80022fc <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f002 fbb0 	bl	800489c <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 800213c:	e028      	b.n	8002190 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d120      	bne.n	8002190 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002158:	1899      	adds	r1, r3, r2
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002164:	441a      	add	r2, r3
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002170:	4418      	add	r0, r3
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461c      	mov	r4, r3
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800217c:	4423      	add	r3, r4
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8e4 	bl	8002350 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8002188:	2104      	movs	r1, #4
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f002 fdce 	bl	8004d2c <HAL_TIM_IC_Stop_IT>
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	20000488 	.word	0x20000488
 800219c:	2000048c 	.word	0x2000048c
 80021a0:	20000494 	.word	0x20000494
 80021a4:	200004ac 	.word	0x200004ac
 80021a8:	200004c4 	.word	0x200004c4

080021ac <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80021be:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80021e8 <ECU_Ultrasonic_Read+0x3c>
 80021c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f810 	bl	80021ec <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f002 fc5e 	bl	8004a98 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	3a83126f 	.word	0x3a83126f

080021ec <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e077      	b.n	80022f4 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <ECU_Ultrasonic_GenerateTrigger+0x36>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	e045      	b.n	80022ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d10a      	bne.n	8002240 <ECU_Ultrasonic_GenerateTrigger+0x54>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e036      	b.n	80022ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d10a      	bne.n	800225e <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e027      	b.n	80022ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d10a      	bne.n	800227c <ECU_Ultrasonic_GenerateTrigger+0x90>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e018      	b.n	80022ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d10a      	bne.n	800229a <ECU_Ultrasonic_GenerateTrigger+0xae>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e009      	b.n	80022ae <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01e      	b.n	80022f4 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022dc:	ee17 2a90 	vmov	r2, s15
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f002 f9c9 	bl	8004684 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002308:	2104      	movs	r1, #4
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f003 f966 	bl	80055dc <HAL_TIM_ReadCapturedValue>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002334:	621a      	str	r2, [r3, #32]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	621a      	str	r2, [r3, #32]
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800235e:	2104      	movs	r1, #4
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f003 f93b 	bl	80055dc <HAL_TIM_ReadCapturedValue>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d307      	bcc.n	8002390 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e011      	b.n	80023b4 <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800239e:	33ff      	adds	r3, #255	; 0xff
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <IC_second_Capture+0xb8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	4619      	mov	r1, r3
 80023ae:	4817      	ldr	r0, [pc, #92]	; (800240c <IC_second_Capture+0xbc>)
 80023b0:	f008 f88c 	bl	800a4cc <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002410 <IC_second_Capture+0xc0>
 80023c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <IC_second_Capture+0xb8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 1a90 	vmov	r1, s15
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <IC_second_Capture+0xc4>)
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023f2:	621a      	str	r2, [r3, #32]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a12      	ldr	r2, [r2, #32]
 80023fe:	621a      	str	r2, [r3, #32]
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000488 	.word	0x20000488
 800240c:	0800b4dc 	.word	0x0800b4dc
 8002410:	42680000 	.word	0x42680000
 8002414:	20000470 	.word	0x20000470

08002418 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_Init+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_Init+0x28>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f000 f8d8 	bl	80025de <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242e:	200f      	movs	r0, #15
 8002430:	f7fe f932 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002434:	f7fe f908 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	2000006c 	.word	0x2000006c
 8002468:	200004dc 	.word	0x200004dc

0800246c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	200004dc 	.word	0x200004dc

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff4c 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002606:	f7ff ff61 	bl	80024cc <__NVIC_GetPriorityGrouping>
 800260a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7ff ffb1 	bl	8002578 <NVIC_EncodePriority>
 8002616:	4602      	mov	r2, r0
 8002618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff80 	bl	8002524 <__NVIC_SetPriority>
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff54 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002656:	2b02      	cmp	r3, #2
 8002658:	d008      	beq.n	800266c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e020      	b.n	80026ae <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020e 	bic.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e027      	b.n	800272c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
    } 
  }
  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	e160      	b.n	8002a0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8152 	beq.w	8002a04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d005      	beq.n	8002778 <HAL_GPIO_Init+0x40>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d130      	bne.n	80027da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ae:	2201      	movs	r2, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0201 	and.w	r2, r3, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d017      	beq.n	8002816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d123      	bne.n	800286a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0203 	and.w	r2, r3, #3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80ac 	beq.w	8002a04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ac:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_GPIO_Init+0x2f0>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a5d      	ldr	r2, [pc, #372]	; (8002a28 <HAL_GPIO_Init+0x2f0>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_GPIO_Init+0x2f0>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028c4:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_GPIO_Init+0x2f4>)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028ee:	d025      	beq.n	800293c <HAL_GPIO_Init+0x204>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x2f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01f      	beq.n	8002938 <HAL_GPIO_Init+0x200>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x2fc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d019      	beq.n	8002934 <HAL_GPIO_Init+0x1fc>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_GPIO_Init+0x300>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_GPIO_Init+0x1f8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x304>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00d      	beq.n	800292c <HAL_GPIO_Init+0x1f4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_GPIO_Init+0x308>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_Init+0x1f0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_GPIO_Init+0x30c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_GPIO_Init+0x1ec>
 8002920:	2306      	movs	r3, #6
 8002922:	e00c      	b.n	800293e <HAL_GPIO_Init+0x206>
 8002924:	2307      	movs	r3, #7
 8002926:	e00a      	b.n	800293e <HAL_GPIO_Init+0x206>
 8002928:	2305      	movs	r3, #5
 800292a:	e008      	b.n	800293e <HAL_GPIO_Init+0x206>
 800292c:	2304      	movs	r3, #4
 800292e:	e006      	b.n	800293e <HAL_GPIO_Init+0x206>
 8002930:	2303      	movs	r3, #3
 8002932:	e004      	b.n	800293e <HAL_GPIO_Init+0x206>
 8002934:	2302      	movs	r3, #2
 8002936:	e002      	b.n	800293e <HAL_GPIO_Init+0x206>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_GPIO_Init+0x206>
 800293c:	2300      	movs	r3, #0
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	f002 0203 	and.w	r2, r2, #3
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4093      	lsls	r3, r2
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800294e:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_GPIO_Init+0x2f4>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_GPIO_Init+0x310>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_GPIO_Init+0x310>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_GPIO_Init+0x310>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_GPIO_Init+0x310>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_GPIO_Init+0x310>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_GPIO_Init+0x310>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_GPIO_Init+0x310>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_GPIO_Init+0x310>)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f ae97 	bne.w	8002748 <HAL_GPIO_Init+0x10>
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	48001000 	.word	0x48001000
 8002a40:	48001400 	.word	0x48001400
 8002a44:	48001800 	.word	0x48001800
 8002a48:	40010400 	.word	0x40010400

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f001 b83a 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 816f 	beq.w	8002d96 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ab8:	4bb5      	ldr	r3, [pc, #724]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d00c      	beq.n	8002ade <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac4:	4bb2      	ldr	r3, [pc, #712]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d15c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10e>
 8002ad0:	4baf      	ldr	r3, [pc, #700]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d155      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10e>
 8002ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0x94>
 8002b0a:	4ba1      	ldr	r3, [pc, #644]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e015      	b.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b2c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b38:	4b95      	ldr	r3, [pc, #596]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b40:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002b44:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002b48:	fa92 f2a2 	rbit	r2, r2
 8002b4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002b50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f042 0220 	orr.w	r2, r2, #32
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8111 	beq.w	8002d94 <HAL_RCC_OscConfig+0x318>
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8108 	bne.w	8002d94 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f000 bfc6 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x12e>
 8002b9c:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e036      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x158>
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e021      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x184>
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a66      	ldr	r2, [pc, #408]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002c00:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d059      	beq.n	8002cdc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fc20 	bl	800246c <HAL_GetTick>
 8002c2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c32:	f7ff fc1b 	bl	800246c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d902      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	f000 bf67 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002c5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1fe>
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x22a>
 8002c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002caa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002cae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002cba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ab      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1b6>
 8002cda:	e05c      	b.n	8002d96 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fbc6 	bl	800246c <HAL_GetTick>
 8002ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce6:	f7ff fbc1 	bl	800246c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f000 bf0d 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2b2>
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x2de>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002d62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002d6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ab      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x26a>
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_OscConfig+0x31a>
 8002d90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 817f 	beq.w	80030aa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dac:	4ba7      	ldr	r3, [pc, #668]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002db8:	4ba4      	ldr	r3, [pc, #656]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d173      	bne.n	8002eac <HAL_RCC_OscConfig+0x430>
 8002dc4:	4ba1      	ldr	r3, [pc, #644]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd0:	d16c      	bne.n	8002eac <HAL_RCC_OscConfig+0x430>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002de4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_OscConfig+0x386>
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e013      	b.n	8002e2a <HAL_RCC_OscConfig+0x3ae>
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e14:	2302      	movs	r3, #2
 8002e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e26:	4b89      	ldr	r3, [pc, #548]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e40:	fab2 f282 	clz	r2, r2
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f042 0220 	orr.w	r2, r2, #32
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f002 021f 	and.w	r2, r2, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3f6>
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f000 be52 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	21f8      	movs	r1, #248	; 0xf8
 8002e88:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002e90:	fa91 f1a1 	rbit	r1, r1
 8002e94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002e98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e9c:	fab1 f181 	clz	r1, r1
 8002ea0:	b2c9      	uxtb	r1, r1
 8002ea2:	408b      	lsls	r3, r1
 8002ea4:	4969      	ldr	r1, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e0fe      	b.n	80030aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8088 	beq.w	8002fce <HAL_RCC_OscConfig+0x552>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ed0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff fabf 	bl	800246c <HAL_GetTick>
 8002eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7ff faba 	bl	800246c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f000 be06 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e013      	b.n	8002f62 <HAL_RCC_OscConfig+0x4e6>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2202      	movs	r2, #2
 8002f64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002f6c:	fa92 f2a2 	rbit	r2, r2
 8002f70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002f74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f78:	fab2 f282 	clz	r2, r2
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f042 0220 	orr.w	r2, r2, #32
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f002 021f 	and.w	r2, r2, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0af      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	21f8      	movs	r1, #248	; 0xf8
 8002faa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002fb2:	fa91 f1a1 	rbit	r1, r1
 8002fb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fbe:	fab1 f181 	clz	r1, r1
 8002fc2:	b2c9      	uxtb	r1, r1
 8002fc4:	408b      	lsls	r3, r1
 8002fc6:	4921      	ldr	r1, [pc, #132]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e06d      	b.n	80030aa <HAL_RCC_OscConfig+0x62e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fa37 	bl	800246c <HAL_GetTick>
 8002ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7ff fa32 	bl	800246c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f000 bd7e 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800301a:	2302      	movs	r3, #2
 800301c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800302c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x5d4>
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e016      	b.n	8003078 <HAL_RCC_OscConfig+0x5fc>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003068:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003074:	4bbf      	ldr	r3, [pc, #764]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2202      	movs	r2, #2
 800307a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800307e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003082:	fa92 f2a2 	rbit	r2, r2
 8003086:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800308a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ac      	bne.n	8003004 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8113 	beq.w	80032e6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07c      	beq.n	80031ca <HAL_RCC_OscConfig+0x74e>
 80030d0:	2301      	movs	r3, #1
 80030d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80030e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4ba2      	ldr	r3, [pc, #648]	; (8003378 <HAL_RCC_OscConfig+0x8fc>)
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7ff f9b7 	bl	800246c <HAL_GetTick>
 80030fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff f9b2 	bl	800246c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	f000 bcfe 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800313a:	2202      	movs	r2, #2
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003174:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003178:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800317c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003186:	2102      	movs	r1, #2
 8003188:	6019      	str	r1, [r3, #0]
 800318a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f1a3 	rbit	r1, r3
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031a0:	6019      	str	r1, [r3, #0]
  return result;
 80031a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d09d      	beq.n	8003104 <HAL_RCC_OscConfig+0x688>
 80031c8:	e08d      	b.n	80032e6 <HAL_RCC_OscConfig+0x86a>
 80031ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ec:	601a      	str	r2, [r3, #0]
  return result;
 80031ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x8fc>)
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	461a      	mov	r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7ff f92e 	bl	800246c <HAL_GetTick>
 8003210:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7ff f929 	bl	800246c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	f000 bc75 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800322c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003230:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003234:	2202      	movs	r2, #2
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800329a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032a4:	2102      	movs	r1, #2
 80032a6:	6019      	str	r1, [r3, #0]
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f1a3 	rbit	r1, r3
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032be:	6019      	str	r1, [r3, #0]
  return result;
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d197      	bne.n	8003216 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 81a5 	beq.w	8003646 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003334:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d121      	bne.n	800338c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003354:	f7ff f88a 	bl	800246c <HAL_GetTick>
 8003358:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e010      	b.n	8003380 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7ff f885 	bl	800246c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e3d1      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	10908120 	.word	0x10908120
 800337c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <HAL_RCC_OscConfig+0xb3c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0e8      	beq.n	800335e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x92e>
 800339c:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a86      	ldr	r2, [pc, #536]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e035      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x958>
 80033ba:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a7c      	ldr	r2, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	e020      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x982>
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a74      	ldr	r2, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a6b      	ldr	r2, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8081 	beq.w	800352a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7ff f820 	bl	800246c <HAL_GetTick>
 800342c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7ff f81b 	bl	800246c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e365      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 800344a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003452:	2202      	movs	r2, #2
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003472:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003490:	601a      	str	r2, [r3, #0]
  return result;
 8003492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003496:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800349a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0xa3a>
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	e013      	b.n	80034de <HAL_RCC_OscConfig+0xa62>
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034be:	2202      	movs	r2, #2
 80034c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034e6:	2102      	movs	r1, #2
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	fa92 f1a2 	rbit	r1, r2
 80034f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034fc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003500:	6011      	str	r1, [r2, #0]
  return result;
 8003502:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003506:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d084      	beq.n	8003432 <HAL_RCC_OscConfig+0x9b6>
 8003528:	e083      	b.n	8003632 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7fe ff9f 	bl	800246c <HAL_GetTick>
 800352e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe ff9a 	bl	800246c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e2e4      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 800354c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003550:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003574:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003580:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003598:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800359c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0xb44>
 80035b2:	4b02      	ldr	r3, [pc, #8]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	e017      	b.n	80035e8 <HAL_RCC_OscConfig+0xb6c>
 80035b8:	40007000 	.word	0x40007000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035de:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4bb3      	ldr	r3, [pc, #716]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035f0:	2102      	movs	r1, #2
 80035f2:	6011      	str	r1, [r2, #0]
 80035f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fa92 f1a2 	rbit	r1, r2
 8003602:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003606:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800360a:	6011      	str	r1, [r2, #0]
  return result;
 800360c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003610:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d180      	bne.n	8003534 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003632:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 825e 	beq.w	8003b14 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	f000 821f 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 8170 	bne.w	8003958 <HAL_RCC_OscConfig+0xedc>
 8003678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800367c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003698:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800369c:	601a      	str	r2, [r3, #0]
  return result;
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe fed5 	bl	800246c <HAL_GetTick>
 80036c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	e009      	b.n	80036dc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fed0 	bl	800246c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e21c      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 80036dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003700:	601a      	str	r2, [r3, #0]
  return result;
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800370a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <HAL_RCC_OscConfig+0xcaa>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	e027      	b.n	8003776 <HAL_RCC_OscConfig+0xcfa>
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800372e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003738:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003750:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800377a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800377e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003788:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	fa92 f1a2 	rbit	r1, r2
 8003792:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003796:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800379a:	6011      	str	r1, [r2, #0]
  return result;
 800379c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037a0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f042 0220 	orr.w	r2, r2, #32
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f002 021f 	and.w	r2, r2, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d182      	bne.n	80036c8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f023 020f 	bic.w	r2, r3, #15
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a19      	ldr	r1, [r3, #32]
 80037f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	492d      	ldr	r1, [pc, #180]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800380c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	fa93 f2a3 	rbit	r2, r3
 8003820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003824:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003828:	601a      	str	r2, [r3, #0]
  return result;
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003832:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	461a      	mov	r2, r3
 8003846:	2301      	movs	r3, #1
 8003848:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe fe0f 	bl	800246c <HAL_GetTick>
 800384e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003852:	e009      	b.n	8003868 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fe0a 	bl	800246c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e156      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800388c:	601a      	str	r2, [r3, #0]
  return result;
 800388e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003892:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0xe3c>
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e02a      	b.n	8003908 <HAL_RCC_OscConfig+0xe8c>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	4b86      	ldr	r3, [pc, #536]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800390c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800391a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fa92 f1a2 	rbit	r1, r2
 8003924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003928:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800392c:	6011      	str	r1, [r2, #0]
  return result;
 800392e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003932:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	f43f af7f 	beq.w	8003854 <HAL_RCC_OscConfig+0xdd8>
 8003956:	e0dd      	b.n	8003b14 <HAL_RCC_OscConfig+0x1098>
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800397c:	601a      	str	r2, [r3, #0]
  return result;
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003986:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe fd65 	bl	800246c <HAL_GetTick>
 80039a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a6:	e009      	b.n	80039bc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fd60 	bl	800246c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0ac      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 80039bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e0:	601a      	str	r2, [r3, #0]
  return result;
 80039e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0xf8a>
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e027      	b.n	8003a56 <HAL_RCC_OscConfig+0xfda>
 8003a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a30:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	fa93 f2a3 	rbit	r2, r3
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a62:	6011      	str	r1, [r2, #0]
 8003a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	fa92 f1a2 	rbit	r1, r2
 8003a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a76:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003a7a:	6011      	str	r1, [r2, #0]
  return result;
 8003a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a80:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	fab2 f282 	clz	r2, r2
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f042 0220 	orr.w	r2, r2, #32
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f002 021f 	and.w	r2, r2, #31
 8003a96:	2101      	movs	r1, #1
 8003a98:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d182      	bne.n	80039a8 <HAL_RCC_OscConfig+0xf2c>
 8003aa2:	e037      	b.n	8003b14 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e02e      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ac8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003acc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d117      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ae0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ae4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09e      	sub	sp, #120	; 0x78
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e162      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b90      	ldr	r3, [pc, #576]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d910      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b8d      	ldr	r3, [pc, #564]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 0207 	bic.w	r2, r3, #7
 8003b52:	498b      	ldr	r1, [pc, #556]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e14a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b82      	ldr	r3, [pc, #520]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	497f      	ldr	r1, [pc, #508]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80dc 	beq.w	8003d50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d13c      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xf6>
 8003ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_ClockConfig+0xa6>
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e00f      	b.n	8003bea <HAL_RCC_ClockConfig+0xc6>
 8003bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be6:	4b67      	ldr	r3, [pc, #412]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf2:	fa92 f2a2 	rbit	r2, r2
 8003bf6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bfa:	fab2 f282 	clz	r2, r2
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f042 0220 	orr.w	r2, r2, #32
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	f002 021f 	and.w	r2, r2, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d17b      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0f3      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d13c      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x178>
 8003c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x128>
 8003c46:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCC_ClockConfig+0x148>
 8003c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c70:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c74:	fa92 f2a2 	rbit	r2, r2
 8003c78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f002 021f 	and.w	r2, r2, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d13a      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b2      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x1a0>
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_RCC_ClockConfig+0x1bc>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	61ba      	str	r2, [r7, #24]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	617a      	str	r2, [r7, #20]
  return result;
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0220 	orr.w	r2, r2, #32
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e079      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	491a      	ldr	r1, [pc, #104]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fe fba4 	bl	800246c <HAL_GetTick>
 8003d24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fe fba0 	bl	800246c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e061      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d214      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4906      	ldr	r1, [pc, #24]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e040      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	491a      	ldr	r1, [pc, #104]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4912      	ldr	r1, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dc6:	f000 f829 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dca:	4601      	mov	r1, r0
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd4:	22f0      	movs	r2, #240	; 0xf0
 8003dd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	fa92 f2a2 	rbit	r2, r2
 8003dde:	60fa      	str	r2, [r7, #12]
  return result;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fab2 f282 	clz	r2, r2
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	40d3      	lsrs	r3, r2
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x2ec>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
 8003dee:	fa21 f303 	lsr.w	r3, r1, r3
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_RCC_ClockConfig+0x2f0>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_ClockConfig+0x2f4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fc4c 	bl	8000698 <HAL_InitTick>
  
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3778      	adds	r7, #120	; 0x78
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	0800b580 	.word	0x0800b580
 8003e14:	20000060 	.word	0x20000060
 8003e18:	20000068 	.word	0x20000068

08003e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b08b      	sub	sp, #44	; 0x2c
 8003e20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d002      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x30>
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_GetSysClockFreq+0x36>
 8003e4a:	e03f      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e4e:	623b      	str	r3, [r7, #32]
      break;
 8003e50:	e03f      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	fa92 f2a2 	rbit	r2, r2
 8003e64:	607a      	str	r2, [r7, #4]
  return result;
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	40d3      	lsrs	r3, r2
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	220f      	movs	r2, #15
 8003e80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	60fa      	str	r2, [r7, #12]
  return result;
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ece:	623b      	str	r3, [r7, #32]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	372c      	adds	r7, #44	; 0x2c
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	007a1200 	.word	0x007a1200
 8003ee8:	0800b598 	.word	0x0800b598
 8003eec:	0800b5a8 	.word	0x0800b5a8

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000060 	.word	0x20000060

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f0e:	f7ff ffef 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f12:	4601      	mov	r1, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	fa92 f2a2 	rbit	r2, r2
 8003f28:	603a      	str	r2, [r7, #0]
  return result;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	40d3      	lsrs	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800b590 	.word	0x0800b590

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f52:	f7ff ffcd 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f56:	4601      	mov	r1, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	fa92 f2a2 	rbit	r2, r2
 8003f6c:	603a      	str	r2, [r7, #0]
  return result;
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	fab2 f282 	clz	r2, r2
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	40d3      	lsrs	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	0800b590 	.word	0x0800b590

08003f90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_RCC_GetClockConfig+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0207 	and.w	r2, r3, #7
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b092      	sub	sp, #72	; 0x48
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80d4 	beq.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004018:	4b4e      	ldr	r3, [pc, #312]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10e      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402e:	61d3      	str	r3, [r2, #28]
 8004030:	4b48      	ldr	r3, [pc, #288]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b45      	ldr	r3, [pc, #276]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d118      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a41      	ldr	r2, [pc, #260]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fe fa07 	bl	800246c <HAL_GetTick>
 800405e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e008      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fe fa03 	bl	800246c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d901      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1d6      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004088:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8084 	beq.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409c:	429a      	cmp	r2, r3
 800409e:	d07c      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	461a      	mov	r2, r3
 80040ca:	2301      	movs	r3, #1
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	461a      	mov	r2, r3
 80040ee:	2300      	movs	r3, #0
 80040f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d04b      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe f9b3 	bl	800246c <HAL_GetTick>
 8004106:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe f9af 	bl	800246c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e180      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004120:	2302      	movs	r3, #2
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	2302      	movs	r3, #2
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	61fb      	str	r3, [r7, #28]
  return result;
 8004138:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d108      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800414e:	4b01      	ldr	r3, [pc, #4]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	e00d      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
 800415c:	10908100 	.word	0x10908100
 8004160:	2302      	movs	r3, #2
 8004162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	4b9a      	ldr	r3, [pc, #616]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2202      	movs	r2, #2
 8004172:	613a      	str	r2, [r7, #16]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	fa92 f2a2 	rbit	r2, r2
 800417a:	60fa      	str	r2, [r7, #12]
  return result;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	fab2 f282 	clz	r2, r2
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f002 021f 	and.w	r2, r2, #31
 800418e:	2101      	movs	r1, #1
 8004190:	fa01 f202 	lsl.w	r2, r1, r2
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0b7      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800419a:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	498c      	ldr	r1, [pc, #560]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4a87      	ldr	r2, [pc, #540]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	f023 0203 	bic.w	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	497f      	ldr	r1, [pc, #508]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ea:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4978      	ldr	r1, [pc, #480]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004208:	4b73      	ldr	r3, [pc, #460]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4970      	ldr	r1, [pc, #448]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004226:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f023 0210 	bic.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	4969      	ldr	r1, [pc, #420]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	4961      	ldr	r1, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004262:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f023 0220 	bic.w	r2, r3, #32
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	495a      	ldr	r1, [pc, #360]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004270:	4313      	orrs	r3, r2
 8004272:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004280:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	4952      	ldr	r1, [pc, #328]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	494b      	ldr	r1, [pc, #300]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	4943      	ldr	r1, [pc, #268]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042da:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	493c      	ldr	r1, [pc, #240]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	4934      	ldr	r1, [pc, #208]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	492d      	ldr	r1, [pc, #180]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	4925      	ldr	r1, [pc, #148]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	491e      	ldr	r1, [pc, #120]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4916      	ldr	r1, [pc, #88]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	490f      	ldr	r1, [pc, #60]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	4907      	ldr	r1, [pc, #28]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80043ca:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	4913      	ldr	r1, [pc, #76]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	490b      	ldr	r1, [pc, #44]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	4904      	ldr	r1, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3748      	adds	r7, #72	; 0x48
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e049      	b.n	80044d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc ffae 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f001 f916 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d001      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e04f      	b.n	8004598 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01d      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d018      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00e      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0x76>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d115      	bne.n	8004582 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <HAL_TIM_Base_Start_IT+0xdc>)
 800455e:	4013      	ands	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d015      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0xb4>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456e:	d011      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	e008      	b.n	8004594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e000      	b.n	8004596 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40015000 	.word	0x40015000
 80045bc:	00010007 	.word	0x00010007

080045c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e049      	b.n	8004666 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f841 	bl	800466e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f001 f84e 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x24>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e03c      	b.n	8004722 <HAL_TIM_PWM_Start+0x9e>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d109      	bne.n	80046c2 <HAL_TIM_PWM_Start+0x3e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e02f      	b.n	8004722 <HAL_TIM_PWM_Start+0x9e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d109      	bne.n	80046dc <HAL_TIM_PWM_Start+0x58>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e022      	b.n	8004722 <HAL_TIM_PWM_Start+0x9e>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d109      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x72>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e015      	b.n	8004722 <HAL_TIM_PWM_Start+0x9e>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d109      	bne.n	8004710 <HAL_TIM_PWM_Start+0x8c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e008      	b.n	8004722 <HAL_TIM_PWM_Start+0x9e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0a1      	b.n	800486e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0xb6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	e023      	b.n	8004782 <HAL_TIM_PWM_Start+0xfe>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0xc6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	e01b      	b.n	8004782 <HAL_TIM_PWM_Start+0xfe>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xd6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	e013      	b.n	8004782 <HAL_TIM_PWM_Start+0xfe>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0xe6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004768:	e00b      	b.n	8004782 <HAL_TIM_PWM_Start+0xfe>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b10      	cmp	r3, #16
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0xf6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004778:	e003      	b.n	8004782 <HAL_TIM_PWM_Start+0xfe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2201      	movs	r2, #1
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fcea 	bl	8006164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a38      	ldr	r2, [pc, #224]	; (8004878 <HAL_TIM_PWM_Start+0x1f4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_TIM_PWM_Start+0x148>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a37      	ldr	r2, [pc, #220]	; (800487c <HAL_TIM_PWM_Start+0x1f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_TIM_PWM_Start+0x148>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a35      	ldr	r2, [pc, #212]	; (8004880 <HAL_TIM_PWM_Start+0x1fc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIM_PWM_Start+0x148>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a34      	ldr	r2, [pc, #208]	; (8004884 <HAL_TIM_PWM_Start+0x200>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_PWM_Start+0x148>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a32      	ldr	r2, [pc, #200]	; (8004888 <HAL_TIM_PWM_Start+0x204>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_PWM_Start+0x148>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a31      	ldr	r2, [pc, #196]	; (800488c <HAL_TIM_PWM_Start+0x208>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x14c>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_PWM_Start+0x14e>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a23      	ldr	r2, [pc, #140]	; (8004878 <HAL_TIM_PWM_Start+0x1f4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d018      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a24      	ldr	r2, [pc, #144]	; (8004890 <HAL_TIM_PWM_Start+0x20c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_TIM_PWM_Start+0x210>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_TIM_PWM_Start+0x1f8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a18      	ldr	r2, [pc, #96]	; (8004880 <HAL_TIM_PWM_Start+0x1fc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIM_PWM_Start+0x1a8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_TIM_PWM_Start+0x208>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d115      	bne.n	8004858 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_TIM_PWM_Start+0x214>)
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b06      	cmp	r3, #6
 800483c:	d015      	beq.n	800486a <HAL_TIM_PWM_Start+0x1e6>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d011      	beq.n	800486a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e008      	b.n	800486a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e000      	b.n	800486c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40013400 	.word	0x40013400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800
 800488c:	40015000 	.word	0x40015000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	00010007 	.word	0x00010007

0800489c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fc58 	bl	8006164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a40      	ldr	r2, [pc, #256]	; (80049bc <HAL_TIM_PWM_Stop+0x120>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_PWM_Stop+0x54>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3f      	ldr	r2, [pc, #252]	; (80049c0 <HAL_TIM_PWM_Stop+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_PWM_Stop+0x54>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <HAL_TIM_PWM_Stop+0x128>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_PWM_Stop+0x54>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <HAL_TIM_PWM_Stop+0x12c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_PWM_Stop+0x54>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <HAL_TIM_PWM_Stop+0x130>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_PWM_Stop+0x54>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a39      	ldr	r2, [pc, #228]	; (80049d0 <HAL_TIM_PWM_Stop+0x134>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_PWM_Stop+0x58>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_PWM_Stop+0x5a>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	f241 1311 	movw	r3, #4369	; 0x1111
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_TIM_PWM_Stop+0x8e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	f240 4344 	movw	r3, #1092	; 0x444
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_TIM_PWM_Stop+0x8e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	f241 1311 	movw	r3, #4369	; 0x1111
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_TIM_PWM_Stop+0xbe>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	f240 4344 	movw	r3, #1092	; 0x444
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_TIM_PWM_Stop+0xbe>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Stop+0xce>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004968:	e023      	b.n	80049b2 <HAL_TIM_PWM_Stop+0x116>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Stop+0xde>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004978:	e01b      	b.n	80049b2 <HAL_TIM_PWM_Stop+0x116>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d104      	bne.n	800498a <HAL_TIM_PWM_Stop+0xee>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	e013      	b.n	80049b2 <HAL_TIM_PWM_Stop+0x116>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Stop+0xfe>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004998:	e00b      	b.n	80049b2 <HAL_TIM_PWM_Stop+0x116>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Stop+0x10e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	e003      	b.n	80049b2 <HAL_TIM_PWM_Stop+0x116>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40015000 	.word	0x40015000

080049d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e049      	b.n	8004a7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f841 	bl	8004a82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 fe44 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_IC_Start_IT+0x1e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e023      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_IC_Start_IT+0x2e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e01b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x3e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x4e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x5e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x66>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <HAL_TIM_IC_Start_IT+0x78>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e013      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d104      	bne.n	8004b20 <HAL_TIM_IC_Start_IT+0x88>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e00b      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_IC_Start_IT+0x98>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e003      	b.n	8004b38 <HAL_TIM_IC_Start_IT+0xa0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	7bbb      	ldrb	r3, [r7, #14]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d102      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b40:	7b7b      	ldrb	r3, [r7, #13]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0dd      	b.n	8004d06 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_IC_Start_IT+0xc2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	e023      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0xd2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b68:	e01b      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0xe2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b78:	e013      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0xf2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b88:	e00b      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0x102>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b98:	e003      	b.n	8004ba2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0x11a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0x12a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	e00b      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0x13a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd0:	e003      	b.n	8004bda <HAL_TIM_IC_Start_IT+0x142>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d841      	bhi.n	8004c64 <HAL_TIM_IC_Start_IT+0x1cc>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <HAL_TIM_IC_Start_IT+0x150>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c65 	.word	0x08004c65
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c53 	.word	0x08004c53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0202 	orr.w	r2, r2, #2
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	e01d      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0204 	orr.w	r2, r2, #4
 8004c3c:	60da      	str	r2, [r3, #12]
      break;
 8004c3e:	e014      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	60da      	str	r2, [r3, #12]
      break;
 8004c50:	e00b      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0210 	orr.w	r2, r2, #16
 8004c60:	60da      	str	r2, [r3, #12]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d149      	bne.n	8004d04 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2201      	movs	r2, #1
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fa73 	bl	8006164 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_TIM_IC_Start_IT+0x278>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_TIM_IC_Start_IT+0x27c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <HAL_TIM_IC_Start_IT+0x280>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_TIM_IC_Start_IT+0x284>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <HAL_TIM_IC_Start_IT+0x288>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_IC_Start_IT+0x22c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_TIM_IC_Start_IT+0x28c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d115      	bne.n	8004cf0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_TIM_IC_Start_IT+0x290>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d015      	beq.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d011      	beq.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40015000 	.word	0x40015000
 8004d28:	00010007 	.word	0x00010007

08004d2c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d841      	bhi.n	8004dc4 <HAL_TIM_IC_Stop_IT+0x98>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <HAL_TIM_IC_Stop_IT+0x1c>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004dc5 	.word	0x08004dc5
 8004d50:	08004dc5 	.word	0x08004dc5
 8004d54:	08004dc5 	.word	0x08004dc5
 8004d58:	08004d8f 	.word	0x08004d8f
 8004d5c:	08004dc5 	.word	0x08004dc5
 8004d60:	08004dc5 	.word	0x08004dc5
 8004d64:	08004dc5 	.word	0x08004dc5
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004dc5 	.word	0x08004dc5
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004dc5 	.word	0x08004dc5
 8004d78:	08004db3 	.word	0x08004db3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0202 	bic.w	r2, r2, #2
 8004d8a:	60da      	str	r2, [r3, #12]
      break;
 8004d8c:	e01d      	b.n	8004dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0204 	bic.w	r2, r2, #4
 8004d9c:	60da      	str	r2, [r3, #12]
      break;
 8004d9e:	e014      	b.n	8004dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0208 	bic.w	r2, r2, #8
 8004dae:	60da      	str	r2, [r3, #12]
      break;
 8004db0:	e00b      	b.n	8004dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0210 	bic.w	r2, r2, #16
 8004dc0:	60da      	str	r2, [r3, #12]
      break;
 8004dc2:	e002      	b.n	8004dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d166      	bne.n	8004e9e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f9c3 	bl	8006164 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_TIM_IC_Stop_IT+0xe2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	f240 4344 	movw	r3, #1092	; 0x444
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_IC_Stop_IT+0xe2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_IC_Stop_IT+0xf2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_IC_Stop_IT+0x102>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	e01b      	b.n	8004e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Stop_IT+0x112>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_IC_Stop_IT+0x122>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_IC_Stop_IT+0x132>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_IC_Stop_IT+0x14a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	e013      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x172>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_IC_Stop_IT+0x15a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x172>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_IC_Stop_IT+0x16a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_IC_Stop_IT+0x172>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0202 	mvn.w	r2, #2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd f902 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fbb6 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fbbd 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0204 	mvn.w	r2, #4
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd f8d8 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fb8c 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb93 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0208 	mvn.w	r2, #8
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fd f8ae 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb62 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb69 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0210 	mvn.w	r2, #16
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f884 	bl	80020f4 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fb38 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb3f 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0201 	mvn.w	r2, #1
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb faf6 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 f9c8 	bl	80063e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d10e      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d107      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 f9bb 	bl	80063fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d10e      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 faed 	bl	800568c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d10e      	bne.n	80050de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d107      	bne.n	80050de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0220 	mvn.w	r2, #32
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 f97b 	bl	80063d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005100:	2302      	movs	r3, #2
 8005102:	e088      	b.n	8005216 <HAL_TIM_IC_ConfigChannel+0x130>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11b      	bne.n	800514a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005122:	f000 fe61 	bl	8005de8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 020c 	bic.w	r2, r2, #12
 8005134:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6999      	ldr	r1, [r3, #24]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	619a      	str	r2, [r3, #24]
 8005148:	e060      	b.n	800520c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d11c      	bne.n	800518a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005160:	f000 fedf 	bl	8005f22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005172:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	619a      	str	r2, [r3, #24]
 8005188:	e040      	b.n	800520c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051a0:	f000 ff2c 	bl	8005ffc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020c 	bic.w	r2, r2, #12
 80051b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69d9      	ldr	r1, [r3, #28]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e021      	b.n	800520c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d11c      	bne.n	8005208 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051de:	f000 ff49 	bl	8006074 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	61da      	str	r2, [r3, #28]
 8005206:	e001      	b.n	800520c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800523a:	2302      	movs	r3, #2
 800523c:	e0ff      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b14      	cmp	r3, #20
 800524a:	f200 80f0 	bhi.w	800542e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	080052a9 	.word	0x080052a9
 8005258:	0800542f 	.word	0x0800542f
 800525c:	0800542f 	.word	0x0800542f
 8005260:	0800542f 	.word	0x0800542f
 8005264:	080052e9 	.word	0x080052e9
 8005268:	0800542f 	.word	0x0800542f
 800526c:	0800542f 	.word	0x0800542f
 8005270:	0800542f 	.word	0x0800542f
 8005274:	0800532b 	.word	0x0800532b
 8005278:	0800542f 	.word	0x0800542f
 800527c:	0800542f 	.word	0x0800542f
 8005280:	0800542f 	.word	0x0800542f
 8005284:	0800536b 	.word	0x0800536b
 8005288:	0800542f 	.word	0x0800542f
 800528c:	0800542f 	.word	0x0800542f
 8005290:	0800542f 	.word	0x0800542f
 8005294:	080053ad 	.word	0x080053ad
 8005298:	0800542f 	.word	0x0800542f
 800529c:	0800542f 	.word	0x0800542f
 80052a0:	0800542f 	.word	0x0800542f
 80052a4:	080053ed 	.word	0x080053ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fa94 	bl	80057dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0208 	orr.w	r2, r2, #8
 80052c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6999      	ldr	r1, [r3, #24]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	619a      	str	r2, [r3, #24]
      break;
 80052e6:	e0a5      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fb0e 	bl	8005910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6999      	ldr	r1, [r3, #24]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	619a      	str	r2, [r3, #24]
      break;
 8005328:	e084      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fb81 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0208 	orr.w	r2, r2, #8
 8005344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0204 	bic.w	r2, r2, #4
 8005354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69d9      	ldr	r1, [r3, #28]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	61da      	str	r2, [r3, #28]
      break;
 8005368:	e064      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fbf3 	bl	8005b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69d9      	ldr	r1, [r3, #28]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	61da      	str	r2, [r3, #28]
      break;
 80053aa:	e043      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fc42 	bl	8005c3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053ea:	e023      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fc8c 	bl	8005d10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800542c:	e002      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
      break;
 8005432:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800543c:	7dfb      	ldrb	r3, [r7, #23]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIM_ConfigClockSource+0x1c>
 8005460:	2302      	movs	r3, #2
 8005462:	e0b6      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x18a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a0:	d03e      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0xd8>
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a6:	f200 8087 	bhi.w	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	f000 8086 	beq.w	80055be <HAL_TIM_ConfigClockSource+0x176>
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	d87f      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054b8:	2b70      	cmp	r3, #112	; 0x70
 80054ba:	d01a      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0xaa>
 80054bc:	2b70      	cmp	r3, #112	; 0x70
 80054be:	d87b      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054c0:	2b60      	cmp	r3, #96	; 0x60
 80054c2:	d050      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0x11e>
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d877      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054c8:	2b50      	cmp	r3, #80	; 0x50
 80054ca:	d03c      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0xfe>
 80054cc:	2b50      	cmp	r3, #80	; 0x50
 80054ce:	d873      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d058      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x13e>
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d86f      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054d8:	2b30      	cmp	r3, #48	; 0x30
 80054da:	d064      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x15e>
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d86b      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d060      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x15e>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d867      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05c      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x15e>
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d05a      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x15e>
 80054f0:	e062      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005502:	f000 fe0f 	bl	8006124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	609a      	str	r2, [r3, #8]
      break;
 800551e:	e04f      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005530:	f000 fdf8 	bl	8006124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005542:	609a      	str	r2, [r3, #8]
      break;
 8005544:	e03c      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005552:	461a      	mov	r2, r3
 8005554:	f000 fcb6 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2150      	movs	r1, #80	; 0x50
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fdc5 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005564:	e02c      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fd12 	bl	8005f9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2160      	movs	r1, #96	; 0x60
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fdb5 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005584:	e01c      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	461a      	mov	r2, r3
 8005594:	f000 fc96 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fda5 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055a4:	e00c      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f000 fd9c 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055b6:	e003      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d831      	bhi.n	8005654 <HAL_TIM_ReadCapturedValue+0x78>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005637 	.word	0x08005637
 800560c:	08005655 	.word	0x08005655
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005641 	.word	0x08005641
 800561c:	08005655 	.word	0x08005655
 8005620:	08005655 	.word	0x08005655
 8005624:	08005655 	.word	0x08005655
 8005628:	0800564b 	.word	0x0800564b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	60fb      	str	r3, [r7, #12]

      break;
 8005634:	e00f      	b.n	8005656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	60fb      	str	r3, [r7, #12]

      break;
 800563e:	e00a      	b.n	8005656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	60fb      	str	r3, [r7, #12]

      break;
 8005648:	e005      	b.n	8005656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	60fb      	str	r3, [r7, #12]

      break;
 8005652:	e000      	b.n	8005656 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005654:	bf00      	nop
  }

  return tmpreg;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a42      	ldr	r2, [pc, #264]	; (80057bc <TIM_Base_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3f      	ldr	r2, [pc, #252]	; (80057c0 <TIM_Base_SetConfig+0x120>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3e      	ldr	r2, [pc, #248]	; (80057c4 <TIM_Base_SetConfig+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3d      	ldr	r2, [pc, #244]	; (80057c8 <TIM_Base_SetConfig+0x128>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <TIM_Base_SetConfig+0x12c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <TIM_Base_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <TIM_Base_SetConfig+0x120>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <TIM_Base_SetConfig+0x124>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <TIM_Base_SetConfig+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <TIM_Base_SetConfig+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <TIM_Base_SetConfig+0x134>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <TIM_Base_SetConfig+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <TIM_Base_SetConfig+0x12c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <TIM_Base_SetConfig+0x11c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <TIM_Base_SetConfig+0x100>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <TIM_Base_SetConfig+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_Base_SetConfig+0x100>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <TIM_Base_SetConfig+0x130>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_Base_SetConfig+0x100>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <TIM_Base_SetConfig+0x134>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_Base_SetConfig+0x100>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <TIM_Base_SetConfig+0x138>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0x100>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <TIM_Base_SetConfig+0x12c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40015000 	.word	0x40015000
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 0302 	bic.w	r3, r3, #2
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a30      	ldr	r2, [pc, #192]	; (80058f8 <TIM_OC1_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <TIM_OC1_SetConfig+0x88>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <TIM_OC1_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00f      	beq.n	8005864 <TIM_OC1_SetConfig+0x88>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2e      	ldr	r2, [pc, #184]	; (8005900 <TIM_OC1_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00b      	beq.n	8005864 <TIM_OC1_SetConfig+0x88>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <TIM_OC1_SetConfig+0x128>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <TIM_OC1_SetConfig+0x88>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <TIM_OC1_SetConfig+0x12c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC1_SetConfig+0x88>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2b      	ldr	r2, [pc, #172]	; (800590c <TIM_OC1_SetConfig+0x130>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10c      	bne.n	800587e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0308 	bic.w	r3, r3, #8
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <TIM_OC1_SetConfig+0x11c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <TIM_OC1_SetConfig+0xd2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <TIM_OC1_SetConfig+0x120>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_OC1_SetConfig+0xd2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <TIM_OC1_SetConfig+0x124>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_OC1_SetConfig+0xd2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <TIM_OC1_SetConfig+0x128>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC1_SetConfig+0xd2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <TIM_OC1_SetConfig+0x12c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC1_SetConfig+0xd2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <TIM_OC1_SetConfig+0x130>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d111      	bne.n	80058d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	40015000 	.word	0x40015000

08005910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f023 0210 	bic.w	r2, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_OC2_SetConfig+0x110>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_OC2_SetConfig+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_OC2_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC2_SetConfig+0x74>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_OC2_SetConfig+0x118>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10d      	bne.n	80059a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <TIM_OC2_SetConfig+0x110>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <TIM_OC2_SetConfig+0xc0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <TIM_OC2_SetConfig+0x114>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_OC2_SetConfig+0xc0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <TIM_OC2_SetConfig+0x11c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC2_SetConfig+0xc0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <TIM_OC2_SetConfig+0x120>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC2_SetConfig+0xc0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <TIM_OC2_SetConfig+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC2_SetConfig+0xc0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <TIM_OC2_SetConfig+0x118>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d113      	bne.n	80059f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40015000 	.word	0x40015000
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2b      	ldr	r2, [pc, #172]	; (8005b44 <TIM_OC3_SetConfig+0x10c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_OC3_SetConfig+0x72>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <TIM_OC3_SetConfig+0x110>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x72>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <TIM_OC3_SetConfig+0x114>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10d      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <TIM_OC3_SetConfig+0x10c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <TIM_OC3_SetConfig+0xbe>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <TIM_OC3_SetConfig+0x110>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <TIM_OC3_SetConfig+0xbe>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <TIM_OC3_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_OC3_SetConfig+0xbe>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC3_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_OC3_SetConfig+0xbe>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC3_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_OC3_SetConfig+0xbe>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <TIM_OC3_SetConfig+0x114>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d113      	bne.n	8005b1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	621a      	str	r2, [r3, #32]
}
 8005b38:	bf00      	nop
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40015000 	.word	0x40015000
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800

08005b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	031b      	lsls	r3, r3, #12
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <TIM_OC4_SetConfig+0xc8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <TIM_OC4_SetConfig+0x8c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <TIM_OC4_SetConfig+0xcc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00f      	beq.n	8005be8 <TIM_OC4_SetConfig+0x8c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <TIM_OC4_SetConfig+0xd0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_OC4_SetConfig+0x8c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <TIM_OC4_SetConfig+0xd4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_OC4_SetConfig+0x8c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <TIM_OC4_SetConfig+0xd8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC4_SetConfig+0x8c>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <TIM_OC4_SetConfig+0xdc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d109      	bne.n	8005bfc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	40015000 	.word	0x40015000

08005c3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <TIM_OC5_SetConfig+0xbc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_OC5_SetConfig+0x82>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <TIM_OC5_SetConfig+0xc0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_OC5_SetConfig+0x82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC5_SetConfig+0xc4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_OC5_SetConfig+0x82>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC5_SetConfig+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_OC5_SetConfig+0x82>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <TIM_OC5_SetConfig+0xcc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_OC5_SetConfig+0x82>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <TIM_OC5_SetConfig+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d109      	bne.n	8005cd2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800
 8005d0c:	40015000 	.word	0x40015000

08005d10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	051b      	lsls	r3, r3, #20
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <TIM_OC6_SetConfig+0xc0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_OC6_SetConfig+0x84>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <TIM_OC6_SetConfig+0xc4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00f      	beq.n	8005d94 <TIM_OC6_SetConfig+0x84>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <TIM_OC6_SetConfig+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_OC6_SetConfig+0x84>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <TIM_OC6_SetConfig+0xcc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_OC6_SetConfig+0x84>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <TIM_OC6_SetConfig+0xd0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_OC6_SetConfig+0x84>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <TIM_OC6_SetConfig+0xd4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d109      	bne.n	8005da8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40015000 	.word	0x40015000

08005de8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a26      	ldr	r2, [pc, #152]	; (8005eac <TIM_TI1_SetConfig+0xc4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d017      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d013      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <TIM_TI1_SetConfig+0xc8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00f      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a22      	ldr	r2, [pc, #136]	; (8005eb4 <TIM_TI1_SetConfig+0xcc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00b      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a21      	ldr	r2, [pc, #132]	; (8005eb8 <TIM_TI1_SetConfig+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <TIM_TI1_SetConfig+0xd4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_TI1_SetConfig+0x5e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <TIM_TI1_SetConfig+0xd8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <TIM_TI1_SetConfig+0x62>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <TIM_TI1_SetConfig+0x64>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e003      	b.n	8005e6a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f023 030a 	bic.w	r3, r3, #10
 8005e84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 030a 	and.w	r3, r3, #10
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40013400 	.word	0x40013400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40015000 	.word	0x40015000

08005ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 030a 	bic.w	r3, r3, #10
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f023 0210 	bic.w	r2, r3, #16
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 0210 	bic.w	r2, r3, #16
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	031b      	lsls	r3, r3, #12
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0303 	bic.w	r3, r3, #3
 8006028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	b2db      	uxtb	r3, r3
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800604c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	031b      	lsls	r3, r3, #12
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	031b      	lsls	r3, r3, #12
 80060cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	f043 0307 	orr.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e06d      	b.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a30      	ldr	r2, [pc, #192]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2d      	ldr	r2, [pc, #180]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800620c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d01d      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d018      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d013      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00e      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d009      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a16      	ldr	r2, [pc, #88]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d10c      	bne.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	4313      	orrs	r3, r2
 8006288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40015000 	.word	0x40015000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40014000 	.word	0x40014000

080062c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e06a      	b.n	80063ba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	041b      	lsls	r3, r3, #16
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a17      	ldr	r2, [pc, #92]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d115      	bne.n	80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	051b      	lsls	r3, r3, #20
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40013400 	.word	0x40013400
 80063d0:	40015000 	.word	0x40015000

080063d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e040      	b.n	80064a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fabc 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2224      	movs	r2, #36	; 0x24
 800643c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb76 	bl	8006b40 <UART_SetConfig>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e022      	b.n	80064a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fd3e 	bl	8006ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800647a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800648a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fdc5 	bl	800702c <UART_CheckIdleState>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d132      	bne.n	800652a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Receive_IT+0x24>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e02b      	b.n	800652c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	623b      	str	r3, [r7, #32]
 8006508:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	461a      	mov	r2, r3
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fe93 	bl	800724c <UART_Start_Receive_IT>
 8006526:	4603      	mov	r3, r0
 8006528:	e000      	b.n	800652c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b0ba      	sub	sp, #232	; 0xe8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800655a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800655e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006562:	4013      	ands	r3, r2
 8006564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00f      	beq.n	800659c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 82ab 	beq.w	8006ae8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      }
      return;
 800659a:	e2a5      	b.n	8006ae8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800659c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8117 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065b6:	4b85      	ldr	r3, [pc, #532]	; (80067cc <HAL_UART_IRQHandler+0x298>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 810a 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_UART_IRQHandler+0xbc>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e6:	f043 0201 	orr.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0xec>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2202      	movs	r2, #2
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006616:	f043 0204 	orr.w	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0x11c>
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2204      	movs	r2, #4
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006646:	f043 0202 	orr.w	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006694:	2b00      	cmp	r3, #0
 8006696:	d012      	beq.n	80066be <HAL_UART_IRQHandler+0x18a>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8211 	beq.w	8006aec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d005      	beq.n	8006716 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800670a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04f      	beq.n	80067b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fe5e 	bl	80073d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d141      	bne.n	80067ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3308      	adds	r3, #8
 8006752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800675a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800676e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1d9      	bne.n	800672a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006782:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <HAL_UART_IRQHandler+0x29c>)
 8006784:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678a:	4618      	mov	r0, r3
 800678c:	f7fb ff95 	bl	80026ba <HAL_DMA_Abort_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00f      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9b4 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00b      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f9b0 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e007      	b.n	80067c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9ac 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80067c4:	e192      	b.n	8006aec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c6:	bf00      	nop
    return;
 80067c8:	e190      	b.n	8006aec <HAL_UART_IRQHandler+0x5b8>
 80067ca:	bf00      	nop
 80067cc:	04000120 	.word	0x04000120
 80067d0:	080074a1 	.word	0x080074a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 814b 	bne.w	8006a74 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8144 	beq.w	8006a74 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 813d 	beq.w	8006a74 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2210      	movs	r2, #16
 8006800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	f040 80b5 	bne.w	800697c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800681e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8164 	beq.w	8006af0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006832:	429a      	cmp	r2, r3
 8006834:	f080 815c 	bcs.w	8006af0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800683e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b20      	cmp	r3, #32
 800684a:	f000 8086 	beq.w	800695a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800687c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006884:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1da      	bne.n	800684e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e1      	bne.n	8006898 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800693c:	65bb      	str	r3, [r7, #88]	; 0x58
 800693e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800694a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006954:	4618      	mov	r0, r3
 8006956:	f7fb fe77 	bl	8002648 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696c:	b29b      	uxth	r3, r3
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	b29b      	uxth	r3, r3
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8d7 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800697a:	e0b9      	b.n	8006af0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006988:	b29b      	uxth	r3, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80ab 	beq.w	8006af4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800699e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a6 	beq.w	8006af4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ca:	647b      	str	r3, [r7, #68]	; 0x44
 80069cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e4      	bne.n	80069a8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	623b      	str	r3, [r7, #32]
   return(result);
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a02:	633a      	str	r2, [r7, #48]	; 0x30
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e3      	bne.n	80069de <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e4      	bne.n	8006a2a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f85b 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a72:	e03f      	b.n	8006af4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <HAL_UART_IRQHandler+0x56a>
 8006a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 feea 	bl	8007870 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a9c:	e02d      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01c      	beq.n	8006af8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
    }
    return;
 8006ac6:	e017      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <HAL_UART_IRQHandler+0x5c6>
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fcf3 	bl	80074cc <UART_EndTransmit_IT>
    return;
 8006ae6:	e008      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ae8:	bf00      	nop
 8006aea:	e006      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
    return;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
      return;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_UART_IRQHandler+0x5c6>
    return;
 8006af8:	bf00      	nop
  }

}
 8006afa:	37e8      	adds	r7, #232	; 0xe8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b92      	ldr	r3, [pc, #584]	; (8006db4 <UART_SetConfig+0x274>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a80      	ldr	r2, [pc, #512]	; (8006db8 <UART_SetConfig+0x278>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d120      	bne.n	8006bfe <UART_SetConfig+0xbe>
 8006bbc:	4b7f      	ldr	r3, [pc, #508]	; (8006dbc <UART_SetConfig+0x27c>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d817      	bhi.n	8006bf8 <UART_SetConfig+0xb8>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0x90>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006bed 	.word	0x08006bed
 8006bd8:	08006bf3 	.word	0x08006bf3
 8006bdc:	08006be7 	.word	0x08006be7
 8006be0:	2301      	movs	r3, #1
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e0b5      	b.n	8006d52 <UART_SetConfig+0x212>
 8006be6:	2302      	movs	r3, #2
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e0b2      	b.n	8006d52 <UART_SetConfig+0x212>
 8006bec:	2304      	movs	r3, #4
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e0af      	b.n	8006d52 <UART_SetConfig+0x212>
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e0ac      	b.n	8006d52 <UART_SetConfig+0x212>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e0a9      	b.n	8006d52 <UART_SetConfig+0x212>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6f      	ldr	r2, [pc, #444]	; (8006dc0 <UART_SetConfig+0x280>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d124      	bne.n	8006c52 <UART_SetConfig+0x112>
 8006c08:	4b6c      	ldr	r3, [pc, #432]	; (8006dbc <UART_SetConfig+0x27c>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c14:	d011      	beq.n	8006c3a <UART_SetConfig+0xfa>
 8006c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c1a:	d817      	bhi.n	8006c4c <UART_SetConfig+0x10c>
 8006c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c20:	d011      	beq.n	8006c46 <UART_SetConfig+0x106>
 8006c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c26:	d811      	bhi.n	8006c4c <UART_SetConfig+0x10c>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <UART_SetConfig+0xf4>
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d006      	beq.n	8006c40 <UART_SetConfig+0x100>
 8006c32:	e00b      	b.n	8006c4c <UART_SetConfig+0x10c>
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e08b      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e088      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e085      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e082      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e07f      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a5b      	ldr	r2, [pc, #364]	; (8006dc4 <UART_SetConfig+0x284>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d124      	bne.n	8006ca6 <UART_SetConfig+0x166>
 8006c5c:	4b57      	ldr	r3, [pc, #348]	; (8006dbc <UART_SetConfig+0x27c>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c68:	d011      	beq.n	8006c8e <UART_SetConfig+0x14e>
 8006c6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c6e:	d817      	bhi.n	8006ca0 <UART_SetConfig+0x160>
 8006c70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c74:	d011      	beq.n	8006c9a <UART_SetConfig+0x15a>
 8006c76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c7a:	d811      	bhi.n	8006ca0 <UART_SetConfig+0x160>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SetConfig+0x148>
 8006c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c84:	d006      	beq.n	8006c94 <UART_SetConfig+0x154>
 8006c86:	e00b      	b.n	8006ca0 <UART_SetConfig+0x160>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e061      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e05e      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e05b      	b.n	8006d52 <UART_SetConfig+0x212>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e058      	b.n	8006d52 <UART_SetConfig+0x212>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e055      	b.n	8006d52 <UART_SetConfig+0x212>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a47      	ldr	r2, [pc, #284]	; (8006dc8 <UART_SetConfig+0x288>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d124      	bne.n	8006cfa <UART_SetConfig+0x1ba>
 8006cb0:	4b42      	ldr	r3, [pc, #264]	; (8006dbc <UART_SetConfig+0x27c>)
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cbc:	d011      	beq.n	8006ce2 <UART_SetConfig+0x1a2>
 8006cbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cc2:	d817      	bhi.n	8006cf4 <UART_SetConfig+0x1b4>
 8006cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc8:	d011      	beq.n	8006cee <UART_SetConfig+0x1ae>
 8006cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cce:	d811      	bhi.n	8006cf4 <UART_SetConfig+0x1b4>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <UART_SetConfig+0x19c>
 8006cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd8:	d006      	beq.n	8006ce8 <UART_SetConfig+0x1a8>
 8006cda:	e00b      	b.n	8006cf4 <UART_SetConfig+0x1b4>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e037      	b.n	8006d52 <UART_SetConfig+0x212>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e034      	b.n	8006d52 <UART_SetConfig+0x212>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e031      	b.n	8006d52 <UART_SetConfig+0x212>
 8006cee:	2308      	movs	r3, #8
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e02e      	b.n	8006d52 <UART_SetConfig+0x212>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e02b      	b.n	8006d52 <UART_SetConfig+0x212>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <UART_SetConfig+0x28c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d124      	bne.n	8006d4e <UART_SetConfig+0x20e>
 8006d04:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <UART_SetConfig+0x27c>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d10:	d011      	beq.n	8006d36 <UART_SetConfig+0x1f6>
 8006d12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d16:	d817      	bhi.n	8006d48 <UART_SetConfig+0x208>
 8006d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d1c:	d011      	beq.n	8006d42 <UART_SetConfig+0x202>
 8006d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d22:	d811      	bhi.n	8006d48 <UART_SetConfig+0x208>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <UART_SetConfig+0x1f0>
 8006d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d2c:	d006      	beq.n	8006d3c <UART_SetConfig+0x1fc>
 8006d2e:	e00b      	b.n	8006d48 <UART_SetConfig+0x208>
 8006d30:	2300      	movs	r3, #0
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e00d      	b.n	8006d52 <UART_SetConfig+0x212>
 8006d36:	2302      	movs	r3, #2
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e00a      	b.n	8006d52 <UART_SetConfig+0x212>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e007      	b.n	8006d52 <UART_SetConfig+0x212>
 8006d42:	2308      	movs	r3, #8
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e004      	b.n	8006d52 <UART_SetConfig+0x212>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e001      	b.n	8006d52 <UART_SetConfig+0x212>
 8006d4e:	2310      	movs	r3, #16
 8006d50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5a:	d16b      	bne.n	8006e34 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006d5c:	7ffb      	ldrb	r3, [r7, #31]
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d838      	bhi.n	8006dd4 <UART_SetConfig+0x294>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x228>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006dd5 	.word	0x08006dd5
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006dd5 	.word	0x08006dd5
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006dd5 	.word	0x08006dd5
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fd f8bc 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8006d90:	61b8      	str	r0, [r7, #24]
        break;
 8006d92:	e024      	b.n	8006dde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fd f8da 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8006d98:	61b8      	str	r0, [r7, #24]
        break;
 8006d9a:	e020      	b.n	8006dde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <UART_SetConfig+0x290>)
 8006d9e:	61bb      	str	r3, [r7, #24]
        break;
 8006da0:	e01d      	b.n	8006dde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fd f83b 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8006da6:	61b8      	str	r0, [r7, #24]
        break;
 8006da8:	e019      	b.n	8006dde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	61bb      	str	r3, [r7, #24]
        break;
 8006db0:	e015      	b.n	8006dde <UART_SetConfig+0x29e>
 8006db2:	bf00      	nop
 8006db4:	efff69f3 	.word	0xefff69f3
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40004400 	.word	0x40004400
 8006dc4:	40004800 	.word	0x40004800
 8006dc8:	40004c00 	.word	0x40004c00
 8006dcc:	40005000 	.word	0x40005000
 8006dd0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	77bb      	strb	r3, [r7, #30]
        break;
 8006ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d073      	beq.n	8006ecc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	005a      	lsls	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d916      	bls.n	8006e2e <UART_SetConfig+0x2ee>
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d212      	bcs.n	8006e2e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f023 030f 	bic.w	r3, r3, #15
 8006e10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	89fa      	ldrh	r2, [r7, #14]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e04e      	b.n	8006ecc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	77bb      	strb	r3, [r7, #30]
 8006e32:	e04b      	b.n	8006ecc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e34:	7ffb      	ldrb	r3, [r7, #31]
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d827      	bhi.n	8006e8a <UART_SetConfig+0x34a>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x300>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e8b 	.word	0x08006e8b
 8006e50:	08006e7b 	.word	0x08006e7b
 8006e54:	08006e8b 	.word	0x08006e8b
 8006e58:	08006e8b 	.word	0x08006e8b
 8006e5c:	08006e8b 	.word	0x08006e8b
 8006e60:	08006e83 	.word	0x08006e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fd f850 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8006e68:	61b8      	str	r0, [r7, #24]
        break;
 8006e6a:	e013      	b.n	8006e94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e6c:	f7fd f86e 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8006e70:	61b8      	str	r0, [r7, #24]
        break;
 8006e72:	e00f      	b.n	8006e94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e74:	4b1b      	ldr	r3, [pc, #108]	; (8006ee4 <UART_SetConfig+0x3a4>)
 8006e76:	61bb      	str	r3, [r7, #24]
        break;
 8006e78:	e00c      	b.n	8006e94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fc ffcf 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8006e7e:	61b8      	str	r0, [r7, #24]
        break;
 8006e80:	e008      	b.n	8006e94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e86:	61bb      	str	r3, [r7, #24]
        break;
 8006e88:	e004      	b.n	8006e94 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	77bb      	strb	r3, [r7, #30]
        break;
 8006e92:	bf00      	nop
    }

    if (pclk != 0U)
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	085a      	lsrs	r2, r3, #1
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	441a      	add	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b0f      	cmp	r3, #15
 8006eb2:	d909      	bls.n	8006ec8 <UART_SetConfig+0x388>
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eba:	d205      	bcs.n	8006ec8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	e001      	b.n	8006ecc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ed8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	007a1200 	.word	0x007a1200

08006ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe6:	d10a      	bne.n	8006ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b098      	sub	sp, #96	; 0x60
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800703c:	f7fb fa16 	bl	800246c <HAL_GetTick>
 8007040:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b08      	cmp	r3, #8
 800704e:	d12e      	bne.n	80070ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007058:	2200      	movs	r2, #0
 800705a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f88c 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d021      	beq.n	80070ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
 800708a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800708e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e062      	b.n	8007174 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d149      	bne.n	8007150 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070c4:	2200      	movs	r2, #0
 80070c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f856 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03c      	beq.n	8007150 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	623b      	str	r3, [r7, #32]
   return(result);
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f4:	633b      	str	r3, [r7, #48]	; 0x30
 80070f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e6      	bne.n	80070d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	60fb      	str	r3, [r7, #12]
   return(result);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007128:	61fa      	str	r2, [r7, #28]
 800712a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	69b9      	ldr	r1, [r7, #24]
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	617b      	str	r3, [r7, #20]
   return(result);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e011      	b.n	8007174 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3758      	adds	r7, #88	; 0x58
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	e049      	b.n	8007222 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007194:	d045      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007196:	f7fb f969 	bl	800246c <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <UART_WaitOnFlagUntilTimeout+0x30>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e048      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d031      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d110      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f8ff 	bl	80073d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2208      	movs	r2, #8
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e029      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fc:	d111      	bne.n	8007222 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f8e5 	bl	80073d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e00f      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4013      	ands	r3, r2
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	429a      	cmp	r2, r3
 800723e:	d0a6      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800724c:	b480      	push	{r7}
 800724e:	b097      	sub	sp, #92	; 0x5c
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	88fa      	ldrh	r2, [r7, #6]
 800726c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727e:	d10e      	bne.n	800729e <UART_Start_Receive_IT+0x52>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <UART_Start_Receive_IT+0x48>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800728e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007292:	e02d      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	22ff      	movs	r2, #255	; 0xff
 8007298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800729c:	e028      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10d      	bne.n	80072c2 <UART_Start_Receive_IT+0x76>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <UART_Start_Receive_IT+0x6c>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072b6:	e01b      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	227f      	movs	r2, #127	; 0x7f
 80072bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c0:	e016      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ca:	d10d      	bne.n	80072e8 <UART_Start_Receive_IT+0x9c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d104      	bne.n	80072de <UART_Start_Receive_IT+0x92>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	227f      	movs	r2, #127	; 0x7f
 80072d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072dc:	e008      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	223f      	movs	r2, #63	; 0x3f
 80072e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072e6:	e003      	b.n	80072f0 <UART_Start_Receive_IT+0xa4>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2222      	movs	r2, #34	; 0x22
 80072fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	657b      	str	r3, [r7, #84]	; 0x54
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007320:	64ba      	str	r2, [r7, #72]	; 0x48
 8007322:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d107      	bne.n	800734e <UART_Start_Receive_IT+0x102>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <UART_Start_Receive_IT+0x184>)
 800734a:	669a      	str	r2, [r3, #104]	; 0x68
 800734c:	e002      	b.n	8007354 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <UART_Start_Receive_IT+0x188>)
 8007352:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d019      	beq.n	8007390 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
 800737c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_Start_Receive_IT+0x110>
 800738e:	e018      	b.n	80073c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	613b      	str	r3, [r7, #16]
   return(result);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f043 0320 	orr.w	r3, r3, #32
 80073a4:	653b      	str	r3, [r7, #80]	; 0x50
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ae:	623b      	str	r3, [r7, #32]
 80073b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	375c      	adds	r7, #92	; 0x5c
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	080076c9 	.word	0x080076c9
 80073d4:	08007521 	.word	0x08007521

080073d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b095      	sub	sp, #84	; 0x54
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	61fb      	str	r3, [r7, #28]
   return(result);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744a:	2b01      	cmp	r3, #1
 800744c:	d118      	bne.n	8007480 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	60bb      	str	r3, [r7, #8]
   return(result);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f023 0310 	bic.w	r3, r3, #16
 8007462:	647b      	str	r3, [r7, #68]	; 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6979      	ldr	r1, [r7, #20]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	613b      	str	r3, [r7, #16]
   return(result);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007494:	bf00      	nop
 8007496:	3754      	adds	r7, #84	; 0x54
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff fb28 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff faf4 	bl	8006b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007518:	bf00      	nop
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b09c      	sub	sp, #112	; 0x70
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800752e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007538:	2b22      	cmp	r3, #34	; 0x22
 800753a:	f040 80b9 	bne.w	80076b0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007544:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007548:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800754c:	b2d9      	uxtb	r1, r3
 800754e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007552:	b2da      	uxtb	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	400a      	ands	r2, r1
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 809c 	bne.w	80076c0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800759c:	66bb      	str	r3, [r7, #104]	; 0x68
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	667b      	str	r3, [r7, #100]	; 0x64
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075da:	647a      	str	r2, [r7, #68]	; 0x44
 80075dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d018      	beq.n	8007642 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	623b      	str	r3, [r7, #32]
   return(result);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007624:	663b      	str	r3, [r7, #96]	; 0x60
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
 8007630:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007646:	2b01      	cmp	r3, #1
 8007648:	d12e      	bne.n	80076a8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	60fb      	str	r3, [r7, #12]
   return(result);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	69b9      	ldr	r1, [r7, #24]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	617b      	str	r3, [r7, #20]
   return(result);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e6      	bne.n	8007650 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b10      	cmp	r3, #16
 800768e:	d103      	bne.n	8007698 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2210      	movs	r2, #16
 8007696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fa41 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a6:	e00b      	b.n	80076c0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7fa fa29 	bl	8001b00 <HAL_UART_RxCpltCallback>
}
 80076ae:	e007      	b.n	80076c0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0208 	orr.w	r2, r2, #8
 80076be:	619a      	str	r2, [r3, #24]
}
 80076c0:	bf00      	nop
 80076c2:	3770      	adds	r7, #112	; 0x70
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b09c      	sub	sp, #112	; 0x70
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e0:	2b22      	cmp	r3, #34	; 0x22
 80076e2:	f040 80b9 	bne.w	8007858 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80076f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80076fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076fe:	4013      	ands	r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007704:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	1c9a      	adds	r2, r3, #2
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 809c 	bne.w	8007868 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800773e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007744:	667b      	str	r3, [r7, #100]	; 0x64
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
 8007750:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800775c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e6      	bne.n	8007730 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	f023 0301 	bic.w	r3, r3, #1
 8007778:	663b      	str	r3, [r7, #96]	; 0x60
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007782:	643a      	str	r2, [r7, #64]	; 0x40
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e6      	bne.n	80077b8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d12e      	bne.n	8007850 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	60bb      	str	r3, [r7, #8]
   return(result);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f023 0310 	bic.w	r3, r3, #16
 800780c:	65bb      	str	r3, [r7, #88]	; 0x58
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6979      	ldr	r1, [r7, #20]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	613b      	str	r3, [r7, #16]
   return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e6      	bne.n	80077f8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b10      	cmp	r3, #16
 8007836:	d103      	bne.n	8007840 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2210      	movs	r2, #16
 800783e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff f96d 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800784e:	e00b      	b.n	8007868 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fa f955 	bl	8001b00 <HAL_UART_RxCpltCallback>
}
 8007856:	e007      	b.n	8007868 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0208 	orr.w	r2, r2, #8
 8007866:	619a      	str	r2, [r3, #24]
}
 8007868:	bf00      	nop
 800786a:	3770      	adds	r7, #112	; 0x70
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788a:	f3ef 8305 	mrs	r3, IPSR
 800788e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007896:	f3ef 8310 	mrs	r3, PRIMASK
 800789a:	607b      	str	r3, [r7, #4]
  return(result);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <osKernelInitialize+0x32>
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <osKernelInitialize+0x64>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d109      	bne.n	80078be <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078aa:	f3ef 8311 	mrs	r3, BASEPRI
 80078ae:	603b      	str	r3, [r7, #0]
  return(result);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80078b6:	f06f 0305 	mvn.w	r3, #5
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e00c      	b.n	80078d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <osKernelInitialize+0x64>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80078c6:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <osKernelInitialize+0x64>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e002      	b.n	80078d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295
 80078d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078d8:	68fb      	ldr	r3, [r7, #12]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	200004e0 	.word	0x200004e0

080078ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f2:	f3ef 8305 	mrs	r3, IPSR
 80078f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10f      	bne.n	800791e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007902:	607b      	str	r3, [r7, #4]
  return(result);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <osKernelStart+0x32>
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <osKernelStart+0x64>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d109      	bne.n	8007926 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007912:	f3ef 8311 	mrs	r3, BASEPRI
 8007916:	603b      	str	r3, [r7, #0]
  return(result);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <osKernelStart+0x3a>
    stat = osErrorISR;
 800791e:	f06f 0305 	mvn.w	r3, #5
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e00e      	b.n	8007944 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <osKernelStart+0x64>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d107      	bne.n	800793e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800792e:	4b08      	ldr	r3, [pc, #32]	; (8007950 <osKernelStart+0x64>)
 8007930:	2202      	movs	r2, #2
 8007932:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007934:	f001 f898 	bl	8008a68 <vTaskStartScheduler>
      stat = osOK;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e002      	b.n	8007944 <osKernelStart+0x58>
    } else {
      stat = osError;
 800793e:	f04f 33ff 	mov.w	r3, #4294967295
 8007942:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007944:	68fb      	ldr	r3, [r7, #12]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200004e0 	.word	0x200004e0

08007954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b092      	sub	sp, #72	; 0x48
 8007958:	af04      	add	r7, sp, #16
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007964:	f3ef 8305 	mrs	r3, IPSR
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 8094 	bne.w	8007a9a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007972:	f3ef 8310 	mrs	r3, PRIMASK
 8007976:	623b      	str	r3, [r7, #32]
  return(result);
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 808d 	bne.w	8007a9a <osThreadNew+0x146>
 8007980:	4b48      	ldr	r3, [pc, #288]	; (8007aa4 <osThreadNew+0x150>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d106      	bne.n	8007996 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007988:	f3ef 8311 	mrs	r3, BASEPRI
 800798c:	61fb      	str	r3, [r7, #28]
  return(result);
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8082 	bne.w	8007a9a <osThreadNew+0x146>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d07e      	beq.n	8007a9a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80079a0:	2318      	movs	r3, #24
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80079a4:	2300      	movs	r3, #0
 80079a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80079a8:	f107 031b 	add.w	r3, r7, #27
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d045      	beq.n	8007a46 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <osThreadNew+0x74>
        name = attr->name;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <osThreadNew+0x9a>
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	2b38      	cmp	r3, #56	; 0x38
 80079e0:	d805      	bhi.n	80079ee <osThreadNew+0x9a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <osThreadNew+0x9e>
        return (NULL);
 80079ee:	2300      	movs	r3, #0
 80079f0:	e054      	b.n	8007a9c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	089b      	lsrs	r3, r3, #2
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <osThreadNew+0xd4>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2ba7      	cmp	r3, #167	; 0xa7
 8007a10:	d90a      	bls.n	8007a28 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d006      	beq.n	8007a28 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <osThreadNew+0xd4>
        mem = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a26:	e010      	b.n	8007a4a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <osThreadNew+0xf6>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d108      	bne.n	8007a4a <osThreadNew+0xf6>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <osThreadNew+0xf6>
          mem = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a44:	e001      	b.n	8007a4a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d110      	bne.n	8007a72 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a58:	9202      	str	r2, [sp, #8]
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fe1a 	bl	80086a0 <xTaskCreateStatic>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e013      	b.n	8007a9a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d110      	bne.n	8007a9a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fe64 	bl	8008758 <xTaskCreate>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d001      	beq.n	8007a9a <osThreadNew+0x146>
          hTask = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a9a:	697b      	ldr	r3, [r7, #20]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3738      	adds	r7, #56	; 0x38
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200004e0 	.word	0x200004e0

08007aa8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab0:	f3ef 8305 	mrs	r3, IPSR
 8007ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10f      	bne.n	8007adc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <osDelay+0x34>
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <osDelay+0x58>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d109      	bne.n	8007ae4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <osDelay+0x3c>
    stat = osErrorISR;
 8007adc:	f06f 0305 	mvn.w	r3, #5
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e007      	b.n	8007af4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 ff86 	bl	8008a00 <vTaskDelay>
    }
  }

  return (stat);
 8007af4:	697b      	ldr	r3, [r7, #20]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200004e0 	.word	0x200004e0

08007b04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a07      	ldr	r2, [pc, #28]	; (8007b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4a06      	ldr	r2, [pc, #24]	; (8007b34 <vApplicationGetIdleTaskMemory+0x30>)
 8007b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2280      	movs	r2, #128	; 0x80
 8007b20:	601a      	str	r2, [r3, #0]
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	200004e4 	.word	0x200004e4
 8007b34:	2000058c 	.word	0x2000058c

08007b38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4a07      	ldr	r2, [pc, #28]	; (8007b64 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4a06      	ldr	r2, [pc, #24]	; (8007b68 <vApplicationGetTimerTaskMemory+0x30>)
 8007b4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b56:	601a      	str	r2, [r3, #0]
}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	2000078c 	.word	0x2000078c
 8007b68:	20000834 	.word	0x20000834

08007b6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f103 0208 	add.w	r2, r3, #8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f04f 32ff 	mov.w	r2, #4294967295
 8007b84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f103 0208 	add.w	r2, r3, #8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f103 0208 	add.w	r2, r3, #8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d103      	bne.n	8007c2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e00c      	b.n	8007c48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3308      	adds	r3, #8
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e002      	b.n	8007c3c <vListInsert+0x2e>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d2f6      	bcs.n	8007c36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6892      	ldr	r2, [r2, #8]
 8007c96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6852      	ldr	r2, [r2, #4]
 8007ca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d103      	bne.n	8007cb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	1e5a      	subs	r2, r3, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cfe:	f002 f839 	bl	8009d74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	441a      	add	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	22ff      	movs	r2, #255	; 0xff
 8007d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	22ff      	movs	r2, #255	; 0xff
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d114      	bne.n	8007d7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01a      	beq.n	8007d92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3310      	adds	r3, #16
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f91f 	bl	8008fa4 <xTaskRemoveFromEventList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <xQueueGenericReset+0xcc>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	e009      	b.n	8007d92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3310      	adds	r3, #16
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fef2 	bl	8007b6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3324      	adds	r3, #36	; 0x24
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff feed 	bl	8007b6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d92:	f002 f81f 	bl	8009dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d96:	2301      	movs	r3, #1
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	e000ed04 	.word	0xe000ed04

08007da4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <xQueueGenericCreateStatic+0x52>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <xQueueGenericCreateStatic+0x56>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericCreateStatic+0x58>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <xQueueGenericCreateStatic+0x7e>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <xQueueGenericCreateStatic+0x82>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <xQueueGenericCreateStatic+0x84>
 8007e26:	2300      	movs	r3, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	61fb      	str	r3, [r7, #28]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e42:	2350      	movs	r3, #80	; 0x50
 8007e44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b50      	cmp	r3, #80	; 0x50
 8007e4a:	d00a      	beq.n	8007e62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61bb      	str	r3, [r7, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00d      	beq.n	8007e88 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f805 	bl	8007e92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3730      	adds	r7, #48	; 0x30
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	e002      	b.n	8007eb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	69b8      	ldr	r0, [r7, #24]
 8007ec4:	f7ff ff06 	bl	8007cd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xQueueGenericSend+0x32>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <xQueueGenericSend+0x40>
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <xQueueGenericSend+0x44>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <xQueueGenericSend+0x46>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <xQueueGenericSend+0x60>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <xQueueGenericSend+0x6e>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSend+0x72>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSend+0x74>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	623b      	str	r3, [r7, #32]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f66:	f001 f9e5 	bl	8009334 <xTaskGetSchedulerState>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xQueueGenericSend+0x9e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericSend+0xa2>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericSend+0xa4>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61fb      	str	r3, [r7, #28]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f96:	f001 feed 	bl	8009d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d302      	bcc.n	8007fac <xQueueGenericSend+0xd4>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d129      	bne.n	8008000 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fb2:	f000 fa07 	bl	80083c4 <prvCopyDataToQueue>
 8007fb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ffed 	bl	8008fa4 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d013      	beq.n	8007ff8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b3f      	ldr	r3, [pc, #252]	; (80080d0 <xQueueGenericSend+0x1f8>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	e00a      	b.n	8007ff8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b39      	ldr	r3, [pc, #228]	; (80080d0 <xQueueGenericSend+0x1f8>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ff8:	f001 feec 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e063      	b.n	80080c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008006:	f001 fee5 	bl	8009dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800800a:	2300      	movs	r3, #0
 800800c:	e05c      	b.n	80080c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008014:	f107 0314 	add.w	r3, r7, #20
 8008018:	4618      	mov	r0, r3
 800801a:	f001 f827 	bl	800906c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800801e:	2301      	movs	r3, #1
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008022:	f001 fed7 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008026:	f000 fd8f 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800802a:	f001 fea3 	bl	8009d74 <vPortEnterCritical>
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d103      	bne.n	8008044 <xQueueGenericSend+0x16c>
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <xQueueGenericSend+0x182>
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800805a:	f001 febb 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800805e:	1d3a      	adds	r2, r7, #4
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f001 f816 	bl	8009098 <xTaskCheckForTimeOut>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d124      	bne.n	80080bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008074:	f000 fa9e 	bl	80085b4 <prvIsQueueFull>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d018      	beq.n	80080b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	3310      	adds	r3, #16
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 ff3c 	bl	8008f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800808c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808e:	f000 fa29 	bl	80084e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008092:	f000 fd67 	bl	8008b64 <xTaskResumeAll>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f af7c 	bne.w	8007f96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <xQueueGenericSend+0x1f8>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	e772      	b.n	8007f96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f000 fa17 	bl	80084e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080b6:	f000 fd55 	bl	8008b64 <xTaskResumeAll>
 80080ba:	e76c      	b.n	8007f96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080be:	f000 fa11 	bl	80084e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c2:	f000 fd4f 	bl	8008b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080c6:	2300      	movs	r3, #0
		}
	}
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3738      	adds	r7, #56	; 0x38
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <xQueueGenericSendFromISR+0x3c>
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <xQueueGenericSendFromISR+0x40>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <xQueueGenericSendFromISR+0x42>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	623b      	str	r3, [r7, #32]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d103      	bne.n	800813e <xQueueGenericSendFromISR+0x6a>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <xQueueGenericSendFromISR+0x6e>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericSendFromISR+0x70>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fb      	str	r3, [r7, #28]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800815e:	f001 feeb 	bl	8009f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008162:	f3ef 8211 	mrs	r2, BASEPRI
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61ba      	str	r2, [r7, #24]
 8008178:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800817a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <xQueueGenericSendFromISR+0xbc>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d12c      	bne.n	80081ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a0:	f000 f910 	bl	80083c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d112      	bne.n	80081d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d016      	beq.n	80081e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3324      	adds	r3, #36	; 0x24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fef2 	bl	8008fa4 <xTaskRemoveFromEventList>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e007      	b.n	80081e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081d8:	3301      	adds	r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	b25a      	sxtb	r2, r3
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081e4:	2301      	movs	r3, #1
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081e8:	e001      	b.n	80081ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3738      	adds	r7, #56	; 0x38
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <xQueueReceive+0x30>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	623b      	str	r3, [r7, #32]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <xQueueReceive+0x3e>
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <xQueueReceive+0x42>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <xQueueReceive+0x44>
 8008246:	2300      	movs	r3, #0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueReceive+0x5e>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	61fb      	str	r3, [r7, #28]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008262:	f001 f867 	bl	8009334 <xTaskGetSchedulerState>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <xQueueReceive+0x6e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <xQueueReceive+0x72>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueReceive+0x74>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xQueueReceive+0x8e>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61bb      	str	r3, [r7, #24]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008292:	f001 fd6f 	bl	8009d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01f      	beq.n	80082e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a6:	f000 f8f7 	bl	8008498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	1e5a      	subs	r2, r3, #1
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00f      	beq.n	80082da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	3310      	adds	r3, #16
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fe70 	bl	8008fa4 <xTaskRemoveFromEventList>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ca:	4b3d      	ldr	r3, [pc, #244]	; (80083c0 <xQueueReceive+0x1bc>)
 80082cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082da:	f001 fd7b 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 80082de:	2301      	movs	r3, #1
 80082e0:	e069      	b.n	80083b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082e8:	f001 fd74 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e062      	b.n	80083b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082f6:	f107 0310 	add.w	r3, r7, #16
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 feb6 	bl	800906c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008304:	f001 fd66 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008308:	f000 fc1e 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800830c:	f001 fd32 	bl	8009d74 <vPortEnterCritical>
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008316:	b25b      	sxtb	r3, r3
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d103      	bne.n	8008326 <xQueueReceive+0x122>
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832c:	b25b      	sxtb	r3, r3
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d103      	bne.n	800833c <xQueueReceive+0x138>
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800833c:	f001 fd4a 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008340:	1d3a      	adds	r2, r7, #4
 8008342:	f107 0310 	add.w	r3, r7, #16
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fea5 	bl	8009098 <xTaskCheckForTimeOut>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d123      	bne.n	800839c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008356:	f000 f917 	bl	8008588 <prvIsQueueEmpty>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d017      	beq.n	8008390 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	3324      	adds	r3, #36	; 0x24
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4611      	mov	r1, r2
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fdcb 	bl	8008f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800836e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008370:	f000 f8b8 	bl	80084e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008374:	f000 fbf6 	bl	8008b64 <xTaskResumeAll>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d189      	bne.n	8008292 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <xQueueReceive+0x1bc>)
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	e780      	b.n	8008292 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008392:	f000 f8a7 	bl	80084e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008396:	f000 fbe5 	bl	8008b64 <xTaskResumeAll>
 800839a:	e77a      	b.n	8008292 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800839c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839e:	f000 f8a1 	bl	80084e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a2:	f000 fbdf 	bl	8008b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a8:	f000 f8ee 	bl	8008588 <prvIsQueueEmpty>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f43f af6f 	beq.w	8008292 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3730      	adds	r7, #48	; 0x30
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10d      	bne.n	80083fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d14d      	bne.n	8008486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ffbe 	bl	8009370 <xTaskPriorityDisinherit>
 80083f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	e043      	b.n	8008486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d119      	bne.n	8008438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6898      	ldr	r0, [r3, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	461a      	mov	r2, r3
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	f002 fa72 	bl	800a8f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	441a      	add	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	429a      	cmp	r2, r3
 800842c:	d32b      	bcc.n	8008486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	609a      	str	r2, [r3, #8]
 8008436:	e026      	b.n	8008486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68d8      	ldr	r0, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	461a      	mov	r2, r3
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	f002 fa58 	bl	800a8f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	425b      	negs	r3, r3
 8008452:	441a      	add	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d207      	bcs.n	8008474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	425b      	negs	r3, r3
 800846e:	441a      	add	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d105      	bne.n	8008486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	3b01      	subs	r3, #1
 8008484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800848e:	697b      	ldr	r3, [r7, #20]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d018      	beq.n	80084dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	441a      	add	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d303      	bcc.n	80084cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68d9      	ldr	r1, [r3, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	461a      	mov	r2, r3
 80084d6:	6838      	ldr	r0, [r7, #0]
 80084d8:	f002 fa0e 	bl	800a8f8 <memcpy>
	}
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084ec:	f001 fc42 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f8:	e011      	b.n	800851e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d012      	beq.n	8008528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fd4c 	bl	8008fa4 <xTaskRemoveFromEventList>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008512:	f000 fe23 	bl	800915c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	3b01      	subs	r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800851e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	dce9      	bgt.n	80084fa <prvUnlockQueue+0x16>
 8008526:	e000      	b.n	800852a <prvUnlockQueue+0x46>
					break;
 8008528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	22ff      	movs	r2, #255	; 0xff
 800852e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008532:	f001 fc4f 	bl	8009dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008536:	f001 fc1d 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008542:	e011      	b.n	8008568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d012      	beq.n	8008572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3310      	adds	r3, #16
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fd27 	bl	8008fa4 <xTaskRemoveFromEventList>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800855c:	f000 fdfe 	bl	800915c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	3b01      	subs	r3, #1
 8008564:	b2db      	uxtb	r3, r3
 8008566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	dce9      	bgt.n	8008544 <prvUnlockQueue+0x60>
 8008570:	e000      	b.n	8008574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	22ff      	movs	r2, #255	; 0xff
 8008578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800857c:	f001 fc2a 	bl	8009dd4 <vPortExitCritical>
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008590:	f001 fbf0 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e001      	b.n	80085a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085a6:	f001 fc15 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085bc:	f001 fbda 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d102      	bne.n	80085d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e001      	b.n	80085d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f001 fbfd 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 80085da:	68fb      	ldr	r3, [r7, #12]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e014      	b.n	800861e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085f4:	4a0f      	ldr	r2, [pc, #60]	; (8008634 <vQueueAddToRegistry+0x50>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10b      	bne.n	8008618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008600:	490c      	ldr	r1, [pc, #48]	; (8008634 <vQueueAddToRegistry+0x50>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800860a:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <vQueueAddToRegistry+0x50>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008616:	e006      	b.n	8008626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b07      	cmp	r3, #7
 8008622:	d9e7      	bls.n	80085f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000c34 	.word	0x20000c34

08008638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008648:	f001 fb94 	bl	8009d74 <vPortEnterCritical>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008652:	b25b      	sxtb	r3, r3
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d103      	bne.n	8008662 <vQueueWaitForMessageRestricted+0x2a>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008668:	b25b      	sxtb	r3, r3
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866e:	d103      	bne.n	8008678 <vQueueWaitForMessageRestricted+0x40>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008678:	f001 fbac 	bl	8009dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fc5d 	bl	8008f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f7ff ff26 	bl	80084e4 <prvUnlockQueue>
	}
 8008698:	bf00      	nop
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af04      	add	r7, sp, #16
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	623b      	str	r3, [r7, #32]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61fb      	str	r3, [r7, #28]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086e6:	23a8      	movs	r3, #168	; 0xa8
 80086e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2ba8      	cmp	r3, #168	; 0xa8
 80086ee:	d00a      	beq.n	8008706 <xTaskCreateStatic+0x66>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61bb      	str	r3, [r7, #24]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01e      	beq.n	800874a <xTaskCreateStatic+0xaa>
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01b      	beq.n	800874a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800871a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	2202      	movs	r2, #2
 8008720:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008724:	2300      	movs	r3, #0
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f851 	bl	80087e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008744:	f000 f8ec 	bl	8008920 <prvAddNewTaskToReadyList>
 8008748:	e001      	b.n	800874e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800874e:	697b      	ldr	r3, [r7, #20]
	}
 8008750:	4618      	mov	r0, r3
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08c      	sub	sp, #48	; 0x30
 800875c:	af04      	add	r7, sp, #16
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fc23 	bl	8009fb8 <pvPortMalloc>
 8008772:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00e      	beq.n	8008798 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800877a:	20a8      	movs	r0, #168	; 0xa8
 800877c:	f001 fc1c 	bl	8009fb8 <pvPortMalloc>
 8008780:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
 800878e:	e005      	b.n	800879c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008790:	6978      	ldr	r0, [r7, #20]
 8008792:	f001 fcd5 	bl	800a140 <vPortFree>
 8008796:	e001      	b.n	800879c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	2300      	movs	r3, #0
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f80f 	bl	80087e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087c6:	69f8      	ldr	r0, [r7, #28]
 80087c8:	f000 f8aa 	bl	8008920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e002      	b.n	80087d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087d2:	f04f 33ff 	mov.w	r3, #4294967295
 80087d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087d8:	69bb      	ldr	r3, [r7, #24]
	}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	461a      	mov	r2, r3
 80087fc:	21a5      	movs	r1, #165	; 0xa5
 80087fe:	f001 ffab 	bl	800a758 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800880c:	3b01      	subs	r3, #1
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	617b      	str	r3, [r7, #20]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800883c:	2300      	movs	r3, #0
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	e012      	b.n	8008868 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	7819      	ldrb	r1, [r3, #0]
 800884a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	3334      	adds	r3, #52	; 0x34
 8008852:	460a      	mov	r2, r1
 8008854:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d006      	beq.n	8008870 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	3301      	adds	r3, #1
 8008866:	61fb      	str	r3, [r7, #28]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b0f      	cmp	r3, #15
 800886c:	d9e9      	bls.n	8008842 <prvInitialiseNewTask+0x5e>
 800886e:	e000      	b.n	8008872 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008870:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2b37      	cmp	r3, #55	; 0x37
 800887e:	d901      	bls.n	8008884 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008880:	2337      	movs	r3, #55	; 0x37
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	2200      	movs	r2, #0
 8008894:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff f986 	bl	8007bac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	3318      	adds	r3, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff f981 	bl	8007bac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	3354      	adds	r3, #84	; 0x54
 80088d4:	224c      	movs	r2, #76	; 0x4c
 80088d6:	2100      	movs	r1, #0
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 ff3d 	bl	800a758 <memset>
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	4a0c      	ldr	r2, [pc, #48]	; (8008914 <prvInitialiseNewTask+0x130>)
 80088e2:	659a      	str	r2, [r3, #88]	; 0x58
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <prvInitialiseNewTask+0x134>)
 80088e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	4a0b      	ldr	r2, [pc, #44]	; (800891c <prvInitialiseNewTask+0x138>)
 80088ee:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	69b8      	ldr	r0, [r7, #24]
 80088f6:	f001 f90f 	bl	8009b18 <pxPortInitialiseStack>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890c:	bf00      	nop
 800890e:	3720      	adds	r7, #32
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20001ec0 	.word	0x20001ec0
 8008918:	20001f28 	.word	0x20001f28
 800891c:	20001f90 	.word	0x20001f90

08008920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008928:	f001 fa24 	bl	8009d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800892c:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a2c      	ldr	r2, [pc, #176]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008936:	4b2c      	ldr	r3, [pc, #176]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008944:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d110      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800894c:	f000 fc2a 	bl	80091a4 <prvInitialiseTaskLists>
 8008950:	e00d      	b.n	800896e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008952:	4b26      	ldr	r3, [pc, #152]	; (80089ec <prvAddNewTaskToReadyList+0xcc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	429a      	cmp	r2, r3
 8008966:	d802      	bhi.n	800896e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008968:	4a1f      	ldr	r2, [pc, #124]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800896e:	4b20      	ldr	r3, [pc, #128]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 8008976:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <prvAddNewTaskToReadyList+0xd4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <prvAddNewTaskToReadyList+0x74>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <prvAddNewTaskToReadyList+0xd4>)
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4a15      	ldr	r2, [pc, #84]	; (80089f8 <prvAddNewTaskToReadyList+0xd8>)
 80089a2:	441a      	add	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7ff f90b 	bl	8007bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089b0:	f001 fa10 	bl	8009dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089b4:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <prvAddNewTaskToReadyList+0xcc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d207      	bcs.n	80089da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <prvAddNewTaskToReadyList+0xdc>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20001148 	.word	0x20001148
 80089e8:	20000c74 	.word	0x20000c74
 80089ec:	20001154 	.word	0x20001154
 80089f0:	20001164 	.word	0x20001164
 80089f4:	20001150 	.word	0x20001150
 80089f8:	20000c78 	.word	0x20000c78
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d017      	beq.n	8008a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <vTaskDelay+0x60>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <vTaskDelay+0x30>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	60bb      	str	r3, [r7, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a30:	f000 f88a 	bl	8008b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fd08 	bl	800944c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a3c:	f000 f892 	bl	8008b64 <xTaskResumeAll>
 8008a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d107      	bne.n	8008a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <vTaskDelay+0x64>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20001170 	.word	0x20001170
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a76:	463a      	mov	r2, r7
 8008a78:	1d39      	adds	r1, r7, #4
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff f840 	bl	8007b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	9202      	str	r2, [sp, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	460a      	mov	r2, r1
 8008a96:	4924      	ldr	r1, [pc, #144]	; (8008b28 <vTaskStartScheduler+0xc0>)
 8008a98:	4824      	ldr	r0, [pc, #144]	; (8008b2c <vTaskStartScheduler+0xc4>)
 8008a9a:	f7ff fe01 	bl	80086a0 <xTaskCreateStatic>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4a23      	ldr	r2, [pc, #140]	; (8008b30 <vTaskStartScheduler+0xc8>)
 8008aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aa4:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <vTaskStartScheduler+0xc8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e001      	b.n	8008ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d102      	bne.n	8008ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008abc:	f000 fd1a 	bl	80094f4 <xTimerCreateTimerTask>
 8008ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d11b      	bne.n	8008b00 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	613b      	str	r3, [r7, #16]
}
 8008ada:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <vTaskStartScheduler+0xcc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3354      	adds	r3, #84	; 0x54
 8008ae2:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <vTaskStartScheduler+0xd0>)
 8008ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <vTaskStartScheduler+0xd4>)
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <vTaskStartScheduler+0xd8>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008af4:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <vTaskStartScheduler+0xdc>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008afa:	f001 f899 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008afe:	e00e      	b.n	8008b1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d10a      	bne.n	8008b1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	60fb      	str	r3, [r7, #12]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <vTaskStartScheduler+0xb4>
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	0800b4fc 	.word	0x0800b4fc
 8008b2c:	08009175 	.word	0x08009175
 8008b30:	2000116c 	.word	0x2000116c
 8008b34:	20000c74 	.word	0x20000c74
 8008b38:	200000cc 	.word	0x200000cc
 8008b3c:	20001168 	.word	0x20001168
 8008b40:	20001154 	.word	0x20001154
 8008b44:	2000114c 	.word	0x2000114c

08008b48 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b54:	6013      	str	r3, [r2, #0]
}
 8008b56:	bf00      	nop
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20001170 	.word	0x20001170

08008b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b72:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	603b      	str	r3, [r7, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b90:	f001 f8f0 	bl	8009d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b94:	4b39      	ldr	r3, [pc, #228]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4a38      	ldr	r2, [pc, #224]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9e:	4b37      	ldr	r3, [pc, #220]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d162      	bne.n	8008c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba6:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d05e      	beq.n	8008c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bae:	e02f      	b.n	8008c10 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008bb0:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f85f 	bl	8007c80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff f85a 	bl	8007c80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <xTaskResumeAll+0x7c>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <xTaskResumeAll+0x128>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe ffe5 	bl	8007bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c0a:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <xTaskResumeAll+0x120>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1cb      	bne.n	8008bb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1e:	f000 fb63 	bl	80092e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2e:	f000 f847 	bl	8008cc0 <xTaskIncrementTick>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f1      	bne.n	8008c2e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <xTaskResumeAll+0x138>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f001 f8b2 	bl	8009dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c70:	68bb      	ldr	r3, [r7, #8]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20001170 	.word	0x20001170
 8008c80:	20001148 	.word	0x20001148
 8008c84:	20001108 	.word	0x20001108
 8008c88:	20001150 	.word	0x20001150
 8008c8c:	20000c78 	.word	0x20000c78
 8008c90:	20000c74 	.word	0x20000c74
 8008c94:	2000115c 	.word	0x2000115c
 8008c98:	20001158 	.word	0x20001158
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <xTaskGetTickCount+0x1c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cac:	687b      	ldr	r3, [r7, #4]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	2000114c 	.word	0x2000114c

08008cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cca:	4b51      	ldr	r3, [pc, #324]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 808e 	bne.w	8008df0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd4:	4b4f      	ldr	r3, [pc, #316]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cdc:	4a4d      	ldr	r2, [pc, #308]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d120      	bne.n	8008d2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ce8:	4b4b      	ldr	r3, [pc, #300]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	603b      	str	r3, [r7, #0]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xTaskIncrementTick+0x46>
 8008d08:	4b43      	ldr	r3, [pc, #268]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	4b43      	ldr	r3, [pc, #268]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a41      	ldr	r2, [pc, #260]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4a41      	ldr	r2, [pc, #260]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b40      	ldr	r3, [pc, #256]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a3f      	ldr	r2, [pc, #252]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	f000 fadf 	bl	80092e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d2a:	4b3e      	ldr	r3, [pc, #248]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d34e      	bcc.n	8008dd2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d34:	4b38      	ldr	r3, [pc, #224]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <xTaskIncrementTick+0x82>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <xTaskIncrementTick+0x84>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d48:	4b36      	ldr	r3, [pc, #216]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	601a      	str	r2, [r3, #0]
					break;
 8008d50:	e03f      	b.n	8008dd2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d52:	4b31      	ldr	r3, [pc, #196]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d203      	bcs.n	8008d72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d6a:	4a2e      	ldr	r2, [pc, #184]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6013      	str	r3, [r2, #0]
						break;
 8008d70:	e02f      	b.n	8008dd2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe ff82 	bl	8007c80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3318      	adds	r3, #24
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe ff79 	bl	8007c80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d92:	4b25      	ldr	r3, [pc, #148]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d903      	bls.n	8008da2 <xTaskIncrementTick+0xe2>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a22      	ldr	r2, [pc, #136]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4a1f      	ldr	r2, [pc, #124]	; (8008e2c <xTaskIncrementTick+0x16c>)
 8008db0:	441a      	add	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7fe ff04 	bl	8007bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3b3      	bcc.n	8008d34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dd0:	e7b0      	b.n	8008d34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dd2:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd8:	4914      	ldr	r1, [pc, #80]	; (8008e2c <xTaskIncrementTick+0x16c>)
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d907      	bls.n	8008dfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008dea:	2301      	movs	r3, #1
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	e004      	b.n	8008dfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008df0:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <xTaskIncrementTick+0x174>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a0f      	ldr	r2, [pc, #60]	; (8008e34 <xTaskIncrementTick+0x174>)
 8008df8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <xTaskIncrementTick+0x178>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008e02:	2301      	movs	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e06:	697b      	ldr	r3, [r7, #20]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20001170 	.word	0x20001170
 8008e14:	2000114c 	.word	0x2000114c
 8008e18:	20001100 	.word	0x20001100
 8008e1c:	20001104 	.word	0x20001104
 8008e20:	20001160 	.word	0x20001160
 8008e24:	20001168 	.word	0x20001168
 8008e28:	20001150 	.word	0x20001150
 8008e2c:	20000c78 	.word	0x20000c78
 8008e30:	20000c74 	.word	0x20000c74
 8008e34:	20001158 	.word	0x20001158
 8008e38:	2000115c 	.word	0x2000115c

08008e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e42:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <vTaskSwitchContext+0xb0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e4a:	4b29      	ldr	r3, [pc, #164]	; (8008ef0 <vTaskSwitchContext+0xb4>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e50:	e046      	b.n	8008ee0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e52:	4b27      	ldr	r3, [pc, #156]	; (8008ef0 <vTaskSwitchContext+0xb4>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e58:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <vTaskSwitchContext+0xb8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e010      	b.n	8008e82 <vTaskSwitchContext+0x46>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <vTaskSwitchContext+0x40>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	607b      	str	r3, [r7, #4]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <vTaskSwitchContext+0x3e>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	491d      	ldr	r1, [pc, #116]	; (8008ef8 <vTaskSwitchContext+0xbc>)
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0e4      	beq.n	8008e60 <vTaskSwitchContext+0x24>
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <vTaskSwitchContext+0xbc>)
 8008ea2:	4413      	add	r3, r2
 8008ea4:	60bb      	str	r3, [r7, #8]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	605a      	str	r2, [r3, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d104      	bne.n	8008ec6 <vTaskSwitchContext+0x8a>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	605a      	str	r2, [r3, #4]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <vTaskSwitchContext+0xc0>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <vTaskSwitchContext+0xb8>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <vTaskSwitchContext+0xc0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3354      	adds	r3, #84	; 0x54
 8008edc:	4a08      	ldr	r2, [pc, #32]	; (8008f00 <vTaskSwitchContext+0xc4>)
 8008ede:	6013      	str	r3, [r2, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20001170 	.word	0x20001170
 8008ef0:	2000115c 	.word	0x2000115c
 8008ef4:	20001150 	.word	0x20001150
 8008ef8:	20000c78 	.word	0x20000c78
 8008efc:	20000c74 	.word	0x20000c74
 8008f00:	200000cc 	.word	0x200000cc

08008f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	60fb      	str	r3, [r7, #12]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f2a:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <vTaskPlaceOnEventList+0x44>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3318      	adds	r3, #24
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fe fe6b 	bl	8007c0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f38:	2101      	movs	r1, #1
 8008f3a:	6838      	ldr	r0, [r7, #0]
 8008f3c:	f000 fa86 	bl	800944c <prvAddCurrentTaskToDelayedList>
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000c74 	.word	0x20000c74

08008f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	617b      	str	r3, [r7, #20]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3318      	adds	r3, #24
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7fe fe22 	bl	8007bc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f88:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f000 fa5b 	bl	800944c <prvAddCurrentTaskToDelayedList>
	}
 8008f96:	bf00      	nop
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000c74 	.word	0x20000c74

08008fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	60fb      	str	r3, [r7, #12]
}
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3318      	adds	r3, #24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fe53 	bl	8007c80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fda:	4b1e      	ldr	r3, [pc, #120]	; (8009054 <xTaskRemoveFromEventList+0xb0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d11d      	bne.n	800901e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fe4a 	bl	8007c80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	4b19      	ldr	r3, [pc, #100]	; (8009058 <xTaskRemoveFromEventList+0xb4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d903      	bls.n	8009000 <xTaskRemoveFromEventList+0x5c>
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	4a16      	ldr	r2, [pc, #88]	; (8009058 <xTaskRemoveFromEventList+0xb4>)
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4a13      	ldr	r2, [pc, #76]	; (800905c <xTaskRemoveFromEventList+0xb8>)
 800900e:	441a      	add	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3304      	adds	r3, #4
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f7fe fdd5 	bl	8007bc6 <vListInsertEnd>
 800901c:	e005      	b.n	800902a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	3318      	adds	r3, #24
 8009022:	4619      	mov	r1, r3
 8009024:	480e      	ldr	r0, [pc, #56]	; (8009060 <xTaskRemoveFromEventList+0xbc>)
 8009026:	f7fe fdce 	bl	8007bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <xTaskRemoveFromEventList+0xc0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	429a      	cmp	r2, r3
 8009036:	d905      	bls.n	8009044 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009038:	2301      	movs	r3, #1
 800903a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <xTaskRemoveFromEventList+0xc4>)
 800903e:	2201      	movs	r2, #1
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	e001      	b.n	8009048 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009048:	697b      	ldr	r3, [r7, #20]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20001170 	.word	0x20001170
 8009058:	20001150 	.word	0x20001150
 800905c:	20000c78 	.word	0x20000c78
 8009060:	20001108 	.word	0x20001108
 8009064:	20000c74 	.word	0x20000c74
 8009068:	2000115c 	.word	0x2000115c

0800906c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <vTaskInternalSetTimeOutState+0x24>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <vTaskInternalSetTimeOutState+0x28>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	605a      	str	r2, [r3, #4]
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20001160 	.word	0x20001160
 8009094:	2000114c 	.word	0x2000114c

08009098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	613b      	str	r3, [r7, #16]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	60fb      	str	r3, [r7, #12]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80090da:	f000 fe4b 	bl	8009d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090de:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <xTaskCheckForTimeOut+0xbc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d102      	bne.n	80090fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	e023      	b.n	8009146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b15      	ldr	r3, [pc, #84]	; (8009158 <xTaskCheckForTimeOut+0xc0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d007      	beq.n	800911a <xTaskCheckForTimeOut+0x82>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	429a      	cmp	r2, r3
 8009112:	d302      	bcc.n	800911a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e015      	b.n	8009146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	429a      	cmp	r2, r3
 8009122:	d20b      	bcs.n	800913c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	1ad2      	subs	r2, r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff9b 	bl	800906c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	e004      	b.n	8009146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009146:	f000 fe45 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 800914a:	69fb      	ldr	r3, [r7, #28]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	2000114c 	.word	0x2000114c
 8009158:	20001160 	.word	0x20001160

0800915c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009160:	4b03      	ldr	r3, [pc, #12]	; (8009170 <vTaskMissedYield+0x14>)
 8009162:	2201      	movs	r2, #1
 8009164:	601a      	str	r2, [r3, #0]
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	2000115c 	.word	0x2000115c

08009174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800917c:	f000 f852 	bl	8009224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <prvIdleTask+0x28>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d9f9      	bls.n	800917c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <prvIdleTask+0x2c>)
 800918a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009198:	e7f0      	b.n	800917c <prvIdleTask+0x8>
 800919a:	bf00      	nop
 800919c:	20000c78 	.word	0x20000c78
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	e00c      	b.n	80091ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4a12      	ldr	r2, [pc, #72]	; (8009204 <prvInitialiseTaskLists+0x60>)
 80091bc:	4413      	add	r3, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fcd4 	bl	8007b6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3301      	adds	r3, #1
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b37      	cmp	r3, #55	; 0x37
 80091ce:	d9ef      	bls.n	80091b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091d0:	480d      	ldr	r0, [pc, #52]	; (8009208 <prvInitialiseTaskLists+0x64>)
 80091d2:	f7fe fccb 	bl	8007b6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091d6:	480d      	ldr	r0, [pc, #52]	; (800920c <prvInitialiseTaskLists+0x68>)
 80091d8:	f7fe fcc8 	bl	8007b6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091dc:	480c      	ldr	r0, [pc, #48]	; (8009210 <prvInitialiseTaskLists+0x6c>)
 80091de:	f7fe fcc5 	bl	8007b6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091e2:	480c      	ldr	r0, [pc, #48]	; (8009214 <prvInitialiseTaskLists+0x70>)
 80091e4:	f7fe fcc2 	bl	8007b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091e8:	480b      	ldr	r0, [pc, #44]	; (8009218 <prvInitialiseTaskLists+0x74>)
 80091ea:	f7fe fcbf 	bl	8007b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091ee:	4b0b      	ldr	r3, [pc, #44]	; (800921c <prvInitialiseTaskLists+0x78>)
 80091f0:	4a05      	ldr	r2, [pc, #20]	; (8009208 <prvInitialiseTaskLists+0x64>)
 80091f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <prvInitialiseTaskLists+0x7c>)
 80091f6:	4a05      	ldr	r2, [pc, #20]	; (800920c <prvInitialiseTaskLists+0x68>)
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000c78 	.word	0x20000c78
 8009208:	200010d8 	.word	0x200010d8
 800920c:	200010ec 	.word	0x200010ec
 8009210:	20001108 	.word	0x20001108
 8009214:	2000111c 	.word	0x2000111c
 8009218:	20001134 	.word	0x20001134
 800921c:	20001100 	.word	0x20001100
 8009220:	20001104 	.word	0x20001104

08009224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800922a:	e019      	b.n	8009260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800922c:	f000 fda2 	bl	8009d74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009230:	4b10      	ldr	r3, [pc, #64]	; (8009274 <prvCheckTasksWaitingTermination+0x50>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fd1f 	bl	8007c80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <prvCheckTasksWaitingTermination+0x54>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3b01      	subs	r3, #1
 8009248:	4a0b      	ldr	r2, [pc, #44]	; (8009278 <prvCheckTasksWaitingTermination+0x54>)
 800924a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800924c:	4b0b      	ldr	r3, [pc, #44]	; (800927c <prvCheckTasksWaitingTermination+0x58>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	4a0a      	ldr	r2, [pc, #40]	; (800927c <prvCheckTasksWaitingTermination+0x58>)
 8009254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009256:	f000 fdbd 	bl	8009dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f810 	bl	8009280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <prvCheckTasksWaitingTermination+0x58>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e1      	bne.n	800922c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	2000111c 	.word	0x2000111c
 8009278:	20001148 	.word	0x20001148
 800927c:	20001130 	.word	0x20001130

08009280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3354      	adds	r3, #84	; 0x54
 800928c:	4618      	mov	r0, r3
 800928e:	f001 fa7b 	bl	800a788 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009298:	2b00      	cmp	r3, #0
 800929a:	d108      	bne.n	80092ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ff4d 	bl	800a140 <vPortFree>
				vPortFree( pxTCB );
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 ff4a 	bl	800a140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ac:	e018      	b.n	80092e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d103      	bne.n	80092c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 ff41 	bl	800a140 <vPortFree>
	}
 80092be:	e00f      	b.n	80092e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d00a      	beq.n	80092e0 <prvDeleteTCB+0x60>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60fb      	str	r3, [r7, #12]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <prvDeleteTCB+0x5e>
	}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <prvResetNextTaskUnblockTime+0x44>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <prvResetNextTaskUnblockTime+0x14>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e000      	b.n	80092fe <prvResetNextTaskUnblockTime+0x16>
 80092fc:	2300      	movs	r3, #0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d004      	beq.n	800930c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009302:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <prvResetNextTaskUnblockTime+0x48>)
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800930a:	e008      	b.n	800931e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800930c:	4b07      	ldr	r3, [pc, #28]	; (800932c <prvResetNextTaskUnblockTime+0x44>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4a05      	ldr	r2, [pc, #20]	; (8009330 <prvResetNextTaskUnblockTime+0x48>)
 800931c:	6013      	str	r3, [r2, #0]
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20001100 	.word	0x20001100
 8009330:	20001168 	.word	0x20001168

08009334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <xTaskGetSchedulerState+0x34>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009342:	2301      	movs	r3, #1
 8009344:	607b      	str	r3, [r7, #4]
 8009346:	e008      	b.n	800935a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009348:	4b08      	ldr	r3, [pc, #32]	; (800936c <xTaskGetSchedulerState+0x38>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009350:	2302      	movs	r3, #2
 8009352:	607b      	str	r3, [r7, #4]
 8009354:	e001      	b.n	800935a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800935a:	687b      	ldr	r3, [r7, #4]
	}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20001154 	.word	0x20001154
 800936c:	20001170 	.word	0x20001170

08009370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d056      	beq.n	8009434 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009386:	4b2e      	ldr	r3, [pc, #184]	; (8009440 <xTaskPriorityDisinherit+0xd0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d00a      	beq.n	80093a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	60bb      	str	r3, [r7, #8]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c8:	1e5a      	subs	r2, r3, #1
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d02c      	beq.n	8009434 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d128      	bne.n	8009434 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fc4a 	bl	8007c80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <xTaskPriorityDisinherit+0xd4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d903      	bls.n	8009414 <xTaskPriorityDisinherit+0xa4>
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a0c      	ldr	r2, [pc, #48]	; (8009444 <xTaskPriorityDisinherit+0xd4>)
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4a09      	ldr	r2, [pc, #36]	; (8009448 <xTaskPriorityDisinherit+0xd8>)
 8009422:	441a      	add	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fe fbcb 	bl	8007bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009434:	697b      	ldr	r3, [r7, #20]
	}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000c74 	.word	0x20000c74
 8009444:	20001150 	.word	0x20001150
 8009448:	20000c78 	.word	0x20000c78

0800944c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009456:	4b21      	ldr	r3, [pc, #132]	; (80094dc <prvAddCurrentTaskToDelayedList+0x90>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800945c:	4b20      	ldr	r3, [pc, #128]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3304      	adds	r3, #4
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fc0c 	bl	8007c80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d10a      	bne.n	8009486 <prvAddCurrentTaskToDelayedList+0x3a>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4819      	ldr	r0, [pc, #100]	; (80094e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009480:	f7fe fba1 	bl	8007bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009484:	e026      	b.n	80094d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800948e:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	429a      	cmp	r2, r3
 800949c:	d209      	bcs.n	80094b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949e:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fe fbaf 	bl	8007c0e <vListInsert>
}
 80094b0:	e010      	b.n	80094d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b2:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7fe fba5 	bl	8007c0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094c4:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d202      	bcs.n	80094d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094ce:	4a08      	ldr	r2, [pc, #32]	; (80094f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6013      	str	r3, [r2, #0]
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2000114c 	.word	0x2000114c
 80094e0:	20000c74 	.word	0x20000c74
 80094e4:	20001134 	.word	0x20001134
 80094e8:	20001104 	.word	0x20001104
 80094ec:	20001100 	.word	0x20001100
 80094f0:	20001168 	.word	0x20001168

080094f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08a      	sub	sp, #40	; 0x28
 80094f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094fe:	f000 facb 	bl	8009a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <xTimerCreateTimerTask+0x80>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d021      	beq.n	800954e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009512:	1d3a      	adds	r2, r7, #4
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	f107 030c 	add.w	r3, r7, #12
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe fb0b 	bl	8007b38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	2302      	movs	r3, #2
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	2300      	movs	r3, #0
 8009532:	460a      	mov	r2, r1
 8009534:	4910      	ldr	r1, [pc, #64]	; (8009578 <xTimerCreateTimerTask+0x84>)
 8009536:	4811      	ldr	r0, [pc, #68]	; (800957c <xTimerCreateTimerTask+0x88>)
 8009538:	f7ff f8b2 	bl	80086a0 <xTaskCreateStatic>
 800953c:	4603      	mov	r3, r0
 800953e:	4a10      	ldr	r2, [pc, #64]	; (8009580 <xTimerCreateTimerTask+0x8c>)
 8009540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <xTimerCreateTimerTask+0x8c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800954a:	2301      	movs	r3, #1
 800954c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	613b      	str	r3, [r7, #16]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800956a:	697b      	ldr	r3, [r7, #20]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	200011a4 	.word	0x200011a4
 8009578:	0800b504 	.word	0x0800b504
 800957c:	080096a1 	.word	0x080096a1
 8009580:	200011a8 	.word	0x200011a8

08009584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08a      	sub	sp, #40	; 0x28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009592:	2300      	movs	r3, #0
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	623b      	str	r3, [r7, #32]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095b2:	4b1a      	ldr	r3, [pc, #104]	; (800961c <xTimerGenericCommand+0x98>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02a      	beq.n	8009610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	dc18      	bgt.n	80095fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095cc:	f7ff feb2 	bl	8009334 <xTaskGetSchedulerState>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d109      	bne.n	80095ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <xTimerGenericCommand+0x98>)
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f107 0110 	add.w	r1, r7, #16
 80095de:	2300      	movs	r3, #0
 80095e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e2:	f7fe fc79 	bl	8007ed8 <xQueueGenericSend>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24
 80095e8:	e012      	b.n	8009610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <xTimerGenericCommand+0x98>)
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f107 0110 	add.w	r1, r7, #16
 80095f2:	2300      	movs	r3, #0
 80095f4:	2200      	movs	r2, #0
 80095f6:	f7fe fc6f 	bl	8007ed8 <xQueueGenericSend>
 80095fa:	6278      	str	r0, [r7, #36]	; 0x24
 80095fc:	e008      	b.n	8009610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <xTimerGenericCommand+0x98>)
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f107 0110 	add.w	r1, r7, #16
 8009606:	2300      	movs	r3, #0
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	f7fe fd63 	bl	80080d4 <xQueueGenericSendFromISR>
 800960e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009612:	4618      	mov	r0, r3
 8009614:	3728      	adds	r7, #40	; 0x28
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200011a4 	.word	0x200011a4

08009620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800962a:	4b1c      	ldr	r3, [pc, #112]	; (800969c <prvProcessExpiredTimer+0x7c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	3304      	adds	r3, #4
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fb21 	bl	8007c80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d122      	bne.n	800968c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	18d1      	adds	r1, r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	6978      	ldr	r0, [r7, #20]
 8009654:	f000 f8c8 	bl	80097e8 <prvInsertTimerInActiveList>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d016      	beq.n	800968c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800965e:	2300      	movs	r3, #0
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	2100      	movs	r1, #0
 8009668:	6978      	ldr	r0, [r7, #20]
 800966a:	f7ff ff8b 	bl	8009584 <xTimerGenericCommand>
 800966e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10a      	bne.n	800968c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60fb      	str	r3, [r7, #12]
}
 8009688:	bf00      	nop
 800968a:	e7fe      	b.n	800968a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	6978      	ldr	r0, [r7, #20]
 8009692:	4798      	blx	r3
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	2000119c 	.word	0x2000119c

080096a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f857 	bl	8009760 <prvGetNextExpireTime>
 80096b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f803 	bl	80096c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096be:	f000 f8d5 	bl	800986c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096c2:	e7f1      	b.n	80096a8 <prvTimerTask+0x8>

080096c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096ce:	f7ff fa3b 	bl	8008b48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d2:	f107 0308 	add.w	r3, r7, #8
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f866 	bl	80097a8 <prvSampleTimeNow>
 80096dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d130      	bne.n	8009746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d806      	bhi.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096f2:	f7ff fa37 	bl	8008b64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff ff91 	bl	8009620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096fe:	e024      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <prvProcessTimerOrBlockTask+0x90>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	bf0c      	ite	eq
 8009710:	2301      	moveq	r3, #1
 8009712:	2300      	movne	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <prvProcessTimerOrBlockTask+0x94>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	f7fe ff87 	bl	8008638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800972a:	f7ff fa1b 	bl	8008b64 <xTaskResumeAll>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009734:	4b09      	ldr	r3, [pc, #36]	; (800975c <prvProcessTimerOrBlockTask+0x98>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
}
 8009744:	e001      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009746:	f7ff fa0d 	bl	8008b64 <xTaskResumeAll>
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200011a0 	.word	0x200011a0
 8009758:	200011a4 	.word	0x200011a4
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009768:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <prvGetNextExpireTime+0x44>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d105      	bne.n	8009792 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009786:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <prvGetNextExpireTime+0x44>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	e001      	b.n	8009796 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	2000119c 	.word	0x2000119c

080097a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097b0:	f7ff fa76 	bl	8008ca0 <xTaskGetTickCount>
 80097b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <prvSampleTimeNow+0x3c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d205      	bcs.n	80097cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097c0:	f000 f908 	bl	80099d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e002      	b.n	80097d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097d2:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <prvSampleTimeNow+0x3c>)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	200011ac 	.word	0x200011ac

080097e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d812      	bhi.n	8009834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	429a      	cmp	r2, r3
 800981a:	d302      	bcc.n	8009822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e01b      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <prvInsertTimerInActiveList+0x7c>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3304      	adds	r3, #4
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fe f9ee 	bl	8007c0e <vListInsert>
 8009832:	e012      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d206      	bcs.n	800984a <prvInsertTimerInActiveList+0x62>
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e007      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <prvInsertTimerInActiveList+0x80>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7fe f9da 	bl	8007c0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800985a:	697b      	ldr	r3, [r7, #20]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200011a0 	.word	0x200011a0
 8009868:	2000119c 	.word	0x2000119c

0800986c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08e      	sub	sp, #56	; 0x38
 8009870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009872:	e09d      	b.n	80099b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	da18      	bge.n	80098ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	3304      	adds	r3, #4
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	61fb      	str	r3, [r7, #28]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a2:	6850      	ldr	r0, [r2, #4]
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	6892      	ldr	r2, [r2, #8]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	db7e      	blt.n	80099b0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	3304      	adds	r3, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe f9dc 	bl	8007c80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098c8:	463b      	mov	r3, r7
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff ff6c 	bl	80097a8 <prvSampleTimeNow>
 80098d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	d86a      	bhi.n	80099ae <prvProcessReceivedCommands+0x142>
 80098d8:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <prvProcessReceivedCommands+0x74>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	08009909 	.word	0x08009909
 80098e4:	08009909 	.word	0x08009909
 80098e8:	08009909 	.word	0x08009909
 80098ec:	080099b1 	.word	0x080099b1
 80098f0:	08009965 	.word	0x08009965
 80098f4:	0800999d 	.word	0x0800999d
 80098f8:	08009909 	.word	0x08009909
 80098fc:	08009909 	.word	0x08009909
 8009900:	080099b1 	.word	0x080099b1
 8009904:	08009965 	.word	0x08009965
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	18d1      	adds	r1, r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009916:	f7ff ff67 	bl	80097e8 <prvInsertTimerInActiveList>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d047      	beq.n	80099b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009926:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d13f      	bne.n	80099b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	441a      	add	r2, r3
 8009938:	2300      	movs	r3, #0
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	2300      	movs	r3, #0
 800993e:	2100      	movs	r1, #0
 8009940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009942:	f7ff fe1f 	bl	8009584 <xTimerGenericCommand>
 8009946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d130      	bne.n	80099b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	61bb      	str	r3, [r7, #24]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	617b      	str	r3, [r7, #20]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	699a      	ldr	r2, [r3, #24]
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	18d1      	adds	r1, r2, r3
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009996:	f7ff ff27 	bl	80097e8 <prvInsertTimerInActiveList>
					break;
 800999a:	e009      	b.n	80099b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80099a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a8:	f000 fbca 	bl	800a140 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099ac:	e000      	b.n	80099b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80099ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <prvProcessReceivedCommands+0x164>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	1d39      	adds	r1, r7, #4
 80099b6:	2200      	movs	r2, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fc23 	bl	8008204 <xQueueReceive>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f47f af57 	bne.w	8009874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	3730      	adds	r7, #48	; 0x30
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200011a4 	.word	0x200011a4

080099d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099da:	e045      	b.n	8009a68 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099dc:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099e6:	4b2a      	ldr	r3, [pc, #168]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe f943 	bl	8007c80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d12e      	bne.n	8009a68 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4413      	add	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d90e      	bls.n	8009a3a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a28:	4b19      	ldr	r3, [pc, #100]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fe f8eb 	bl	8007c0e <vListInsert>
 8009a38:	e016      	b.n	8009a68 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	2100      	movs	r1, #0
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff fd9d 	bl	8009584 <xTimerGenericCommand>
 8009a4a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	603b      	str	r3, [r7, #0]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1b4      	bne.n	80099dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a72:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a78:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a04      	ldr	r2, [pc, #16]	; (8009a90 <prvSwitchTimerLists+0xbc>)
 8009a7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a80:	4a04      	ldr	r2, [pc, #16]	; (8009a94 <prvSwitchTimerLists+0xc0>)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6013      	str	r3, [r2, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	2000119c 	.word	0x2000119c
 8009a94:	200011a0 	.word	0x200011a0

08009a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a9e:	f000 f969 	bl	8009d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <prvCheckForValidListAndQueue+0x60>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d120      	bne.n	8009aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aaa:	4814      	ldr	r0, [pc, #80]	; (8009afc <prvCheckForValidListAndQueue+0x64>)
 8009aac:	f7fe f85e 	bl	8007b6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ab0:	4813      	ldr	r0, [pc, #76]	; (8009b00 <prvCheckForValidListAndQueue+0x68>)
 8009ab2:	f7fe f85b 	bl	8007b6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <prvCheckForValidListAndQueue+0x6c>)
 8009ab8:	4a10      	ldr	r2, [pc, #64]	; (8009afc <prvCheckForValidListAndQueue+0x64>)
 8009aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009abc:	4b12      	ldr	r3, [pc, #72]	; (8009b08 <prvCheckForValidListAndQueue+0x70>)
 8009abe:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <prvCheckForValidListAndQueue+0x68>)
 8009ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <prvCheckForValidListAndQueue+0x74>)
 8009ac8:	4a11      	ldr	r2, [pc, #68]	; (8009b10 <prvCheckForValidListAndQueue+0x78>)
 8009aca:	2110      	movs	r1, #16
 8009acc:	200a      	movs	r0, #10
 8009ace:	f7fe f969 	bl	8007da4 <xQueueGenericCreateStatic>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4a08      	ldr	r2, [pc, #32]	; (8009af8 <prvCheckForValidListAndQueue+0x60>)
 8009ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ad8:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <prvCheckForValidListAndQueue+0x60>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <prvCheckForValidListAndQueue+0x60>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	490b      	ldr	r1, [pc, #44]	; (8009b14 <prvCheckForValidListAndQueue+0x7c>)
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fd7c 	bl	80085e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aec:	f000 f972 	bl	8009dd4 <vPortExitCritical>
}
 8009af0:	bf00      	nop
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200011a4 	.word	0x200011a4
 8009afc:	20001174 	.word	0x20001174
 8009b00:	20001188 	.word	0x20001188
 8009b04:	2000119c 	.word	0x2000119c
 8009b08:	200011a0 	.word	0x200011a0
 8009b0c:	20001250 	.word	0x20001250
 8009b10:	200011b0 	.word	0x200011b0
 8009b14:	0800b50c 	.word	0x0800b50c

08009b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3b04      	subs	r3, #4
 8009b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3b04      	subs	r3, #4
 8009b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f023 0201 	bic.w	r2, r3, #1
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3b04      	subs	r3, #4
 8009b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b48:	4a0c      	ldr	r2, [pc, #48]	; (8009b7c <pxPortInitialiseStack+0x64>)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3b14      	subs	r3, #20
 8009b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3b04      	subs	r3, #4
 8009b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f06f 0202 	mvn.w	r2, #2
 8009b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3b20      	subs	r3, #32
 8009b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	08009b81 	.word	0x08009b81

08009b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <prvTaskExitError+0x54>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d00a      	beq.n	8009baa <prvTaskExitError+0x2a>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	60fb      	str	r3, [r7, #12]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <prvTaskExitError+0x28>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	60bb      	str	r3, [r7, #8]
}
 8009bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bbe:	bf00      	nop
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0fc      	beq.n	8009bc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	20000070 	.word	0x20000070
	...

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	20000c74 	.word	0x20000c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	; (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a46      	ldr	r2, [pc, #280]	; (8009d54 <xPortStartScheduler+0x124>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10a      	bne.n	8009c56 <xPortStartScheduler+0x26>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c56:	4b3e      	ldr	r3, [pc, #248]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a3f      	ldr	r2, [pc, #252]	; (8009d58 <xPortStartScheduler+0x128>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10a      	bne.n	8009c76 <xPortStartScheduler+0x46>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60fb      	str	r3, [r7, #12]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <xPortStartScheduler+0x130>)
 8009c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c9e:	4b31      	ldr	r3, [pc, #196]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca4:	e009      	b.n	8009cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <xPortStartScheduler+0x134>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a2d      	ldr	r2, [pc, #180]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d0ef      	beq.n	8009ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cc6:	4b27      	ldr	r3, [pc, #156]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1c3 0307 	rsb	r3, r3, #7
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d00a      	beq.n	8009ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60bb      	str	r3, [r7, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <xPortStartScheduler+0x134>)
 8009cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a17      	ldr	r2, [pc, #92]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a14      	ldr	r2, [pc, #80]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d1e:	f000 f8dd 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <xPortStartScheduler+0x13c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d28:	f000 f8fc 	bl	8009f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <xPortStartScheduler+0x140>)
 8009d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d38:	f7ff ff66 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d3c:	f7ff f87e 	bl	8008e3c <vTaskSwitchContext>
	prvTaskExitError();
 8009d40:	f7ff ff1e 	bl	8009b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	e000ed00 	.word	0xe000ed00
 8009d54:	410fc271 	.word	0x410fc271
 8009d58:	410fc270 	.word	0x410fc270
 8009d5c:	e000e400 	.word	0xe000e400
 8009d60:	200012a0 	.word	0x200012a0
 8009d64:	200012a4 	.word	0x200012a4
 8009d68:	e000ed20 	.word	0xe000ed20
 8009d6c:	20000070 	.word	0x20000070
 8009d70:	e000ef34 	.word	0xe000ef34

08009d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	607b      	str	r3, [r7, #4]
}
 8009d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d8e:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a0d      	ldr	r2, [pc, #52]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <vPortEnterCritical+0x58>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d10f      	bne.n	8009dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <vPortEnterCritical+0x5c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	603b      	str	r3, [r7, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vPortEnterCritical+0x4a>
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000070 	.word	0x20000070
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <vPortExitCritical+0x50>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <vPortExitCritical+0x24>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	607b      	str	r3, [r7, #4]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <vPortExitCritical+0x50>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <vPortExitCritical+0x50>)
 8009e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <vPortExitCritical+0x42>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	f383 8811 	msr	BASEPRI, r3
}
 8009e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000070 	.word	0x20000070
	...

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	; (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7fe ffec 	bl	8008e3c <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	20000c74 	.word	0x20000c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe ff05 	bl	8008cc0 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <SysTick_Handler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a09      	ldr	r2, [pc, #36]	; (8009f20 <vPortSetupTimerInterrupt+0x44>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010
 8009f14:	e000e018 	.word	0xe000e018
 8009f18:	20000060 	.word	0x20000060
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d914      	bls.n	8009f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <vPortValidateInterruptPriority+0x70>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f54:	4b15      	ldr	r3, [pc, #84]	; (8009fac <vPortValidateInterruptPriority+0x74>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d20a      	bcs.n	8009f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f74:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <vPortValidateInterruptPriority+0x78>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <vPortValidateInterruptPriority+0x7c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d90a      	bls.n	8009f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	603b      	str	r3, [r7, #0]
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <vPortValidateInterruptPriority+0x60>
	}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	e000e3f0 	.word	0xe000e3f0
 8009fac:	200012a0 	.word	0x200012a0
 8009fb0:	e000ed0c 	.word	0xe000ed0c
 8009fb4:	200012a4 	.word	0x200012a4

08009fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fc4:	f7fe fdc0 	bl	8008b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fc8:	4b58      	ldr	r3, [pc, #352]	; (800a12c <pvPortMalloc+0x174>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fd0:	f000 f910 	bl	800a1f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fd4:	4b56      	ldr	r3, [pc, #344]	; (800a130 <pvPortMalloc+0x178>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 808e 	bne.w	800a0fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01d      	beq.n	800a024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fe8:	2208      	movs	r2, #8
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4413      	add	r3, r2
 8009fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d014      	beq.n	800a024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <pvPortMalloc+0x6c>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	617b      	str	r3, [r7, #20]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d069      	beq.n	800a0fe <pvPortMalloc+0x146>
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <pvPortMalloc+0x17c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d864      	bhi.n	800a0fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a034:	4b40      	ldr	r3, [pc, #256]	; (800a138 <pvPortMalloc+0x180>)
 800a036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a038:	4b3f      	ldr	r3, [pc, #252]	; (800a138 <pvPortMalloc+0x180>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a03e:	e004      	b.n	800a04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <pvPortMalloc+0xa4>
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f1      	bne.n	800a040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a05c:	4b33      	ldr	r3, [pc, #204]	; (800a12c <pvPortMalloc+0x174>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a062:	429a      	cmp	r2, r3
 800a064:	d04b      	beq.n	800a0fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2208      	movs	r2, #8
 800a06c:	4413      	add	r3, r2
 800a06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	2308      	movs	r3, #8
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	d91f      	bls.n	800a0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4413      	add	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	613b      	str	r3, [r7, #16]
}
 800a0ac:	bf00      	nop
 800a0ae:	e7fe      	b.n	800a0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0c2:	69b8      	ldr	r0, [r7, #24]
 800a0c4:	f000 f8f8 	bl	800a2b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <pvPortMalloc+0x17c>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	4a18      	ldr	r2, [pc, #96]	; (800a134 <pvPortMalloc+0x17c>)
 800a0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0d6:	4b17      	ldr	r3, [pc, #92]	; (800a134 <pvPortMalloc+0x17c>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b18      	ldr	r3, [pc, #96]	; (800a13c <pvPortMalloc+0x184>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d203      	bcs.n	800a0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0e2:	4b14      	ldr	r3, [pc, #80]	; (800a134 <pvPortMalloc+0x17c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a15      	ldr	r2, [pc, #84]	; (800a13c <pvPortMalloc+0x184>)
 800a0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	4b10      	ldr	r3, [pc, #64]	; (800a130 <pvPortMalloc+0x178>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0fe:	f7fe fd31 	bl	8008b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00a      	beq.n	800a122 <pvPortMalloc+0x16a>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	60fb      	str	r3, [r7, #12]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <pvPortMalloc+0x168>
	return pvReturn;
 800a122:	69fb      	ldr	r3, [r7, #28]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3728      	adds	r7, #40	; 0x28
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20001eb0 	.word	0x20001eb0
 800a130:	20001ebc 	.word	0x20001ebc
 800a134:	20001eb4 	.word	0x20001eb4
 800a138:	20001ea8 	.word	0x20001ea8
 800a13c:	20001eb8 	.word	0x20001eb8

0800a140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d048      	beq.n	800a1e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a152:	2308      	movs	r3, #8
 800a154:	425b      	negs	r3, r3
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4413      	add	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	4b21      	ldr	r3, [pc, #132]	; (800a1ec <vPortFree+0xac>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4013      	ands	r3, r2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <vPortFree+0x44>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <vPortFree+0x62>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60bb      	str	r3, [r7, #8]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b11      	ldr	r3, [pc, #68]	; (800a1ec <vPortFree+0xac>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d019      	beq.n	800a1e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d115      	bne.n	800a1e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <vPortFree+0xac>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	43db      	mvns	r3, r3
 800a1c2:	401a      	ands	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1c8:	f7fe fcbe 	bl	8008b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <vPortFree+0xb0>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4a06      	ldr	r2, [pc, #24]	; (800a1f0 <vPortFree+0xb0>)
 800a1d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f000 f86c 	bl	800a2b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1e0:	f7fe fcc0 	bl	8008b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1e4:	bf00      	nop
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20001ebc 	.word	0x20001ebc
 800a1f0:	20001eb4 	.word	0x20001eb4

0800a1f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a200:	4b27      	ldr	r3, [pc, #156]	; (800a2a0 <prvHeapInit+0xac>)
 800a202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00c      	beq.n	800a228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3307      	adds	r3, #7
 800a212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0307 	bic.w	r3, r3, #7
 800a21a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <prvHeapInit+0xac>)
 800a224:	4413      	add	r3, r2
 800a226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a22c:	4a1d      	ldr	r2, [pc, #116]	; (800a2a4 <prvHeapInit+0xb0>)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a232:	4b1c      	ldr	r3, [pc, #112]	; (800a2a4 <prvHeapInit+0xb0>)
 800a234:	2200      	movs	r2, #0
 800a236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a240:	2208      	movs	r2, #8
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 0307 	bic.w	r3, r3, #7
 800a24e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4a15      	ldr	r2, [pc, #84]	; (800a2a8 <prvHeapInit+0xb4>)
 800a254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <prvHeapInit+0xb4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <prvHeapInit+0xb4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvHeapInit+0xb4>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <prvHeapInit+0xb8>)
 800a282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <prvHeapInit+0xbc>)
 800a28a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a28c:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <prvHeapInit+0xc0>)
 800a28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	200012a8 	.word	0x200012a8
 800a2a4:	20001ea8 	.word	0x20001ea8
 800a2a8:	20001eb0 	.word	0x20001eb0
 800a2ac:	20001eb8 	.word	0x20001eb8
 800a2b0:	20001eb4 	.word	0x20001eb4
 800a2b4:	20001ebc 	.word	0x20001ebc

0800a2b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2c0:	4b28      	ldr	r3, [pc, #160]	; (800a364 <prvInsertBlockIntoFreeList+0xac>)
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e002      	b.n	800a2cc <prvInsertBlockIntoFreeList+0x14>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d8f7      	bhi.n	800a2c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d108      	bne.n	800a2fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	441a      	add	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d118      	bne.n	800a340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <prvInsertBlockIntoFreeList+0xb0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d00d      	beq.n	800a336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	441a      	add	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e008      	b.n	800a348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <prvInsertBlockIntoFreeList+0xb0>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	e003      	b.n	800a348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d002      	beq.n	800a356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a356:	bf00      	nop
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20001ea8 	.word	0x20001ea8
 800a368:	20001eb0 	.word	0x20001eb0

0800a36c <std>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	e9c0 3300 	strd	r3, r3, [r0]
 800a376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	8181      	strh	r1, [r0, #12]
 800a37e:	6643      	str	r3, [r0, #100]	; 0x64
 800a380:	81c2      	strh	r2, [r0, #14]
 800a382:	6183      	str	r3, [r0, #24]
 800a384:	4619      	mov	r1, r3
 800a386:	2208      	movs	r2, #8
 800a388:	305c      	adds	r0, #92	; 0x5c
 800a38a:	f000 f9e5 	bl	800a758 <memset>
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <std+0x38>)
 800a390:	6263      	str	r3, [r4, #36]	; 0x24
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <std+0x3c>)
 800a394:	62a3      	str	r3, [r4, #40]	; 0x28
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <std+0x40>)
 800a398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <std+0x44>)
 800a39c:	6224      	str	r4, [r4, #32]
 800a39e:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800a5a9 	.word	0x0800a5a9
 800a3a8:	0800a5cb 	.word	0x0800a5cb
 800a3ac:	0800a603 	.word	0x0800a603
 800a3b0:	0800a627 	.word	0x0800a627

0800a3b4 <stdio_exit_handler>:
 800a3b4:	4a02      	ldr	r2, [pc, #8]	; (800a3c0 <stdio_exit_handler+0xc>)
 800a3b6:	4903      	ldr	r1, [pc, #12]	; (800a3c4 <stdio_exit_handler+0x10>)
 800a3b8:	4803      	ldr	r0, [pc, #12]	; (800a3c8 <stdio_exit_handler+0x14>)
 800a3ba:	f000 b869 	b.w	800a490 <_fwalk_sglue>
 800a3be:	bf00      	nop
 800a3c0:	20000074 	.word	0x20000074
 800a3c4:	0800b1b9 	.word	0x0800b1b9
 800a3c8:	20000080 	.word	0x20000080

0800a3cc <cleanup_stdio>:
 800a3cc:	6841      	ldr	r1, [r0, #4]
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <cleanup_stdio+0x34>)
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	d001      	beq.n	800a3dc <cleanup_stdio+0x10>
 800a3d8:	f000 feee 	bl	800b1b8 <_fflush_r>
 800a3dc:	68a1      	ldr	r1, [r4, #8]
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <cleanup_stdio+0x38>)
 800a3e0:	4299      	cmp	r1, r3
 800a3e2:	d002      	beq.n	800a3ea <cleanup_stdio+0x1e>
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 fee7 	bl	800b1b8 <_fflush_r>
 800a3ea:	68e1      	ldr	r1, [r4, #12]
 800a3ec:	4b06      	ldr	r3, [pc, #24]	; (800a408 <cleanup_stdio+0x3c>)
 800a3ee:	4299      	cmp	r1, r3
 800a3f0:	d004      	beq.n	800a3fc <cleanup_stdio+0x30>
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	f000 bede 	b.w	800b1b8 <_fflush_r>
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	20001ec0 	.word	0x20001ec0
 800a404:	20001f28 	.word	0x20001f28
 800a408:	20001f90 	.word	0x20001f90

0800a40c <global_stdio_init.part.0>:
 800a40c:	b510      	push	{r4, lr}
 800a40e:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <global_stdio_init.part.0+0x30>)
 800a410:	4c0b      	ldr	r4, [pc, #44]	; (800a440 <global_stdio_init.part.0+0x34>)
 800a412:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <global_stdio_init.part.0+0x38>)
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	4620      	mov	r0, r4
 800a418:	2200      	movs	r2, #0
 800a41a:	2104      	movs	r1, #4
 800a41c:	f7ff ffa6 	bl	800a36c <std>
 800a420:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a424:	2201      	movs	r2, #1
 800a426:	2109      	movs	r1, #9
 800a428:	f7ff ffa0 	bl	800a36c <std>
 800a42c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a430:	2202      	movs	r2, #2
 800a432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a436:	2112      	movs	r1, #18
 800a438:	f7ff bf98 	b.w	800a36c <std>
 800a43c:	20001ff8 	.word	0x20001ff8
 800a440:	20001ec0 	.word	0x20001ec0
 800a444:	0800a3b5 	.word	0x0800a3b5

0800a448 <__sfp_lock_acquire>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sfp_lock_acquire+0x8>)
 800a44a:	f000 ba53 	b.w	800a8f4 <__retarget_lock_acquire_recursive>
 800a44e:	bf00      	nop
 800a450:	20002001 	.word	0x20002001

0800a454 <__sfp_lock_release>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sfp_lock_release+0x8>)
 800a456:	f000 ba4e 	b.w	800a8f6 <__retarget_lock_release_recursive>
 800a45a:	bf00      	nop
 800a45c:	20002001 	.word	0x20002001

0800a460 <__sinit>:
 800a460:	b510      	push	{r4, lr}
 800a462:	4604      	mov	r4, r0
 800a464:	f7ff fff0 	bl	800a448 <__sfp_lock_acquire>
 800a468:	6a23      	ldr	r3, [r4, #32]
 800a46a:	b11b      	cbz	r3, 800a474 <__sinit+0x14>
 800a46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a470:	f7ff bff0 	b.w	800a454 <__sfp_lock_release>
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <__sinit+0x28>)
 800a476:	6223      	str	r3, [r4, #32]
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <__sinit+0x2c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1f5      	bne.n	800a46c <__sinit+0xc>
 800a480:	f7ff ffc4 	bl	800a40c <global_stdio_init.part.0>
 800a484:	e7f2      	b.n	800a46c <__sinit+0xc>
 800a486:	bf00      	nop
 800a488:	0800a3cd 	.word	0x0800a3cd
 800a48c:	20001ff8 	.word	0x20001ff8

0800a490 <_fwalk_sglue>:
 800a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a494:	4607      	mov	r7, r0
 800a496:	4688      	mov	r8, r1
 800a498:	4614      	mov	r4, r2
 800a49a:	2600      	movs	r6, #0
 800a49c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a4a4:	d505      	bpl.n	800a4b2 <_fwalk_sglue+0x22>
 800a4a6:	6824      	ldr	r4, [r4, #0]
 800a4a8:	2c00      	cmp	r4, #0
 800a4aa:	d1f7      	bne.n	800a49c <_fwalk_sglue+0xc>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d907      	bls.n	800a4c8 <_fwalk_sglue+0x38>
 800a4b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	d003      	beq.n	800a4c8 <_fwalk_sglue+0x38>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	47c0      	blx	r8
 800a4c6:	4306      	orrs	r6, r0
 800a4c8:	3568      	adds	r5, #104	; 0x68
 800a4ca:	e7e9      	b.n	800a4a0 <_fwalk_sglue+0x10>

0800a4cc <iprintf>:
 800a4cc:	b40f      	push	{r0, r1, r2, r3}
 800a4ce:	b507      	push	{r0, r1, r2, lr}
 800a4d0:	4906      	ldr	r1, [pc, #24]	; (800a4ec <iprintf+0x20>)
 800a4d2:	ab04      	add	r3, sp, #16
 800a4d4:	6808      	ldr	r0, [r1, #0]
 800a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4da:	6881      	ldr	r1, [r0, #8]
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	f000 fb3b 	bl	800ab58 <_vfiprintf_r>
 800a4e2:	b003      	add	sp, #12
 800a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e8:	b004      	add	sp, #16
 800a4ea:	4770      	bx	lr
 800a4ec:	200000cc 	.word	0x200000cc

0800a4f0 <_puts_r>:
 800a4f0:	6a03      	ldr	r3, [r0, #32]
 800a4f2:	b570      	push	{r4, r5, r6, lr}
 800a4f4:	6884      	ldr	r4, [r0, #8]
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	b90b      	cbnz	r3, 800a500 <_puts_r+0x10>
 800a4fc:	f7ff ffb0 	bl	800a460 <__sinit>
 800a500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a502:	07db      	lsls	r3, r3, #31
 800a504:	d405      	bmi.n	800a512 <_puts_r+0x22>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	0598      	lsls	r0, r3, #22
 800a50a:	d402      	bmi.n	800a512 <_puts_r+0x22>
 800a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50e:	f000 f9f1 	bl	800a8f4 <__retarget_lock_acquire_recursive>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	0719      	lsls	r1, r3, #28
 800a516:	d513      	bpl.n	800a540 <_puts_r+0x50>
 800a518:	6923      	ldr	r3, [r4, #16]
 800a51a:	b18b      	cbz	r3, 800a540 <_puts_r+0x50>
 800a51c:	3e01      	subs	r6, #1
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a524:	3b01      	subs	r3, #1
 800a526:	60a3      	str	r3, [r4, #8]
 800a528:	b9e9      	cbnz	r1, 800a566 <_puts_r+0x76>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da2e      	bge.n	800a58c <_puts_r+0x9c>
 800a52e:	4622      	mov	r2, r4
 800a530:	210a      	movs	r1, #10
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f87b 	bl	800a62e <__swbuf_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	d007      	beq.n	800a54c <_puts_r+0x5c>
 800a53c:	250a      	movs	r5, #10
 800a53e:	e007      	b.n	800a550 <_puts_r+0x60>
 800a540:	4621      	mov	r1, r4
 800a542:	4628      	mov	r0, r5
 800a544:	f000 f8b0 	bl	800a6a8 <__swsetup_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d0e7      	beq.n	800a51c <_puts_r+0x2c>
 800a54c:	f04f 35ff 	mov.w	r5, #4294967295
 800a550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a552:	07da      	lsls	r2, r3, #31
 800a554:	d405      	bmi.n	800a562 <_puts_r+0x72>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	059b      	lsls	r3, r3, #22
 800a55a:	d402      	bmi.n	800a562 <_puts_r+0x72>
 800a55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55e:	f000 f9ca 	bl	800a8f6 <__retarget_lock_release_recursive>
 800a562:	4628      	mov	r0, r5
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	2b00      	cmp	r3, #0
 800a568:	da04      	bge.n	800a574 <_puts_r+0x84>
 800a56a:	69a2      	ldr	r2, [r4, #24]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	dc06      	bgt.n	800a57e <_puts_r+0x8e>
 800a570:	290a      	cmp	r1, #10
 800a572:	d004      	beq.n	800a57e <_puts_r+0x8e>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	6022      	str	r2, [r4, #0]
 800a57a:	7019      	strb	r1, [r3, #0]
 800a57c:	e7cf      	b.n	800a51e <_puts_r+0x2e>
 800a57e:	4622      	mov	r2, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f854 	bl	800a62e <__swbuf_r>
 800a586:	3001      	adds	r0, #1
 800a588:	d1c9      	bne.n	800a51e <_puts_r+0x2e>
 800a58a:	e7df      	b.n	800a54c <_puts_r+0x5c>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	250a      	movs	r5, #10
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	6022      	str	r2, [r4, #0]
 800a594:	701d      	strb	r5, [r3, #0]
 800a596:	e7db      	b.n	800a550 <_puts_r+0x60>

0800a598 <puts>:
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <puts+0xc>)
 800a59a:	4601      	mov	r1, r0
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f7ff bfa7 	b.w	800a4f0 <_puts_r>
 800a5a2:	bf00      	nop
 800a5a4:	200000cc 	.word	0x200000cc

0800a5a8 <__sread>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	f000 f952 	bl	800a858 <_read_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	bfab      	itete	ge
 800a5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a5bc:	181b      	addge	r3, r3, r0
 800a5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c2:	bfac      	ite	ge
 800a5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5c6:	81a3      	strhlt	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__swrite>:
 800a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	898b      	ldrh	r3, [r1, #12]
 800a5d2:	05db      	lsls	r3, r3, #23
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	d505      	bpl.n	800a5e8 <__swrite+0x1e>
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f000 f926 	bl	800a834 <_lseek_r>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	f000 b93d 	b.w	800a87c <_write_r>

0800a602 <__sseek>:
 800a602:	b510      	push	{r4, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 f913 	bl	800a834 <_lseek_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	bf15      	itete	ne
 800a614:	6560      	strne	r0, [r4, #84]	; 0x54
 800a616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strheq	r3, [r4, #12]
 800a620:	bf18      	it	ne
 800a622:	81a3      	strhne	r3, [r4, #12]
 800a624:	bd10      	pop	{r4, pc}

0800a626 <__sclose>:
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 b89d 	b.w	800a768 <_close_r>

0800a62e <__swbuf_r>:
 800a62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a630:	460e      	mov	r6, r1
 800a632:	4614      	mov	r4, r2
 800a634:	4605      	mov	r5, r0
 800a636:	b118      	cbz	r0, 800a640 <__swbuf_r+0x12>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <__swbuf_r+0x12>
 800a63c:	f7ff ff10 	bl	800a460 <__sinit>
 800a640:	69a3      	ldr	r3, [r4, #24]
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	071a      	lsls	r2, r3, #28
 800a648:	d525      	bpl.n	800a696 <__swbuf_r+0x68>
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	b31b      	cbz	r3, 800a696 <__swbuf_r+0x68>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	6922      	ldr	r2, [r4, #16]
 800a652:	1a98      	subs	r0, r3, r2
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	b2f6      	uxtb	r6, r6
 800a658:	4283      	cmp	r3, r0
 800a65a:	4637      	mov	r7, r6
 800a65c:	dc04      	bgt.n	800a668 <__swbuf_r+0x3a>
 800a65e:	4621      	mov	r1, r4
 800a660:	4628      	mov	r0, r5
 800a662:	f000 fda9 	bl	800b1b8 <_fflush_r>
 800a666:	b9e0      	cbnz	r0, 800a6a2 <__swbuf_r+0x74>
 800a668:	68a3      	ldr	r3, [r4, #8]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	701e      	strb	r6, [r3, #0]
 800a676:	6962      	ldr	r2, [r4, #20]
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d004      	beq.n	800a688 <__swbuf_r+0x5a>
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	07db      	lsls	r3, r3, #31
 800a682:	d506      	bpl.n	800a692 <__swbuf_r+0x64>
 800a684:	2e0a      	cmp	r6, #10
 800a686:	d104      	bne.n	800a692 <__swbuf_r+0x64>
 800a688:	4621      	mov	r1, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 fd94 	bl	800b1b8 <_fflush_r>
 800a690:	b938      	cbnz	r0, 800a6a2 <__swbuf_r+0x74>
 800a692:	4638      	mov	r0, r7
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 f805 	bl	800a6a8 <__swsetup_r>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d0d5      	beq.n	800a64e <__swbuf_r+0x20>
 800a6a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a6a6:	e7f4      	b.n	800a692 <__swbuf_r+0x64>

0800a6a8 <__swsetup_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4b2a      	ldr	r3, [pc, #168]	; (800a754 <__swsetup_r+0xac>)
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	b118      	cbz	r0, 800a6bc <__swsetup_r+0x14>
 800a6b4:	6a03      	ldr	r3, [r0, #32]
 800a6b6:	b90b      	cbnz	r3, 800a6bc <__swsetup_r+0x14>
 800a6b8:	f7ff fed2 	bl	800a460 <__sinit>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c2:	0718      	lsls	r0, r3, #28
 800a6c4:	d422      	bmi.n	800a70c <__swsetup_r+0x64>
 800a6c6:	06d9      	lsls	r1, r3, #27
 800a6c8:	d407      	bmi.n	800a6da <__swsetup_r+0x32>
 800a6ca:	2309      	movs	r3, #9
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	e034      	b.n	800a744 <__swsetup_r+0x9c>
 800a6da:	0758      	lsls	r0, r3, #29
 800a6dc:	d512      	bpl.n	800a704 <__swsetup_r+0x5c>
 800a6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6e0:	b141      	cbz	r1, 800a6f4 <__swsetup_r+0x4c>
 800a6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	d002      	beq.n	800a6f0 <__swsetup_r+0x48>
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f000 f912 	bl	800a914 <_free_r>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f043 0308 	orr.w	r3, r3, #8
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	6923      	ldr	r3, [r4, #16]
 800a70e:	b94b      	cbnz	r3, 800a724 <__swsetup_r+0x7c>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71a:	d003      	beq.n	800a724 <__swsetup_r+0x7c>
 800a71c:	4621      	mov	r1, r4
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 fd98 	bl	800b254 <__smakebuf_r>
 800a724:	89a0      	ldrh	r0, [r4, #12]
 800a726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a72a:	f010 0301 	ands.w	r3, r0, #1
 800a72e:	d00a      	beq.n	800a746 <__swsetup_r+0x9e>
 800a730:	2300      	movs	r3, #0
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6963      	ldr	r3, [r4, #20]
 800a736:	425b      	negs	r3, r3
 800a738:	61a3      	str	r3, [r4, #24]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	b943      	cbnz	r3, 800a750 <__swsetup_r+0xa8>
 800a73e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a742:	d1c4      	bne.n	800a6ce <__swsetup_r+0x26>
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	0781      	lsls	r1, r0, #30
 800a748:	bf58      	it	pl
 800a74a:	6963      	ldrpl	r3, [r4, #20]
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	e7f4      	b.n	800a73a <__swsetup_r+0x92>
 800a750:	2000      	movs	r0, #0
 800a752:	e7f7      	b.n	800a744 <__swsetup_r+0x9c>
 800a754:	200000cc 	.word	0x200000cc

0800a758 <memset>:
 800a758:	4402      	add	r2, r0
 800a75a:	4603      	mov	r3, r0
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d100      	bne.n	800a762 <memset+0xa>
 800a760:	4770      	bx	lr
 800a762:	f803 1b01 	strb.w	r1, [r3], #1
 800a766:	e7f9      	b.n	800a75c <memset+0x4>

0800a768 <_close_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d06      	ldr	r5, [pc, #24]	; (800a784 <_close_r+0x1c>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	f7f6 f8ef 	bl	8000956 <_close>
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	d102      	bne.n	800a782 <_close_r+0x1a>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	b103      	cbz	r3, 800a782 <_close_r+0x1a>
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bd38      	pop	{r3, r4, r5, pc}
 800a784:	20001ffc 	.word	0x20001ffc

0800a788 <_reclaim_reent>:
 800a788:	4b29      	ldr	r3, [pc, #164]	; (800a830 <_reclaim_reent+0xa8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4283      	cmp	r3, r0
 800a78e:	b570      	push	{r4, r5, r6, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	d04b      	beq.n	800a82c <_reclaim_reent+0xa4>
 800a794:	69c3      	ldr	r3, [r0, #28]
 800a796:	b143      	cbz	r3, 800a7aa <_reclaim_reent+0x22>
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d144      	bne.n	800a828 <_reclaim_reent+0xa0>
 800a79e:	69e3      	ldr	r3, [r4, #28]
 800a7a0:	6819      	ldr	r1, [r3, #0]
 800a7a2:	b111      	cbz	r1, 800a7aa <_reclaim_reent+0x22>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 f8b5 	bl	800a914 <_free_r>
 800a7aa:	6961      	ldr	r1, [r4, #20]
 800a7ac:	b111      	cbz	r1, 800a7b4 <_reclaim_reent+0x2c>
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 f8b0 	bl	800a914 <_free_r>
 800a7b4:	69e1      	ldr	r1, [r4, #28]
 800a7b6:	b111      	cbz	r1, 800a7be <_reclaim_reent+0x36>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f8ab 	bl	800a914 <_free_r>
 800a7be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a7c0:	b111      	cbz	r1, 800a7c8 <_reclaim_reent+0x40>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f8a6 	bl	800a914 <_free_r>
 800a7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ca:	b111      	cbz	r1, 800a7d2 <_reclaim_reent+0x4a>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 f8a1 	bl	800a914 <_free_r>
 800a7d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a7d4:	b111      	cbz	r1, 800a7dc <_reclaim_reent+0x54>
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 f89c 	bl	800a914 <_free_r>
 800a7dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a7de:	b111      	cbz	r1, 800a7e6 <_reclaim_reent+0x5e>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 f897 	bl	800a914 <_free_r>
 800a7e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7e8:	b111      	cbz	r1, 800a7f0 <_reclaim_reent+0x68>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 f892 	bl	800a914 <_free_r>
 800a7f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a7f2:	b111      	cbz	r1, 800a7fa <_reclaim_reent+0x72>
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 f88d 	bl	800a914 <_free_r>
 800a7fa:	6a23      	ldr	r3, [r4, #32]
 800a7fc:	b1b3      	cbz	r3, 800a82c <_reclaim_reent+0xa4>
 800a7fe:	4620      	mov	r0, r4
 800a800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a804:	4718      	bx	r3
 800a806:	5949      	ldr	r1, [r1, r5]
 800a808:	b941      	cbnz	r1, 800a81c <_reclaim_reent+0x94>
 800a80a:	3504      	adds	r5, #4
 800a80c:	69e3      	ldr	r3, [r4, #28]
 800a80e:	2d80      	cmp	r5, #128	; 0x80
 800a810:	68d9      	ldr	r1, [r3, #12]
 800a812:	d1f8      	bne.n	800a806 <_reclaim_reent+0x7e>
 800a814:	4620      	mov	r0, r4
 800a816:	f000 f87d 	bl	800a914 <_free_r>
 800a81a:	e7c0      	b.n	800a79e <_reclaim_reent+0x16>
 800a81c:	680e      	ldr	r6, [r1, #0]
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 f878 	bl	800a914 <_free_r>
 800a824:	4631      	mov	r1, r6
 800a826:	e7ef      	b.n	800a808 <_reclaim_reent+0x80>
 800a828:	2500      	movs	r5, #0
 800a82a:	e7ef      	b.n	800a80c <_reclaim_reent+0x84>
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	bf00      	nop
 800a830:	200000cc 	.word	0x200000cc

0800a834 <_lseek_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_lseek_r+0x20>)
 800a838:	4604      	mov	r4, r0
 800a83a:	4608      	mov	r0, r1
 800a83c:	4611      	mov	r1, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	602a      	str	r2, [r5, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	f7f6 f8ae 	bl	80009a4 <_lseek>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_lseek_r+0x1e>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_lseek_r+0x1e>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20001ffc 	.word	0x20001ffc

0800a858 <_read_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d07      	ldr	r5, [pc, #28]	; (800a878 <_read_r+0x20>)
 800a85c:	4604      	mov	r4, r0
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f6 f83c 	bl	80008e4 <_read>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_read_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_read_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20001ffc 	.word	0x20001ffc

0800a87c <_write_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	; (800a89c <_write_r+0x20>)
 800a880:	4604      	mov	r4, r0
 800a882:	4608      	mov	r0, r1
 800a884:	4611      	mov	r1, r2
 800a886:	2200      	movs	r2, #0
 800a888:	602a      	str	r2, [r5, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	f7f6 f847 	bl	800091e <_write>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_write_r+0x1e>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_write_r+0x1e>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	20001ffc 	.word	0x20001ffc

0800a8a0 <__errno>:
 800a8a0:	4b01      	ldr	r3, [pc, #4]	; (800a8a8 <__errno+0x8>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	200000cc 	.word	0x200000cc

0800a8ac <__libc_init_array>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	4d0d      	ldr	r5, [pc, #52]	; (800a8e4 <__libc_init_array+0x38>)
 800a8b0:	4c0d      	ldr	r4, [pc, #52]	; (800a8e8 <__libc_init_array+0x3c>)
 800a8b2:	1b64      	subs	r4, r4, r5
 800a8b4:	10a4      	asrs	r4, r4, #2
 800a8b6:	2600      	movs	r6, #0
 800a8b8:	42a6      	cmp	r6, r4
 800a8ba:	d109      	bne.n	800a8d0 <__libc_init_array+0x24>
 800a8bc:	4d0b      	ldr	r5, [pc, #44]	; (800a8ec <__libc_init_array+0x40>)
 800a8be:	4c0c      	ldr	r4, [pc, #48]	; (800a8f0 <__libc_init_array+0x44>)
 800a8c0:	f000 fd36 	bl	800b330 <_init>
 800a8c4:	1b64      	subs	r4, r4, r5
 800a8c6:	10a4      	asrs	r4, r4, #2
 800a8c8:	2600      	movs	r6, #0
 800a8ca:	42a6      	cmp	r6, r4
 800a8cc:	d105      	bne.n	800a8da <__libc_init_array+0x2e>
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d4:	4798      	blx	r3
 800a8d6:	3601      	adds	r6, #1
 800a8d8:	e7ee      	b.n	800a8b8 <__libc_init_array+0xc>
 800a8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8de:	4798      	blx	r3
 800a8e0:	3601      	adds	r6, #1
 800a8e2:	e7f2      	b.n	800a8ca <__libc_init_array+0x1e>
 800a8e4:	0800b5ec 	.word	0x0800b5ec
 800a8e8:	0800b5ec 	.word	0x0800b5ec
 800a8ec:	0800b5ec 	.word	0x0800b5ec
 800a8f0:	0800b5f0 	.word	0x0800b5f0

0800a8f4 <__retarget_lock_acquire_recursive>:
 800a8f4:	4770      	bx	lr

0800a8f6 <__retarget_lock_release_recursive>:
 800a8f6:	4770      	bx	lr

0800a8f8 <memcpy>:
 800a8f8:	440a      	add	r2, r1
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a900:	d100      	bne.n	800a904 <memcpy+0xc>
 800a902:	4770      	bx	lr
 800a904:	b510      	push	{r4, lr}
 800a906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a90e:	4291      	cmp	r1, r2
 800a910:	d1f9      	bne.n	800a906 <memcpy+0xe>
 800a912:	bd10      	pop	{r4, pc}

0800a914 <_free_r>:
 800a914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a916:	2900      	cmp	r1, #0
 800a918:	d044      	beq.n	800a9a4 <_free_r+0x90>
 800a91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91e:	9001      	str	r0, [sp, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f1a1 0404 	sub.w	r4, r1, #4
 800a926:	bfb8      	it	lt
 800a928:	18e4      	addlt	r4, r4, r3
 800a92a:	f000 f8df 	bl	800aaec <__malloc_lock>
 800a92e:	4a1e      	ldr	r2, [pc, #120]	; (800a9a8 <_free_r+0x94>)
 800a930:	9801      	ldr	r0, [sp, #4]
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	b933      	cbnz	r3, 800a944 <_free_r+0x30>
 800a936:	6063      	str	r3, [r4, #4]
 800a938:	6014      	str	r4, [r2, #0]
 800a93a:	b003      	add	sp, #12
 800a93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a940:	f000 b8da 	b.w	800aaf8 <__malloc_unlock>
 800a944:	42a3      	cmp	r3, r4
 800a946:	d908      	bls.n	800a95a <_free_r+0x46>
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	1961      	adds	r1, r4, r5
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf01      	itttt	eq
 800a950:	6819      	ldreq	r1, [r3, #0]
 800a952:	685b      	ldreq	r3, [r3, #4]
 800a954:	1949      	addeq	r1, r1, r5
 800a956:	6021      	streq	r1, [r4, #0]
 800a958:	e7ed      	b.n	800a936 <_free_r+0x22>
 800a95a:	461a      	mov	r2, r3
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	b10b      	cbz	r3, 800a964 <_free_r+0x50>
 800a960:	42a3      	cmp	r3, r4
 800a962:	d9fa      	bls.n	800a95a <_free_r+0x46>
 800a964:	6811      	ldr	r1, [r2, #0]
 800a966:	1855      	adds	r5, r2, r1
 800a968:	42a5      	cmp	r5, r4
 800a96a:	d10b      	bne.n	800a984 <_free_r+0x70>
 800a96c:	6824      	ldr	r4, [r4, #0]
 800a96e:	4421      	add	r1, r4
 800a970:	1854      	adds	r4, r2, r1
 800a972:	42a3      	cmp	r3, r4
 800a974:	6011      	str	r1, [r2, #0]
 800a976:	d1e0      	bne.n	800a93a <_free_r+0x26>
 800a978:	681c      	ldr	r4, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	6053      	str	r3, [r2, #4]
 800a97e:	440c      	add	r4, r1
 800a980:	6014      	str	r4, [r2, #0]
 800a982:	e7da      	b.n	800a93a <_free_r+0x26>
 800a984:	d902      	bls.n	800a98c <_free_r+0x78>
 800a986:	230c      	movs	r3, #12
 800a988:	6003      	str	r3, [r0, #0]
 800a98a:	e7d6      	b.n	800a93a <_free_r+0x26>
 800a98c:	6825      	ldr	r5, [r4, #0]
 800a98e:	1961      	adds	r1, r4, r5
 800a990:	428b      	cmp	r3, r1
 800a992:	bf04      	itt	eq
 800a994:	6819      	ldreq	r1, [r3, #0]
 800a996:	685b      	ldreq	r3, [r3, #4]
 800a998:	6063      	str	r3, [r4, #4]
 800a99a:	bf04      	itt	eq
 800a99c:	1949      	addeq	r1, r1, r5
 800a99e:	6021      	streq	r1, [r4, #0]
 800a9a0:	6054      	str	r4, [r2, #4]
 800a9a2:	e7ca      	b.n	800a93a <_free_r+0x26>
 800a9a4:	b003      	add	sp, #12
 800a9a6:	bd30      	pop	{r4, r5, pc}
 800a9a8:	20002004 	.word	0x20002004

0800a9ac <sbrk_aligned>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4e0e      	ldr	r6, [pc, #56]	; (800a9e8 <sbrk_aligned+0x3c>)
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	6831      	ldr	r1, [r6, #0]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	b911      	cbnz	r1, 800a9be <sbrk_aligned+0x12>
 800a9b8:	f000 fcaa 	bl	800b310 <_sbrk_r>
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f000 fca5 	bl	800b310 <_sbrk_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d00a      	beq.n	800a9e0 <sbrk_aligned+0x34>
 800a9ca:	1cc4      	adds	r4, r0, #3
 800a9cc:	f024 0403 	bic.w	r4, r4, #3
 800a9d0:	42a0      	cmp	r0, r4
 800a9d2:	d007      	beq.n	800a9e4 <sbrk_aligned+0x38>
 800a9d4:	1a21      	subs	r1, r4, r0
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f000 fc9a 	bl	800b310 <_sbrk_r>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d101      	bne.n	800a9e4 <sbrk_aligned+0x38>
 800a9e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	20002008 	.word	0x20002008

0800a9ec <_malloc_r>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	1ccd      	adds	r5, r1, #3
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	4607      	mov	r7, r0
 800aa02:	db01      	blt.n	800aa08 <_malloc_r+0x1c>
 800aa04:	42a9      	cmp	r1, r5
 800aa06:	d905      	bls.n	800aa14 <_malloc_r+0x28>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	4630      	mov	r0, r6
 800aa10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aae8 <_malloc_r+0xfc>
 800aa18:	f000 f868 	bl	800aaec <__malloc_lock>
 800aa1c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa20:	461c      	mov	r4, r3
 800aa22:	bb5c      	cbnz	r4, 800aa7c <_malloc_r+0x90>
 800aa24:	4629      	mov	r1, r5
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7ff ffc0 	bl	800a9ac <sbrk_aligned>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	4604      	mov	r4, r0
 800aa30:	d155      	bne.n	800aade <_malloc_r+0xf2>
 800aa32:	f8d8 4000 	ldr.w	r4, [r8]
 800aa36:	4626      	mov	r6, r4
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	d145      	bne.n	800aac8 <_malloc_r+0xdc>
 800aa3c:	2c00      	cmp	r4, #0
 800aa3e:	d048      	beq.n	800aad2 <_malloc_r+0xe6>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	4631      	mov	r1, r6
 800aa44:	4638      	mov	r0, r7
 800aa46:	eb04 0903 	add.w	r9, r4, r3
 800aa4a:	f000 fc61 	bl	800b310 <_sbrk_r>
 800aa4e:	4581      	cmp	r9, r0
 800aa50:	d13f      	bne.n	800aad2 <_malloc_r+0xe6>
 800aa52:	6821      	ldr	r1, [r4, #0]
 800aa54:	1a6d      	subs	r5, r5, r1
 800aa56:	4629      	mov	r1, r5
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa7 	bl	800a9ac <sbrk_aligned>
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d037      	beq.n	800aad2 <_malloc_r+0xe6>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	442b      	add	r3, r5
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d038      	beq.n	800aae2 <_malloc_r+0xf6>
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	42a2      	cmp	r2, r4
 800aa74:	d12b      	bne.n	800aace <_malloc_r+0xe2>
 800aa76:	2200      	movs	r2, #0
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	e00f      	b.n	800aa9c <_malloc_r+0xb0>
 800aa7c:	6822      	ldr	r2, [r4, #0]
 800aa7e:	1b52      	subs	r2, r2, r5
 800aa80:	d41f      	bmi.n	800aac2 <_malloc_r+0xd6>
 800aa82:	2a0b      	cmp	r2, #11
 800aa84:	d917      	bls.n	800aab6 <_malloc_r+0xca>
 800aa86:	1961      	adds	r1, r4, r5
 800aa88:	42a3      	cmp	r3, r4
 800aa8a:	6025      	str	r5, [r4, #0]
 800aa8c:	bf18      	it	ne
 800aa8e:	6059      	strne	r1, [r3, #4]
 800aa90:	6863      	ldr	r3, [r4, #4]
 800aa92:	bf08      	it	eq
 800aa94:	f8c8 1000 	streq.w	r1, [r8]
 800aa98:	5162      	str	r2, [r4, r5]
 800aa9a:	604b      	str	r3, [r1, #4]
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f104 060b 	add.w	r6, r4, #11
 800aaa2:	f000 f829 	bl	800aaf8 <__malloc_unlock>
 800aaa6:	f026 0607 	bic.w	r6, r6, #7
 800aaaa:	1d23      	adds	r3, r4, #4
 800aaac:	1af2      	subs	r2, r6, r3
 800aaae:	d0ae      	beq.n	800aa0e <_malloc_r+0x22>
 800aab0:	1b9b      	subs	r3, r3, r6
 800aab2:	50a3      	str	r3, [r4, r2]
 800aab4:	e7ab      	b.n	800aa0e <_malloc_r+0x22>
 800aab6:	42a3      	cmp	r3, r4
 800aab8:	6862      	ldr	r2, [r4, #4]
 800aaba:	d1dd      	bne.n	800aa78 <_malloc_r+0x8c>
 800aabc:	f8c8 2000 	str.w	r2, [r8]
 800aac0:	e7ec      	b.n	800aa9c <_malloc_r+0xb0>
 800aac2:	4623      	mov	r3, r4
 800aac4:	6864      	ldr	r4, [r4, #4]
 800aac6:	e7ac      	b.n	800aa22 <_malloc_r+0x36>
 800aac8:	4634      	mov	r4, r6
 800aaca:	6876      	ldr	r6, [r6, #4]
 800aacc:	e7b4      	b.n	800aa38 <_malloc_r+0x4c>
 800aace:	4613      	mov	r3, r2
 800aad0:	e7cc      	b.n	800aa6c <_malloc_r+0x80>
 800aad2:	230c      	movs	r3, #12
 800aad4:	603b      	str	r3, [r7, #0]
 800aad6:	4638      	mov	r0, r7
 800aad8:	f000 f80e 	bl	800aaf8 <__malloc_unlock>
 800aadc:	e797      	b.n	800aa0e <_malloc_r+0x22>
 800aade:	6025      	str	r5, [r4, #0]
 800aae0:	e7dc      	b.n	800aa9c <_malloc_r+0xb0>
 800aae2:	605b      	str	r3, [r3, #4]
 800aae4:	deff      	udf	#255	; 0xff
 800aae6:	bf00      	nop
 800aae8:	20002004 	.word	0x20002004

0800aaec <__malloc_lock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__malloc_lock+0x8>)
 800aaee:	f7ff bf01 	b.w	800a8f4 <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20002000 	.word	0x20002000

0800aaf8 <__malloc_unlock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__malloc_unlock+0x8>)
 800aafa:	f7ff befc 	b.w	800a8f6 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	20002000 	.word	0x20002000

0800ab04 <__sfputc_r>:
 800ab04:	6893      	ldr	r3, [r2, #8]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	b410      	push	{r4}
 800ab0c:	6093      	str	r3, [r2, #8]
 800ab0e:	da08      	bge.n	800ab22 <__sfputc_r+0x1e>
 800ab10:	6994      	ldr	r4, [r2, #24]
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	db01      	blt.n	800ab1a <__sfputc_r+0x16>
 800ab16:	290a      	cmp	r1, #10
 800ab18:	d103      	bne.n	800ab22 <__sfputc_r+0x1e>
 800ab1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab1e:	f7ff bd86 	b.w	800a62e <__swbuf_r>
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	1c58      	adds	r0, r3, #1
 800ab26:	6010      	str	r0, [r2, #0]
 800ab28:	7019      	strb	r1, [r3, #0]
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <__sfputs_r>:
 800ab32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab34:	4606      	mov	r6, r0
 800ab36:	460f      	mov	r7, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	18d5      	adds	r5, r2, r3
 800ab3c:	42ac      	cmp	r4, r5
 800ab3e:	d101      	bne.n	800ab44 <__sfputs_r+0x12>
 800ab40:	2000      	movs	r0, #0
 800ab42:	e007      	b.n	800ab54 <__sfputs_r+0x22>
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	463a      	mov	r2, r7
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ffda 	bl	800ab04 <__sfputc_r>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d1f3      	bne.n	800ab3c <__sfputs_r+0xa>
 800ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab58 <_vfiprintf_r>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	b09d      	sub	sp, #116	; 0x74
 800ab60:	4614      	mov	r4, r2
 800ab62:	4698      	mov	r8, r3
 800ab64:	4606      	mov	r6, r0
 800ab66:	b118      	cbz	r0, 800ab70 <_vfiprintf_r+0x18>
 800ab68:	6a03      	ldr	r3, [r0, #32]
 800ab6a:	b90b      	cbnz	r3, 800ab70 <_vfiprintf_r+0x18>
 800ab6c:	f7ff fc78 	bl	800a460 <__sinit>
 800ab70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab72:	07d9      	lsls	r1, r3, #31
 800ab74:	d405      	bmi.n	800ab82 <_vfiprintf_r+0x2a>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	059a      	lsls	r2, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_vfiprintf_r+0x2a>
 800ab7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab7e:	f7ff feb9 	bl	800a8f4 <__retarget_lock_acquire_recursive>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	071b      	lsls	r3, r3, #28
 800ab86:	d501      	bpl.n	800ab8c <_vfiprintf_r+0x34>
 800ab88:	692b      	ldr	r3, [r5, #16]
 800ab8a:	b99b      	cbnz	r3, 800abb4 <_vfiprintf_r+0x5c>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7ff fd8a 	bl	800a6a8 <__swsetup_r>
 800ab94:	b170      	cbz	r0, 800abb4 <_vfiprintf_r+0x5c>
 800ab96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab98:	07dc      	lsls	r4, r3, #31
 800ab9a:	d504      	bpl.n	800aba6 <_vfiprintf_r+0x4e>
 800ab9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aba0:	b01d      	add	sp, #116	; 0x74
 800aba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	0598      	lsls	r0, r3, #22
 800abaa:	d4f7      	bmi.n	800ab9c <_vfiprintf_r+0x44>
 800abac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abae:	f7ff fea2 	bl	800a8f6 <__retarget_lock_release_recursive>
 800abb2:	e7f3      	b.n	800ab9c <_vfiprintf_r+0x44>
 800abb4:	2300      	movs	r3, #0
 800abb6:	9309      	str	r3, [sp, #36]	; 0x24
 800abb8:	2320      	movs	r3, #32
 800abba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc2:	2330      	movs	r3, #48	; 0x30
 800abc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad78 <_vfiprintf_r+0x220>
 800abc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abcc:	f04f 0901 	mov.w	r9, #1
 800abd0:	4623      	mov	r3, r4
 800abd2:	469a      	mov	sl, r3
 800abd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd8:	b10a      	cbz	r2, 800abde <_vfiprintf_r+0x86>
 800abda:	2a25      	cmp	r2, #37	; 0x25
 800abdc:	d1f9      	bne.n	800abd2 <_vfiprintf_r+0x7a>
 800abde:	ebba 0b04 	subs.w	fp, sl, r4
 800abe2:	d00b      	beq.n	800abfc <_vfiprintf_r+0xa4>
 800abe4:	465b      	mov	r3, fp
 800abe6:	4622      	mov	r2, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ffa1 	bl	800ab32 <__sfputs_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	f000 80a9 	beq.w	800ad48 <_vfiprintf_r+0x1f0>
 800abf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf8:	445a      	add	r2, fp
 800abfa:	9209      	str	r2, [sp, #36]	; 0x24
 800abfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 80a1 	beq.w	800ad48 <_vfiprintf_r+0x1f0>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac10:	f10a 0a01 	add.w	sl, sl, #1
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac1e:	4654      	mov	r4, sl
 800ac20:	2205      	movs	r2, #5
 800ac22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac26:	4854      	ldr	r0, [pc, #336]	; (800ad78 <_vfiprintf_r+0x220>)
 800ac28:	f7f5 fada 	bl	80001e0 <memchr>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	b9d8      	cbnz	r0, 800ac68 <_vfiprintf_r+0x110>
 800ac30:	06d1      	lsls	r1, r2, #27
 800ac32:	bf44      	itt	mi
 800ac34:	2320      	movmi	r3, #32
 800ac36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3a:	0713      	lsls	r3, r2, #28
 800ac3c:	bf44      	itt	mi
 800ac3e:	232b      	movmi	r3, #43	; 0x2b
 800ac40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac44:	f89a 3000 	ldrb.w	r3, [sl]
 800ac48:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4a:	d015      	beq.n	800ac78 <_vfiprintf_r+0x120>
 800ac4c:	9a07      	ldr	r2, [sp, #28]
 800ac4e:	4654      	mov	r4, sl
 800ac50:	2000      	movs	r0, #0
 800ac52:	f04f 0c0a 	mov.w	ip, #10
 800ac56:	4621      	mov	r1, r4
 800ac58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5c:	3b30      	subs	r3, #48	; 0x30
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d94d      	bls.n	800acfe <_vfiprintf_r+0x1a6>
 800ac62:	b1b0      	cbz	r0, 800ac92 <_vfiprintf_r+0x13a>
 800ac64:	9207      	str	r2, [sp, #28]
 800ac66:	e014      	b.n	800ac92 <_vfiprintf_r+0x13a>
 800ac68:	eba0 0308 	sub.w	r3, r0, r8
 800ac6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac70:	4313      	orrs	r3, r2
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	46a2      	mov	sl, r4
 800ac76:	e7d2      	b.n	800ac1e <_vfiprintf_r+0xc6>
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	1d19      	adds	r1, r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	9103      	str	r1, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bfbb      	ittet	lt
 800ac84:	425b      	neglt	r3, r3
 800ac86:	f042 0202 	orrlt.w	r2, r2, #2
 800ac8a:	9307      	strge	r3, [sp, #28]
 800ac8c:	9307      	strlt	r3, [sp, #28]
 800ac8e:	bfb8      	it	lt
 800ac90:	9204      	strlt	r2, [sp, #16]
 800ac92:	7823      	ldrb	r3, [r4, #0]
 800ac94:	2b2e      	cmp	r3, #46	; 0x2e
 800ac96:	d10c      	bne.n	800acb2 <_vfiprintf_r+0x15a>
 800ac98:	7863      	ldrb	r3, [r4, #1]
 800ac9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac9c:	d134      	bne.n	800ad08 <_vfiprintf_r+0x1b0>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	1d1a      	adds	r2, r3, #4
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	9203      	str	r2, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800acae:	3402      	adds	r4, #2
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad88 <_vfiprintf_r+0x230>
 800acb6:	7821      	ldrb	r1, [r4, #0]
 800acb8:	2203      	movs	r2, #3
 800acba:	4650      	mov	r0, sl
 800acbc:	f7f5 fa90 	bl	80001e0 <memchr>
 800acc0:	b138      	cbz	r0, 800acd2 <_vfiprintf_r+0x17a>
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	eba0 000a 	sub.w	r0, r0, sl
 800acc8:	2240      	movs	r2, #64	; 0x40
 800acca:	4082      	lsls	r2, r0
 800accc:	4313      	orrs	r3, r2
 800acce:	3401      	adds	r4, #1
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd6:	4829      	ldr	r0, [pc, #164]	; (800ad7c <_vfiprintf_r+0x224>)
 800acd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acdc:	2206      	movs	r2, #6
 800acde:	f7f5 fa7f 	bl	80001e0 <memchr>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d03f      	beq.n	800ad66 <_vfiprintf_r+0x20e>
 800ace6:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <_vfiprintf_r+0x228>)
 800ace8:	bb1b      	cbnz	r3, 800ad32 <_vfiprintf_r+0x1da>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	3307      	adds	r3, #7
 800acee:	f023 0307 	bic.w	r3, r3, #7
 800acf2:	3308      	adds	r3, #8
 800acf4:	9303      	str	r3, [sp, #12]
 800acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf8:	443b      	add	r3, r7
 800acfa:	9309      	str	r3, [sp, #36]	; 0x24
 800acfc:	e768      	b.n	800abd0 <_vfiprintf_r+0x78>
 800acfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad02:	460c      	mov	r4, r1
 800ad04:	2001      	movs	r0, #1
 800ad06:	e7a6      	b.n	800ac56 <_vfiprintf_r+0xfe>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	3401      	adds	r4, #1
 800ad0c:	9305      	str	r3, [sp, #20]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	f04f 0c0a 	mov.w	ip, #10
 800ad14:	4620      	mov	r0, r4
 800ad16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad1a:	3a30      	subs	r2, #48	; 0x30
 800ad1c:	2a09      	cmp	r2, #9
 800ad1e:	d903      	bls.n	800ad28 <_vfiprintf_r+0x1d0>
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0c6      	beq.n	800acb2 <_vfiprintf_r+0x15a>
 800ad24:	9105      	str	r1, [sp, #20]
 800ad26:	e7c4      	b.n	800acb2 <_vfiprintf_r+0x15a>
 800ad28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e7f0      	b.n	800ad14 <_vfiprintf_r+0x1bc>
 800ad32:	ab03      	add	r3, sp, #12
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	462a      	mov	r2, r5
 800ad38:	4b12      	ldr	r3, [pc, #72]	; (800ad84 <_vfiprintf_r+0x22c>)
 800ad3a:	a904      	add	r1, sp, #16
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f3af 8000 	nop.w
 800ad42:	4607      	mov	r7, r0
 800ad44:	1c78      	adds	r0, r7, #1
 800ad46:	d1d6      	bne.n	800acf6 <_vfiprintf_r+0x19e>
 800ad48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad4a:	07d9      	lsls	r1, r3, #31
 800ad4c:	d405      	bmi.n	800ad5a <_vfiprintf_r+0x202>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	059a      	lsls	r2, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_vfiprintf_r+0x202>
 800ad54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad56:	f7ff fdce 	bl	800a8f6 <__retarget_lock_release_recursive>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	065b      	lsls	r3, r3, #25
 800ad5e:	f53f af1d 	bmi.w	800ab9c <_vfiprintf_r+0x44>
 800ad62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad64:	e71c      	b.n	800aba0 <_vfiprintf_r+0x48>
 800ad66:	ab03      	add	r3, sp, #12
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <_vfiprintf_r+0x22c>)
 800ad6e:	a904      	add	r1, sp, #16
 800ad70:	4630      	mov	r0, r6
 800ad72:	f000 f879 	bl	800ae68 <_printf_i>
 800ad76:	e7e4      	b.n	800ad42 <_vfiprintf_r+0x1ea>
 800ad78:	0800b5b8 	.word	0x0800b5b8
 800ad7c:	0800b5c2 	.word	0x0800b5c2
 800ad80:	00000000 	.word	0x00000000
 800ad84:	0800ab33 	.word	0x0800ab33
 800ad88:	0800b5be 	.word	0x0800b5be

0800ad8c <_printf_common>:
 800ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad90:	4616      	mov	r6, r2
 800ad92:	4699      	mov	r9, r3
 800ad94:	688a      	ldr	r2, [r1, #8]
 800ad96:	690b      	ldr	r3, [r1, #16]
 800ad98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	bfb8      	it	lt
 800ada0:	4613      	movlt	r3, r2
 800ada2:	6033      	str	r3, [r6, #0]
 800ada4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ada8:	4607      	mov	r7, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	b10a      	cbz	r2, 800adb2 <_printf_common+0x26>
 800adae:	3301      	adds	r3, #1
 800adb0:	6033      	str	r3, [r6, #0]
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	0699      	lsls	r1, r3, #26
 800adb6:	bf42      	ittt	mi
 800adb8:	6833      	ldrmi	r3, [r6, #0]
 800adba:	3302      	addmi	r3, #2
 800adbc:	6033      	strmi	r3, [r6, #0]
 800adbe:	6825      	ldr	r5, [r4, #0]
 800adc0:	f015 0506 	ands.w	r5, r5, #6
 800adc4:	d106      	bne.n	800add4 <_printf_common+0x48>
 800adc6:	f104 0a19 	add.w	sl, r4, #25
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	6832      	ldr	r2, [r6, #0]
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	42ab      	cmp	r3, r5
 800add2:	dc26      	bgt.n	800ae22 <_printf_common+0x96>
 800add4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800add8:	1e13      	subs	r3, r2, #0
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	bf18      	it	ne
 800adde:	2301      	movne	r3, #1
 800ade0:	0692      	lsls	r2, r2, #26
 800ade2:	d42b      	bmi.n	800ae3c <_printf_common+0xb0>
 800ade4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ade8:	4649      	mov	r1, r9
 800adea:	4638      	mov	r0, r7
 800adec:	47c0      	blx	r8
 800adee:	3001      	adds	r0, #1
 800adf0:	d01e      	beq.n	800ae30 <_printf_common+0xa4>
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	f003 0306 	and.w	r3, r3, #6
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	bf02      	ittt	eq
 800adfe:	68e5      	ldreq	r5, [r4, #12]
 800ae00:	6833      	ldreq	r3, [r6, #0]
 800ae02:	1aed      	subeq	r5, r5, r3
 800ae04:	68a3      	ldr	r3, [r4, #8]
 800ae06:	bf0c      	ite	eq
 800ae08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae0c:	2500      	movne	r5, #0
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	bfc4      	itt	gt
 800ae12:	1a9b      	subgt	r3, r3, r2
 800ae14:	18ed      	addgt	r5, r5, r3
 800ae16:	2600      	movs	r6, #0
 800ae18:	341a      	adds	r4, #26
 800ae1a:	42b5      	cmp	r5, r6
 800ae1c:	d11a      	bne.n	800ae54 <_printf_common+0xc8>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e008      	b.n	800ae34 <_printf_common+0xa8>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4652      	mov	r2, sl
 800ae26:	4649      	mov	r1, r9
 800ae28:	4638      	mov	r0, r7
 800ae2a:	47c0      	blx	r8
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d103      	bne.n	800ae38 <_printf_common+0xac>
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae38:	3501      	adds	r5, #1
 800ae3a:	e7c6      	b.n	800adca <_printf_common+0x3e>
 800ae3c:	18e1      	adds	r1, r4, r3
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	2030      	movs	r0, #48	; 0x30
 800ae42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae46:	4422      	add	r2, r4
 800ae48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae50:	3302      	adds	r3, #2
 800ae52:	e7c7      	b.n	800ade4 <_printf_common+0x58>
 800ae54:	2301      	movs	r3, #1
 800ae56:	4622      	mov	r2, r4
 800ae58:	4649      	mov	r1, r9
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	47c0      	blx	r8
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d0e6      	beq.n	800ae30 <_printf_common+0xa4>
 800ae62:	3601      	adds	r6, #1
 800ae64:	e7d9      	b.n	800ae1a <_printf_common+0x8e>
	...

0800ae68 <_printf_i>:
 800ae68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae6c:	7e0f      	ldrb	r7, [r1, #24]
 800ae6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae70:	2f78      	cmp	r7, #120	; 0x78
 800ae72:	4691      	mov	r9, r2
 800ae74:	4680      	mov	r8, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	469a      	mov	sl, r3
 800ae7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae7e:	d807      	bhi.n	800ae90 <_printf_i+0x28>
 800ae80:	2f62      	cmp	r7, #98	; 0x62
 800ae82:	d80a      	bhi.n	800ae9a <_printf_i+0x32>
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	f000 80d4 	beq.w	800b032 <_printf_i+0x1ca>
 800ae8a:	2f58      	cmp	r7, #88	; 0x58
 800ae8c:	f000 80c0 	beq.w	800b010 <_printf_i+0x1a8>
 800ae90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae98:	e03a      	b.n	800af10 <_printf_i+0xa8>
 800ae9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae9e:	2b15      	cmp	r3, #21
 800aea0:	d8f6      	bhi.n	800ae90 <_printf_i+0x28>
 800aea2:	a101      	add	r1, pc, #4	; (adr r1, 800aea8 <_printf_i+0x40>)
 800aea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aea8:	0800af01 	.word	0x0800af01
 800aeac:	0800af15 	.word	0x0800af15
 800aeb0:	0800ae91 	.word	0x0800ae91
 800aeb4:	0800ae91 	.word	0x0800ae91
 800aeb8:	0800ae91 	.word	0x0800ae91
 800aebc:	0800ae91 	.word	0x0800ae91
 800aec0:	0800af15 	.word	0x0800af15
 800aec4:	0800ae91 	.word	0x0800ae91
 800aec8:	0800ae91 	.word	0x0800ae91
 800aecc:	0800ae91 	.word	0x0800ae91
 800aed0:	0800ae91 	.word	0x0800ae91
 800aed4:	0800b019 	.word	0x0800b019
 800aed8:	0800af41 	.word	0x0800af41
 800aedc:	0800afd3 	.word	0x0800afd3
 800aee0:	0800ae91 	.word	0x0800ae91
 800aee4:	0800ae91 	.word	0x0800ae91
 800aee8:	0800b03b 	.word	0x0800b03b
 800aeec:	0800ae91 	.word	0x0800ae91
 800aef0:	0800af41 	.word	0x0800af41
 800aef4:	0800ae91 	.word	0x0800ae91
 800aef8:	0800ae91 	.word	0x0800ae91
 800aefc:	0800afdb 	.word	0x0800afdb
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	1d1a      	adds	r2, r3, #4
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	602a      	str	r2, [r5, #0]
 800af08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af10:	2301      	movs	r3, #1
 800af12:	e09f      	b.n	800b054 <_printf_i+0x1ec>
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	682b      	ldr	r3, [r5, #0]
 800af18:	0607      	lsls	r7, r0, #24
 800af1a:	f103 0104 	add.w	r1, r3, #4
 800af1e:	6029      	str	r1, [r5, #0]
 800af20:	d501      	bpl.n	800af26 <_printf_i+0xbe>
 800af22:	681e      	ldr	r6, [r3, #0]
 800af24:	e003      	b.n	800af2e <_printf_i+0xc6>
 800af26:	0646      	lsls	r6, r0, #25
 800af28:	d5fb      	bpl.n	800af22 <_printf_i+0xba>
 800af2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af2e:	2e00      	cmp	r6, #0
 800af30:	da03      	bge.n	800af3a <_printf_i+0xd2>
 800af32:	232d      	movs	r3, #45	; 0x2d
 800af34:	4276      	negs	r6, r6
 800af36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af3a:	485a      	ldr	r0, [pc, #360]	; (800b0a4 <_printf_i+0x23c>)
 800af3c:	230a      	movs	r3, #10
 800af3e:	e012      	b.n	800af66 <_printf_i+0xfe>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	6820      	ldr	r0, [r4, #0]
 800af44:	1d19      	adds	r1, r3, #4
 800af46:	6029      	str	r1, [r5, #0]
 800af48:	0605      	lsls	r5, r0, #24
 800af4a:	d501      	bpl.n	800af50 <_printf_i+0xe8>
 800af4c:	681e      	ldr	r6, [r3, #0]
 800af4e:	e002      	b.n	800af56 <_printf_i+0xee>
 800af50:	0641      	lsls	r1, r0, #25
 800af52:	d5fb      	bpl.n	800af4c <_printf_i+0xe4>
 800af54:	881e      	ldrh	r6, [r3, #0]
 800af56:	4853      	ldr	r0, [pc, #332]	; (800b0a4 <_printf_i+0x23c>)
 800af58:	2f6f      	cmp	r7, #111	; 0x6f
 800af5a:	bf0c      	ite	eq
 800af5c:	2308      	moveq	r3, #8
 800af5e:	230a      	movne	r3, #10
 800af60:	2100      	movs	r1, #0
 800af62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af66:	6865      	ldr	r5, [r4, #4]
 800af68:	60a5      	str	r5, [r4, #8]
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	bfa2      	ittt	ge
 800af6e:	6821      	ldrge	r1, [r4, #0]
 800af70:	f021 0104 	bicge.w	r1, r1, #4
 800af74:	6021      	strge	r1, [r4, #0]
 800af76:	b90e      	cbnz	r6, 800af7c <_printf_i+0x114>
 800af78:	2d00      	cmp	r5, #0
 800af7a:	d04b      	beq.n	800b014 <_printf_i+0x1ac>
 800af7c:	4615      	mov	r5, r2
 800af7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af82:	fb03 6711 	mls	r7, r3, r1, r6
 800af86:	5dc7      	ldrb	r7, [r0, r7]
 800af88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af8c:	4637      	mov	r7, r6
 800af8e:	42bb      	cmp	r3, r7
 800af90:	460e      	mov	r6, r1
 800af92:	d9f4      	bls.n	800af7e <_printf_i+0x116>
 800af94:	2b08      	cmp	r3, #8
 800af96:	d10b      	bne.n	800afb0 <_printf_i+0x148>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	07de      	lsls	r6, r3, #31
 800af9c:	d508      	bpl.n	800afb0 <_printf_i+0x148>
 800af9e:	6923      	ldr	r3, [r4, #16]
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	4299      	cmp	r1, r3
 800afa4:	bfde      	ittt	le
 800afa6:	2330      	movle	r3, #48	; 0x30
 800afa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afb0:	1b52      	subs	r2, r2, r5
 800afb2:	6122      	str	r2, [r4, #16]
 800afb4:	f8cd a000 	str.w	sl, [sp]
 800afb8:	464b      	mov	r3, r9
 800afba:	aa03      	add	r2, sp, #12
 800afbc:	4621      	mov	r1, r4
 800afbe:	4640      	mov	r0, r8
 800afc0:	f7ff fee4 	bl	800ad8c <_printf_common>
 800afc4:	3001      	adds	r0, #1
 800afc6:	d14a      	bne.n	800b05e <_printf_i+0x1f6>
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	b004      	add	sp, #16
 800afce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	f043 0320 	orr.w	r3, r3, #32
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	4833      	ldr	r0, [pc, #204]	; (800b0a8 <_printf_i+0x240>)
 800afdc:	2778      	movs	r7, #120	; 0x78
 800afde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	6829      	ldr	r1, [r5, #0]
 800afe6:	061f      	lsls	r7, r3, #24
 800afe8:	f851 6b04 	ldr.w	r6, [r1], #4
 800afec:	d402      	bmi.n	800aff4 <_printf_i+0x18c>
 800afee:	065f      	lsls	r7, r3, #25
 800aff0:	bf48      	it	mi
 800aff2:	b2b6      	uxthmi	r6, r6
 800aff4:	07df      	lsls	r7, r3, #31
 800aff6:	bf48      	it	mi
 800aff8:	f043 0320 	orrmi.w	r3, r3, #32
 800affc:	6029      	str	r1, [r5, #0]
 800affe:	bf48      	it	mi
 800b000:	6023      	strmi	r3, [r4, #0]
 800b002:	b91e      	cbnz	r6, 800b00c <_printf_i+0x1a4>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	f023 0320 	bic.w	r3, r3, #32
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	2310      	movs	r3, #16
 800b00e:	e7a7      	b.n	800af60 <_printf_i+0xf8>
 800b010:	4824      	ldr	r0, [pc, #144]	; (800b0a4 <_printf_i+0x23c>)
 800b012:	e7e4      	b.n	800afde <_printf_i+0x176>
 800b014:	4615      	mov	r5, r2
 800b016:	e7bd      	b.n	800af94 <_printf_i+0x12c>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	6826      	ldr	r6, [r4, #0]
 800b01c:	6961      	ldr	r1, [r4, #20]
 800b01e:	1d18      	adds	r0, r3, #4
 800b020:	6028      	str	r0, [r5, #0]
 800b022:	0635      	lsls	r5, r6, #24
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	d501      	bpl.n	800b02c <_printf_i+0x1c4>
 800b028:	6019      	str	r1, [r3, #0]
 800b02a:	e002      	b.n	800b032 <_printf_i+0x1ca>
 800b02c:	0670      	lsls	r0, r6, #25
 800b02e:	d5fb      	bpl.n	800b028 <_printf_i+0x1c0>
 800b030:	8019      	strh	r1, [r3, #0]
 800b032:	2300      	movs	r3, #0
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	4615      	mov	r5, r2
 800b038:	e7bc      	b.n	800afb4 <_printf_i+0x14c>
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	1d1a      	adds	r2, r3, #4
 800b03e:	602a      	str	r2, [r5, #0]
 800b040:	681d      	ldr	r5, [r3, #0]
 800b042:	6862      	ldr	r2, [r4, #4]
 800b044:	2100      	movs	r1, #0
 800b046:	4628      	mov	r0, r5
 800b048:	f7f5 f8ca 	bl	80001e0 <memchr>
 800b04c:	b108      	cbz	r0, 800b052 <_printf_i+0x1ea>
 800b04e:	1b40      	subs	r0, r0, r5
 800b050:	6060      	str	r0, [r4, #4]
 800b052:	6863      	ldr	r3, [r4, #4]
 800b054:	6123      	str	r3, [r4, #16]
 800b056:	2300      	movs	r3, #0
 800b058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b05c:	e7aa      	b.n	800afb4 <_printf_i+0x14c>
 800b05e:	6923      	ldr	r3, [r4, #16]
 800b060:	462a      	mov	r2, r5
 800b062:	4649      	mov	r1, r9
 800b064:	4640      	mov	r0, r8
 800b066:	47d0      	blx	sl
 800b068:	3001      	adds	r0, #1
 800b06a:	d0ad      	beq.n	800afc8 <_printf_i+0x160>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	079b      	lsls	r3, r3, #30
 800b070:	d413      	bmi.n	800b09a <_printf_i+0x232>
 800b072:	68e0      	ldr	r0, [r4, #12]
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	4298      	cmp	r0, r3
 800b078:	bfb8      	it	lt
 800b07a:	4618      	movlt	r0, r3
 800b07c:	e7a6      	b.n	800afcc <_printf_i+0x164>
 800b07e:	2301      	movs	r3, #1
 800b080:	4632      	mov	r2, r6
 800b082:	4649      	mov	r1, r9
 800b084:	4640      	mov	r0, r8
 800b086:	47d0      	blx	sl
 800b088:	3001      	adds	r0, #1
 800b08a:	d09d      	beq.n	800afc8 <_printf_i+0x160>
 800b08c:	3501      	adds	r5, #1
 800b08e:	68e3      	ldr	r3, [r4, #12]
 800b090:	9903      	ldr	r1, [sp, #12]
 800b092:	1a5b      	subs	r3, r3, r1
 800b094:	42ab      	cmp	r3, r5
 800b096:	dcf2      	bgt.n	800b07e <_printf_i+0x216>
 800b098:	e7eb      	b.n	800b072 <_printf_i+0x20a>
 800b09a:	2500      	movs	r5, #0
 800b09c:	f104 0619 	add.w	r6, r4, #25
 800b0a0:	e7f5      	b.n	800b08e <_printf_i+0x226>
 800b0a2:	bf00      	nop
 800b0a4:	0800b5c9 	.word	0x0800b5c9
 800b0a8:	0800b5da 	.word	0x0800b5da

0800b0ac <__sflush_r>:
 800b0ac:	898a      	ldrh	r2, [r1, #12]
 800b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	0710      	lsls	r0, r2, #28
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	d458      	bmi.n	800b16c <__sflush_r+0xc0>
 800b0ba:	684b      	ldr	r3, [r1, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dc05      	bgt.n	800b0cc <__sflush_r+0x20>
 800b0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dc02      	bgt.n	800b0cc <__sflush_r+0x20>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	d0f9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0d8:	682f      	ldr	r7, [r5, #0]
 800b0da:	6a21      	ldr	r1, [r4, #32]
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	d032      	beq.n	800b146 <__sflush_r+0x9a>
 800b0e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	075a      	lsls	r2, r3, #29
 800b0e6:	d505      	bpl.n	800b0f4 <__sflush_r+0x48>
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	1ac0      	subs	r0, r0, r3
 800b0ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0ee:	b10b      	cbz	r3, 800b0f4 <__sflush_r+0x48>
 800b0f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0f2:	1ac0      	subs	r0, r0, r3
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0fa:	6a21      	ldr	r1, [r4, #32]
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b0      	blx	r6
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	d106      	bne.n	800b114 <__sflush_r+0x68>
 800b106:	6829      	ldr	r1, [r5, #0]
 800b108:	291d      	cmp	r1, #29
 800b10a:	d82b      	bhi.n	800b164 <__sflush_r+0xb8>
 800b10c:	4a29      	ldr	r2, [pc, #164]	; (800b1b4 <__sflush_r+0x108>)
 800b10e:	410a      	asrs	r2, r1
 800b110:	07d6      	lsls	r6, r2, #31
 800b112:	d427      	bmi.n	800b164 <__sflush_r+0xb8>
 800b114:	2200      	movs	r2, #0
 800b116:	6062      	str	r2, [r4, #4]
 800b118:	04d9      	lsls	r1, r3, #19
 800b11a:	6922      	ldr	r2, [r4, #16]
 800b11c:	6022      	str	r2, [r4, #0]
 800b11e:	d504      	bpl.n	800b12a <__sflush_r+0x7e>
 800b120:	1c42      	adds	r2, r0, #1
 800b122:	d101      	bne.n	800b128 <__sflush_r+0x7c>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b903      	cbnz	r3, 800b12a <__sflush_r+0x7e>
 800b128:	6560      	str	r0, [r4, #84]	; 0x54
 800b12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12c:	602f      	str	r7, [r5, #0]
 800b12e:	2900      	cmp	r1, #0
 800b130:	d0c9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b136:	4299      	cmp	r1, r3
 800b138:	d002      	beq.n	800b140 <__sflush_r+0x94>
 800b13a:	4628      	mov	r0, r5
 800b13c:	f7ff fbea 	bl	800a914 <_free_r>
 800b140:	2000      	movs	r0, #0
 800b142:	6360      	str	r0, [r4, #52]	; 0x34
 800b144:	e7c0      	b.n	800b0c8 <__sflush_r+0x1c>
 800b146:	2301      	movs	r3, #1
 800b148:	4628      	mov	r0, r5
 800b14a:	47b0      	blx	r6
 800b14c:	1c41      	adds	r1, r0, #1
 800b14e:	d1c8      	bne.n	800b0e2 <__sflush_r+0x36>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0c5      	beq.n	800b0e2 <__sflush_r+0x36>
 800b156:	2b1d      	cmp	r3, #29
 800b158:	d001      	beq.n	800b15e <__sflush_r+0xb2>
 800b15a:	2b16      	cmp	r3, #22
 800b15c:	d101      	bne.n	800b162 <__sflush_r+0xb6>
 800b15e:	602f      	str	r7, [r5, #0]
 800b160:	e7b1      	b.n	800b0c6 <__sflush_r+0x1a>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	e7ad      	b.n	800b0c8 <__sflush_r+0x1c>
 800b16c:	690f      	ldr	r7, [r1, #16]
 800b16e:	2f00      	cmp	r7, #0
 800b170:	d0a9      	beq.n	800b0c6 <__sflush_r+0x1a>
 800b172:	0793      	lsls	r3, r2, #30
 800b174:	680e      	ldr	r6, [r1, #0]
 800b176:	bf08      	it	eq
 800b178:	694b      	ldreq	r3, [r1, #20]
 800b17a:	600f      	str	r7, [r1, #0]
 800b17c:	bf18      	it	ne
 800b17e:	2300      	movne	r3, #0
 800b180:	eba6 0807 	sub.w	r8, r6, r7
 800b184:	608b      	str	r3, [r1, #8]
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	dd9c      	ble.n	800b0c6 <__sflush_r+0x1a>
 800b18c:	6a21      	ldr	r1, [r4, #32]
 800b18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b190:	4643      	mov	r3, r8
 800b192:	463a      	mov	r2, r7
 800b194:	4628      	mov	r0, r5
 800b196:	47b0      	blx	r6
 800b198:	2800      	cmp	r0, #0
 800b19a:	dc06      	bgt.n	800b1aa <__sflush_r+0xfe>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e78e      	b.n	800b0c8 <__sflush_r+0x1c>
 800b1aa:	4407      	add	r7, r0
 800b1ac:	eba8 0800 	sub.w	r8, r8, r0
 800b1b0:	e7e9      	b.n	800b186 <__sflush_r+0xda>
 800b1b2:	bf00      	nop
 800b1b4:	dfbffffe 	.word	0xdfbffffe

0800b1b8 <_fflush_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	690b      	ldr	r3, [r1, #16]
 800b1bc:	4605      	mov	r5, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	b913      	cbnz	r3, 800b1c8 <_fflush_r+0x10>
 800b1c2:	2500      	movs	r5, #0
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	b118      	cbz	r0, 800b1d2 <_fflush_r+0x1a>
 800b1ca:	6a03      	ldr	r3, [r0, #32]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <_fflush_r+0x1a>
 800b1ce:	f7ff f947 	bl	800a460 <__sinit>
 800b1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0f3      	beq.n	800b1c2 <_fflush_r+0xa>
 800b1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1dc:	07d0      	lsls	r0, r2, #31
 800b1de:	d404      	bmi.n	800b1ea <_fflush_r+0x32>
 800b1e0:	0599      	lsls	r1, r3, #22
 800b1e2:	d402      	bmi.n	800b1ea <_fflush_r+0x32>
 800b1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1e6:	f7ff fb85 	bl	800a8f4 <__retarget_lock_acquire_recursive>
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	f7ff ff5d 	bl	800b0ac <__sflush_r>
 800b1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1f4:	07da      	lsls	r2, r3, #31
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	d4e4      	bmi.n	800b1c4 <_fflush_r+0xc>
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	059b      	lsls	r3, r3, #22
 800b1fe:	d4e1      	bmi.n	800b1c4 <_fflush_r+0xc>
 800b200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b202:	f7ff fb78 	bl	800a8f6 <__retarget_lock_release_recursive>
 800b206:	e7dd      	b.n	800b1c4 <_fflush_r+0xc>

0800b208 <__swhatbuf_r>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	460c      	mov	r4, r1
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2900      	cmp	r1, #0
 800b212:	b096      	sub	sp, #88	; 0x58
 800b214:	4615      	mov	r5, r2
 800b216:	461e      	mov	r6, r3
 800b218:	da0d      	bge.n	800b236 <__swhatbuf_r+0x2e>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b220:	f04f 0100 	mov.w	r1, #0
 800b224:	bf0c      	ite	eq
 800b226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b22a:	2340      	movne	r3, #64	; 0x40
 800b22c:	2000      	movs	r0, #0
 800b22e:	6031      	str	r1, [r6, #0]
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	b016      	add	sp, #88	; 0x58
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	466a      	mov	r2, sp
 800b238:	f000 f848 	bl	800b2cc <_fstat_r>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	dbec      	blt.n	800b21a <__swhatbuf_r+0x12>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b24a:	4259      	negs	r1, r3
 800b24c:	4159      	adcs	r1, r3
 800b24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b252:	e7eb      	b.n	800b22c <__swhatbuf_r+0x24>

0800b254 <__smakebuf_r>:
 800b254:	898b      	ldrh	r3, [r1, #12]
 800b256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b258:	079d      	lsls	r5, r3, #30
 800b25a:	4606      	mov	r6, r0
 800b25c:	460c      	mov	r4, r1
 800b25e:	d507      	bpl.n	800b270 <__smakebuf_r+0x1c>
 800b260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2301      	movs	r3, #1
 800b26a:	6163      	str	r3, [r4, #20]
 800b26c:	b002      	add	sp, #8
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	ab01      	add	r3, sp, #4
 800b272:	466a      	mov	r2, sp
 800b274:	f7ff ffc8 	bl	800b208 <__swhatbuf_r>
 800b278:	9900      	ldr	r1, [sp, #0]
 800b27a:	4605      	mov	r5, r0
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff fbb5 	bl	800a9ec <_malloc_r>
 800b282:	b948      	cbnz	r0, 800b298 <__smakebuf_r+0x44>
 800b284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b288:	059a      	lsls	r2, r3, #22
 800b28a:	d4ef      	bmi.n	800b26c <__smakebuf_r+0x18>
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	f043 0302 	orr.w	r3, r3, #2
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	e7e3      	b.n	800b260 <__smakebuf_r+0xc>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	6020      	str	r0, [r4, #0]
 800b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	9b00      	ldr	r3, [sp, #0]
 800b2a4:	6163      	str	r3, [r4, #20]
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	6120      	str	r0, [r4, #16]
 800b2aa:	b15b      	cbz	r3, 800b2c4 <__smakebuf_r+0x70>
 800b2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f000 f81d 	bl	800b2f0 <_isatty_r>
 800b2b6:	b128      	cbz	r0, 800b2c4 <__smakebuf_r+0x70>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f023 0303 	bic.w	r3, r3, #3
 800b2be:	f043 0301 	orr.w	r3, r3, #1
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	431d      	orrs	r5, r3
 800b2c8:	81a5      	strh	r5, [r4, #12]
 800b2ca:	e7cf      	b.n	800b26c <__smakebuf_r+0x18>

0800b2cc <_fstat_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_fstat_r+0x20>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	f7f5 fb48 	bl	800096e <_fstat>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d102      	bne.n	800b2e8 <_fstat_r+0x1c>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	b103      	cbz	r3, 800b2e8 <_fstat_r+0x1c>
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20001ffc 	.word	0x20001ffc

0800b2f0 <_isatty_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d06      	ldr	r5, [pc, #24]	; (800b30c <_isatty_r+0x1c>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	f7f5 fb47 	bl	800098e <_isatty>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_isatty_r+0x1a>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_isatty_r+0x1a>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	20001ffc 	.word	0x20001ffc

0800b310 <_sbrk_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d06      	ldr	r5, [pc, #24]	; (800b32c <_sbrk_r+0x1c>)
 800b314:	2300      	movs	r3, #0
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	f7f5 fb50 	bl	80009c0 <_sbrk>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_sbrk_r+0x1a>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_sbrk_r+0x1a>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	20001ffc 	.word	0x20001ffc

0800b330 <_init>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr

0800b33c <_fini>:
 800b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33e:	bf00      	nop
 800b340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b342:	bc08      	pop	{r3}
 800b344:	469e      	mov	lr, r3
 800b346:	4770      	bx	lr
