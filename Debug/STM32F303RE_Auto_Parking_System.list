
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c580  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800c720  0800c720  0001c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cbf8  0800cbf8  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cbf8  0800cbf8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800cc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          000027a0  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002898  20002898  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fd78  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a7b  00000000  00000000  0003ff26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  000449a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001252  00000000  00000000  00046168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000257d7  00000000  00000000  000473ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020c70  00000000  00000000  0006cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d78f8  00000000  00000000  0008d801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000683c  00000000  00000000  001650fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c708 	.word	0x0800c708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	0800c708 	.word	0x0800c708

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <MX_FREERTOS_Init+0x6c>)
 8000286:	f008 f9cf 	bl	8008628 <osMutexNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <MX_FREERTOS_Init+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <MX_FREERTOS_Init+0x74>)
 8000292:	2100      	movs	r1, #0
 8000294:	4818      	ldr	r0, [pc, #96]	; (80002f8 <MX_FREERTOS_Init+0x78>)
 8000296:	f007 ff3f 	bl	8008118 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_FREERTOS_Init+0x7c>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <MX_FREERTOS_Init+0x80>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_FREERTOS_Init+0x84>)
 80002a6:	f007 ff37 	bl	8008118 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MX_FREERTOS_Init+0x88>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <MX_FREERTOS_Init+0x8c>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4816      	ldr	r0, [pc, #88]	; (8000310 <MX_FREERTOS_Init+0x90>)
 80002b6:	f007 ff2f 	bl	8008118 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <MX_FREERTOS_Init+0x94>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_FREERTOS_Init+0x98>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_FREERTOS_Init+0x9c>)
 80002c6:	f007 ff27 	bl	8008118 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <MX_FREERTOS_Init+0xa0>)
 80002ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <MX_FREERTOS_Init+0xa4>)
 80002d2:	f008 f887 	bl	80083e4 <osEventFlagsNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_FREERTOS_Init+0xa8>)
 80002da:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_FREERTOS_Init+0xac>)
 80002de:	f008 f881 	bl	80083e4 <osEventFlagsNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_FREERTOS_Init+0xb0>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	0800cb5c 	.word	0x0800cb5c
 80002f0:	20000124 	.word	0x20000124
 80002f4:	0800cacc 	.word	0x0800cacc
 80002f8:	08000335 	.word	0x08000335
 80002fc:	20000114 	.word	0x20000114
 8000300:	0800caf0 	.word	0x0800caf0
 8000304:	08000375 	.word	0x08000375
 8000308:	20000118 	.word	0x20000118
 800030c:	0800cb14 	.word	0x0800cb14
 8000310:	08000491 	.word	0x08000491
 8000314:	2000011c 	.word	0x2000011c
 8000318:	0800cb38 	.word	0x0800cb38
 800031c:	0800053d 	.word	0x0800053d
 8000320:	20000120 	.word	0x20000120
 8000324:	0800cb6c 	.word	0x0800cb6c
 8000328:	20000128 	.word	0x20000128
 800032c:	0800cb7c 	.word	0x0800cb7c
 8000330:	2000012c 	.word	0x2000012c

08000334 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 800033c:	480a      	ldr	r0, [pc, #40]	; (8000368 <DefaultTask+0x34>)
 800033e:	f001 ff9d 	bl	800227c <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000342:	480a      	ldr	r0, [pc, #40]	; (800036c <DefaultTask+0x38>)
 8000344:	f001 ffca 	bl	80022dc <ECU_Motor_GeneratePWM>

  /* Infinite loop */
  for(;;)
  {
	  //printf("DefaultTask is Running\n");
	  osThreadSuspend(Automatic_ParkingHandle);
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <DefaultTask+0x3c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f007 ffb3 	bl	80082b8 <osThreadSuspend>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 8000352:	f007 ff8b 	bl	800826c <osThreadGetId>
 8000356:	4603      	mov	r3, r0
 8000358:	4618      	mov	r0, r3
 800035a:	f007 ffad 	bl	80082b8 <osThreadSuspend>
    osDelay(1000);
 800035e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000362:	f008 f811 	bl	8008388 <osDelay>
	  osThreadSuspend(Automatic_ParkingHandle);
 8000366:	e7ef      	b.n	8000348 <DefaultTask+0x14>
 8000368:	20000058 	.word	0x20000058
 800036c:	20000048 	.word	0x20000048
 8000370:	20000120 	.word	0x20000120

08000374 <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
		  ECU_Busser_GeneratePWM(&busser);
	  }
	  else{
		  ECU_Busser_StopPWM(&busser);
	  }*/
	  printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
 800037c:	4832      	ldr	r0, [pc, #200]	; (8000448 <RTOS_Ultrasonics_Read+0xd4>)
 800037e:	f001 ff97 	bl	80022b0 <ECU_IR_IsActive>
 8000382:	4603      	mov	r3, r0
 8000384:	4619      	mov	r1, r3
 8000386:	4831      	ldr	r0, [pc, #196]	; (800044c <RTOS_Ultrasonics_Read+0xd8>)
 8000388:	f00b fa8a 	bl	800b8a0 <iprintf>
	  printf("IR_Left_Rear in = %d\n",ECU_IR_IsActive(&IR_Left_Rear));
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <RTOS_Ultrasonics_Read+0xdc>)
 800038e:	f001 ff8f 	bl	80022b0 <ECU_IR_IsActive>
 8000392:	4603      	mov	r3, r0
 8000394:	4619      	mov	r1, r3
 8000396:	482f      	ldr	r0, [pc, #188]	; (8000454 <RTOS_Ultrasonics_Read+0xe0>)
 8000398:	f00b fa82 	bl	800b8a0 <iprintf>

	  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 800039c:	4b2e      	ldr	r3, [pc, #184]	; (8000458 <RTOS_Ultrasonics_Read+0xe4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f008 f90d 	bl	80085c0 <osEventFlagsGet>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f003 0302 	and.w	r3, r3, #2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10c      	bne.n	80003ca <RTOS_Ultrasonics_Read+0x56>
	  {
		  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 80003b0:	482a      	ldr	r0, [pc, #168]	; (800045c <RTOS_Ultrasonics_Read+0xe8>)
 80003b2:	f002 faab 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003b6:	482a      	ldr	r0, [pc, #168]	; (8000460 <RTOS_Ultrasonics_Read+0xec>)
 80003b8:	f002 faa8 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003bc:	4829      	ldr	r0, [pc, #164]	; (8000464 <RTOS_Ultrasonics_Read+0xf0>)
 80003be:	f002 faa5 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 80003c2:	4829      	ldr	r0, [pc, #164]	; (8000468 <RTOS_Ultrasonics_Read+0xf4>)
 80003c4:	f002 faa2 	bl	800290c <ECU_Ultrasonic_Read>
 80003c8:	e015      	b.n	80003f6 <RTOS_Ultrasonics_Read+0x82>
	  }
	  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <RTOS_Ultrasonics_Read+0xe4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f008 f8f6 	bl	80085c0 <osEventFlagsGet>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d10b      	bne.n	80003f6 <RTOS_Ultrasonics_Read+0x82>
	  {
		  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 80003de:	4823      	ldr	r0, [pc, #140]	; (800046c <RTOS_Ultrasonics_Read+0xf8>)
 80003e0:	f002 fa94 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <RTOS_Ultrasonics_Read+0xec>)
 80003e6:	f002 fa91 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003ea:	481e      	ldr	r0, [pc, #120]	; (8000464 <RTOS_Ultrasonics_Read+0xf0>)
 80003ec:	f002 fa8e 	bl	800290c <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 80003f0:	481f      	ldr	r0, [pc, #124]	; (8000470 <RTOS_Ultrasonics_Read+0xfc>)
 80003f2:	f002 fa8b 	bl	800290c <ECU_Ultrasonic_Read>
	  else{}

	  //ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
	  //ECU_Ultrasonic_Read(&LeftRear_ultrasonic);

	  printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 80003f6:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	481e      	ldr	r0, [pc, #120]	; (8000478 <RTOS_Ultrasonics_Read+0x104>)
 80003fe:	f00b fa4f 	bl	800b8a0 <iprintf>
	  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	4619      	mov	r1, r3
 8000408:	481c      	ldr	r0, [pc, #112]	; (800047c <RTOS_Ultrasonics_Read+0x108>)
 800040a:	f00b fa49 	bl	800b8a0 <iprintf>
	  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	4619      	mov	r1, r3
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <RTOS_Ultrasonics_Read+0x10c>)
 8000416:	f00b fa43 	bl	800b8a0 <iprintf>
	  printf("LeftFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4619      	mov	r1, r3
 8000420:	4818      	ldr	r0, [pc, #96]	; (8000484 <RTOS_Ultrasonics_Read+0x110>)
 8000422:	f00b fa3d 	bl	800b8a0 <iprintf>
	  printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4619      	mov	r1, r3
 800042c:	4816      	ldr	r0, [pc, #88]	; (8000488 <RTOS_Ultrasonics_Read+0x114>)
 800042e:	f00b fa37 	bl	800b8a0 <iprintf>
	  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <RTOS_Ultrasonics_Read+0x100>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4619      	mov	r1, r3
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <RTOS_Ultrasonics_Read+0x118>)
 800043a:	f00b fa31 	bl	800b8a0 <iprintf>

    osDelay(70);
 800043e:	2046      	movs	r0, #70	; 0x46
 8000440:	f007 ffa2 	bl	8008388 <osDelay>
	  printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
 8000444:	e79a      	b.n	800037c <RTOS_Ultrasonics_Read+0x8>
 8000446:	bf00      	nop
 8000448:	20000068 	.word	0x20000068
 800044c:	0800c790 	.word	0x0800c790
 8000450:	20000070 	.word	0x20000070
 8000454:	0800c7a8 	.word	0x0800c7a8
 8000458:	20000128 	.word	0x20000128
 800045c:	20000018 	.word	0x20000018
 8000460:	20000000 	.word	0x20000000
 8000464:	2000003c 	.word	0x2000003c
 8000468:	2000000c 	.word	0x2000000c
 800046c:	20000030 	.word	0x20000030
 8000470:	20000024 	.word	0x20000024
 8000474:	200004f4 	.word	0x200004f4
 8000478:	0800c7c0 	.word	0x0800c7c0
 800047c:	0800c7e4 	.word	0x0800c7e4
 8000480:	0800c80c 	.word	0x0800c80c
 8000484:	0800c834 	.word	0x0800c834
 8000488:	0800c85c 	.word	0x0800c85c
 800048c:	0800c884 	.word	0x0800c884

08000490 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <RTOS_Car_Next_Step+0x98>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b57      	cmp	r3, #87	; 0x57
 800049e:	d116      	bne.n	80004ce <RTOS_Car_Next_Step+0x3e>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <RTOS_Car_Next_Step+0x9c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f007 ffee 	bl	8008488 <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <RTOS_Car_Next_Step+0x9c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2102      	movs	r1, #2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f008 f840 	bl	8008538 <osEventFlagsClear>
		  osThreadResume(Automatic_ParkingHandle);
 80004b8:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <RTOS_Car_Next_Step+0xa0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f007 ff2f 	bl	8008320 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <RTOS_Car_Next_Step+0xa4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f007 fef6 	bl	80082b8 <osThreadSuspend>
 80004cc:	e019      	b.n	8000502 <RTOS_Car_Next_Step+0x72>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <RTOS_Car_Next_Step+0x98>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b55      	cmp	r3, #85	; 0x55
 80004d4:	d115      	bne.n	8000502 <RTOS_Car_Next_Step+0x72>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <RTOS_Car_Next_Step+0x9c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2101      	movs	r1, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f007 ffd3 	bl	8008488 <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <RTOS_Car_Next_Step+0x9c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2102      	movs	r1, #2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f007 ffcd 	bl	8008488 <osEventFlagsSet>
		  osThreadResume(Automatic_ParkingHandle);
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <RTOS_Car_Next_Step+0xa0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f007 ff14 	bl	8008320 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <RTOS_Car_Next_Step+0xa4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f007 fedb 	bl	80082b8 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == MANUAL_CONTROL_MODE){
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <RTOS_Car_Next_Step+0x9c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f008 f85a 	bl	80085c0 <osEventFlagsGet>
 800050c:	4603      	mov	r3, r0
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d103      	bne.n	800051e <RTOS_Car_Next_Step+0x8e>
		  //printf("Mobile Control Mode\n");
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000516:	4904      	ldr	r1, [pc, #16]	; (8000528 <RTOS_Car_Next_Step+0x98>)
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <RTOS_Car_Next_Step+0xa8>)
 800051a:	f001 ffa5 	bl	8002468 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(150);
 800051e:	2096      	movs	r0, #150	; 0x96
 8000520:	f007 ff32 	bl	8008388 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000524:	e7b8      	b.n	8000498 <RTOS_Car_Next_Step+0x8>
 8000526:	bf00      	nop
 8000528:	20000064 	.word	0x20000064
 800052c:	20000128 	.word	0x20000128
 8000530:	20000120 	.word	0x20000120
 8000534:	2000011c 	.word	0x2000011c
 8000538:	20000048 	.word	0x20000048

0800053c <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
	uint8_t rear_ultrasonic = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 800054c:	4ba6      	ldr	r3, [pc, #664]	; (80007e8 <RTOS_Automatic_Parking+0x2ac>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b77      	cmp	r3, #119	; 0x77
 8000552:	d105      	bne.n	8000560 <RTOS_Automatic_Parking+0x24>
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000554:	4ba5      	ldr	r3, [pc, #660]	; (80007ec <RTOS_Automatic_Parking+0x2b0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f007 ffec 	bl	8008538 <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8000560:	4ba2      	ldr	r3, [pc, #648]	; (80007ec <RTOS_Automatic_Parking+0x2b0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f008 f82b 	bl	80085c0 <osEventFlagsGet>
 800056a:	4603      	mov	r3, r0
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	f040 81b1 	bne.w	80008d8 <RTOS_Automatic_Parking+0x39c>
	  {
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 8000576:	489e      	ldr	r0, [pc, #632]	; (80007f0 <RTOS_Automatic_Parking+0x2b4>)
 8000578:	f00b f9f8 	bl	800b96c <puts>

		  /* changing the speed to parking speed */
		  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 800057c:	499d      	ldr	r1, [pc, #628]	; (80007f4 <RTOS_Automatic_Parking+0x2b8>)
 800057e:	489e      	ldr	r0, [pc, #632]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 8000580:	f001 ff52 	bl	8002428 <ECU_Motor_ChangeSpeed>

		  /* Selected Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000584:	4b99      	ldr	r3, [pc, #612]	; (80007ec <RTOS_Automatic_Parking+0x2b0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f008 f819 	bl	80085c0 <osEventFlagsGet>
 800058e:	4603      	mov	r3, r0
 8000590:	f003 0302 	and.w	r3, r3, #2
 8000594:	2b00      	cmp	r3, #0
 8000596:	f040 80e5 	bne.w	8000764 <RTOS_Automatic_Parking+0x228>
		  {
			  printf("Parking Right Side\n");
 800059a:	4898      	ldr	r0, [pc, #608]	; (80007fc <RTOS_Automatic_Parking+0x2c0>)
 800059c:	f00b f9e6 	bl	800b96c <puts>

			  /* storing the ultra-sonic initial distance before parking */
			  front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 80005a0:	4b97      	ldr	r3, [pc, #604]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 80005a6:	4b96      	ldr	r3, [pc, #600]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	73bb      	strb	r3, [r7, #14]

			  /* MoveForward so it can Searching for Empty Slot */
			  ECU_Motor_MoveForward();
 80005ac:	f002 f80e 	bl	80025cc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 80005b0:	e00e      	b.n	80005d0 <RTOS_Automatic_Parking+0x94>
			  {
				  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 80005b2:	4b93      	ldr	r3, [pc, #588]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4892      	ldr	r0, [pc, #584]	; (8000804 <RTOS_Automatic_Parking+0x2c8>)
 80005ba:	f00b f971 	bl	800b8a0 <iprintf>
				  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 80005be:	4b90      	ldr	r3, [pc, #576]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4890      	ldr	r0, [pc, #576]	; (8000808 <RTOS_Automatic_Parking+0x2cc>)
 80005c6:	f00b f96b 	bl	800b8a0 <iprintf>
				  printf("Searching for Empty Slot\n");
 80005ca:	4890      	ldr	r0, [pc, #576]	; (800080c <RTOS_Automatic_Parking+0x2d0>)
 80005cc:	f00b f9ce 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 80005d0:	4b8b      	ldr	r3, [pc, #556]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	7bfa      	ldrb	r2, [r7, #15]
 80005d6:	320f      	adds	r2, #15
 80005d8:	4293      	cmp	r3, r2
 80005da:	d3ea      	bcc.n	80005b2 <RTOS_Automatic_Parking+0x76>
 80005dc:	4b88      	ldr	r3, [pc, #544]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	7bba      	ldrb	r2, [r7, #14]
 80005e2:	320f      	adds	r2, #15
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d3e4      	bcc.n	80005b2 <RTOS_Automatic_Parking+0x76>
			  }
			  printf("Found the Empty Slot\n");
 80005e8:	4889      	ldr	r0, [pc, #548]	; (8000810 <RTOS_Automatic_Parking+0x2d4>)
 80005ea:	f00b f9bf 	bl	800b96c <puts>

			  /* Delay to let the car move Forward to about car length */
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15)))
 80005ee:	e002      	b.n	80005f6 <RTOS_Automatic_Parking+0xba>
			  {
				  printf("Centering the car after Finding the Empty Slot\n");
 80005f0:	4888      	ldr	r0, [pc, #544]	; (8000814 <RTOS_Automatic_Parking+0x2d8>)
 80005f2:	f00b f9bb 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15)))
 80005f6:	4b82      	ldr	r3, [pc, #520]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	7bfa      	ldrb	r2, [r7, #15]
 80005fc:	320f      	adds	r2, #15
 80005fe:	4293      	cmp	r3, r2
 8000600:	d8f6      	bhi.n	80005f0 <RTOS_Automatic_Parking+0xb4>
 8000602:	4b7f      	ldr	r3, [pc, #508]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	7bba      	ldrb	r2, [r7, #14]
 8000608:	320f      	adds	r2, #15
 800060a:	4293      	cmp	r3, r2
 800060c:	d8f0      	bhi.n	80005f0 <RTOS_Automatic_Parking+0xb4>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 800060e:	f001 ffff 	bl	8002610 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000612:	2005      	movs	r0, #5
 8000614:	f002 fadc 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 8000618:	f002 f8ac 	bl	8002774 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 800061c:	497e      	ldr	r1, [pc, #504]	; (8000818 <RTOS_Automatic_Parking+0x2dc>)
 800061e:	4876      	ldr	r0, [pc, #472]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 8000620:	f001 ff02 	bl	8002428 <ECU_Motor_ChangeSpeed>

			  ECU_Motor_MoveReverse();
 8000624:	f001 fff4 	bl	8002610 <ECU_Motor_MoveReverse>
			  HAL_Delay(800);
 8000628:	f44f 7048 	mov.w	r0, #800	; 0x320
 800062c:	f002 fad0 	bl	8002bd0 <HAL_Delay>
			  //ECU_Motor_Stop();

			  /* MoveReverseRight so the car rear can enter the Empty Slot */
			  ECU_Motor_MoveReverseRight();
 8000630:	f002 f858 	bl	80026e4 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 8000634:	e00e      	b.n	8000654 <RTOS_Automatic_Parking+0x118>
			  {
				  //printf("IR_Right_Rear in = %d",ECU_IR_IsActive(&IR_Right_Rear));
				  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000636:	4b72      	ldr	r3, [pc, #456]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	4619      	mov	r1, r3
 800063c:	4872      	ldr	r0, [pc, #456]	; (8000808 <RTOS_Automatic_Parking+0x2cc>)
 800063e:	f00b f92f 	bl	800b8a0 <iprintf>
				  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000642:	4b6f      	ldr	r3, [pc, #444]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4619      	mov	r1, r3
 8000648:	4874      	ldr	r0, [pc, #464]	; (800081c <RTOS_Automatic_Parking+0x2e0>)
 800064a:	f00b f929 	bl	800b8a0 <iprintf>
				  printf("trying to Park 1 Reverse Right\n");
 800064e:	4874      	ldr	r0, [pc, #464]	; (8000820 <RTOS_Automatic_Parking+0x2e4>)
 8000650:	f00b f98c 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 8000654:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	2b1e      	cmp	r3, #30
 800065a:	d8ec      	bhi.n	8000636 <RTOS_Automatic_Parking+0xfa>
			  }
			  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 800065c:	4b68      	ldr	r3, [pc, #416]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4619      	mov	r1, r3
 8000662:	4869      	ldr	r0, [pc, #420]	; (8000808 <RTOS_Automatic_Parking+0x2cc>)
 8000664:	f00b f91c 	bl	800b8a0 <iprintf>
			  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4619      	mov	r1, r3
 800066e:	486b      	ldr	r0, [pc, #428]	; (800081c <RTOS_Automatic_Parking+0x2e0>)
 8000670:	f00b f916 	bl	800b8a0 <iprintf>
			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8000674:	f001 ffaa 	bl	80025cc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000678:	2005      	movs	r0, #5
 800067a:	f002 faa9 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 800067e:	f002 f879 	bl	8002774 <ECU_Motor_Stop>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 8000682:	f002 f853 	bl	800272c <ECU_Motor_MoveReverseLeft>
			  //while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
			  //while(((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] * 0.3)) && ((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] * 0.3)))
			  //while(ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] != ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX])
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8000686:	e00e      	b.n	80006a6 <RTOS_Automatic_Parking+0x16a>
			  {
				  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4619      	mov	r1, r3
 800068e:	4863      	ldr	r0, [pc, #396]	; (800081c <RTOS_Automatic_Parking+0x2e0>)
 8000690:	f00b f906 	bl	800b8a0 <iprintf>
				  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4619      	mov	r1, r3
 800069a:	485b      	ldr	r0, [pc, #364]	; (8000808 <RTOS_Automatic_Parking+0x2cc>)
 800069c:	f00b f900 	bl	800b8a0 <iprintf>
				  printf("trying to Park 2 Reverse Left\n");
 80006a0:	4860      	ldr	r0, [pc, #384]	; (8000824 <RTOS_Automatic_Parking+0x2e8>)
 80006a2:	f00b f963 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80006a6:	4b56      	ldr	r3, [pc, #344]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d903      	bls.n	80006b6 <RTOS_Automatic_Parking+0x17a>
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d8e8      	bhi.n	8000688 <RTOS_Automatic_Parking+0x14c>
			  }
			  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 80006b6:	4b52      	ldr	r3, [pc, #328]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <RTOS_Automatic_Parking+0x2e0>)
 80006be:	f00b f8ef 	bl	800b8a0 <iprintf>
			  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 80006c2:	4b4f      	ldr	r3, [pc, #316]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4619      	mov	r1, r3
 80006c8:	484f      	ldr	r0, [pc, #316]	; (8000808 <RTOS_Automatic_Parking+0x2cc>)
 80006ca:	f00b f8e9 	bl	800b8a0 <iprintf>

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 80006ce:	f001 ff7d 	bl	80025cc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80006d2:	2005      	movs	r0, #5
 80006d4:	f002 fa7c 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 80006d8:	f002 f84c 	bl	8002774 <ECU_Motor_Stop>

			  /* return the speed back to parking speed */
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 80006dc:	4945      	ldr	r1, [pc, #276]	; (80007f4 <RTOS_Automatic_Parking+0x2b8>)
 80006de:	4846      	ldr	r0, [pc, #280]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 80006e0:	f001 fea2 	bl	8002428 <ECU_Motor_ChangeSpeed>

			  /* MoveForwardRight to Adjust the position of the front of the car */
			  ECU_Motor_MoveForwardRight();
 80006e4:	f001 ffb6 	bl	8002654 <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 11))
 80006e8:	e002      	b.n	80006f0 <RTOS_Automatic_Parking+0x1b4>
			  {
				  printf("trying to Park 3 Forward Right\n");
 80006ea:	484f      	ldr	r0, [pc, #316]	; (8000828 <RTOS_Automatic_Parking+0x2ec>)
 80006ec:	f00b f93e 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 11))
 80006f0:	4b43      	ldr	r3, [pc, #268]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d903      	bls.n	8000700 <RTOS_Automatic_Parking+0x1c4>
 80006f8:	4b41      	ldr	r3, [pc, #260]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b0b      	cmp	r3, #11
 80006fe:	d8f4      	bhi.n	80006ea <RTOS_Automatic_Parking+0x1ae>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 8000700:	f001 ff86 	bl	8002610 <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000704:	2005      	movs	r0, #5
 8000706:	f002 fa63 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 800070a:	f002 f833 	bl	8002774 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 800070e:	4942      	ldr	r1, [pc, #264]	; (8000818 <RTOS_Automatic_Parking+0x2dc>)
 8000710:	4839      	ldr	r0, [pc, #228]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 8000712:	f001 fe89 	bl	8002428 <ECU_Motor_ChangeSpeed>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 8000716:	f002 f809 	bl	800272c <ECU_Motor_MoveReverseLeft>
			  HAL_Delay(300);
 800071a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800071e:	f002 fa57 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 8000722:	f002 f827 	bl	8002774 <ECU_Motor_Stop>

			  /* MoveReverse to Adjust the position better in the slot */
			  ECU_Motor_MoveReverse();
 8000726:	f001 ff73 	bl	8002610 <ECU_Motor_MoveReverse>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 800072a:	e002      	b.n	8000732 <RTOS_Automatic_Parking+0x1f6>
			  {
				  printf("try to Park 4 Reverse \n");
 800072c:	483f      	ldr	r0, [pc, #252]	; (800082c <RTOS_Automatic_Parking+0x2f0>)
 800072e:	f00b f91d 	bl	800b96c <puts>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 8000732:	4b33      	ldr	r3, [pc, #204]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	2b14      	cmp	r3, #20
 8000738:	d8f8      	bhi.n	800072c <RTOS_Automatic_Parking+0x1f0>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 800073a:	f001 ff47 	bl	80025cc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 800073e:	2005      	movs	r0, #5
 8000740:	f002 fa46 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_Stop();
 8000744:	f002 f816 	bl	8002774 <ECU_Motor_Stop>

			  /* terminating the Auto Parking mode */
			  printf("Finally ... the car should be parked successfully by now\n");
 8000748:	4839      	ldr	r0, [pc, #228]	; (8000830 <RTOS_Automatic_Parking+0x2f4>)
 800074a:	f00b f90f 	bl	800b96c <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <RTOS_Automatic_Parking+0x2b0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f007 feef 	bl	8008538 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 800075a:	4936      	ldr	r1, [pc, #216]	; (8000834 <RTOS_Automatic_Parking+0x2f8>)
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 800075e:	f001 fe63 	bl	8002428 <ECU_Motor_ChangeSpeed>
 8000762:	e0af      	b.n	80008c4 <RTOS_Automatic_Parking+0x388>
			  //Bluetooth_RX_Data = 'S';

		  }
		  /* Selected Left Side to Park */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <RTOS_Automatic_Parking+0x2b0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f007 ff29 	bl	80085c0 <osEventFlagsGet>
 800076e:	4603      	mov	r3, r0
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b02      	cmp	r3, #2
 8000776:	f040 80a5 	bne.w	80008c4 <RTOS_Automatic_Parking+0x388>
		  {
			  printf("Park Left Side\n");
 800077a:	482f      	ldr	r0, [pc, #188]	; (8000838 <RTOS_Automatic_Parking+0x2fc>)
 800077c:	f00b f8f6 	bl	800b96c <puts>
			  front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	73bb      	strb	r3, [r7, #14]
			  ECU_Motor_MoveForward();
 800078c:	f001 ff1e 	bl	80025cc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 8000790:	e002      	b.n	8000798 <RTOS_Automatic_Parking+0x25c>
			  {
				  printf("Searching for Empty Slot\n");
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <RTOS_Automatic_Parking+0x2d0>)
 8000794:	f00b f8ea 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	320c      	adds	r2, #12
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d3f6      	bcc.n	8000792 <RTOS_Automatic_Parking+0x256>
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	7bba      	ldrb	r2, [r7, #14]
 80007aa:	320c      	adds	r2, #12
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d3f0      	bcc.n	8000792 <RTOS_Automatic_Parking+0x256>
			  }
			  printf("Found the Empty Slot\n");
 80007b0:	4817      	ldr	r0, [pc, #92]	; (8000810 <RTOS_Automatic_Parking+0x2d4>)
 80007b2:	f00b f8db 	bl	800b96c <puts>

			  /* Delay to let the car move Forward to half the car length */
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 80007b6:	e002      	b.n	80007be <RTOS_Automatic_Parking+0x282>
			  {
				  printf("Center the car after Founding the Empty Slot\n");
 80007b8:	4820      	ldr	r0, [pc, #128]	; (800083c <RTOS_Automatic_Parking+0x300>)
 80007ba:	f00b f8d7 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	320c      	adds	r2, #12
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d8f6      	bhi.n	80007b8 <RTOS_Automatic_Parking+0x27c>
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <RTOS_Automatic_Parking+0x2c4>)
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	7bba      	ldrb	r2, [r7, #14]
 80007d0:	320c      	adds	r2, #12
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d8f0      	bhi.n	80007b8 <RTOS_Automatic_Parking+0x27c>
			  }
//			  ECU_Motor_MoveReverse();
//			  HAL_Delay(5);
			  ECU_Motor_Stop();
 80007d6:	f001 ffcd 	bl	8002774 <ECU_Motor_Stop>
			  //HAL_Delay(100);
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80007da:	490f      	ldr	r1, [pc, #60]	; (8000818 <RTOS_Automatic_Parking+0x2dc>)
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <RTOS_Automatic_Parking+0x2bc>)
 80007de:	f001 fe23 	bl	8002428 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_MoveReverseLeft();
 80007e2:	f001 ffa3 	bl	800272c <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 80007e6:	e02e      	b.n	8000846 <RTOS_Automatic_Parking+0x30a>
 80007e8:	20000064 	.word	0x20000064
 80007ec:	20000128 	.word	0x20000128
 80007f0:	0800c8a8 	.word	0x0800c8a8
 80007f4:	20000080 	.word	0x20000080
 80007f8:	20000048 	.word	0x20000048
 80007fc:	0800c8f4 	.word	0x0800c8f4
 8000800:	200004f4 	.word	0x200004f4
 8000804:	0800c7e4 	.word	0x0800c7e4
 8000808:	0800c80c 	.word	0x0800c80c
 800080c:	0800c908 	.word	0x0800c908
 8000810:	0800c924 	.word	0x0800c924
 8000814:	0800c93c 	.word	0x0800c93c
 8000818:	20000088 	.word	0x20000088
 800081c:	0800c884 	.word	0x0800c884
 8000820:	0800c96c 	.word	0x0800c96c
 8000824:	0800c98c 	.word	0x0800c98c
 8000828:	0800c9ac 	.word	0x0800c9ac
 800082c:	0800c9cc 	.word	0x0800c9cc
 8000830:	0800c9e4 	.word	0x0800c9e4
 8000834:	20000078 	.word	0x20000078
 8000838:	0800ca20 	.word	0x0800ca20
 800083c:	0800ca30 	.word	0x0800ca30
			  {
				  printf("try to Park 1 Reverse Left\n");
 8000840:	4827      	ldr	r0, [pc, #156]	; (80008e0 <RTOS_Automatic_Parking+0x3a4>)
 8000842:	f00b f893 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <RTOS_Automatic_Parking+0x3a8>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d903      	bls.n	8000856 <RTOS_Automatic_Parking+0x31a>
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <RTOS_Automatic_Parking+0x3a8>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	2b0f      	cmp	r3, #15
 8000854:	d8f4      	bhi.n	8000840 <RTOS_Automatic_Parking+0x304>
			  }

//			  ECU_Motor_MoveForward();
//			  HAL_Delay(5);
			  ECU_Motor_Stop();
 8000856:	f001 ff8d 	bl	8002774 <ECU_Motor_Stop>
			  //while(1){};
			  //HAL_Delay(100);
			  ECU_Motor_MoveReverseRight();
 800085a:	f001 ff43 	bl	80026e4 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 10))
 800085e:	e002      	b.n	8000866 <RTOS_Automatic_Parking+0x32a>
			  {
				  printf("try to Park 2 Reverse Right\n");
 8000860:	4821      	ldr	r0, [pc, #132]	; (80008e8 <RTOS_Automatic_Parking+0x3ac>)
 8000862:	f00b f883 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 10))
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <RTOS_Automatic_Parking+0x3a8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d8f8      	bhi.n	8000860 <RTOS_Automatic_Parking+0x324>
			  }
			  ECU_Motor_MoveForward();
 800086e:	f001 fead 	bl	80025cc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000872:	2005      	movs	r0, #5
 8000874:	f002 f9ac 	bl	8002bd0 <HAL_Delay>
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 8000878:	491c      	ldr	r1, [pc, #112]	; (80008ec <RTOS_Automatic_Parking+0x3b0>)
 800087a:	481d      	ldr	r0, [pc, #116]	; (80008f0 <RTOS_Automatic_Parking+0x3b4>)
 800087c:	f001 fdd4 	bl	8002428 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_Stop();
 8000880:	f001 ff78 	bl	8002774 <ECU_Motor_Stop>
			  ECU_Motor_MoveForwardLeft();
 8000884:	f001 ff0a 	bl	800269c <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 8000888:	e002      	b.n	8000890 <RTOS_Automatic_Parking+0x354>
			  {
				  printf("try to Park 3 Forward Left\n");
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <RTOS_Automatic_Parking+0x3b8>)
 800088c:	f00b f86e 	bl	800b96c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <RTOS_Automatic_Parking+0x3a8>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d8f8      	bhi.n	800088a <RTOS_Automatic_Parking+0x34e>
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <RTOS_Automatic_Parking+0x3a8>)
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d8f4      	bhi.n	800088a <RTOS_Automatic_Parking+0x34e>
			  }
//			  ECU_Motor_MoveReverse();
//			  HAL_Delay(5);
			  ECU_Motor_Stop();
 80008a0:	f001 ff68 	bl	8002774 <ECU_Motor_Stop>

			  printf("Finally ... the car should be parked successfully by now\n");
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <RTOS_Automatic_Parking+0x3bc>)
 80008a6:	f00b f861 	bl	800b96c <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <RTOS_Automatic_Parking+0x3c0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2101      	movs	r1, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 fe41 	bl	8008538 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 80008b6:	4912      	ldr	r1, [pc, #72]	; (8000900 <RTOS_Automatic_Parking+0x3c4>)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <RTOS_Automatic_Parking+0x3b4>)
 80008ba:	f001 fdb5 	bl	8002428 <ECU_Motor_ChangeSpeed>
			  Bluetooth_RX_Data = 'S';
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <RTOS_Automatic_Parking+0x3c8>)
 80008c0:	2253      	movs	r2, #83	; 0x53
 80008c2:	701a      	strb	r2, [r3, #0]
		  }
		  else{/* DO NOTHING */}

		  osThreadResume(car_next_stepHandle);
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <RTOS_Automatic_Parking+0x3cc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fd29 	bl	8008320 <osThreadResume>
		  osThreadSuspend(Automatic_ParkingHandle);
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <RTOS_Automatic_Parking+0x3d0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f007 fcf0 	bl	80082b8 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}
    osDelay(120000);
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <RTOS_Automatic_Parking+0x3d4>)
 80008da:	f007 fd55 	bl	8008388 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 80008de:	e635      	b.n	800054c <RTOS_Automatic_Parking+0x10>
 80008e0:	0800ca60 	.word	0x0800ca60
 80008e4:	200004f4 	.word	0x200004f4
 80008e8:	0800ca7c 	.word	0x0800ca7c
 80008ec:	20000080 	.word	0x20000080
 80008f0:	20000048 	.word	0x20000048
 80008f4:	0800ca98 	.word	0x0800ca98
 80008f8:	0800c9e4 	.word	0x0800c9e4
 80008fc:	20000128 	.word	0x20000128
 8000900:	20000078 	.word	0x20000078
 8000904:	20000064 	.word	0x20000064
 8000908:	2000011c 	.word	0x2000011c
 800090c:	20000120 	.word	0x20000120
 8000910:	0001d4c0 	.word	0x0001d4c0

08000914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <MX_GPIO_Init+0x158>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a4f      	ldr	r2, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a49      	ldr	r2, [pc, #292]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x158>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x158>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f002 fc3c 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin|LCD_DATA_2_Pin
 8000998:	2200      	movs	r2, #0
 800099a:	f643 4102 	movw	r1, #15362	; 0x3c02
 800099e:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x15c>)
 80009a0:	f002 fc36 	bl	8003210 <HAL_GPIO_WritePin>
                          |LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
 80009a8:	4831      	ldr	r0, [pc, #196]	; (8000a70 <MX_GPIO_Init+0x15c>)
 80009aa:	f002 fc31 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009b4:	482f      	ldr	r0, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x160>)
 80009b6:	f002 fc2b 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4828      	ldr	r0, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x160>)
 80009d2:	f002 fa7b 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 80009d6:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f002 fa6b 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_Left_Pin;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Left_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4819      	ldr	r0, [pc, #100]	; (8000a70 <MX_GPIO_Init+0x15c>)
 8000a0a:	f002 fa5f 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000a0e:	f643 4306 	movw	r3, #15366	; 0x3c06
 8000a12:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_GPIO_Init+0x15c>)
 8000a28:	f002 fa50 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 8000a2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0x160>)
 8000a46:	f002 fa41 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_RIGHT_Pin;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0x160>)
 8000a60:	f002 fa34 	bl	8002ecc <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400
 8000a74:	48000800 	.word	0x48000800

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f002 f872 	bl	8002b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f81e 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f7ff ff46 	bl	8000914 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a88:	f000 fa9a 	bl	8000fc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a8c:	f000 fb68 	bl	8001160 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a90:	f000 fc00 	bl	8001294 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a94:	f000 fc9a 	bl	80013cc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000a98:	f000 fd34 	bl	8001504 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000a9c:	f000 fe02 	bl	80016a4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000aa0:	f000 fec8 	bl	8001834 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000aa4:	f001 fac0 	bl	8002028 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000aa8:	f001 fa8e 	bl	8001fc8 <MX_UART4_Init>
  MX_TIM17_Init();
 8000aac:	f000 ff3c 	bl	8001928 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ab0:	f007 faca 	bl	8008048 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ab4:	f7ff fbe4 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ab8:	f007 fafa 	bl	80080b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <main+0x44>
	...

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0a6      	sub	sp, #152	; 0x98
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00b f82c 	bl	800bb2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2258      	movs	r2, #88	; 0x58
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00b f81e 	bl	800bb2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fb99 	bl	8003240 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b14:	f000 f84a 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fbd8 	bl	80042e8 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3e:	f000 f835 	bl	8000bac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <SystemClock_Config+0xc4>)
 8000b44:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fe23 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b78:	f000 f818 	bl	8000bac <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3798      	adds	r7, #152	; 0x98
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	01f0300a 	.word	0x01f0300a

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9a:	f001 fff9 	bl	8002b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	f002 f8c7 	bl	8002d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_InitTick+0xe0>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <HAL_InitTick+0xe0>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	61d3      	str	r3, [r2, #28]
 8000c24:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_InitTick+0xe0>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c30:	f107 0210 	add.w	r2, r7, #16
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fd8a 	bl	8004754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4a:	f003 fd3f 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8000c4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c52:	f003 fd3b 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <HAL_InitTick+0xe4>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c92:	f003 ffaf 	bl	8004bf4 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11b      	bne.n	8000cdc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000ca6:	f003 fffd 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb8:	2036      	movs	r0, #54	; 0x36
 8000cba:	f002 f881 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d808      	bhi.n	8000cd6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f002 f85d 	bl	8002d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_InitTick+0xf0>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e002      	b.n	8000cdc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	20000130 	.word	0x20000130
 8000cf4:	40001000 	.word	0x40001000
 8000cf8:	20000090 	.word	0x20000090

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8000d2e:	2205      	movs	r2, #5
 8000d30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8000d34:	f004 fc9a 	bl	800566c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000d3a:	f004 fc97 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000050c 	.word	0x2000050c
 8000d48:	20000180 	.word	0x20000180
 8000d4c:	200002fc 	.word	0x200002fc

08000d50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <TIM1_CC_IRQHandler+0x14>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <TIM1_CC_IRQHandler+0x18>)
 8000d5c:	f004 fc86 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000050c 	.word	0x2000050c
 8000d68:	20000180 	.word	0x20000180

08000d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <TIM2_IRQHandler+0x14>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <TIM2_IRQHandler+0x18>)
 8000d78:	f004 fc78 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000050c 	.word	0x2000050c
 8000d84:	200001cc 	.word	0x200001cc

08000d88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <TIM3_IRQHandler+0x14>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <TIM3_IRQHandler+0x18>)
 8000d94:	f004 fc6a 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000050c 	.word	0x2000050c
 8000da0:	20000218 	.word	0x20000218

08000da4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <TIM4_IRQHandler+0x14>)
 8000daa:	2203      	movs	r2, #3
 8000dac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <TIM4_IRQHandler+0x18>)
 8000db0:	f004 fc5c 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000050c 	.word	0x2000050c
 8000dbc:	20000264 	.word	0x20000264

08000dc0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <TIM8_CC_IRQHandler+0x14>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <TIM8_CC_IRQHandler+0x18>)
 8000dcc:	f004 fc4e 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000050c 	.word	0x2000050c
 8000dd8:	200002b0 	.word	0x200002b0

08000ddc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <UART4_IRQHandler+0x10>)
 8000de2:	f005 ff89 	bl	8006cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200003e0 	.word	0x200003e0

08000df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM6_DAC_IRQHandler+0x10>)
 8000df6:	f004 fc39 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000130 	.word	0x20000130

08000e04 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <Custom_ITM_sendChar_Ch0+0x48>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <Custom_ITM_sendChar_Ch0+0x48>)
 8000e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e18:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e26:	bf00      	nop
 8000e28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f8      	beq.n	8000e28 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000e36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edfc 	.word	0xe000edfc
 8000e50:	e0000e00 	.word	0xe0000e00

08000e54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
  }

  return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e009      	b.n	8000eb4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffab 	bl	8000e04 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf1      	blt.n	8000ea0 <_write+0x12>
  }
  return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_close>:

int _close(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f00a fe88 	bl	800bc74 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20010000 	.word	0x20010000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000017c 	.word	0x2000017c
 8000f98:	20002898 	.word	0x20002898

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09e      	sub	sp, #120	; 0x78
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	222c      	movs	r2, #44	; 0x2c
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f00a fd8f 	bl	800bb2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <MX_TIM1_Init+0x198>)
 8001010:	4a52      	ldr	r2, [pc, #328]	; (800115c <MX_TIM1_Init+0x19c>)
 8001012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001014:	4b50      	ldr	r3, [pc, #320]	; (8001158 <MX_TIM1_Init+0x198>)
 8001016:	2207      	movs	r2, #7
 8001018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <MX_TIM1_Init+0x198>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <MX_TIM1_Init+0x198>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <MX_TIM1_Init+0x198>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM1_Init+0x198>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_TIM1_Init+0x198>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103a:	4847      	ldr	r0, [pc, #284]	; (8001158 <MX_TIM1_Init+0x198>)
 800103c:	f003 fdda 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001046:	f7ff fdb1 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001054:	4619      	mov	r1, r3
 8001056:	4840      	ldr	r0, [pc, #256]	; (8001158 <MX_TIM1_Init+0x198>)
 8001058:	f004 fdd8 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001062:	f7ff fda3 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001066:	483c      	ldr	r0, [pc, #240]	; (8001158 <MX_TIM1_Init+0x198>)
 8001068:	f003 fe8c 	bl	8004d84 <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001072:	f7ff fd9b 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_TIM1_Init+0x198>)
 8001078:	f004 f88e 	bl	8005198 <HAL_TIM_IC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001082:	f7ff fd93 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001092:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001096:	4619      	mov	r1, r3
 8001098:	482f      	ldr	r0, [pc, #188]	; (8001158 <MX_TIM1_Init+0x198>)
 800109a:	f005 fc6b 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80010a4:	f7ff fd82 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80010ac:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b6:	2300      	movs	r3, #0
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4822      	ldr	r0, [pc, #136]	; (8001158 <MX_TIM1_Init+0x198>)
 80010d0:	f004 fc88 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80010da:	f7ff fd67 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e2:	2301      	movs	r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f2:	2204      	movs	r2, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_TIM1_Init+0x198>)
 80010f8:	f004 fbd7 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001102:	f7ff fd53 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x198>)
 800113c:	f005 fca6 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001146:	f7ff fd31 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x198>)
 800114c:	f000 fe02 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3778      	adds	r7, #120	; 0x78
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000180 	.word	0x20000180
 800115c:	40012c00 	.word	0x40012c00

08001160 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b092      	sub	sp, #72	; 0x48
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <MX_TIM2_Init+0x130>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_TIM2_Init+0x130>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <MX_TIM2_Init+0x130>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_TIM2_Init+0x130>)
 80011b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <MX_TIM2_Init+0x130>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_TIM2_Init+0x130>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c8:	4831      	ldr	r0, [pc, #196]	; (8001290 <MX_TIM2_Init+0x130>)
 80011ca:	f003 fd13 	bl	8004bf4 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011d4:	f7ff fcea 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011e2:	4619      	mov	r1, r3
 80011e4:	482a      	ldr	r0, [pc, #168]	; (8001290 <MX_TIM2_Init+0x130>)
 80011e6:	f004 fd11 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011f0:	f7ff fcdc 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_TIM2_Init+0x130>)
 80011f6:	f003 fdc5 	bl	8004d84 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001200:	f7ff fcd4 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <MX_TIM2_Init+0x130>)
 8001206:	f003 ffc7 	bl	8005198 <HAL_TIM_IC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001210:	f7ff fccc 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	4619      	mov	r1, r3
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <MX_TIM2_Init+0x130>)
 8001224:	f005 fba6 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800122e:	f7ff fcbd 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001232:	2360      	movs	r3, #96	; 0x60
 8001234:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001236:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800123a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <MX_TIM2_Init+0x130>)
 800124e:	f004 fbc9 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001258:	f7ff fca8 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2204      	movs	r2, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <MX_TIM2_Init+0x130>)
 8001274:	f004 fb19 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800127e:	f7ff fc95 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <MX_TIM2_Init+0x130>)
 8001284:	f000 fd66 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001288:	bf00      	nop
 800128a:	3748      	adds	r7, #72	; 0x48
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001cc 	.word	0x200001cc

08001294 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b092      	sub	sp, #72	; 0x48
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <MX_TIM3_Init+0x134>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012dc:	2207      	movs	r2, #7
 80012de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <MX_TIM3_Init+0x130>)
 80012fc:	f003 fc7a 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001306:	f7ff fc51 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001314:	4619      	mov	r1, r3
 8001316:	482b      	ldr	r0, [pc, #172]	; (80013c4 <MX_TIM3_Init+0x130>)
 8001318:	f004 fc78 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001322:	f7ff fc43 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001326:	4827      	ldr	r0, [pc, #156]	; (80013c4 <MX_TIM3_Init+0x130>)
 8001328:	f003 fd2c 	bl	8004d84 <HAL_TIM_PWM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001332:	f7ff fc3b 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001336:	4823      	ldr	r0, [pc, #140]	; (80013c4 <MX_TIM3_Init+0x130>)
 8001338:	f003 ff2e 	bl	8005198 <HAL_TIM_IC_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001342:	f7ff fc33 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_TIM3_Init+0x130>)
 8001356:	f005 fb0d 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001360:	f7ff fc24 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001368:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800136c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_TIM3_Init+0x130>)
 8001380:	f004 fb30 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800138a:	f7ff fc0f 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	2204      	movs	r2, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM3_Init+0x130>)
 80013a6:	f004 fa80 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80013b0:	f7ff fbfc 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM3_Init+0x130>)
 80013b6:	f000 fccd 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3748      	adds	r7, #72	; 0x48
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000218 	.word	0x20000218
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b092      	sub	sp, #72	; 0x48
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <MX_TIM4_Init+0x130>)
 800140e:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <MX_TIM4_Init+0x134>)
 8001410:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <MX_TIM4_Init+0x130>)
 8001414:	2207      	movs	r2, #7
 8001416:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <MX_TIM4_Init+0x130>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MX_TIM4_Init+0x130>)
 8001420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001424:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <MX_TIM4_Init+0x130>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <MX_TIM4_Init+0x130>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001432:	4832      	ldr	r0, [pc, #200]	; (80014fc <MX_TIM4_Init+0x130>)
 8001434:	f003 fbde 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800143e:	f7ff fbb5 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800144c:	4619      	mov	r1, r3
 800144e:	482b      	ldr	r0, [pc, #172]	; (80014fc <MX_TIM4_Init+0x130>)
 8001450:	f004 fbdc 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800145a:	f7ff fba7 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800145e:	4827      	ldr	r0, [pc, #156]	; (80014fc <MX_TIM4_Init+0x130>)
 8001460:	f003 fc90 	bl	8004d84 <HAL_TIM_PWM_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800146a:	f7ff fb9f 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_TIM4_Init+0x130>)
 8001470:	f003 fe92 	bl	8005198 <HAL_TIM_IC_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800147a:	f7ff fb97 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148a:	4619      	mov	r1, r3
 800148c:	481b      	ldr	r0, [pc, #108]	; (80014fc <MX_TIM4_Init+0x130>)
 800148e:	f005 fa71 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001498:	f7ff fb88 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149c:	2360      	movs	r3, #96	; 0x60
 800149e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 80014a0:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80014a4:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_TIM4_Init+0x130>)
 80014b8:	f004 fa94 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 80014c2:	f7ff fb73 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ca:	2301      	movs	r3, #1
 80014cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	2204      	movs	r2, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM4_Init+0x130>)
 80014de:	f004 f9e4 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 80014e8:	f7ff fb60 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM4_Init+0x130>)
 80014ee:	f000 fc31 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3748      	adds	r7, #72	; 0x48
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000264 	.word	0x20000264
 8001500:	40000800 	.word	0x40000800

08001504 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09e      	sub	sp, #120	; 0x78
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	222c      	movs	r2, #44	; 0x2c
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f00a faed 	bl	800bb2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <MX_TIM8_Init+0x198>)
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <MX_TIM8_Init+0x19c>)
 8001556:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <MX_TIM8_Init+0x198>)
 800155a:	2207      	movs	r2, #7
 800155c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <MX_TIM8_Init+0x198>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <MX_TIM8_Init+0x198>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <MX_TIM8_Init+0x198>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <MX_TIM8_Init+0x198>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <MX_TIM8_Init+0x198>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800157e:	4847      	ldr	r0, [pc, #284]	; (800169c <MX_TIM8_Init+0x198>)
 8001580:	f003 fb38 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800158a:	f7ff fb0f 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001598:	4619      	mov	r1, r3
 800159a:	4840      	ldr	r0, [pc, #256]	; (800169c <MX_TIM8_Init+0x198>)
 800159c:	f004 fb36 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015a6:	f7ff fb01 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015aa:	483c      	ldr	r0, [pc, #240]	; (800169c <MX_TIM8_Init+0x198>)
 80015ac:	f003 fbea 	bl	8004d84 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80015b6:	f7ff faf9 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80015ba:	4838      	ldr	r0, [pc, #224]	; (800169c <MX_TIM8_Init+0x198>)
 80015bc:	f003 fdec 	bl	8005198 <HAL_TIM_IC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80015c6:	f7ff faf1 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015da:	4619      	mov	r1, r3
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_TIM8_Init+0x198>)
 80015de:	f005 f9c9 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80015e8:	f7ff fae0 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ec:	2360      	movs	r3, #96	; 0x60
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80015f0:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80015f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fa:	2300      	movs	r3, #0
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <MX_TIM8_Init+0x198>)
 8001614:	f004 f9e6 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800161e:	f7ff fac5 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001636:	2204      	movs	r2, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_TIM8_Init+0x198>)
 800163c:	f004 f935 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001646:	f7ff fab1 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001662:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800166c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <MX_TIM8_Init+0x198>)
 8001680:	f005 fa04 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800168a:	f7ff fa8f 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <MX_TIM8_Init+0x198>)
 8001690:	f000 fb60 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001694:	bf00      	nop
 8001696:	3778      	adds	r7, #120	; 0x78
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002b0 	.word	0x200002b0
 80016a0:	40013400 	.word	0x40013400

080016a4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09e      	sub	sp, #120	; 0x78
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	222c      	movs	r2, #44	; 0x2c
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00a fa1d 	bl	800bb2c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <MX_TIM15_Init+0x188>)
 80016f4:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <MX_TIM15_Init+0x18c>)
 80016f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <MX_TIM15_Init+0x188>)
 80016fa:	2207      	movs	r2, #7
 80016fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <MX_TIM15_Init+0x188>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <MX_TIM15_Init+0x188>)
 8001706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <MX_TIM15_Init+0x188>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <MX_TIM15_Init+0x188>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <MX_TIM15_Init+0x188>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800171e:	4843      	ldr	r0, [pc, #268]	; (800182c <MX_TIM15_Init+0x188>)
 8001720:	f003 fa68 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800172a:	f7ff fa3f 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001734:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001738:	4619      	mov	r1, r3
 800173a:	483c      	ldr	r0, [pc, #240]	; (800182c <MX_TIM15_Init+0x188>)
 800173c:	f004 fa66 	bl	8005c0c <HAL_TIM_ConfigClockSource>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8001746:	f7ff fa31 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800174a:	4838      	ldr	r0, [pc, #224]	; (800182c <MX_TIM15_Init+0x188>)
 800174c:	f003 fb1a 	bl	8004d84 <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8001756:	f7ff fa29 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800175a:	4834      	ldr	r0, [pc, #208]	; (800182c <MX_TIM15_Init+0x188>)
 800175c:	f003 fd1c 	bl	8005198 <HAL_TIM_IC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001766:	f7ff fa21 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001772:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <MX_TIM15_Init+0x188>)
 800177a:	f005 f8fb 	bl	8006974 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8001784:	f7ff fa12 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001788:	2360      	movs	r3, #96	; 0x60
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 800178c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001790:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001792:	2300      	movs	r3, #0
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <MX_TIM15_Init+0x188>)
 80017b0:	f004 f918 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80017ba:	f7ff f9f7 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017c2:	2301      	movs	r3, #1
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d2:	2204      	movs	r2, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4815      	ldr	r0, [pc, #84]	; (800182c <MX_TIM15_Init+0x188>)
 80017d8:	f004 f867 	bl	80058aa <HAL_TIM_IC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80017e2:	f7ff f9e3 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM15_Init+0x188>)
 800180e:	f005 f93d 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 8001818:	f7ff f9c8 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM15_Init+0x188>)
 800181e:	f000 fa99 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001822:	bf00      	nop
 8001824:	3778      	adds	r7, #120	; 0x78
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002fc 	.word	0x200002fc
 8001830:	40014000 	.word	0x40014000

08001834 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b092      	sub	sp, #72	; 0x48
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	222c      	movs	r2, #44	; 0x2c
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00a f969 	bl	800bb2c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <MX_TIM16_Init+0xec>)
 800185c:	4a31      	ldr	r2, [pc, #196]	; (8001924 <MX_TIM16_Init+0xf0>)
 800185e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <MX_TIM16_Init+0xec>)
 8001862:	2207      	movs	r2, #7
 8001864:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_TIM16_Init+0xec>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <MX_TIM16_Init+0xec>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_TIM16_Init+0xec>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_TIM16_Init+0xec>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_TIM16_Init+0xec>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <MX_TIM16_Init+0xec>)
 8001888:	f003 f9b4 	bl	8004bf4 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001892:	f7ff f98b 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001896:	4822      	ldr	r0, [pc, #136]	; (8001920 <MX_TIM16_Init+0xec>)
 8001898:	f003 fa74 	bl	8004d84 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018a2:	f7ff f983 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 80018aa:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_TIM16_Init+0xec>)
 80018ce:	f004 f889 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80018d8:	f7ff f968 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM16_Init+0xec>)
 8001904:	f005 f8c2 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800190e:	f7ff f94d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM16_Init+0xec>)
 8001914:	f000 fa1e 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3748      	adds	r7, #72	; 0x48
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000348 	.word	0x20000348
 8001924:	40014400 	.word	0x40014400

08001928 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b092      	sub	sp, #72	; 0x48
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	222c      	movs	r2, #44	; 0x2c
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f00a f8ef 	bl	800bb2c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001950:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <MX_TIM17_Init+0xf0>)
 8001952:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001956:	2207      	movs	r2, #7
 8001958:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <MX_TIM17_Init+0xec>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <MX_TIM17_Init+0xec>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MX_TIM17_Init+0xec>)
 800197c:	f003 f93a 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001986:	f7ff f911 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800198a:	4822      	ldr	r0, [pc, #136]	; (8001a14 <MX_TIM17_Init+0xec>)
 800198c:	f003 f9fa 	bl	8004d84 <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001996:	f7ff f909 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800199e:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4814      	ldr	r0, [pc, #80]	; (8001a14 <MX_TIM17_Init+0xec>)
 80019c2:	f004 f80f 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80019cc:	f7ff f8ee 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM17_Init+0xec>)
 80019f8:	f005 f848 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001a02:	f7ff f8d3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM17_Init+0xec>)
 8001a08:	f000 f9a4 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3748      	adds	r7, #72	; 0x48
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000394 	.word	0x20000394
 8001a18:	40014800 	.word	0x40014800

08001a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b096      	sub	sp, #88	; 0x58
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4aa7      	ldr	r2, [pc, #668]	; (8001cd8 <HAL_TIM_Base_MspInit+0x2bc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d138      	bne.n	8001ab0 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3e:	4ba7      	ldr	r3, [pc, #668]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4aa6      	ldr	r2, [pc, #664]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4ba4      	ldr	r3, [pc, #656]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
 8001a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4ba1      	ldr	r3, [pc, #644]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	4aa0      	ldr	r2, [pc, #640]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a60:	6153      	str	r3, [r2, #20]
 8001a62:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a86:	4619      	mov	r1, r3
 8001a88:	4895      	ldr	r0, [pc, #596]	; (8001ce0 <HAL_TIM_Base_MspInit+0x2c4>)
 8001a8a:	f001 fa1f 	bl	8002ecc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2105      	movs	r1, #5
 8001a92:	2018      	movs	r0, #24
 8001a94:	f001 f978 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a98:	2018      	movs	r0, #24
 8001a9a:	f001 f991 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	201b      	movs	r0, #27
 8001aa4:	f001 f970 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001aa8:	201b      	movs	r0, #27
 8001aaa:	f001 f989 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001aae:	e146      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d131      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a87      	ldr	r2, [pc, #540]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a81      	ldr	r2, [pc, #516]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	6153      	str	r3, [r2, #20]
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aea:	2302      	movs	r3, #2
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afa:	2301      	movs	r3, #1
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f001 f9e0 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2105      	movs	r1, #5
 8001b10:	201c      	movs	r0, #28
 8001b12:	f001 f939 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b16:	201c      	movs	r0, #28
 8001b18:	f001 f952 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
}
 8001b1c:	e10f      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM3)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a70      	ldr	r2, [pc, #448]	; (8001ce4 <HAL_TIM_Base_MspInit+0x2c8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d131      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	61d3      	str	r3, [r2, #28]
 8001b34:	4b69      	ldr	r3, [pc, #420]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4a:	6153      	str	r3, [r2, #20]
 8001b4c:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b58:	2310      	movs	r3, #16
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f001 f9a9 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	201d      	movs	r0, #29
 8001b80:	f001 f902 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b84:	201d      	movs	r0, #29
 8001b86:	f001 f91b 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
}
 8001b8a:	e0d8      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM4)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <HAL_TIM_Base_MspInit+0x2cc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d132      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	6153      	str	r3, [r2, #20]
 8001bba:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001bd8:	230a      	movs	r3, #10
 8001bda:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f001 f971 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	201e      	movs	r0, #30
 8001bf0:	f001 f8ca 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f001 f8e3 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
}
 8001bfa:	e0a0      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM8)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_TIM_Base_MspInit+0x2d0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d130      	bne.n	8001c68 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c46:	2304      	movs	r3, #4
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4823      	ldr	r0, [pc, #140]	; (8001ce0 <HAL_TIM_Base_MspInit+0x2c4>)
 8001c52:	f001 f93b 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	202e      	movs	r0, #46	; 0x2e
 8001c5c:	f001 f894 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c60:	202e      	movs	r0, #46	; 0x2e
 8001c62:	f001 f8ad 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
}
 8001c66:	e06a      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM15)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <HAL_TIM_Base_MspInit+0x2d4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d142      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_Base_MspInit+0x2c0>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <HAL_TIM_Base_MspInit+0x2d8>)
 8001cc0:	f001 f904 	bl	8002ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2105      	movs	r1, #5
 8001cc8:	2018      	movs	r0, #24
 8001cca:	f001 f85d 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cce:	2018      	movs	r0, #24
 8001cd0:	f001 f876 	bl	8002dc0 <HAL_NVIC_EnableIRQ>
}
 8001cd4:	e033      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
 8001cd6:	bf00      	nop
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40013400 	.word	0x40013400
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_TIM_Base_MspInit+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10c      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0x300>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	6193      	str	r3, [r2, #24]
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
}
 8001d1a:	e010      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM17)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_TIM_Base_MspInit+0x334>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10b      	bne.n	8001d3e <HAL_TIM_Base_MspInit+0x322>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6193      	str	r3, [r2, #24]
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_TIM_Base_MspInit+0x330>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	bf00      	nop
 8001d40:	3758      	adds	r7, #88	; 0x58
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40014400 	.word	0x40014400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40014800 	.word	0x40014800

08001d54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b090      	sub	sp, #64	; 0x40
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a8b      	ldr	r2, [pc, #556]	; (8001fa0 <HAL_TIM_MspPostInit+0x24c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d11c      	bne.n	8001db0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a8a      	ldr	r2, [pc, #552]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d80:	6153      	str	r3, [r2, #20]
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d96:	2302      	movs	r3, #2
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	487f      	ldr	r0, [pc, #508]	; (8001fa8 <HAL_TIM_MspPostInit+0x254>)
 8001daa:	f001 f88f 	bl	8002ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001dae:	e0f2      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d11d      	bne.n	8001df6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b7a      	ldr	r3, [pc, #488]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a79      	ldr	r2, [pc, #484]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b77      	ldr	r3, [pc, #476]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de2:	2301      	movs	r3, #1
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f001 f86c 	bl	8002ecc <HAL_GPIO_Init>
}
 8001df4:	e0cf      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6c      	ldr	r2, [pc, #432]	; (8001fac <HAL_TIM_MspPostInit+0x258>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d11d      	bne.n	8001e3c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4a67      	ldr	r2, [pc, #412]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0a:	6153      	str	r3, [r2, #20]
 8001e0c:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e18:	2340      	movs	r3, #64	; 0x40
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e20:	2302      	movs	r3, #2
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f001 f849 	bl	8002ecc <HAL_GPIO_Init>
}
 8001e3a:	e0ac      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a5b      	ldr	r2, [pc, #364]	; (8001fb0 <HAL_TIM_MspPostInit+0x25c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11e      	bne.n	8001e84 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e70:	230a      	movs	r3, #10
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f001 f825 	bl	8002ecc <HAL_GPIO_Init>
}
 8001e82:	e088      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM8)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <HAL_TIM_MspPostInit+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e98:	6153      	str	r3, [r2, #20]
 8001e9a:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4839      	ldr	r0, [pc, #228]	; (8001fa8 <HAL_TIM_MspPostInit+0x254>)
 8001ec2:	f001 f803 	bl	8002ecc <HAL_GPIO_Init>
}
 8001ec6:	e066      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM15)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_TIM_MspPostInit+0x264>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11d      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001efc:	2301      	movs	r3, #1
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	482d      	ldr	r0, [pc, #180]	; (8001fbc <HAL_TIM_MspPostInit+0x268>)
 8001f08:	f000 ffe0 	bl	8002ecc <HAL_GPIO_Init>
}
 8001f0c:	e043      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM16)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <HAL_TIM_MspPostInit+0x26c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d11c      	bne.n	8001f52 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f22:	6153      	str	r3, [r2, #20]
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f30:	2310      	movs	r3, #16
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001f40:	2301      	movs	r3, #1
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481c      	ldr	r0, [pc, #112]	; (8001fbc <HAL_TIM_MspPostInit+0x268>)
 8001f4c:	f000 ffbe 	bl	8002ecc <HAL_GPIO_Init>
}
 8001f50:	e021      	b.n	8001f96 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM17)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_TIM_MspPostInit+0x270>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11c      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x242>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f66:	6153      	str	r3, [r2, #20]
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x250>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001f84:	2301      	movs	r3, #1
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f000 ff9b 	bl	8002ecc <HAL_GPIO_Init>
}
 8001f96:	bf00      	nop
 8001f98:	3740      	adds	r7, #64	; 0x40
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	40013400 	.word	0x40013400
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	40014800 	.word	0x40014800

08001fc8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_UART4_Init+0x58>)
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <MX_UART4_Init+0x5c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <MX_UART4_Init+0x58>)
 8001fd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_UART4_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_UART4_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_UART4_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_UART4_Init+0x58>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_UART4_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_UART4_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_UART4_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_UART4_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_UART4_Init+0x58>)
 800200c:	f004 fde2 	bl	8006bd4 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002016:	f7fe fdc9 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200003e0 	.word	0x200003e0
 8002024:	40004c00 	.word	0x40004c00

08002028 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_USART2_UART_Init+0x58>)
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <MX_USART2_UART_Init+0x5c>)
 8002030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002034:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_USART2_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_USART2_UART_Init+0x58>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_USART2_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_USART2_UART_Init+0x58>)
 800206c:	f004 fdb2 	bl	8006bd4 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002076:	f7fe fd99 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000468 	.word	0x20000468
 8002084:	40004400 	.word	0x40004400

08002088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <HAL_UART_MspInit+0xec>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d131      	bne.n	800210e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a32      	ldr	r2, [pc, #200]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020cc:	6153      	str	r3, [r2, #20]
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_UART_MspInit+0xf0>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80020ec:	2305      	movs	r3, #5
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4821      	ldr	r0, [pc, #132]	; (800217c <HAL_UART_MspInit+0xf4>)
 80020f8:	f000 fee8 	bl	8002ecc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2105      	movs	r1, #5
 8002100:	2034      	movs	r0, #52	; 0x34
 8002102:	f000 fe41 	bl	8002d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002106:	2034      	movs	r0, #52	; 0x34
 8002108:	f000 fe5a 	bl	8002dc0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800210c:	e02d      	b.n	800216a <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_UART_MspInit+0xf8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d128      	bne.n	800216a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_UART_MspInit+0xf0>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a16      	ldr	r2, [pc, #88]	; (8002178 <HAL_UART_MspInit+0xf0>)
 800211e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_UART_MspInit+0xf0>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_UART_MspInit+0xf0>)
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_UART_MspInit+0xf0>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213a:	6153      	str	r3, [r2, #20]
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_UART_MspInit+0xf0>)
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002148:	230c      	movs	r3, #12
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002158:	2307      	movs	r3, #7
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f000 feb1 	bl	8002ecc <HAL_GPIO_Init>
}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40004c00 	.word	0x40004c00
 8002178:	40021000 	.word	0x40021000
 800217c:	48000800 	.word	0x48000800
 8002180:	40004400 	.word	0x40004400

08002184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002188:	f7fe ff08 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	; (80021c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <LoopForever+0xe>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <LoopForever+0x16>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f009 fd65 	bl	800bc80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b6:	f7fe fc5f 	bl	8000a78 <main>

080021ba <LoopForever>:

LoopForever:
    b LoopForever
 80021ba:	e7fe      	b.n	80021ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80021c8:	0800cc00 	.word	0x0800cc00
  ldr r2, =_sbss
 80021cc:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80021d0:	20002898 	.word	0x20002898

080021d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC1_2_IRQHandler>
	...

080021d8 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if( BLUETOOTH_CONDITION(temp) ){
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b46      	cmp	r3, #70	; 0x46
 80021e6:	d037      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b42      	cmp	r3, #66	; 0x42
 80021ee:	d033      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b47      	cmp	r3, #71	; 0x47
 80021f6:	d02f      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b49      	cmp	r3, #73	; 0x49
 80021fe:	d02b      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b48      	cmp	r3, #72	; 0x48
 8002206:	d027      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b4a      	cmp	r3, #74	; 0x4a
 800220e:	d023      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b52      	cmp	r3, #82	; 0x52
 8002216:	d01f      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b4c      	cmp	r3, #76	; 0x4c
 800221e:	d01b      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b53      	cmp	r3, #83	; 0x53
 8002226:	d017      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b23      	cmp	r3, #35	; 0x23
 800222e:	d013      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d00f      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b21      	cmp	r3, #33	; 0x21
 800223e:	d00b      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b57      	cmp	r3, #87	; 0x57
 8002246:	d007      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b55      	cmp	r3, #85	; 0x55
 800224e:	d003      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x80>
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b77      	cmp	r3, #119	; 0x77
 8002256:	d103      	bne.n	8002260 <HAL_UART_RxCpltCallback+0x88>
		Bluetooth_RX_Data = temp;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_UART_RxCpltCallback+0xa0>)
 800225e:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	4904      	ldr	r1, [pc, #16]	; (8002274 <HAL_UART_RxCpltCallback+0x9c>)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f004 fd03 	bl	8006c70 <HAL_UART_Receive_IT>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200004f0 	.word	0x200004f0
 8002278:	20000064 	.word	0x20000064

0800227c <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e009      	b.n	80022a2 <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4904      	ldr	r1, [pc, #16]	; (80022ac <ECU_Bluetooth_ReciveData+0x30>)
 800229c:	f004 fce8 	bl	8006c70 <HAL_UART_Receive_IT>

	return ECU_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200004f0 	.word	0x200004f0

080022b0 <ECU_IR_IsActive>:
  * @param  ir_obj_t: IR handle       @ref ir_obj_t
  *
  * @retval status of the IR          IR_IDLE_STATE OR IR_Active_STATE
  *
  */
uint8_t ECU_IR_IsActive(ir_obj_t *ir_obj){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(ir_obj->port, ir_obj->pin) ? IR_IDLE_STATE: IR_Active_STATE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f000 ff8c 	bl	80031e0 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07e      	b.n	80023f0 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <ECU_Motor_GeneratePWM+0x34>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e045      	b.n	800239c <ECU_Motor_GeneratePWM+0xc0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d10a      	bne.n	800232e <ECU_Motor_GeneratePWM+0x52>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e036      	b.n	800239c <ECU_Motor_GeneratePWM+0xc0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b08      	cmp	r3, #8
 8002334:	d10a      	bne.n	800234c <ECU_Motor_GeneratePWM+0x70>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e027      	b.n	800239c <ECU_Motor_GeneratePWM+0xc0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d10a      	bne.n	800236a <ECU_Motor_GeneratePWM+0x8e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e018      	b.n	800239c <ECU_Motor_GeneratePWM+0xc0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d10a      	bne.n	8002388 <ECU_Motor_GeneratePWM+0xac>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e009      	b.n	800239c <ECU_Motor_GeneratePWM+0xc0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e025      	b.n	80023f0 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <ECU_Motor_GeneratePWM+0x11c>)
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d8:	ee17 2a90 	vmov	r2, s15
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f002 fd2d 	bl	8004e48 <HAL_TIM_PWM_Start>

	return ECU_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	000f4240 	.word	0x000f4240

080023fc <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e008      	b.n	8002420 <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f002 fe21 	bl	8005060 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <ECU_Motor_ChangeSpeed+0x16>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffda 	bl	80023fc <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff3f 	bl	80022dc <ECU_Motor_GeneratePWM>

	return ECU_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <ECU_Motor_NextStep+0x16>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e099      	b.n	80025b6 <ECU_Motor_NextStep+0x14e>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3b21      	subs	r3, #33	; 0x21
 8002488:	2b32      	cmp	r3, #50	; 0x32
 800248a:	f200 8090 	bhi.w	80025ae <ECU_Motor_NextStep+0x146>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <ECU_Motor_NextStep+0x2c>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080025a7 	.word	0x080025a7
 8002498:	080025af 	.word	0x080025af
 800249c:	08002597 	.word	0x08002597
 80024a0:	080025af 	.word	0x080025af
 80024a4:	080025af 	.word	0x080025af
 80024a8:	080025af 	.word	0x080025af
 80024ac:	080025af 	.word	0x080025af
 80024b0:	080025af 	.word	0x080025af
 80024b4:	080025af 	.word	0x080025af
 80024b8:	080025af 	.word	0x080025af
 80024bc:	080025af 	.word	0x080025af
 80024c0:	080025af 	.word	0x080025af
 80024c4:	080025af 	.word	0x080025af
 80024c8:	080025af 	.word	0x080025af
 80024cc:	080025af 	.word	0x080025af
 80024d0:	080025af 	.word	0x080025af
 80024d4:	080025af 	.word	0x080025af
 80024d8:	080025af 	.word	0x080025af
 80024dc:	080025af 	.word	0x080025af
 80024e0:	080025af 	.word	0x080025af
 80024e4:	080025af 	.word	0x080025af
 80024e8:	080025af 	.word	0x080025af
 80024ec:	080025af 	.word	0x080025af
 80024f0:	080025af 	.word	0x080025af
 80024f4:	080025af 	.word	0x080025af
 80024f8:	080025af 	.word	0x080025af
 80024fc:	080025af 	.word	0x080025af
 8002500:	080025af 	.word	0x080025af
 8002504:	080025af 	.word	0x080025af
 8002508:	080025af 	.word	0x080025af
 800250c:	080025af 	.word	0x080025af
 8002510:	0800259f 	.word	0x0800259f
 8002514:	080025af 	.word	0x080025af
 8002518:	08002567 	.word	0x08002567
 800251c:	080025af 	.word	0x080025af
 8002520:	080025af 	.word	0x080025af
 8002524:	080025af 	.word	0x080025af
 8002528:	08002561 	.word	0x08002561
 800252c:	0800256d 	.word	0x0800256d
 8002530:	08002579 	.word	0x08002579
 8002534:	08002573 	.word	0x08002573
 8002538:	0800257f 	.word	0x0800257f
 800253c:	080025af 	.word	0x080025af
 8002540:	0800258b 	.word	0x0800258b
 8002544:	080025af 	.word	0x080025af
 8002548:	080025af 	.word	0x080025af
 800254c:	080025af 	.word	0x080025af
 8002550:	080025af 	.word	0x080025af
 8002554:	080025af 	.word	0x080025af
 8002558:	08002585 	.word	0x08002585
 800255c:	08002591 	.word	0x08002591
	{
		case FORWARD:       ECU_Motor_MoveForward     (); break;
 8002560:	f000 f834 	bl	80025cc <ECU_Motor_MoveForward>
 8002564:	e026      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case REVERSE:       ECU_Motor_MoveReverse     (); break;
 8002566:	f000 f853 	bl	8002610 <ECU_Motor_MoveReverse>
 800256a:	e023      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (); break;
 800256c:	f000 f896 	bl	800269c <ECU_Motor_MoveForwardLeft>
 8002570:	e020      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(); break;
 8002572:	f000 f86f 	bl	8002654 <ECU_Motor_MoveForwardRight>
 8002576:	e01d      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (); break;
 8002578:	f000 f8d8 	bl	800272c <ECU_Motor_MoveReverseLeft>
 800257c:	e01a      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(); break;
 800257e:	f000 f8b1 	bl	80026e4 <ECU_Motor_MoveReverseRight>
 8002582:	e017      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case RIGHT:         ECU_Motor_MoveRight       (); break;
 8002584:	f000 f91a 	bl	80027bc <ECU_Motor_MoveRight>
 8002588:	e014      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case LEFT:          ECU_Motor_MoveLeft        (); break;
 800258a:	f000 f941 	bl	8002810 <ECU_Motor_MoveLeft>
 800258e:	e011      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case STOP:          ECU_Motor_Stop            (); break;
 8002590:	f000 f8f0 	bl	8002774 <ECU_Motor_Stop>
 8002594:	e00e      	b.n	80025b4 <ECU_Motor_NextStep+0x14c>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8002596:	490a      	ldr	r1, [pc, #40]	; (80025c0 <ECU_Motor_NextStep+0x158>)
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff45 	bl	8002428 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800259e:	4909      	ldr	r1, [pc, #36]	; (80025c4 <ECU_Motor_NextStep+0x15c>)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff41 	bl	8002428 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <ECU_Motor_NextStep+0x160>)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff3d 	bl	8002428 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (); break;
 80025ae:	f000 f8e1 	bl	8002774 <ECU_Motor_Stop>
 80025b2:	bf00      	nop
	}

	return ECU_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000078 	.word	0x20000078
 80025c4:	20000080 	.word	0x20000080
 80025c8:	20000088 	.word	0x20000088

080025cc <ECU_Motor_MoveForward>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0


	//printf("Motor_MoveForward\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <ECU_Motor_MoveForward+0x40>)
 80025d8:	f000 fe1a 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e2:	480a      	ldr	r0, [pc, #40]	; (800260c <ECU_Motor_MoveForward+0x40>)
 80025e4:	f000 fe14 	bl	8003210 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f2:	f000 fe0d 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f000 fe06 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	48000800 	.word	0x48000800

08002610 <ECU_Motor_MoveReverse>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0


	//printf("MoveReverse\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <ECU_Motor_MoveReverse+0x40>)
 800261c:	f000 fdf8 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002626:	480a      	ldr	r0, [pc, #40]	; (8002650 <ECU_Motor_MoveReverse+0x40>)
 8002628:	f000 fdf2 	bl	8003210 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002636:	f000 fdeb 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002644:	f000 fde4 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	48000800 	.word	0x48000800

08002654 <ECU_Motor_MoveForwardRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

	//printf("MoveForwardRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265e:	480e      	ldr	r0, [pc, #56]	; (8002698 <ECU_Motor_MoveForwardRight+0x44>)
 8002660:	f000 fdd6 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800266a:	480b      	ldr	r0, [pc, #44]	; (8002698 <ECU_Motor_MoveForwardRight+0x44>)
 800266c:	f000 fdd0 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	f000 faad 	bl	8002bd0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800267c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002680:	f000 fdc6 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268e:	f000 fdbf 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	48000800 	.word	0x48000800

0800269c <ECU_Motor_MoveForwardLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(){
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0

	//printf("MoveForwardLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <ECU_Motor_MoveForwardLeft+0x44>)
 80026a8:	f000 fdb2 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b2:	480b      	ldr	r0, [pc, #44]	; (80026e0 <ECU_Motor_MoveForwardLeft+0x44>)
 80026b4:	f000 fdac 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	f000 fa89 	bl	8002bd0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c8:	f000 fda2 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f000 fd9b 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	48000800 	.word	0x48000800

080026e4 <ECU_Motor_MoveReverseRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0

	//printf("MoveReverseRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80026e8:	2201      	movs	r2, #1
 80026ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ee:	480e      	ldr	r0, [pc, #56]	; (8002728 <ECU_Motor_MoveReverseRight+0x44>)
 80026f0:	f000 fd8e 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fa:	480b      	ldr	r0, [pc, #44]	; (8002728 <ECU_Motor_MoveReverseRight+0x44>)
 80026fc:	f000 fd88 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	f000 fa65 	bl	8002bd0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002706:	2200      	movs	r2, #0
 8002708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f000 fd7e 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271e:	f000 fd77 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	48000800 	.word	0x48000800

0800272c <ECU_Motor_MoveReverseLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

	//printf("MoveReverseLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002736:	480e      	ldr	r0, [pc, #56]	; (8002770 <ECU_Motor_MoveReverseLeft+0x44>)
 8002738:	f000 fd6a 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002742:	480b      	ldr	r0, [pc, #44]	; (8002770 <ECU_Motor_MoveReverseLeft+0x44>)
 8002744:	f000 fd64 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002748:	2064      	movs	r0, #100	; 0x64
 800274a:	f000 fa41 	bl	8002bd0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002758:	f000 fd5a 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f000 fd53 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	48000800 	.word	0x48000800

08002774 <ECU_Motor_Stop>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(){
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

	//printf("Stop\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <ECU_Motor_Stop+0x44>)
 8002780:	f000 fd46 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <ECU_Motor_Stop+0x44>)
 800278c:	f000 fd40 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002790:	2032      	movs	r0, #50	; 0x32
 8002792:	f000 fa1d 	bl	8002bd0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002796:	2201      	movs	r2, #1
 8002798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800279c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a0:	f000 fd36 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ae:	f000 fd2f 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	48000800 	.word	0x48000800

080027bc <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e01a      	b.n	8002804 <ECU_Motor_MoveRight+0x48>

	//printf("MoveRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80027ce:	2201      	movs	r2, #1
 80027d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <ECU_Motor_MoveRight+0x50>)
 80027d6:	f000 fd1b 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e0:	480a      	ldr	r0, [pc, #40]	; (800280c <ECU_Motor_MoveRight+0x50>)
 80027e2:	f000 fd15 	bl	8003210 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f000 fd0e 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fe:	f000 fd07 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	48000800 	.word	0x48000800

08002810 <ECU_Motor_MoveLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0

	//printf("MoveLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800281a:	480d      	ldr	r0, [pc, #52]	; (8002850 <ECU_Motor_MoveLeft+0x40>)
 800281c:	f000 fcf8 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002826:	480a      	ldr	r0, [pc, #40]	; (8002850 <ECU_Motor_MoveLeft+0x40>)
 8002828:	f000 fcf2 	bl	8003210 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f000 fceb 	bl	8003210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002844:	f000 fce4 	bl	8003210 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	48000800 	.word	0x48000800

08002854 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b085      	sub	sp, #20
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7f1b      	ldrb	r3, [r3, #28]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d145      	bne.n	80028f0 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_TIM_IC_CaptureCallback+0xa8>)
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d114      	bne.n	800289e <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002874:	2100      	movs	r1, #0
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f002 fbf2 	bl	8005060 <HAL_TIM_PWM_Stop>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002886:	4413      	add	r3, r2
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	4611      	mov	r1, r2
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002892:	440a      	add	r2, r1
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8e0 	bl	8002a5c <IC_first_Capture>
		}

	}
	else{/* Do Nothing */}

}
 800289c:	e028      	b.n	80028f0 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_TIM_IC_CaptureCallback+0xa8>)
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d120      	bne.n	80028f0 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_TIM_IC_CaptureCallback+0xac>)
 80028b8:	1899      	adds	r1, r3, r2
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80028c4:	441a      	add	r2, r3
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80028d0:	4418      	add	r0, r3
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461c      	mov	r4, r3
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_TIM_IC_CaptureCallback+0xa8>)
 80028dc:	4423      	add	r3, r4
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4603      	mov	r3, r0
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8e4 	bl	8002ab0 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80028e8:	2104      	movs	r1, #4
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f002 fe00 	bl	80054f0 <HAL_TIM_IC_Stop_IT>
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	2000050c 	.word	0x2000050c
 80028fc:	20000510 	.word	0x20000510
 8002900:	20000518 	.word	0x20000518
 8002904:	20000530 	.word	0x20000530
 8002908:	20000548 	.word	0x20000548

0800290c <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 800291e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002948 <ECU_Ultrasonic_Read+0x3c>
 8002922:	f242 7110 	movw	r1, #10000	; 0x2710
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f810 	bl	800294c <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f002 fc90 	bl	800525c <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	3a83126f 	.word	0x3a83126f

0800294c <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e077      	b.n	8002a54 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <ECU_Ultrasonic_GenerateTrigger+0x36>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e045      	b.n	8002a0e <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b04      	cmp	r3, #4
 8002988:	d10a      	bne.n	80029a0 <ECU_Ultrasonic_GenerateTrigger+0x54>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e036      	b.n	8002a0e <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10a      	bne.n	80029be <ECU_Ultrasonic_GenerateTrigger+0x72>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e027      	b.n	8002a0e <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d10a      	bne.n	80029dc <ECU_Ultrasonic_GenerateTrigger+0x90>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e018      	b.n	8002a0e <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d10a      	bne.n	80029fa <ECU_Ultrasonic_GenerateTrigger+0xae>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	e009      	b.n	8002a0e <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01e      	b.n	8002a54 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3c:	ee17 2a90 	vmov	r2, s15
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f002 f9fb 	bl	8004e48 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002a68:	2104      	movs	r1, #4
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f003 f998 	bl	8005da0 <HAL_TIM_ReadCapturedValue>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a94:	621a      	str	r2, [r3, #32]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0220 	orr.w	r2, r2, #32
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002abe:	2104      	movs	r1, #4
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f003 f96d 	bl	8005da0 <HAL_TIM_ReadCapturedValue>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d307      	bcc.n	8002af0 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1ad2      	subs	r2, r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e009      	b.n	8002b04 <IC_second_Capture+0x54>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002afe:	33ff      	adds	r3, #255	; 0xff
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	6013      	str	r3, [r2, #0]
		//printf("sensor %d --------> overflow\n",sensor_index+1);
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b10:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002b58 <IC_second_Capture+0xa8>
 8002b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <IC_second_Capture+0xac>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b24:	ee17 1a90 	vmov	r1, s15
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <IC_second_Capture+0xb0>)
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b42:	621a      	str	r2, [r3, #32]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a12      	ldr	r2, [r2, #32]
 8002b4e:	621a      	str	r2, [r3, #32]
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	42680000 	.word	0x42680000
 8002b5c:	2000050c 	.word	0x2000050c
 8002b60:	200004f4 	.word	0x200004f4

08002b64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_Init+0x28>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <HAL_Init+0x28>)
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f000 f8fc 	bl	8002d72 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7a:	200f      	movs	r0, #15
 8002b7c:	f7fe f844 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b80:	f7fe f81a 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000

08002b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x20>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x24>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_IncTick+0x24>)
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000094 	.word	0x20000094
 8002bb4:	20000560 	.word	0x20000560

08002bb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_GetTick+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000560 	.word	0x20000560

08002bd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff ffee 	bl	8002bb8 <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d005      	beq.n	8002bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_Delay+0x44>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002bf6:	bf00      	nop
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d8f7      	bhi.n	8002bf8 <HAL_Delay+0x28>
  {
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000094 	.word	0x20000094

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff4c 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9a:	f7ff ff61 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	6978      	ldr	r0, [r7, #20]
 8002da6:	f7ff ffb1 	bl	8002d0c <NVIC_EncodePriority>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff80 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff54 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d008      	beq.n	8002e00 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2204      	movs	r2, #4
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e020      	b.n	8002e42 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020e 	bic.w	r2, r2, #14
 8002e0e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d005      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2204      	movs	r2, #4
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e027      	b.n	8002ec0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
    } 
  }
  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eda:	e160      	b.n	800319e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8152 	beq.w	8003198 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d005      	beq.n	8002f0c <HAL_GPIO_Init+0x40>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d130      	bne.n	8002f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f42:	2201      	movs	r2, #1
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 0201 	and.w	r2, r3, #1
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d017      	beq.n	8002faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d123      	bne.n	8002ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	6939      	ldr	r1, [r7, #16]
 8002ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0203 	and.w	r2, r3, #3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80ac 	beq.w	8003198 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <HAL_GPIO_Init+0x2f0>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a5d      	ldr	r2, [pc, #372]	; (80031bc <HAL_GPIO_Init+0x2f0>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_GPIO_Init+0x2f0>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_GPIO_Init+0x2f4>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003082:	d025      	beq.n	80030d0 <HAL_GPIO_Init+0x204>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a4f      	ldr	r2, [pc, #316]	; (80031c4 <HAL_GPIO_Init+0x2f8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01f      	beq.n	80030cc <HAL_GPIO_Init+0x200>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <HAL_GPIO_Init+0x2fc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d019      	beq.n	80030c8 <HAL_GPIO_Init+0x1fc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a4d      	ldr	r2, [pc, #308]	; (80031cc <HAL_GPIO_Init+0x300>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d013      	beq.n	80030c4 <HAL_GPIO_Init+0x1f8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4c      	ldr	r2, [pc, #304]	; (80031d0 <HAL_GPIO_Init+0x304>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00d      	beq.n	80030c0 <HAL_GPIO_Init+0x1f4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <HAL_GPIO_Init+0x308>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <HAL_GPIO_Init+0x1f0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_GPIO_Init+0x30c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_GPIO_Init+0x1ec>
 80030b4:	2306      	movs	r3, #6
 80030b6:	e00c      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030b8:	2307      	movs	r3, #7
 80030ba:	e00a      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030bc:	2305      	movs	r3, #5
 80030be:	e008      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030c4:	2303      	movs	r3, #3
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x206>
 80030d0:	2300      	movs	r3, #0
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e2:	4937      	ldr	r1, [pc, #220]	; (80031c0 <HAL_GPIO_Init+0x2f4>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_GPIO_Init+0x310>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_GPIO_Init+0x310>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800311a:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_GPIO_Init+0x310>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800313e:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_GPIO_Init+0x310>)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_GPIO_Init+0x310>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003168:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_GPIO_Init+0x310>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_GPIO_Init+0x310>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_GPIO_Init+0x310>)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f ae97 	bne.w	8002edc <HAL_GPIO_Init+0x10>
  }
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010000 	.word	0x40010000
 80031c4:	48000400 	.word	0x48000400
 80031c8:	48000800 	.word	0x48000800
 80031cc:	48000c00 	.word	0x48000c00
 80031d0:	48001000 	.word	0x48001000
 80031d4:	48001400 	.word	0x48001400
 80031d8:	48001800 	.word	0x48001800
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800322c:	e002      	b.n	8003234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003246:	af00      	add	r7, sp, #0
 8003248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003250:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f001 b83a 	b.w	80042da <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 816f 	beq.w	800355a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800327c:	4bb5      	ldr	r3, [pc, #724]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003288:	4bb2      	ldr	r3, [pc, #712]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d15c      	bne.n	800334e <HAL_RCC_OscConfig+0x10e>
 8003294:	4baf      	ldr	r3, [pc, #700]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d155      	bne.n	800334e <HAL_RCC_OscConfig+0x10e>
 80032a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_RCC_OscConfig+0x94>
 80032ce:	4ba1      	ldr	r3, [pc, #644]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	e015      	b.n	8003300 <HAL_RCC_OscConfig+0xc0>
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80032e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032fc:	4b95      	ldr	r3, [pc, #596]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003304:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003308:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003314:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8111 	beq.w	8003558 <HAL_RCC_OscConfig+0x318>
 8003336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8108 	bne.w	8003558 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f000 bfc6 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x12e>
 8003360:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e036      	b.n	80033dc <HAL_RCC_OscConfig+0x19c>
 800336e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x158>
 800337e:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a74      	ldr	r2, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a71      	ldr	r2, [pc, #452]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e021      	b.n	80033dc <HAL_RCC_OscConfig+0x19c>
 8003398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x184>
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a66      	ldr	r2, [pc, #408]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0x19c>
 80033c4:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a62      	ldr	r2, [pc, #392]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b60      	ldr	r3, [pc, #384]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5f      	ldr	r2, [pc, #380]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d059      	beq.n	80034a0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7ff fbe4 	bl	8002bb8 <HAL_GetTick>
 80033f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f6:	f7ff fbdf 	bl	8002bb8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d902      	bls.n	800340c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	f000 bf67 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 800340c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003410:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003420:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0x1fe>
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x22a>
 800343e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003442:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003456:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800345a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003472:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800347e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003482:	fab2 f282 	clz	r2, r2
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	f042 0220 	orr.w	r2, r2, #32
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f002 021f 	and.w	r2, r2, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ab      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1b6>
 800349e:	e05c      	b.n	800355a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff fb8a 	bl	8002bb8 <HAL_GetTick>
 80034a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034aa:	f7ff fb85 	bl	8002bb8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d902      	bls.n	80034c0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	f000 bf0d 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 80034c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80034d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2b2>
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x2de>
 80034f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800350e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_RCC_OscConfig+0x314>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003522:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003526:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800352a:	fa92 f2a2 	rbit	r2, r2
 800352e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003532:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f002 021f 	and.w	r2, r2, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f202 	lsl.w	r2, r1, r2
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ab      	bne.n	80034aa <HAL_RCC_OscConfig+0x26a>
 8003552:	e002      	b.n	800355a <HAL_RCC_OscConfig+0x31a>
 8003554:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 817f 	beq.w	800386e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003570:	4ba7      	ldr	r3, [pc, #668]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800357c:	4ba4      	ldr	r3, [pc, #656]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d173      	bne.n	8003670 <HAL_RCC_OscConfig+0x430>
 8003588:	4ba1      	ldr	r3, [pc, #644]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	d16c      	bne.n	8003670 <HAL_RCC_OscConfig+0x430>
 8003596:	2302      	movs	r3, #2
 8003598:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80035a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0x386>
 80035c0:	4b93      	ldr	r3, [pc, #588]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	e013      	b.n	80035ee <HAL_RCC_OscConfig+0x3ae>
 80035c6:	2302      	movs	r3, #2
 80035c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035de:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035ea:	4b89      	ldr	r3, [pc, #548]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2202      	movs	r2, #2
 80035f0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80035f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80035f8:	fa92 f2a2 	rbit	r2, r2
 80035fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003600:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCC_OscConfig+0x3f6>
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f000 be52 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003642:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	21f8      	movs	r1, #248	; 0xf8
 800364c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003654:	fa91 f1a1 	rbit	r1, r1
 8003658:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800365c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003660:	fab1 f181 	clz	r1, r1
 8003664:	b2c9      	uxtb	r1, r1
 8003666:	408b      	lsls	r3, r1
 8003668:	4969      	ldr	r1, [pc, #420]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e0fe      	b.n	800386e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8088 	beq.w	8003792 <HAL_RCC_OscConfig+0x552>
 8003682:	2301      	movs	r3, #1
 8003684:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003694:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	461a      	mov	r2, r3
 80036aa:	2301      	movs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7ff fa83 	bl	8002bb8 <HAL_GetTick>
 80036b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b8:	f7ff fa7e 	bl	8002bb8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d902      	bls.n	80036ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f000 be06 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80036e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_OscConfig+0x4be>
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	e013      	b.n	8003726 <HAL_RCC_OscConfig+0x4e6>
 80036fe:	2302      	movs	r3, #2
 8003700:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003716:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2202      	movs	r2, #2
 8003728:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800372c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003730:	fa92 f2a2 	rbit	r2, r2
 8003734:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003738:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f002 021f 	and.w	r2, r2, #31
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f202 	lsl.w	r2, r1, r2
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0af      	beq.n	80036b8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	21f8      	movs	r1, #248	; 0xf8
 800376e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003776:	fa91 f1a1 	rbit	r1, r1
 800377a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800377e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003782:	fab1 f181 	clz	r1, r1
 8003786:	b2c9      	uxtb	r1, r1
 8003788:	408b      	lsls	r3, r1
 800378a:	4921      	ldr	r1, [pc, #132]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e06d      	b.n	800386e <HAL_RCC_OscConfig+0x62e>
 8003792:	2301      	movs	r3, #1
 8003794:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80037a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7ff f9fb 	bl	8002bb8 <HAL_GetTick>
 80037c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c8:	f7ff f9f6 	bl	8002bb8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d902      	bls.n	80037de <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	f000 bd7e 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80037f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0x5d4>
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <HAL_RCC_OscConfig+0x5d0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e016      	b.n	800383c <HAL_RCC_OscConfig+0x5fc>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	2302      	movs	r3, #2
 8003816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003826:	2302      	movs	r3, #2
 8003828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800382c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003838:	4bbf      	ldr	r3, [pc, #764]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	2202      	movs	r2, #2
 800383e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003842:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800384e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ac      	bne.n	80037c8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003872:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8113 	beq.w	8003aaa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d07c      	beq.n	800398e <HAL_RCC_OscConfig+0x74e>
 8003894:	2301      	movs	r3, #1
 8003896:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80038a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	4ba2      	ldr	r3, [pc, #648]	; (8003b3c <HAL_RCC_OscConfig+0x8fc>)
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	461a      	mov	r2, r3
 80038ba:	2301      	movs	r3, #1
 80038bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7ff f97b 	bl	8002bb8 <HAL_GetTick>
 80038c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c8:	f7ff f976 	bl	8002bb8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d902      	bls.n	80038de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	f000 bcfe 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 80038de:	2302      	movs	r3, #2
 80038e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038fe:	2202      	movs	r2, #2
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003938:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800393c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003946:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800394a:	2102      	movs	r1, #2
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f1a3 	rbit	r1, r3
 800395c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003960:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003964:	6019      	str	r1, [r3, #0]
  return result;
 8003966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d09d      	beq.n	80038c8 <HAL_RCC_OscConfig+0x688>
 800398c:	e08d      	b.n	8003aaa <HAL_RCC_OscConfig+0x86a>
 800398e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003992:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039b0:	601a      	str	r2, [r3, #0]
  return result;
 80039b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x8fc>)
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7ff f8f2 	bl	8002bb8 <HAL_GetTick>
 80039d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7ff f8ed 	bl	8002bb8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f000 bc75 	b.w	80042da <HAL_RCC_OscConfig+0x109a>
 80039f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039f8:	2202      	movs	r2, #2
 80039fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	fa93 f2a3 	rbit	r2, r3
 8003a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a68:	2102      	movs	r1, #2
 8003a6a:	6019      	str	r1, [r3, #0]
 8003a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f1a3 	rbit	r1, r3
 8003a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a82:	6019      	str	r1, [r3, #0]
  return result;
 8003a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d197      	bne.n	80039da <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 81a5 	beq.w	8003e0a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_RCC_OscConfig+0x8f8>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_OscConfig+0x900>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_RCC_OscConfig+0x900>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x900>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b18:	f7ff f84e 	bl	8002bb8 <HAL_GetTick>
 8003b1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	e010      	b.n	8003b44 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b22:	f7ff f849 	bl	8002bb8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d908      	bls.n	8003b44 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e3d1      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	10908120 	.word	0x10908120
 8003b40:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b8d      	ldr	r3, [pc, #564]	; (8003d7c <HAL_RCC_OscConfig+0xb3c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0e8      	beq.n	8003b22 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x92e>
 8003b60:	4b87      	ldr	r3, [pc, #540]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a86      	ldr	r2, [pc, #536]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6213      	str	r3, [r2, #32]
 8003b6c:	e035      	b.n	8003bda <HAL_RCC_OscConfig+0x99a>
 8003b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x958>
 8003b7e:	4b80      	ldr	r3, [pc, #512]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a7f      	ldr	r2, [pc, #508]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	6213      	str	r3, [r2, #32]
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	6213      	str	r3, [r2, #32]
 8003b96:	e020      	b.n	8003bda <HAL_RCC_OscConfig+0x99a>
 8003b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x982>
 8003ba8:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4a74      	ldr	r2, [pc, #464]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6213      	str	r3, [r2, #32]
 8003bb4:	4b72      	ldr	r3, [pc, #456]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a71      	ldr	r2, [pc, #452]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	e00b      	b.n	8003bda <HAL_RCC_OscConfig+0x99a>
 8003bc2:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a6b      	ldr	r2, [pc, #428]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8081 	beq.w	8003cee <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe ffe4 	bl	8002bb8 <HAL_GetTick>
 8003bf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fe ffdf 	bl	8002bb8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e365      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 8003c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fa93 f2a3 	rbit	r2, r3
 8003c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c36:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c54:	601a      	str	r2, [r3, #0]
  return result;
 8003c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d102      	bne.n	8003c7a <HAL_RCC_OscConfig+0xa3a>
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	e013      	b.n	8003ca2 <HAL_RCC_OscConfig+0xa62>
 8003c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c82:	2202      	movs	r2, #2
 8003c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c98:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ca6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003caa:	2102      	movs	r1, #2
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	fa92 f1a2 	rbit	r1, r2
 8003cbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cc0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003cc4:	6011      	str	r1, [r2, #0]
  return result;
 8003cc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cca:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f002 021f 	and.w	r2, r2, #31
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d084      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x9b6>
 8003cec:	e083      	b.n	8003df6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cee:	f7fe ff63 	bl	8002bb8 <HAL_GetTick>
 8003cf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fe ff5e 	bl	8002bb8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e2e4      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 8003d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d18:	2202      	movs	r2, #2
 8003d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d56:	601a      	str	r2, [r3, #0]
  return result;
 8003d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d106      	bne.n	8003d84 <HAL_RCC_OscConfig+0xb44>
 8003d76:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <HAL_RCC_OscConfig+0xb40>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	e017      	b.n	8003dac <HAL_RCC_OscConfig+0xb6c>
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	fa93 f2a3 	rbit	r2, r3
 8003d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4bb3      	ldr	r3, [pc, #716]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003db0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003db4:	2102      	movs	r1, #2
 8003db6:	6011      	str	r1, [r2, #0]
 8003db8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dbc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	fa92 f1a2 	rbit	r1, r2
 8003dc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dca:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003dce:	6011      	str	r1, [r2, #0]
  return result;
 8003dd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dd4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f002 021f 	and.w	r2, r2, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d180      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b9e      	ldr	r3, [pc, #632]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a9d      	ldr	r2, [pc, #628]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 825e 	beq.w	80042d8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1c:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	f000 821f 	beq.w	8004268 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f040 8170 	bne.w	800411c <HAL_RCC_OscConfig+0xedc>
 8003e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e40:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e60:	601a      	str	r2, [r3, #0]
  return result;
 8003e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e6a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fe fe99 	bl	8002bb8 <HAL_GetTick>
 8003e86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe fe94 	bl	8002bb8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e21c      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 8003ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	fa93 f2a3 	rbit	r2, r3
 8003ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ec4:	601a      	str	r2, [r3, #0]
  return result;
 8003ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ece:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_RCC_OscConfig+0xcaa>
 8003ee4:	4b64      	ldr	r3, [pc, #400]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e027      	b.n	8003f3a <HAL_RCC_OscConfig+0xcfa>
 8003eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f22:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	fa93 f2a3 	rbit	r2, r3
 8003f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f30:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f3e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f46:	6011      	str	r1, [r2, #0]
 8003f48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f4c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	fa92 f1a2 	rbit	r1, r2
 8003f56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f5a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f5e:	6011      	str	r1, [r2, #0]
  return result;
 8003f60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f64:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	fab2 f282 	clz	r2, r2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f042 0220 	orr.w	r2, r2, #32
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	f002 021f 	and.w	r2, r2, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d182      	bne.n	8003e8c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f86:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003fa0:	4b35      	ldr	r3, [pc, #212]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a19      	ldr	r1, [r3, #32]
 8003fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	492d      	ldr	r1, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fcc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fec:	601a      	str	r2, [r3, #0]
  return result;
 8003fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ff6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004002:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	2301      	movs	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe fdd3 	bl	8002bb8 <HAL_GetTick>
 8004012:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004016:	e009      	b.n	800402c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe fdce 	bl	8002bb8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e156      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 800402c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004030:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004050:	601a      	str	r2, [r3, #0]
  return result;
 8004052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004056:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800405a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0xe3c>
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <HAL_RCC_OscConfig+0xe38>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	e02a      	b.n	80040cc <HAL_RCC_OscConfig+0xe8c>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004080:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	fa93 f2a3 	rbit	r2, r3
 8004098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fa93 f2a3 	rbit	r2, r3
 80040be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	4b86      	ldr	r3, [pc, #536]	; (80042e4 <HAL_RCC_OscConfig+0x10a4>)
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	fa92 f1a2 	rbit	r1, r2
 80040e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ec:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040f0:	6011      	str	r1, [r2, #0]
  return result;
 80040f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040f6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	fab2 f282 	clz	r2, r2
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	f042 0220 	orr.w	r2, r2, #32
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	f002 021f 	and.w	r2, r2, #31
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f43f af7f 	beq.w	8004018 <HAL_RCC_OscConfig+0xdd8>
 800411a:	e0dd      	b.n	80042d8 <HAL_RCC_OscConfig+0x1098>
 800411c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004120:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004140:	601a      	str	r2, [r3, #0]
  return result;
 8004142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004146:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800414a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004156:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	461a      	mov	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe fd29 	bl	8002bb8 <HAL_GetTick>
 8004166:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416a:	e009      	b.n	8004180 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe fd24 	bl	8002bb8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0ac      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
 8004180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004184:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004192:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0xf8a>
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x10a4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e027      	b.n	800421a <HAL_RCC_OscConfig+0xfda>
 80041ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80041d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	fa93 f2a3 	rbit	r2, r3
 80041e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004202:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004210:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <HAL_RCC_OscConfig+0x10a4>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800421e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004222:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004226:	6011      	str	r1, [r2, #0]
 8004228:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800422c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	fa92 f1a2 	rbit	r1, r2
 8004236:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800423a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800423e:	6011      	str	r1, [r2, #0]
  return result;
 8004240:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004244:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f002 021f 	and.w	r2, r2, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d182      	bne.n	800416c <HAL_RCC_OscConfig+0xf2c>
 8004266:	e037      	b.n	80042d8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800426c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e02e      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_OscConfig+0x10a4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <HAL_RCC_OscConfig+0x10a4>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800428c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004290:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004298:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d117      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80042a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d10b      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80042bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042c0:	f003 020f 	and.w	r2, r3, #15
 80042c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b09e      	sub	sp, #120	; 0x78
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e162      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b90      	ldr	r3, [pc, #576]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d910      	bls.n	8004330 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 0207 	bic.w	r2, r3, #7
 8004316:	498b      	ldr	r1, [pc, #556]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b89      	ldr	r3, [pc, #548]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e14a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b82      	ldr	r3, [pc, #520]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	497f      	ldr	r1, [pc, #508]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 800434a:	4313      	orrs	r3, r2
 800434c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80dc 	beq.w	8004514 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d13c      	bne.n	80043de <HAL_RCC_ClockConfig+0xf6>
 8004364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004368:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_RCC_ClockConfig+0xa6>
 8004388:	4b6f      	ldr	r3, [pc, #444]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	e00f      	b.n	80043ae <HAL_RCC_ClockConfig+0xc6>
 800438e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004392:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	667b      	str	r3, [r7, #100]	; 0x64
 800439c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a0:	663b      	str	r3, [r7, #96]	; 0x60
 80043a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043aa:	4b67      	ldr	r3, [pc, #412]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80043b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043b6:	fa92 f2a2 	rbit	r2, r2
 80043ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043be:	fab2 f282 	clz	r2, r2
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f042 0220 	orr.w	r2, r2, #32
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	f002 021f 	and.w	r2, r2, #31
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d17b      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0f3      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d13c      	bne.n	8004460 <HAL_RCC_ClockConfig+0x178>
 80043e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_RCC_ClockConfig+0x128>
 800440a:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	e00f      	b.n	8004430 <HAL_RCC_ClockConfig+0x148>
 8004410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
 800441e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004422:	643b      	str	r3, [r7, #64]	; 0x40
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442c:	4b46      	ldr	r3, [pc, #280]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004434:	63ba      	str	r2, [r7, #56]	; 0x38
 8004436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004438:	fa92 f2a2 	rbit	r2, r2
 800443c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800443e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004440:	fab2 f282 	clz	r2, r2
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	f042 0220 	orr.w	r2, r2, #32
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	f002 021f 	and.w	r2, r2, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f202 	lsl.w	r2, r1, r2
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13a      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0b2      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
 8004460:	2302      	movs	r3, #2
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_RCC_ClockConfig+0x1a0>
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e00d      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1bc>
 8004488:	2302      	movs	r3, #2
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
 8004494:	2302      	movs	r3, #2
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2202      	movs	r2, #2
 80044a6:	61ba      	str	r2, [r7, #24]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	fa92 f2a2 	rbit	r2, r2
 80044ae:	617a      	str	r2, [r7, #20]
  return result;
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	fab2 f282 	clz	r2, r2
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f042 0220 	orr.w	r2, r2, #32
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	f002 021f 	and.w	r2, r2, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f202 	lsl.w	r2, r1, r2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e079      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	491a      	ldr	r1, [pc, #104]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e4:	f7fe fb68 	bl	8002bb8 <HAL_GetTick>
 80044e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fe fb64 	bl	8002bb8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e061      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_RCC_ClockConfig+0x260>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 020c 	and.w	r2, r3, #12
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	429a      	cmp	r2, r3
 8004512:	d1eb      	bne.n	80044ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d214      	bcs.n	800454c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 0207 	bic.w	r2, r3, #7
 800452a:	4906      	ldr	r1, [pc, #24]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_ClockConfig+0x25c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e040      	b.n	80045c6 <HAL_RCC_ClockConfig+0x2de>
 8004544:	40022000 	.word	0x40022000
 8004548:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCC_ClockConfig+0x2e8>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	491a      	ldr	r1, [pc, #104]	; (80045d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4912      	ldr	r1, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800458a:	f000 f829 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800458e:	4601      	mov	r1, r0
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <HAL_RCC_ClockConfig+0x2e8>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	22f0      	movs	r2, #240	; 0xf0
 800459a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	fa92 f2a2 	rbit	r2, r2
 80045a2:	60fa      	str	r2, [r7, #12]
  return result;
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	fab2 f282 	clz	r2, r2
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	40d3      	lsrs	r3, r2
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x2ec>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	fa21 f303 	lsr.w	r3, r1, r3
 80045b6:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <HAL_RCC_ClockConfig+0x2f0>)
 80045b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_RCC_ClockConfig+0x2f4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fb22 	bl	8000c08 <HAL_InitTick>
  
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3778      	adds	r7, #120	; 0x78
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800cb8c 	.word	0x0800cb8c
 80045d8:	20000060 	.word	0x20000060
 80045dc:	20000090 	.word	0x20000090

080045e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b08b      	sub	sp, #44	; 0x2c
 80045e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	2300      	movs	r3, #0
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x30>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x36>
 800460e:	e03f      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004612:	623b      	str	r3, [r7, #32]
      break;
 8004614:	e03f      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800461c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004620:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	fa92 f2a2 	rbit	r2, r2
 8004628:	607a      	str	r2, [r7, #4]
  return result;
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	fab2 f282 	clz	r2, r2
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	40d3      	lsrs	r3, r2
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8004636:	5cd3      	ldrb	r3, [r2, r3]
 8004638:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	220f      	movs	r2, #15
 8004644:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	fa92 f2a2 	rbit	r2, r2
 800464c:	60fa      	str	r2, [r7, #12]
  return result;
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	40d3      	lsrs	r3, r2
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004668:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	e007      	b.n	800468a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	623b      	str	r3, [r7, #32]
      break;
 800468e:	e002      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004692:	623b      	str	r3, [r7, #32]
      break;
 8004694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004696:	6a3b      	ldr	r3, [r7, #32]
}
 8004698:	4618      	mov	r0, r3
 800469a:	372c      	adds	r7, #44	; 0x2c
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40021000 	.word	0x40021000
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	0800cba4 	.word	0x0800cba4
 80046b0:	0800cbb4 	.word	0x0800cbb4

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000060 	.word	0x20000060

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046d2:	f7ff ffef 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d6:	4601      	mov	r1, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	fa92 f2a2 	rbit	r2, r2
 80046ec:	603a      	str	r2, [r7, #0]
  return result;
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	fab2 f282 	clz	r2, r2
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	40d3      	lsrs	r3, r2
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <HAL_RCC_GetPCLK1Freq+0x40>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	0800cb9c 	.word	0x0800cb9c

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004716:	f7ff ffcd 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 800471a:	4601      	mov	r1, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004724:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	fa92 f2a2 	rbit	r2, r2
 8004730:	603a      	str	r2, [r7, #0]
  return result;
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	fab2 f282 	clz	r2, r2
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	40d3      	lsrs	r3, r2
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x40>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	0800cb9c 	.word	0x0800cb9c

08004754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	220f      	movs	r2, #15
 8004762:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_GetClockConfig+0x60>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40022000 	.word	0x40022000

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b092      	sub	sp, #72	; 0x48
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80d4 	beq.w	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10e      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	61d3      	str	r3, [r2, #28]
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b45      	ldr	r3, [pc, #276]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b42      	ldr	r3, [pc, #264]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a41      	ldr	r2, [pc, #260]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fe f9cb 	bl	8002bb8 <HAL_GetTick>
 8004822:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7fe f9c7 	bl	8002bb8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b64      	cmp	r3, #100	; 0x64
 8004832:	d901      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e1d6      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b38      	ldr	r3, [pc, #224]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8084 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004860:	429a      	cmp	r2, r3
 8004862:	d07c      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004864:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	4b26      	ldr	r3, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	461a      	mov	r2, r3
 800488e:	2301      	movs	r3, #1
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	461a      	mov	r2, r3
 80048b2:	2300      	movs	r3, #0
 80048b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048b6:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe f977 	bl	8002bb8 <HAL_GetTick>
 80048ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fe f973 	bl	8002bb8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e180      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	2302      	movs	r3, #2
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
  return result;
 80048fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d108      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004912:	4b01      	ldr	r3, [pc, #4]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	e00d      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004918:	40021000 	.word	0x40021000
 800491c:	40007000 	.word	0x40007000
 8004920:	10908100 	.word	0x10908100
 8004924:	2302      	movs	r3, #2
 8004926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	4b9a      	ldr	r3, [pc, #616]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2202      	movs	r2, #2
 8004936:	613a      	str	r2, [r7, #16]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	fa92 f2a2 	rbit	r2, r2
 800493e:	60fa      	str	r2, [r7, #12]
  return result;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	f002 021f 	and.w	r2, r2, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0b7      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800495e:	4b8f      	ldr	r3, [pc, #572]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	498c      	ldr	r1, [pc, #560]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004970:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4a87      	ldr	r2, [pc, #540]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004990:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f023 0203 	bic.w	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	497f      	ldr	r1, [pc, #508]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ae:	4b7b      	ldr	r3, [pc, #492]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4978      	ldr	r1, [pc, #480]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049cc:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4970      	ldr	r1, [pc, #448]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ea:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f023 0210 	bic.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4969      	ldr	r1, [pc, #420]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a08:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	4961      	ldr	r1, [pc, #388]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a26:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	f023 0220 	bic.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	495a      	ldr	r1, [pc, #360]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a44:	4b55      	ldr	r3, [pc, #340]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	4952      	ldr	r1, [pc, #328]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a62:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	494b      	ldr	r1, [pc, #300]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a80:	4b46      	ldr	r3, [pc, #280]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	4943      	ldr	r1, [pc, #268]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	493c      	ldr	r1, [pc, #240]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004abc:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	4934      	ldr	r1, [pc, #208]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	4925      	ldr	r1, [pc, #148]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	491e      	ldr	r1, [pc, #120]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	4916      	ldr	r1, [pc, #88]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	490f      	ldr	r1, [pc, #60]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	4907      	ldr	r1, [pc, #28]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba2:	4913      	ldr	r1, [pc, #76]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc0:	490b      	ldr	r1, [pc, #44]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bde:	4904      	ldr	r1, [pc, #16]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3748      	adds	r7, #72	; 0x48
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fefe 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f001 f916 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x76>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d115      	bne.n	8004d46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d015      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0xb4>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d32:	d011      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d44:	e008      	b.n	8004d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e000      	b.n	8004d5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40015000 	.word	0x40015000
 8004d80:	00010007 	.word	0x00010007

08004d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e049      	b.n	8004e2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f841 	bl	8004e32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f001 f84e 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x24>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e03c      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x9e>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d109      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x3e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	e02f      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x9e>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d109      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x58>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e022      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x9e>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d109      	bne.n	8004eba <HAL_TIM_PWM_Start+0x72>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	bf14      	ite	ne
 8004eb2:	2301      	movne	r3, #1
 8004eb4:	2300      	moveq	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	e015      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x9e>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d109      	bne.n	8004ed4 <HAL_TIM_PWM_Start+0x8c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e008      	b.n	8004ee6 <HAL_TIM_PWM_Start+0x9e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0a1      	b.n	8005032 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xb6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efc:	e023      	b.n	8004f46 <HAL_TIM_PWM_Start+0xfe>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Start+0xc6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f0c:	e01b      	b.n	8004f46 <HAL_TIM_PWM_Start+0xfe>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xd6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xe6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_PWM_Start+0xfe>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xf6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3c:	e003      	b.n	8004f46 <HAL_TIM_PWM_Start+0xfe>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 fcea 	bl	8006928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a38      	ldr	r2, [pc, #224]	; (800503c <HAL_TIM_PWM_Start+0x1f4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x148>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a37      	ldr	r2, [pc, #220]	; (8005040 <HAL_TIM_PWM_Start+0x1f8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x148>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a35      	ldr	r2, [pc, #212]	; (8005044 <HAL_TIM_PWM_Start+0x1fc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x148>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a34      	ldr	r2, [pc, #208]	; (8005048 <HAL_TIM_PWM_Start+0x200>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x148>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a32      	ldr	r2, [pc, #200]	; (800504c <HAL_TIM_PWM_Start+0x204>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_PWM_Start+0x148>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a31      	ldr	r2, [pc, #196]	; (8005050 <HAL_TIM_PWM_Start+0x208>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIM_PWM_Start+0x14c>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_TIM_PWM_Start+0x14e>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a23      	ldr	r2, [pc, #140]	; (800503c <HAL_TIM_PWM_Start+0x1f4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d018      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <HAL_TIM_PWM_Start+0x20c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <HAL_TIM_PWM_Start+0x210>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <HAL_TIM_PWM_Start+0x1f8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_TIM_PWM_Start+0x1fc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_TIM_PWM_Start+0x1a8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <HAL_TIM_PWM_Start+0x208>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d115      	bne.n	800501c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_TIM_PWM_Start+0x214>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d015      	beq.n	800502e <HAL_TIM_PWM_Start+0x1e6>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d011      	beq.n	800502e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501a:	e008      	b.n	800502e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e000      	b.n	8005030 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800
 8005050:	40015000 	.word	0x40015000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	00010007 	.word	0x00010007

08005060 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fc58 	bl	8006928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a40      	ldr	r2, [pc, #256]	; (8005180 <HAL_TIM_PWM_Stop+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_TIM_PWM_Stop+0x54>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3f      	ldr	r2, [pc, #252]	; (8005184 <HAL_TIM_PWM_Stop+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <HAL_TIM_PWM_Stop+0x54>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3d      	ldr	r2, [pc, #244]	; (8005188 <HAL_TIM_PWM_Stop+0x128>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00e      	beq.n	80050b4 <HAL_TIM_PWM_Stop+0x54>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <HAL_TIM_PWM_Stop+0x12c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_TIM_PWM_Stop+0x54>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3a      	ldr	r2, [pc, #232]	; (8005190 <HAL_TIM_PWM_Stop+0x130>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIM_PWM_Stop+0x54>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a39      	ldr	r2, [pc, #228]	; (8005194 <HAL_TIM_PWM_Stop+0x134>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_PWM_Stop+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_TIM_PWM_Stop+0x5a>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d017      	beq.n	80050ee <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <HAL_TIM_PWM_Stop+0x8e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	f240 4344 	movw	r3, #1092	; 0x444
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_PWM_Stop+0x8e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <HAL_TIM_PWM_Stop+0xbe>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	f240 4344 	movw	r3, #1092	; 0x444
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <HAL_TIM_PWM_Stop+0xbe>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Stop+0xce>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800512c:	e023      	b.n	8005176 <HAL_TIM_PWM_Stop+0x116>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Stop+0xde>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	e01b      	b.n	8005176 <HAL_TIM_PWM_Stop+0x116>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d104      	bne.n	800514e <HAL_TIM_PWM_Stop+0xee>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	e013      	b.n	8005176 <HAL_TIM_PWM_Stop+0x116>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Stop+0xfe>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800515c:	e00b      	b.n	8005176 <HAL_TIM_PWM_Stop+0x116>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b10      	cmp	r3, #16
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Stop+0x10e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516c:	e003      	b.n	8005176 <HAL_TIM_PWM_Stop+0x116>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800
 8005194:	40015000 	.word	0x40015000

08005198 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e049      	b.n	800523e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f841 	bl	8005246 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 fe44 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_TIM_IC_Start_IT+0x1e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e023      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x66>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d104      	bne.n	800528a <HAL_TIM_IC_Start_IT+0x2e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005286:	b2db      	uxtb	r3, r3
 8005288:	e01b      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x66>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d104      	bne.n	800529a <HAL_TIM_IC_Start_IT+0x3e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e013      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x66>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d104      	bne.n	80052aa <HAL_TIM_IC_Start_IT+0x4e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e00b      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x66>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_IC_Start_IT+0x5e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e003      	b.n	80052c2 <HAL_TIM_IC_Start_IT+0x66>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <HAL_TIM_IC_Start_IT+0x78>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e013      	b.n	80052fc <HAL_TIM_IC_Start_IT+0xa0>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d104      	bne.n	80052e4 <HAL_TIM_IC_Start_IT+0x88>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e00b      	b.n	80052fc <HAL_TIM_IC_Start_IT+0xa0>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d104      	bne.n	80052f4 <HAL_TIM_IC_Start_IT+0x98>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e003      	b.n	80052fc <HAL_TIM_IC_Start_IT+0xa0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005304:	7b7b      	ldrb	r3, [r7, #13]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0dd      	b.n	80054ca <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_TIM_IC_Start_IT+0xc2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	e023      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x10a>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start_IT+0xd2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800532c:	e01b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x10a>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_IT+0xe2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800533c:	e013      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x10a>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0xf2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800534c:	e00b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x10a>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b10      	cmp	r3, #16
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0x102>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800535c:	e003      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x10a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_TIM_IC_Start_IT+0x11a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005374:	e013      	b.n	800539e <HAL_TIM_IC_Start_IT+0x142>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_TIM_IC_Start_IT+0x12a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005384:	e00b      	b.n	800539e <HAL_TIM_IC_Start_IT+0x142>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d104      	bne.n	8005396 <HAL_TIM_IC_Start_IT+0x13a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005394:	e003      	b.n	800539e <HAL_TIM_IC_Start_IT+0x142>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d841      	bhi.n	8005428 <HAL_TIM_IC_Start_IT+0x1cc>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <HAL_TIM_IC_Start_IT+0x150>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	08005429 	.word	0x08005429
 80053b4:	08005429 	.word	0x08005429
 80053b8:	08005429 	.word	0x08005429
 80053bc:	080053f3 	.word	0x080053f3
 80053c0:	08005429 	.word	0x08005429
 80053c4:	08005429 	.word	0x08005429
 80053c8:	08005429 	.word	0x08005429
 80053cc:	08005405 	.word	0x08005405
 80053d0:	08005429 	.word	0x08005429
 80053d4:	08005429 	.word	0x08005429
 80053d8:	08005429 	.word	0x08005429
 80053dc:	08005417 	.word	0x08005417
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0202 	orr.w	r2, r2, #2
 80053ee:	60da      	str	r2, [r3, #12]
      break;
 80053f0:	e01d      	b.n	800542e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0204 	orr.w	r2, r2, #4
 8005400:	60da      	str	r2, [r3, #12]
      break;
 8005402:	e014      	b.n	800542e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0208 	orr.w	r2, r2, #8
 8005412:	60da      	str	r2, [r3, #12]
      break;
 8005414:	e00b      	b.n	800542e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0210 	orr.w	r2, r2, #16
 8005424:	60da      	str	r2, [r3, #12]
      break;
 8005426:	e002      	b.n	800542e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	bf00      	nop
  }

  if (status == HAL_OK)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d149      	bne.n	80054c8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fa73 	bl	8006928 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_TIM_IC_Start_IT+0x278>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d018      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_IC_Start_IT+0x27c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_TIM_IC_Start_IT+0x280>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIM_IC_Start_IT+0x284>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <HAL_TIM_IC_Start_IT+0x288>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_IC_Start_IT+0x22c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d115      	bne.n	80054b4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <HAL_TIM_IC_Start_IT+0x290>)
 8005490:	4013      	ands	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d015      	beq.n	80054c6 <HAL_TIM_IC_Start_IT+0x26a>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d011      	beq.n	80054c6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40015000 	.word	0x40015000
 80054ec:	00010007 	.word	0x00010007

080054f0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d841      	bhi.n	8005588 <HAL_TIM_IC_Stop_IT+0x98>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005541 	.word	0x08005541
 8005510:	08005589 	.word	0x08005589
 8005514:	08005589 	.word	0x08005589
 8005518:	08005589 	.word	0x08005589
 800551c:	08005553 	.word	0x08005553
 8005520:	08005589 	.word	0x08005589
 8005524:	08005589 	.word	0x08005589
 8005528:	08005589 	.word	0x08005589
 800552c:	08005565 	.word	0x08005565
 8005530:	08005589 	.word	0x08005589
 8005534:	08005589 	.word	0x08005589
 8005538:	08005589 	.word	0x08005589
 800553c:	08005577 	.word	0x08005577
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0202 	bic.w	r2, r2, #2
 800554e:	60da      	str	r2, [r3, #12]
      break;
 8005550:	e01d      	b.n	800558e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0204 	bic.w	r2, r2, #4
 8005560:	60da      	str	r2, [r3, #12]
      break;
 8005562:	e014      	b.n	800558e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0208 	bic.w	r2, r2, #8
 8005572:	60da      	str	r2, [r3, #12]
      break;
 8005574:	e00b      	b.n	800558e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0210 	bic.w	r2, r2, #16
 8005584:	60da      	str	r2, [r3, #12]
      break;
 8005586:	e002      	b.n	800558e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	bf00      	nop
  }

  if (status == HAL_OK)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d166      	bne.n	8005662 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f001 f9c3 	bl	8006928 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10f      	bne.n	80055d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	f240 4344 	movw	r3, #1092	; 0x444
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Stop_IT+0xf2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e0:	e023      	b.n	800562a <HAL_TIM_IC_Stop_IT+0x13a>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_IC_Stop_IT+0x102>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	e01b      	b.n	800562a <HAL_TIM_IC_Stop_IT+0x13a>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_IC_Stop_IT+0x112>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	e013      	b.n	800562a <HAL_TIM_IC_Stop_IT+0x13a>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d104      	bne.n	8005612 <HAL_TIM_IC_Stop_IT+0x122>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005610:	e00b      	b.n	800562a <HAL_TIM_IC_Stop_IT+0x13a>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b10      	cmp	r3, #16
 8005616:	d104      	bne.n	8005622 <HAL_TIM_IC_Stop_IT+0x132>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005620:	e003      	b.n	800562a <HAL_TIM_IC_Stop_IT+0x13a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <HAL_TIM_IC_Stop_IT+0x14a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	e013      	b.n	8005662 <HAL_TIM_IC_Stop_IT+0x172>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b04      	cmp	r3, #4
 800563e:	d104      	bne.n	800564a <HAL_TIM_IC_Stop_IT+0x15a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005648:	e00b      	b.n	8005662 <HAL_TIM_IC_Stop_IT+0x172>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d104      	bne.n	800565a <HAL_TIM_IC_Stop_IT+0x16a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005658:	e003      	b.n	8005662 <HAL_TIM_IC_Stop_IT+0x172>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0202 	mvn.w	r2, #2
 8005698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd f8d0 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fbb6 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fbbd 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0204 	mvn.w	r2, #4
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fd f8a6 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb8c 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb93 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b08      	cmp	r3, #8
 8005728:	d122      	bne.n	8005770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d11b      	bne.n	8005770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0208 	mvn.w	r2, #8
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2204      	movs	r2, #4
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fd f87c 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb62 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb69 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b10      	cmp	r3, #16
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0210 	mvn.w	r2, #16
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2208      	movs	r2, #8
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd f852 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb38 	bl	8005e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb3f 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0201 	mvn.w	r2, #1
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb f9cc 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fa:	2b80      	cmp	r3, #128	; 0x80
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 f9c8 	bl	8006bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582a:	d10e      	bne.n	800584a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d107      	bne.n	800584a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 f9bb 	bl	8006bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d10e      	bne.n	8005876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d107      	bne.n	8005876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 faed 	bl	8005e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b20      	cmp	r3, #32
 8005882:	d10e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0220 	mvn.w	r2, #32
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f97b 	bl	8006b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e088      	b.n	80059da <HAL_TIM_IC_ConfigChannel+0x130>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11b      	bne.n	800590e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80058e6:	f000 fe61 	bl	80065ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 020c 	bic.w	r2, r2, #12
 80058f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6999      	ldr	r1, [r3, #24]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	619a      	str	r2, [r3, #24]
 800590c:	e060      	b.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11c      	bne.n	800594e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005924:	f000 fedf 	bl	80066e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005936:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	021a      	lsls	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
 800594c:	e040      	b.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005964:	f000 ff2c 	bl	80067c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 020c 	bic.w	r2, r2, #12
 8005976:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69d9      	ldr	r1, [r3, #28]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	61da      	str	r2, [r3, #28]
 800598a:	e021      	b.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d11c      	bne.n	80059cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059a2:	f000 ff49 	bl	8006838 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69d9      	ldr	r1, [r3, #28]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	61da      	str	r2, [r3, #28]
 80059ca:	e001      	b.n	80059d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e0ff      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b14      	cmp	r3, #20
 8005a0e:	f200 80f0 	bhi.w	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	08005bf3 	.word	0x08005bf3
 8005a20:	08005bf3 	.word	0x08005bf3
 8005a24:	08005bf3 	.word	0x08005bf3
 8005a28:	08005aad 	.word	0x08005aad
 8005a2c:	08005bf3 	.word	0x08005bf3
 8005a30:	08005bf3 	.word	0x08005bf3
 8005a34:	08005bf3 	.word	0x08005bf3
 8005a38:	08005aef 	.word	0x08005aef
 8005a3c:	08005bf3 	.word	0x08005bf3
 8005a40:	08005bf3 	.word	0x08005bf3
 8005a44:	08005bf3 	.word	0x08005bf3
 8005a48:	08005b2f 	.word	0x08005b2f
 8005a4c:	08005bf3 	.word	0x08005bf3
 8005a50:	08005bf3 	.word	0x08005bf3
 8005a54:	08005bf3 	.word	0x08005bf3
 8005a58:	08005b71 	.word	0x08005b71
 8005a5c:	08005bf3 	.word	0x08005bf3
 8005a60:	08005bf3 	.word	0x08005bf3
 8005a64:	08005bf3 	.word	0x08005bf3
 8005a68:	08005bb1 	.word	0x08005bb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fa94 	bl	8005fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0208 	orr.w	r2, r2, #8
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0204 	bic.w	r2, r2, #4
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
      break;
 8005aaa:	e0a5      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fb0e 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6999      	ldr	r1, [r3, #24]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	619a      	str	r2, [r3, #24]
      break;
 8005aec:	e084      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb81 	bl	80061fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0208 	orr.w	r2, r2, #8
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0204 	bic.w	r2, r2, #4
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	61da      	str	r2, [r3, #28]
      break;
 8005b2c:	e064      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fbf3 	bl	8006320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	021a      	lsls	r2, r3, #8
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]
      break;
 8005b6e:	e043      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc42 	bl	8006400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bae:	e023      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc8c 	bl	80064d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf0:	e002      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop

08005c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x1c>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e0b6      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x18a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c64:	d03e      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	f200 8087 	bhi.w	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	f000 8086 	beq.w	8005d82 <HAL_TIM_ConfigClockSource+0x176>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d87f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xaa>
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d87b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d050      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x11e>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d877      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d03c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xfe>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	d873      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d058      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x13e>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d86f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d064      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d86b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d060      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d867      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15e>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d05a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15e>
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc6:	f000 fe0f 	bl	80068e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e04f      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	f000 fdf8 	bl	80068e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d06:	609a      	str	r2, [r3, #8]
      break;
 8005d08:	e03c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fcb6 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fdc5 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e02c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 fd12 	bl	8006760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2160      	movs	r1, #96	; 0x60
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fdb5 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e01c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 fc96 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fda5 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e00c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 fd9c 	bl	80068b2 <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	d831      	bhi.n	8005e18 <HAL_TIM_ReadCapturedValue+0x78>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005dfb 	.word	0x08005dfb
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e19 	.word	0x08005e19
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e0f 	.word	0x08005e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	60fb      	str	r3, [r7, #12]

      break;
 8005df8:	e00f      	b.n	8005e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	60fb      	str	r3, [r7, #12]

      break;
 8005e02:	e00a      	b.n	8005e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	60fb      	str	r3, [r7, #12]

      break;
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	60fb      	str	r3, [r7, #12]

      break;
 8005e16:	e000      	b.n	8005e1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e18:	bf00      	nop
  }

  return tmpreg;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a42      	ldr	r2, [pc, #264]	; (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d00f      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3f      	ldr	r2, [pc, #252]	; (8005f84 <TIM_Base_SetConfig+0x120>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3e      	ldr	r2, [pc, #248]	; (8005f88 <TIM_Base_SetConfig+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a3d      	ldr	r2, [pc, #244]	; (8005f8c <TIM_Base_SetConfig+0x128>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a3c      	ldr	r2, [pc, #240]	; (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a31      	ldr	r2, [pc, #196]	; (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01f      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d01b      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <TIM_Base_SetConfig+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d017      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2d      	ldr	r2, [pc, #180]	; (8005f88 <TIM_Base_SetConfig+0x124>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2c      	ldr	r2, [pc, #176]	; (8005f8c <TIM_Base_SetConfig+0x128>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00f      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <TIM_Base_SetConfig+0x130>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <TIM_Base_SetConfig+0x134>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <TIM_Base_SetConfig+0x138>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_Base_SetConfig+0x9a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d108      	bne.n	8005f10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <TIM_Base_SetConfig+0x100>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <TIM_Base_SetConfig+0x128>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00f      	beq.n	8005f64 <TIM_Base_SetConfig+0x100>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <TIM_Base_SetConfig+0x130>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <TIM_Base_SetConfig+0x100>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <TIM_Base_SetConfig+0x134>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d007      	beq.n	8005f64 <TIM_Base_SetConfig+0x100>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a11      	ldr	r2, [pc, #68]	; (8005f9c <TIM_Base_SetConfig+0x138>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0x100>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d103      	bne.n	8005f6c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	615a      	str	r2, [r3, #20]
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40013400 	.word	0x40013400
 8005f90:	40015000 	.word	0x40015000
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 0302 	bic.w	r3, r3, #2
 8005fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a30      	ldr	r2, [pc, #192]	; (80060bc <TIM_OC1_SetConfig+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <TIM_OC1_SetConfig+0x88>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2f      	ldr	r2, [pc, #188]	; (80060c0 <TIM_OC1_SetConfig+0x120>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00f      	beq.n	8006028 <TIM_OC1_SetConfig+0x88>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2e      	ldr	r2, [pc, #184]	; (80060c4 <TIM_OC1_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_OC1_SetConfig+0x88>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a2d      	ldr	r2, [pc, #180]	; (80060c8 <TIM_OC1_SetConfig+0x128>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_OC1_SetConfig+0x88>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <TIM_OC1_SetConfig+0x12c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC1_SetConfig+0x88>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <TIM_OC1_SetConfig+0x130>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_OC1_SetConfig+0x11c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_OC1_SetConfig+0xd2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <TIM_OC1_SetConfig+0x120>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_OC1_SetConfig+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <TIM_OC1_SetConfig+0x124>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_OC1_SetConfig+0xd2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <TIM_OC1_SetConfig+0x128>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_OC1_SetConfig+0xd2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <TIM_OC1_SetConfig+0x12c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC1_SetConfig+0xd2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <TIM_OC1_SetConfig+0x130>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d111      	bne.n	8006096 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40013400 	.word	0x40013400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	40015000 	.word	0x40015000

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a2c      	ldr	r2, [pc, #176]	; (80061e4 <TIM_OC2_SetConfig+0x110>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_OC2_SetConfig+0x74>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a2b      	ldr	r2, [pc, #172]	; (80061e8 <TIM_OC2_SetConfig+0x114>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC2_SetConfig+0x74>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <TIM_OC2_SetConfig+0x118>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d10d      	bne.n	8006164 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1f      	ldr	r2, [pc, #124]	; (80061e4 <TIM_OC2_SetConfig+0x110>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <TIM_OC2_SetConfig+0xc0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <TIM_OC2_SetConfig+0x114>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00f      	beq.n	8006194 <TIM_OC2_SetConfig+0xc0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <TIM_OC2_SetConfig+0x11c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_OC2_SetConfig+0xc0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <TIM_OC2_SetConfig+0x120>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_OC2_SetConfig+0xc0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <TIM_OC2_SetConfig+0x124>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC2_SetConfig+0xc0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <TIM_OC2_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d113      	bne.n	80061bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800619a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40013400 	.word	0x40013400
 80061ec:	40015000 	.word	0x40015000
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40014400 	.word	0x40014400
 80061f8:	40014800 	.word	0x40014800

080061fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <TIM_OC3_SetConfig+0x10c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <TIM_OC3_SetConfig+0x72>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <TIM_OC3_SetConfig+0x110>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC3_SetConfig+0x72>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a29      	ldr	r2, [pc, #164]	; (8006310 <TIM_OC3_SetConfig+0x114>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006288:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <TIM_OC3_SetConfig+0x10c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <TIM_OC3_SetConfig+0xbe>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1d      	ldr	r2, [pc, #116]	; (800630c <TIM_OC3_SetConfig+0x110>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00f      	beq.n	80062ba <TIM_OC3_SetConfig+0xbe>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <TIM_OC3_SetConfig+0x118>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_OC3_SetConfig+0xbe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <TIM_OC3_SetConfig+0x11c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <TIM_OC3_SetConfig+0xbe>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <TIM_OC3_SetConfig+0x120>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_OC3_SetConfig+0xbe>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <TIM_OC3_SetConfig+0x114>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d113      	bne.n	80062e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	621a      	str	r2, [r3, #32]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40015000 	.word	0x40015000
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800

08006320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <TIM_OC4_SetConfig+0xc8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_OC4_SetConfig+0x8c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a19      	ldr	r2, [pc, #100]	; (80063ec <TIM_OC4_SetConfig+0xcc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00f      	beq.n	80063ac <TIM_OC4_SetConfig+0x8c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a18      	ldr	r2, [pc, #96]	; (80063f0 <TIM_OC4_SetConfig+0xd0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_OC4_SetConfig+0x8c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <TIM_OC4_SetConfig+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_OC4_SetConfig+0x8c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a16      	ldr	r2, [pc, #88]	; (80063f8 <TIM_OC4_SetConfig+0xd8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_OC4_SetConfig+0x8c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a15      	ldr	r2, [pc, #84]	; (80063fc <TIM_OC4_SetConfig+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d109      	bne.n	80063c0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800
 80063fc:	40015000 	.word	0x40015000

08006400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <TIM_OC5_SetConfig+0xbc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <TIM_OC5_SetConfig+0xc0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <TIM_OC5_SetConfig+0xc4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <TIM_OC5_SetConfig+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a15      	ldr	r2, [pc, #84]	; (80064cc <TIM_OC5_SetConfig+0xcc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC5_SetConfig+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a14      	ldr	r2, [pc, #80]	; (80064d0 <TIM_OC5_SetConfig+0xd0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d109      	bne.n	8006496 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40015000 	.word	0x40015000

080064d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800651a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1a      	ldr	r2, [pc, #104]	; (8006594 <TIM_OC6_SetConfig+0xc0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a19      	ldr	r2, [pc, #100]	; (8006598 <TIM_OC6_SetConfig+0xc4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00f      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <TIM_OC6_SetConfig+0xc8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <TIM_OC6_SetConfig+0xcc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <TIM_OC6_SetConfig+0xd0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC6_SetConfig+0x84>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <TIM_OC6_SetConfig+0xd4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40015000 	.word	0x40015000

080065ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a26      	ldr	r2, [pc, #152]	; (8006670 <TIM_TI1_SetConfig+0xc4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d017      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e0:	d013      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a23      	ldr	r2, [pc, #140]	; (8006674 <TIM_TI1_SetConfig+0xc8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00f      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a22      	ldr	r2, [pc, #136]	; (8006678 <TIM_TI1_SetConfig+0xcc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00b      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a21      	ldr	r2, [pc, #132]	; (800667c <TIM_TI1_SetConfig+0xd0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d007      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a20      	ldr	r2, [pc, #128]	; (8006680 <TIM_TI1_SetConfig+0xd4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_TI1_SetConfig+0x5e>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <TIM_TI1_SetConfig+0xd8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <TIM_TI1_SetConfig+0x62>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <TIM_TI1_SetConfig+0x64>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e003      	b.n	800662e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	b2db      	uxtb	r3, r3
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f023 030a 	bic.w	r3, r3, #10
 8006648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f003 030a 	and.w	r3, r3, #10
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40013400 	.word	0x40013400
 8006680:	40014000 	.word	0x40014000
 8006684:	40015000 	.word	0x40015000

08006688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 030a 	bic.w	r3, r3, #10
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
 80066f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f023 0210 	bic.w	r2, r3, #16
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	b29b      	uxth	r3, r3
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006738:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f023 0210 	bic.w	r2, r3, #16
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800678a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	031b      	lsls	r3, r3, #12
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800679c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	621a      	str	r2, [r3, #32]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0303 	bic.w	r3, r3, #3
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	b2db      	uxtb	r3, r3
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006810:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006876:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	031b      	lsls	r3, r3, #12
 800687c:	b29b      	uxth	r3, r3
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800688a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	031b      	lsls	r3, r3, #12
 8006890:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f043 0307 	orr.w	r3, r3, #7
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	431a      	orrs	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	609a      	str	r2, [r3, #8]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2201      	movs	r2, #1
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	43db      	mvns	r3, r3
 800694a:	401a      	ands	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	fa01 f303 	lsl.w	r3, r1, r3
 8006960:	431a      	orrs	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006988:	2302      	movs	r3, #2
 800698a:	e06d      	b.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d108      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1e      	ldr	r2, [pc, #120]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a08:	d018      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a11      	ldr	r2, [pc, #68]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10c      	bne.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40015000 	.word	0x40015000
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40000800 	.word	0x40000800
 8006a88:	40014000 	.word	0x40014000

08006a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e06a      	b.n	8006b7e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a19      	ldr	r2, [pc, #100]	; (8006b8c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d115      	bne.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	051b      	lsls	r3, r3, #20
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40015000 	.word	0x40015000

08006b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e040      	b.n	8006c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb fa46 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	; 0x24
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb76 	bl	8007304 <UART_SetConfig>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e022      	b.n	8006c68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fd3e 	bl	80076ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fdc5 	bl	80077f0 <UART_CheckIdleState>
 8006c66:	4603      	mov	r3, r0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	; 0x28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d132      	bne.n	8006cee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Receive_IT+0x24>
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e02b      	b.n	8006cf0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d018      	beq.n	8006cde <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	69f9      	ldr	r1, [r7, #28]
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e6      	bne.n	8006cac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fe93 	bl	8007a10 <UART_Start_Receive_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e000      	b.n	8006cf0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b0ba      	sub	sp, #232	; 0xe8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d22:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d26:	4013      	ands	r3, r2
 8006d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d115      	bne.n	8006d60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 82ab 	beq.w	80072ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      }
      return;
 8006d5e:	e2a5      	b.n	80072ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8117 	beq.w	8006f98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d7a:	4b85      	ldr	r3, [pc, #532]	; (8006f90 <HAL_UART_IRQHandler+0x298>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 810a 	beq.w	8006f98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d011      	beq.n	8006db4 <HAL_UART_IRQHandler+0xbc>
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2201      	movs	r2, #1
 8006da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006daa:	f043 0201 	orr.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d011      	beq.n	8006de4 <HAL_UART_IRQHandler+0xec>
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dda:	f043 0204 	orr.w	r2, r3, #4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d011      	beq.n	8006e14 <HAL_UART_IRQHandler+0x11c>
 8006df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2204      	movs	r2, #4
 8006e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0a:	f043 0202 	orr.w	r2, r3, #2
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d017      	beq.n	8006e50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e46:	f043 0208 	orr.w	r2, r3, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <HAL_UART_IRQHandler+0x18a>
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00c      	beq.n	8006e82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e78:	f043 0220 	orr.w	r2, r3, #32
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8211 	beq.w	80072b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d04f      	beq.n	8006f7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fe5e 	bl	8007b9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d141      	bne.n	8006f72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1d9      	bne.n	8006eee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d013      	beq.n	8006f6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f46:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <HAL_UART_IRQHandler+0x29c>)
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fb ff7d 	bl	8002e4e <HAL_DMA_Abort_IT>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d017      	beq.n	8006f8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	e00f      	b.n	8006f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f9b4 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e00b      	b.n	8006f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f9b0 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	e007      	b.n	8006f8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9ac 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006f88:	e192      	b.n	80072b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8a:	bf00      	nop
    return;
 8006f8c:	e190      	b.n	80072b0 <HAL_UART_IRQHandler+0x5b8>
 8006f8e:	bf00      	nop
 8006f90:	04000120 	.word	0x04000120
 8006f94:	08007c65 	.word	0x08007c65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	f040 814b 	bne.w	8007238 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8144 	beq.w	8007238 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 813d 	beq.w	8007238 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	f040 80b5 	bne.w	8007140 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fe2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8164 	beq.w	80072b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f080 815c 	bcs.w	80072b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b20      	cmp	r3, #32
 800700e:	f000 8086 	beq.w	800711e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800702a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800703c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007040:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007048:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1da      	bne.n	8007012 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800706c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007080:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007084:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e1      	bne.n	800705c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e3      	bne.n	8007098 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ee:	f023 0310 	bic.w	r3, r3, #16
 80070f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007100:	65bb      	str	r3, [r7, #88]	; 0x58
 8007102:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800710e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e4      	bne.n	80070de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007118:	4618      	mov	r0, r3
 800711a:	f7fb fe5f 	bl	8002ddc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007130:	b29b      	uxth	r3, r3
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	b29b      	uxth	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8d7 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800713e:	e0b9      	b.n	80072b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800714c:	b29b      	uxth	r3, r3
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80ab 	beq.w	80072b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80a6 	beq.w	80072b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800717a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800718e:	647b      	str	r3, [r7, #68]	; 0x44
 8007190:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e4      	bne.n	800716c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	623b      	str	r3, [r7, #32]
   return(result);
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071c6:	633a      	str	r2, [r7, #48]	; 0x30
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e3      	bne.n	80071a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	617b      	str	r3, [r7, #20]
   return(result);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e4      	bne.n	80071ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800722a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f85b 	bl	80072ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007236:	e03f      	b.n	80072b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <HAL_UART_IRQHandler+0x56a>
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 feea 	bl	8008034 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007260:	e02d      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800726e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01c      	beq.n	80072bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
    }
    return;
 800728a:	e017      	b.n	80072bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d012      	beq.n	80072be <HAL_UART_IRQHandler+0x5c6>
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fcf3 	bl	8007c90 <UART_EndTransmit_IT>
    return;
 80072aa:	e008      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
      return;
 80072ac:	bf00      	nop
 80072ae:	e006      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
    return;
 80072b0:	bf00      	nop
 80072b2:	e004      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
      return;
 80072b4:	bf00      	nop
 80072b6:	e002      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
      return;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <HAL_UART_IRQHandler+0x5c6>
    return;
 80072bc:	bf00      	nop
  }

}
 80072be:	37e8      	adds	r7, #232	; 0xe8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b92      	ldr	r3, [pc, #584]	; (8007578 <UART_SetConfig+0x274>)
 8007330:	4013      	ands	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	430b      	orrs	r3, r1
 800733a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	430a      	orrs	r2, r1
 8007374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a80      	ldr	r2, [pc, #512]	; (800757c <UART_SetConfig+0x278>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d120      	bne.n	80073c2 <UART_SetConfig+0xbe>
 8007380:	4b7f      	ldr	r3, [pc, #508]	; (8007580 <UART_SetConfig+0x27c>)
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	2b03      	cmp	r3, #3
 800738a:	d817      	bhi.n	80073bc <UART_SetConfig+0xb8>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <UART_SetConfig+0x90>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073a5 	.word	0x080073a5
 8007398:	080073b1 	.word	0x080073b1
 800739c:	080073b7 	.word	0x080073b7
 80073a0:	080073ab 	.word	0x080073ab
 80073a4:	2301      	movs	r3, #1
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e0b5      	b.n	8007516 <UART_SetConfig+0x212>
 80073aa:	2302      	movs	r3, #2
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e0b2      	b.n	8007516 <UART_SetConfig+0x212>
 80073b0:	2304      	movs	r3, #4
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e0af      	b.n	8007516 <UART_SetConfig+0x212>
 80073b6:	2308      	movs	r3, #8
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e0ac      	b.n	8007516 <UART_SetConfig+0x212>
 80073bc:	2310      	movs	r3, #16
 80073be:	77fb      	strb	r3, [r7, #31]
 80073c0:	e0a9      	b.n	8007516 <UART_SetConfig+0x212>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6f      	ldr	r2, [pc, #444]	; (8007584 <UART_SetConfig+0x280>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d124      	bne.n	8007416 <UART_SetConfig+0x112>
 80073cc:	4b6c      	ldr	r3, [pc, #432]	; (8007580 <UART_SetConfig+0x27c>)
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073d8:	d011      	beq.n	80073fe <UART_SetConfig+0xfa>
 80073da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073de:	d817      	bhi.n	8007410 <UART_SetConfig+0x10c>
 80073e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e4:	d011      	beq.n	800740a <UART_SetConfig+0x106>
 80073e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ea:	d811      	bhi.n	8007410 <UART_SetConfig+0x10c>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <UART_SetConfig+0xf4>
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f4:	d006      	beq.n	8007404 <UART_SetConfig+0x100>
 80073f6:	e00b      	b.n	8007410 <UART_SetConfig+0x10c>
 80073f8:	2300      	movs	r3, #0
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e08b      	b.n	8007516 <UART_SetConfig+0x212>
 80073fe:	2302      	movs	r3, #2
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e088      	b.n	8007516 <UART_SetConfig+0x212>
 8007404:	2304      	movs	r3, #4
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e085      	b.n	8007516 <UART_SetConfig+0x212>
 800740a:	2308      	movs	r3, #8
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e082      	b.n	8007516 <UART_SetConfig+0x212>
 8007410:	2310      	movs	r3, #16
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e07f      	b.n	8007516 <UART_SetConfig+0x212>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a5b      	ldr	r2, [pc, #364]	; (8007588 <UART_SetConfig+0x284>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d124      	bne.n	800746a <UART_SetConfig+0x166>
 8007420:	4b57      	ldr	r3, [pc, #348]	; (8007580 <UART_SetConfig+0x27c>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007428:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800742c:	d011      	beq.n	8007452 <UART_SetConfig+0x14e>
 800742e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007432:	d817      	bhi.n	8007464 <UART_SetConfig+0x160>
 8007434:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007438:	d011      	beq.n	800745e <UART_SetConfig+0x15a>
 800743a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800743e:	d811      	bhi.n	8007464 <UART_SetConfig+0x160>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <UART_SetConfig+0x148>
 8007444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007448:	d006      	beq.n	8007458 <UART_SetConfig+0x154>
 800744a:	e00b      	b.n	8007464 <UART_SetConfig+0x160>
 800744c:	2300      	movs	r3, #0
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e061      	b.n	8007516 <UART_SetConfig+0x212>
 8007452:	2302      	movs	r3, #2
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e05e      	b.n	8007516 <UART_SetConfig+0x212>
 8007458:	2304      	movs	r3, #4
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e05b      	b.n	8007516 <UART_SetConfig+0x212>
 800745e:	2308      	movs	r3, #8
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e058      	b.n	8007516 <UART_SetConfig+0x212>
 8007464:	2310      	movs	r3, #16
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e055      	b.n	8007516 <UART_SetConfig+0x212>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a47      	ldr	r2, [pc, #284]	; (800758c <UART_SetConfig+0x288>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d124      	bne.n	80074be <UART_SetConfig+0x1ba>
 8007474:	4b42      	ldr	r3, [pc, #264]	; (8007580 <UART_SetConfig+0x27c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800747c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007480:	d011      	beq.n	80074a6 <UART_SetConfig+0x1a2>
 8007482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007486:	d817      	bhi.n	80074b8 <UART_SetConfig+0x1b4>
 8007488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800748c:	d011      	beq.n	80074b2 <UART_SetConfig+0x1ae>
 800748e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007492:	d811      	bhi.n	80074b8 <UART_SetConfig+0x1b4>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x19c>
 8007498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749c:	d006      	beq.n	80074ac <UART_SetConfig+0x1a8>
 800749e:	e00b      	b.n	80074b8 <UART_SetConfig+0x1b4>
 80074a0:	2300      	movs	r3, #0
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e037      	b.n	8007516 <UART_SetConfig+0x212>
 80074a6:	2302      	movs	r3, #2
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e034      	b.n	8007516 <UART_SetConfig+0x212>
 80074ac:	2304      	movs	r3, #4
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e031      	b.n	8007516 <UART_SetConfig+0x212>
 80074b2:	2308      	movs	r3, #8
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e02e      	b.n	8007516 <UART_SetConfig+0x212>
 80074b8:	2310      	movs	r3, #16
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e02b      	b.n	8007516 <UART_SetConfig+0x212>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a33      	ldr	r2, [pc, #204]	; (8007590 <UART_SetConfig+0x28c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d124      	bne.n	8007512 <UART_SetConfig+0x20e>
 80074c8:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <UART_SetConfig+0x27c>)
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80074d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074d4:	d011      	beq.n	80074fa <UART_SetConfig+0x1f6>
 80074d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074da:	d817      	bhi.n	800750c <UART_SetConfig+0x208>
 80074dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074e0:	d011      	beq.n	8007506 <UART_SetConfig+0x202>
 80074e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074e6:	d811      	bhi.n	800750c <UART_SetConfig+0x208>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <UART_SetConfig+0x1f0>
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d006      	beq.n	8007500 <UART_SetConfig+0x1fc>
 80074f2:	e00b      	b.n	800750c <UART_SetConfig+0x208>
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e00d      	b.n	8007516 <UART_SetConfig+0x212>
 80074fa:	2302      	movs	r3, #2
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e00a      	b.n	8007516 <UART_SetConfig+0x212>
 8007500:	2304      	movs	r3, #4
 8007502:	77fb      	strb	r3, [r7, #31]
 8007504:	e007      	b.n	8007516 <UART_SetConfig+0x212>
 8007506:	2308      	movs	r3, #8
 8007508:	77fb      	strb	r3, [r7, #31]
 800750a:	e004      	b.n	8007516 <UART_SetConfig+0x212>
 800750c:	2310      	movs	r3, #16
 800750e:	77fb      	strb	r3, [r7, #31]
 8007510:	e001      	b.n	8007516 <UART_SetConfig+0x212>
 8007512:	2310      	movs	r3, #16
 8007514:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751e:	d16b      	bne.n	80075f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007520:	7ffb      	ldrb	r3, [r7, #31]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d838      	bhi.n	8007598 <UART_SetConfig+0x294>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x228>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007551 	.word	0x08007551
 8007530:	08007559 	.word	0x08007559
 8007534:	08007561 	.word	0x08007561
 8007538:	08007599 	.word	0x08007599
 800753c:	08007567 	.word	0x08007567
 8007540:	08007599 	.word	0x08007599
 8007544:	08007599 	.word	0x08007599
 8007548:	08007599 	.word	0x08007599
 800754c:	0800756f 	.word	0x0800756f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007550:	f7fd f8bc 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8007554:	61b8      	str	r0, [r7, #24]
        break;
 8007556:	e024      	b.n	80075a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007558:	f7fd f8da 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 800755c:	61b8      	str	r0, [r7, #24]
        break;
 800755e:	e020      	b.n	80075a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <UART_SetConfig+0x290>)
 8007562:	61bb      	str	r3, [r7, #24]
        break;
 8007564:	e01d      	b.n	80075a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007566:	f7fd f83b 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800756a:	61b8      	str	r0, [r7, #24]
        break;
 800756c:	e019      	b.n	80075a2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007572:	61bb      	str	r3, [r7, #24]
        break;
 8007574:	e015      	b.n	80075a2 <UART_SetConfig+0x29e>
 8007576:	bf00      	nop
 8007578:	efff69f3 	.word	0xefff69f3
 800757c:	40013800 	.word	0x40013800
 8007580:	40021000 	.word	0x40021000
 8007584:	40004400 	.word	0x40004400
 8007588:	40004800 	.word	0x40004800
 800758c:	40004c00 	.word	0x40004c00
 8007590:	40005000 	.word	0x40005000
 8007594:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	77bb      	strb	r3, [r7, #30]
        break;
 80075a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d073      	beq.n	8007690 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	005a      	lsls	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	441a      	add	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d916      	bls.n	80075f2 <UART_SetConfig+0x2ee>
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ca:	d212      	bcs.n	80075f2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f023 030f 	bic.w	r3, r3, #15
 80075d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	89fb      	ldrh	r3, [r7, #14]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	89fa      	ldrh	r2, [r7, #14]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	e04e      	b.n	8007690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	77bb      	strb	r3, [r7, #30]
 80075f6:	e04b      	b.n	8007690 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075f8:	7ffb      	ldrb	r3, [r7, #31]
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d827      	bhi.n	800764e <UART_SetConfig+0x34a>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <UART_SetConfig+0x300>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007629 	.word	0x08007629
 8007608:	08007631 	.word	0x08007631
 800760c:	08007639 	.word	0x08007639
 8007610:	0800764f 	.word	0x0800764f
 8007614:	0800763f 	.word	0x0800763f
 8007618:	0800764f 	.word	0x0800764f
 800761c:	0800764f 	.word	0x0800764f
 8007620:	0800764f 	.word	0x0800764f
 8007624:	08007647 	.word	0x08007647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007628:	f7fd f850 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 800762c:	61b8      	str	r0, [r7, #24]
        break;
 800762e:	e013      	b.n	8007658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007630:	f7fd f86e 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8007634:	61b8      	str	r0, [r7, #24]
        break;
 8007636:	e00f      	b.n	8007658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <UART_SetConfig+0x3a4>)
 800763a:	61bb      	str	r3, [r7, #24]
        break;
 800763c:	e00c      	b.n	8007658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800763e:	f7fc ffcf 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8007642:	61b8      	str	r0, [r7, #24]
        break;
 8007644:	e008      	b.n	8007658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800764a:	61bb      	str	r3, [r7, #24]
        break;
 800764c:	e004      	b.n	8007658 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	77bb      	strb	r3, [r7, #30]
        break;
 8007656:	bf00      	nop
    }

    if (pclk != 0U)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	085a      	lsrs	r2, r3, #1
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	441a      	add	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d909      	bls.n	800768c <UART_SetConfig+0x388>
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767e:	d205      	bcs.n	800768c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	e001      	b.n	8007690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800769c:	7fbb      	ldrb	r3, [r7, #30]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	007a1200 	.word	0x007a1200

080076ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01a      	beq.n	80077c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077aa:	d10a      	bne.n	80077c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
  }
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b098      	sub	sp, #96	; 0x60
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007800:	f7fb f9da 	bl	8002bb8 <HAL_GetTick>
 8007804:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b08      	cmp	r3, #8
 8007812:	d12e      	bne.n	8007872 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800781c:	2200      	movs	r2, #0
 800781e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f88c 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d021      	beq.n	8007872 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007842:	653b      	str	r3, [r7, #80]	; 0x50
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784c:	647b      	str	r3, [r7, #68]	; 0x44
 800784e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800785a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e062      	b.n	8007938 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b04      	cmp	r3, #4
 800787e:	d149      	bne.n	8007914 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007888:	2200      	movs	r2, #0
 800788a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f856 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d03c      	beq.n	8007914 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	623b      	str	r3, [r7, #32]
   return(result);
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b8:	633b      	str	r3, [r7, #48]	; 0x30
 80078ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e6      	bne.n	800789a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	60fb      	str	r3, [r7, #12]
   return(result);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3308      	adds	r3, #8
 80078ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ec:	61fa      	str	r2, [r7, #28]
 80078ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	69b9      	ldr	r1, [r7, #24]
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	617b      	str	r3, [r7, #20]
   return(result);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e5      	bne.n	80078cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e011      	b.n	8007938 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3758      	adds	r7, #88	; 0x58
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	e049      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d045      	beq.n	80079e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795a:	f7fb f92d 	bl	8002bb8 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <UART_WaitOnFlagUntilTimeout+0x30>
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e048      	b.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d031      	beq.n	80079e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b08      	cmp	r3, #8
 800798e:	d110      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2208      	movs	r2, #8
 8007996:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f8ff 	bl	8007b9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2208      	movs	r2, #8
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e029      	b.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c0:	d111      	bne.n	80079e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f8e5 	bl	8007b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e00f      	b.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4013      	ands	r3, r2
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	bf0c      	ite	eq
 80079f6:	2301      	moveq	r3, #1
 80079f8:	2300      	movne	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d0a6      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b097      	sub	sp, #92	; 0x5c
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a42:	d10e      	bne.n	8007a62 <UART_Start_Receive_IT+0x52>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <UART_Start_Receive_IT+0x48>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a56:	e02d      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	22ff      	movs	r2, #255	; 0xff
 8007a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a60:	e028      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <UART_Start_Receive_IT+0x76>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <UART_Start_Receive_IT+0x6c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a7a:	e01b      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	227f      	movs	r2, #127	; 0x7f
 8007a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a84:	e016      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a8e:	d10d      	bne.n	8007aac <UART_Start_Receive_IT+0x9c>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <UART_Start_Receive_IT+0x92>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	227f      	movs	r2, #127	; 0x7f
 8007a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aa0:	e008      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	223f      	movs	r2, #63	; 0x3f
 8007aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aaa:	e003      	b.n	8007ab4 <UART_Start_Receive_IT+0xa4>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	657b      	str	r3, [r7, #84]	; 0x54
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ae4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ae6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e5      	bne.n	8007ac4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b00:	d107      	bne.n	8007b12 <UART_Start_Receive_IT+0x102>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <UART_Start_Receive_IT+0x184>)
 8007b0e:	669a      	str	r2, [r3, #104]	; 0x68
 8007b10:	e002      	b.n	8007b18 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <UART_Start_Receive_IT+0x188>)
 8007b16:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d019      	beq.n	8007b54 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_Start_Receive_IT+0x110>
 8007b52:	e018      	b.n	8007b86 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	613b      	str	r3, [r7, #16]
   return(result);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f043 0320 	orr.w	r3, r3, #32
 8007b68:	653b      	str	r3, [r7, #80]	; 0x50
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	69f9      	ldr	r1, [r7, #28]
 8007b78:	6a3a      	ldr	r2, [r7, #32]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e6      	bne.n	8007b54 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	375c      	adds	r7, #92	; 0x5c
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	08007e8d 	.word	0x08007e8d
 8007b98:	08007ce5 	.word	0x08007ce5

08007b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b095      	sub	sp, #84	; 0x54
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e6      	bne.n	8007ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f023 0301 	bic.w	r3, r3, #1
 8007bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e5      	bne.n	8007bd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d118      	bne.n	8007c44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	647b      	str	r3, [r7, #68]	; 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c58:	bf00      	nop
 8007c5a:	3754      	adds	r7, #84	; 0x54
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fb28 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	61bb      	str	r3, [r7, #24]
 8007cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff faf4 	bl	80072c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cdc:	bf00      	nop
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b09c      	sub	sp, #112	; 0x70
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cf2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfc:	2b22      	cmp	r3, #34	; 0x22
 8007cfe:	f040 80b9 	bne.w	8007e74 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d10:	b2d9      	uxtb	r1, r3
 8007d12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	400a      	ands	r2, r1
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 809c 	bne.w	8007e84 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	f023 0301 	bic.w	r3, r3, #1
 8007d94:	667b      	str	r3, [r7, #100]	; 0x64
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8007da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d018      	beq.n	8007e06 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	623b      	str	r3, [r7, #32]
   return(result);
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007de8:	663b      	str	r3, [r7, #96]	; 0x60
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df2:	633b      	str	r3, [r7, #48]	; 0x30
 8007df4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d12e      	bne.n	8007e6c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f023 0310 	bic.w	r3, r3, #16
 8007e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	69b9      	ldr	r1, [r7, #24]
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e6      	bne.n	8007e14 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d103      	bne.n	8007e5c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2210      	movs	r2, #16
 8007e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fa41 	bl	80072ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e6a:	e00b      	b.n	8007e84 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fa f9b3 	bl	80021d8 <HAL_UART_RxCpltCallback>
}
 8007e72:	e007      	b.n	8007e84 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	619a      	str	r2, [r3, #24]
}
 8007e84:	bf00      	nop
 8007e86:	3770      	adds	r7, #112	; 0x70
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b09c      	sub	sp, #112	; 0x70
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea4:	2b22      	cmp	r3, #34	; 0x22
 8007ea6:	f040 80b9 	bne.w	800801c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007eba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007ebe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ec8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	1c9a      	adds	r2, r3, #2
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 809c 	bne.w	800802c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f08:	667b      	str	r3, [r7, #100]	; 0x64
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f12:	657b      	str	r3, [r7, #84]	; 0x54
 8007f14:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e6      	bne.n	8007ef4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f46:	643a      	str	r2, [r7, #64]	; 0x40
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e5      	bne.n	8007f26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d018      	beq.n	8007fae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d12e      	bne.n	8008014 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f023 0310 	bic.w	r3, r3, #16
 8007fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e6      	bne.n	8007fbc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d103      	bne.n	8008004 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2210      	movs	r2, #16
 8008002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff f96d 	bl	80072ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008012:	e00b      	b.n	800802c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fa f8df 	bl	80021d8 <HAL_UART_RxCpltCallback>
}
 800801a:	e007      	b.n	800802c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0208 	orr.w	r2, r2, #8
 800802a:	619a      	str	r2, [r3, #24]
}
 800802c:	bf00      	nop
 800802e:	3770      	adds	r7, #112	; 0x70
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800804e:	f3ef 8305 	mrs	r3, IPSR
 8008052:	60bb      	str	r3, [r7, #8]
  return(result);
 8008054:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10f      	bne.n	800807a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800805a:	f3ef 8310 	mrs	r3, PRIMASK
 800805e:	607b      	str	r3, [r7, #4]
  return(result);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <osKernelInitialize+0x32>
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <osKernelInitialize+0x64>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d109      	bne.n	8008082 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800806e:	f3ef 8311 	mrs	r3, BASEPRI
 8008072:	603b      	str	r3, [r7, #0]
  return(result);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800807a:	f06f 0305 	mvn.w	r3, #5
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e00c      	b.n	800809c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <osKernelInitialize+0x64>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <osKernelInitialize+0x64>)
 800808c:	2201      	movs	r2, #1
 800808e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e002      	b.n	800809c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008096:	f04f 33ff 	mov.w	r3, #4294967295
 800809a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800809c:	68fb      	ldr	r3, [r7, #12]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000564 	.word	0x20000564

080080b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b6:	f3ef 8305 	mrs	r3, IPSR
 80080ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80080bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10f      	bne.n	80080e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c2:	f3ef 8310 	mrs	r3, PRIMASK
 80080c6:	607b      	str	r3, [r7, #4]
  return(result);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <osKernelStart+0x32>
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <osKernelStart+0x64>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d109      	bne.n	80080ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080d6:	f3ef 8311 	mrs	r3, BASEPRI
 80080da:	603b      	str	r3, [r7, #0]
  return(result);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80080e2:	f06f 0305 	mvn.w	r3, #5
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e00e      	b.n	8008108 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <osKernelStart+0x64>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d107      	bne.n	8008102 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <osKernelStart+0x64>)
 80080f4:	2202      	movs	r2, #2
 80080f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80080f8:	f001 fdfa 	bl	8009cf0 <vTaskStartScheduler>
      stat = osOK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e002      	b.n	8008108 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008108:	68fb      	ldr	r3, [r7, #12]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000564 	.word	0x20000564

08008118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b092      	sub	sp, #72	; 0x48
 800811c:	af04      	add	r7, sp, #16
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008128:	f3ef 8305 	mrs	r3, IPSR
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 8094 	bne.w	800825e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008136:	f3ef 8310 	mrs	r3, PRIMASK
 800813a:	623b      	str	r3, [r7, #32]
  return(result);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 808d 	bne.w	800825e <osThreadNew+0x146>
 8008144:	4b48      	ldr	r3, [pc, #288]	; (8008268 <osThreadNew+0x150>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d106      	bne.n	800815a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800814c:	f3ef 8311 	mrs	r3, BASEPRI
 8008150:	61fb      	str	r3, [r7, #28]
  return(result);
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 8082 	bne.w	800825e <osThreadNew+0x146>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d07e      	beq.n	800825e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008160:	2380      	movs	r3, #128	; 0x80
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008164:	2318      	movs	r3, #24
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008168:	2300      	movs	r3, #0
 800816a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800816c:	f107 031b 	add.w	r3, r7, #27
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008172:	f04f 33ff 	mov.w	r3, #4294967295
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d045      	beq.n	800820a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <osThreadNew+0x74>
        name = attr->name;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <osThreadNew+0x9a>
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	2b38      	cmp	r3, #56	; 0x38
 80081a4:	d805      	bhi.n	80081b2 <osThreadNew+0x9a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <osThreadNew+0x9e>
        return (NULL);
 80081b2:	2300      	movs	r3, #0
 80081b4:	e054      	b.n	8008260 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	089b      	lsrs	r3, r3, #2
 80081c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <osThreadNew+0xd4>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	2bab      	cmp	r3, #171	; 0xab
 80081d4:	d90a      	bls.n	80081ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d006      	beq.n	80081ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <osThreadNew+0xd4>
        mem = 1;
 80081e6:	2301      	movs	r3, #1
 80081e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ea:	e010      	b.n	800820e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <osThreadNew+0xf6>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d108      	bne.n	800820e <osThreadNew+0xf6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <osThreadNew+0xf6>
          mem = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
 8008208:	e001      	b.n	800820e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	2b01      	cmp	r3, #1
 8008212:	d110      	bne.n	8008236 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800821c:	9202      	str	r2, [sp, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008228:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fa6c 	bl	8009708 <xTaskCreateStatic>
 8008230:	4603      	mov	r3, r0
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	e013      	b.n	800825e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d110      	bne.n	800825e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	b29a      	uxth	r2, r3
 8008240:	f107 0314 	add.w	r3, r7, #20
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 fab6 	bl	80097c0 <xTaskCreate>
 8008254:	4603      	mov	r3, r0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d001      	beq.n	800825e <osThreadNew+0x146>
          hTask = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800825e:	697b      	ldr	r3, [r7, #20]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3738      	adds	r7, #56	; 0x38
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000564 	.word	0x20000564

0800826c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008272:	f3ef 8305 	mrs	r3, IPSR
 8008276:	60bb      	str	r3, [r7, #8]
  return(result);
 8008278:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10f      	bne.n	800829e <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800827e:	f3ef 8310 	mrs	r3, PRIMASK
 8008282:	607b      	str	r3, [r7, #4]
  return(result);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <osThreadGetId+0x32>
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <osThreadGetId+0x48>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d108      	bne.n	80082a4 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008292:	f3ef 8311 	mrs	r3, BASEPRI
 8008296:	603b      	str	r3, [r7, #0]
  return(result);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <osThreadGetId+0x38>
    id = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	e002      	b.n	80082aa <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80082a4:	f002 f9ec 	bl	800a680 <xTaskGetCurrentTaskHandle>
 80082a8:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 80082aa:	68fb      	ldr	r3, [r7, #12]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000564 	.word	0x20000564

080082b8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c4:	f3ef 8305 	mrs	r3, IPSR
 80082c8:	617b      	str	r3, [r7, #20]
  return(result);
 80082ca:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10f      	bne.n	80082f0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d0:	f3ef 8310 	mrs	r3, PRIMASK
 80082d4:	613b      	str	r3, [r7, #16]
  return(result);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <osThreadSuspend+0x38>
 80082dc:	4b0f      	ldr	r3, [pc, #60]	; (800831c <osThreadSuspend+0x64>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d109      	bne.n	80082f8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082e4:	f3ef 8311 	mrs	r3, BASEPRI
 80082e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80082f0:	f06f 0305 	mvn.w	r3, #5
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	e00b      	b.n	8008310 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80082fe:	f06f 0303 	mvn.w	r3, #3
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	e004      	b.n	8008310 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800830a:	69b8      	ldr	r0, [r7, #24]
 800830c:	f001 fbe0 	bl	8009ad0 <vTaskSuspend>
  }

  return (stat);
 8008310:	69fb      	ldr	r3, [r7, #28]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000564 	.word	0x20000564

08008320 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800832c:	f3ef 8305 	mrs	r3, IPSR
 8008330:	617b      	str	r3, [r7, #20]
  return(result);
 8008332:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10f      	bne.n	8008358 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008338:	f3ef 8310 	mrs	r3, PRIMASK
 800833c:	613b      	str	r3, [r7, #16]
  return(result);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <osThreadResume+0x38>
 8008344:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <osThreadResume+0x64>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d109      	bne.n	8008360 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800834c:	f3ef 8311 	mrs	r3, BASEPRI
 8008350:	60fb      	str	r3, [r7, #12]
  return(result);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <osThreadResume+0x40>
    stat = osErrorISR;
 8008358:	f06f 0305 	mvn.w	r3, #5
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e00b      	b.n	8008378 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008366:	f06f 0303 	mvn.w	r3, #3
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e004      	b.n	8008378 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008372:	69b8      	ldr	r0, [r7, #24]
 8008374:	f001 fc5e 	bl	8009c34 <vTaskResume>
  }

  return (stat);
 8008378:	69fb      	ldr	r3, [r7, #28]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000564 	.word	0x20000564

08008388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008390:	f3ef 8305 	mrs	r3, IPSR
 8008394:	613b      	str	r3, [r7, #16]
  return(result);
 8008396:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839c:	f3ef 8310 	mrs	r3, PRIMASK
 80083a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d109      	bne.n	80083bc <osDelay+0x34>
 80083a8:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <osDelay+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d109      	bne.n	80083c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083b0:	f3ef 8311 	mrs	r3, BASEPRI
 80083b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <osDelay+0x3c>
    stat = osErrorISR;
 80083bc:	f06f 0305 	mvn.w	r3, #5
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e007      	b.n	80083d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fb4a 	bl	8009a68 <vTaskDelay>
    }
  }

  return (stat);
 80083d4:	697b      	ldr	r3, [r7, #20]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000564 	.word	0x20000564

080083e4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f0:	f3ef 8305 	mrs	r3, IPSR
 80083f4:	617b      	str	r3, [r7, #20]
  return(result);
 80083f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d13d      	bne.n	8008478 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008400:	613b      	str	r3, [r7, #16]
  return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d137      	bne.n	8008478 <osEventFlagsNew+0x94>
 8008408:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <osEventFlagsNew+0xa0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d105      	bne.n	800841c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008410:	f3ef 8311 	mrs	r3, BASEPRI
 8008414:	60fb      	str	r3, [r7, #12]
  return(result);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d12d      	bne.n	8008478 <osEventFlagsNew+0x94>
    mem = -1;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d006      	beq.n	800843e <osEventFlagsNew+0x5a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2b1f      	cmp	r3, #31
 8008436:	d902      	bls.n	800843e <osEventFlagsNew+0x5a>
        mem = 1;
 8008438:	2301      	movs	r3, #1
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e00c      	b.n	8008458 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d108      	bne.n	8008458 <osEventFlagsNew+0x74>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d104      	bne.n	8008458 <osEventFlagsNew+0x74>
          mem = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e001      	b.n	8008458 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d106      	bne.n	800846c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f9ae 	bl	80087c4 <xEventGroupCreateStatic>
 8008468:	61f8      	str	r0, [r7, #28]
 800846a:	e005      	b.n	8008478 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008472:	f000 f9de 	bl	8008832 <xEventGroupCreate>
 8008476:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008478:	69fb      	ldr	r3, [r7, #28]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000564 	.word	0x20000564

08008488 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <osEventFlagsSet+0x1e>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80084a6:	f06f 0303 	mvn.w	r3, #3
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	e03a      	b.n	8008524 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	617b      	str	r3, [r7, #20]
  return(result);
 80084b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10f      	bne.n	80084da <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	613b      	str	r3, [r7, #16]
  return(result);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <osEventFlagsSet+0x52>
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <osEventFlagsSet+0xa8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d123      	bne.n	8008516 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084ce:	f3ef 8311 	mrs	r3, BASEPRI
 80084d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01d      	beq.n	8008516 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80084da:	2300      	movs	r3, #0
 80084dc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	461a      	mov	r2, r3
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	69b8      	ldr	r0, [r7, #24]
 80084e8:	f000 fad4 	bl	8008a94 <xEventGroupSetBitsFromISR>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80084f2:	f06f 0302 	mvn.w	r3, #2
 80084f6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80084f8:	e013      	b.n	8008522 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <osEventFlagsSet+0x9a>
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <osEventFlagsSet+0xac>)
 8008506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008514:	e005      	b.n	8008522 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	69b8      	ldr	r0, [r7, #24]
 800851a:	f000 fa15 	bl	8008948 <xEventGroupSetBits>
 800851e:	61f8      	str	r0, [r7, #28]
 8008520:	e000      	b.n	8008524 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008522:	bf00      	nop
  }

  return (rflags);
 8008524:	69fb      	ldr	r3, [r7, #28]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000564 	.word	0x20000564
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <osEventFlagsClear+0x1e>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008556:	f06f 0303 	mvn.w	r3, #3
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e029      	b.n	80085b2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800855e:	f3ef 8305 	mrs	r3, IPSR
 8008562:	617b      	str	r3, [r7, #20]
  return(result);
 8008564:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10f      	bne.n	800858a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800856a:	f3ef 8310 	mrs	r3, PRIMASK
 800856e:	613b      	str	r3, [r7, #16]
  return(result);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <osEventFlagsClear+0x52>
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <osEventFlagsClear+0x84>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d114      	bne.n	80085a8 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800857e:	f3ef 8311 	mrs	r3, BASEPRI
 8008582:	60fb      	str	r3, [r7, #12]
  return(result);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00e      	beq.n	80085a8 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800858a:	69b8      	ldr	r0, [r7, #24]
 800858c:	f000 f9b8 	bl	8008900 <xEventGroupGetBitsFromISR>
 8008590:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	69b8      	ldr	r0, [r7, #24]
 8008596:	f000 f99f 	bl	80088d8 <xEventGroupClearBitsFromISR>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d108      	bne.n	80085b2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80085a0:	f06f 0302 	mvn.w	r3, #2
 80085a4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80085a6:	e004      	b.n	80085b2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	69b8      	ldr	r0, [r7, #24]
 80085ac:	f000 f95b 	bl	8008866 <xEventGroupClearBits>
 80085b0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80085b2:	69fb      	ldr	r3, [r7, #28]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20000564 	.word	0x20000564

080085c0 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <osEventFlagsGet+0x18>
    rflags = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e01f      	b.n	8008618 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d8:	f3ef 8305 	mrs	r3, IPSR
 80085dc:	617b      	str	r3, [r7, #20]
  return(result);
 80085de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10f      	bne.n	8008604 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e4:	f3ef 8310 	mrs	r3, PRIMASK
 80085e8:	613b      	str	r3, [r7, #16]
  return(result);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <osEventFlagsGet+0x44>
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <osEventFlagsGet+0x64>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d10a      	bne.n	800860e <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085f8:	f3ef 8311 	mrs	r3, BASEPRI
 80085fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008604:	69b8      	ldr	r0, [r7, #24]
 8008606:	f000 f97b 	bl	8008900 <xEventGroupGetBitsFromISR>
 800860a:	61f8      	str	r0, [r7, #28]
 800860c:	e004      	b.n	8008618 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800860e:	2100      	movs	r1, #0
 8008610:	69b8      	ldr	r0, [r7, #24]
 8008612:	f000 f928 	bl	8008866 <xEventGroupClearBits>
 8008616:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008618:	69fb      	ldr	r3, [r7, #28]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000564 	.word	0x20000564

08008628 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008634:	f3ef 8305 	mrs	r3, IPSR
 8008638:	613b      	str	r3, [r7, #16]
  return(result);
 800863a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800863c:	2b00      	cmp	r3, #0
 800863e:	f040 8085 	bne.w	800874c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008642:	f3ef 8310 	mrs	r3, PRIMASK
 8008646:	60fb      	str	r3, [r7, #12]
  return(result);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d17e      	bne.n	800874c <osMutexNew+0x124>
 800864e:	4b42      	ldr	r3, [pc, #264]	; (8008758 <osMutexNew+0x130>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d105      	bne.n	8008662 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008656:	f3ef 8311 	mrs	r3, BASEPRI
 800865a:	60bb      	str	r3, [r7, #8]
  return(result);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d174      	bne.n	800874c <osMutexNew+0x124>
    if (attr != NULL) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	e001      	b.n	8008674 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <osMutexNew+0x5c>
      rmtx = 1U;
 800867e:	2301      	movs	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	e001      	b.n	8008688 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d15c      	bne.n	800874c <osMutexNew+0x124>
      mem = -1;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d015      	beq.n	80086ca <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <osMutexNew+0x8c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b4f      	cmp	r3, #79	; 0x4f
 80086ac:	d902      	bls.n	80086b4 <osMutexNew+0x8c>
          mem = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e00c      	b.n	80086ce <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d108      	bne.n	80086ce <osMutexNew+0xa6>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <osMutexNew+0xa6>
            mem = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	e001      	b.n	80086ce <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d112      	bne.n	80086fa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	4619      	mov	r1, r3
 80086e0:	2004      	movs	r0, #4
 80086e2:	f000 fc11 	bl	8008f08 <xQueueCreateMutexStatic>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24
 80086e8:	e016      	b.n	8008718 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4619      	mov	r1, r3
 80086f0:	2001      	movs	r0, #1
 80086f2:	f000 fc09 	bl	8008f08 <xQueueCreateMutexStatic>
 80086f6:	6278      	str	r0, [r7, #36]	; 0x24
 80086f8:	e00e      	b.n	8008718 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008706:	2004      	movs	r0, #4
 8008708:	f000 fbe6 	bl	8008ed8 <xQueueCreateMutex>
 800870c:	6278      	str	r0, [r7, #36]	; 0x24
 800870e:	e003      	b.n	8008718 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008710:	2001      	movs	r0, #1
 8008712:	f000 fbe1 	bl	8008ed8 <xQueueCreateMutex>
 8008716:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <osMutexNew+0x110>
        if (attr != NULL) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <osMutexNew+0x104>
          name = attr->name;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e001      	b.n	8008730 <osMutexNew+0x108>
        } else {
          name = NULL;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008734:	f000 ff8a 	bl	800964c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d006      	beq.n	800874c <osMutexNew+0x124>
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800874e:	4618      	mov	r0, r3
 8008750:	3728      	adds	r7, #40	; 0x28
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000564 	.word	0x20000564

0800875c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a07      	ldr	r2, [pc, #28]	; (8008788 <vApplicationGetIdleTaskMemory+0x2c>)
 800876c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4a06      	ldr	r2, [pc, #24]	; (800878c <vApplicationGetIdleTaskMemory+0x30>)
 8008772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2280      	movs	r2, #128	; 0x80
 8008778:	601a      	str	r2, [r3, #0]
}
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20000568 	.word	0x20000568
 800878c:	20000614 	.word	0x20000614

08008790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4a07      	ldr	r2, [pc, #28]	; (80087bc <vApplicationGetTimerTaskMemory+0x2c>)
 80087a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vApplicationGetTimerTaskMemory+0x30>)
 80087a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087ae:	601a      	str	r2, [r3, #0]
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20000814 	.word	0x20000814
 80087c0:	200008c0 	.word	0x200008c0

080087c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80087e8:	2320      	movs	r3, #32
 80087ea:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d00a      	beq.n	8008808 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f94d 	bl	8008abc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2201      	movs	r2, #1
 8008826:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008828:	697b      	ldr	r3, [r7, #20]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008838:	2020      	movs	r0, #32
 800883a:	f002 fd95 	bl	800b368 <pvPortMalloc>
 800883e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f933 	bl	8008abc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800885c:	687b      	ldr	r3, [r7, #4]
	}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b086      	sub	sp, #24
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xEventGroupClearBits+0x2a>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	60fb      	str	r3, [r7, #12]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <xEventGroupClearBits+0x4a>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60bb      	str	r3, [r7, #8]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80088b0:	f002 fc38 	bl	800b124 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80088c8:	f002 fc5c 	bl	800b184 <vPortExitCritical>

	return uxReturn;
 80088cc:	693b      	ldr	r3, [r7, #16]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80088e2:	2300      	movs	r3, #0
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4804      	ldr	r0, [pc, #16]	; (80088fc <xEventGroupClearBitsFromISR+0x24>)
 80088ea:	f002 facb 	bl	800ae84 <xTimerPendFunctionCallFromISR>
 80088ee:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80088f0:	68fb      	ldr	r3, [r7, #12]
	}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	08008a79 	.word	0x08008a79

08008900 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008900:	b480      	push	{r7}
 8008902:	b089      	sub	sp, #36	; 0x24
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800890c:	f3ef 8211 	mrs	r2, BASEPRI
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fa      	str	r2, [r7, #12]
 8008922:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008924:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008926:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008938:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800893a:	697b      	ldr	r3, [r7, #20]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3724      	adds	r7, #36	; 0x24
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08e      	sub	sp, #56	; 0x38
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008952:	2300      	movs	r3, #0
 8008954:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xEventGroupSetBits+0x32>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	613b      	str	r3, [r7, #16]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <xEventGroupSetBits+0x52>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	60fb      	str	r3, [r7, #12]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	3304      	adds	r3, #4
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	3308      	adds	r3, #8
 80089a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80089a6:	f001 fa13 	bl	8009dd0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80089bc:	e03c      	b.n	8008a38 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d108      	bne.n	80089fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089f8:	e008      	b.n	8008a0c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	4013      	ands	r3, r2
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d101      	bne.n	8008a0c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d010      	beq.n	8008a34 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a30:	f001 fc60 	bl	800a2f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d1be      	bne.n	80089be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	43db      	mvns	r3, r3
 8008a48:	401a      	ands	r2, r3
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008a4e:	f001 f9cd 	bl	8009dec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	681b      	ldr	r3, [r3, #0]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3738      	adds	r7, #56	; 0x38
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff ff6c 	bl	8008948 <xEventGroupSetBits>
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff feee 	bl	8008866 <xEventGroupClearBits>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	4804      	ldr	r0, [pc, #16]	; (8008ab8 <xEventGroupSetBitsFromISR+0x24>)
 8008aa8:	f002 f9ec 	bl	800ae84 <xTimerPendFunctionCallFromISR>
 8008aac:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008aae:	697b      	ldr	r3, [r7, #20]
	}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	08008a5f 	.word	0x08008a5f

08008abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f103 0208 	add.w	r2, r3, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f103 0208 	add.w	r2, r3, #8
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f103 0208 	add.w	r2, r3, #8
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d103      	bne.n	8008b7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	e00c      	b.n	8008b98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3308      	adds	r3, #8
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e002      	b.n	8008b8c <vListInsert+0x2e>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d2f6      	bcs.n	8008b86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6892      	ldr	r2, [r2, #8]
 8008be6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6852      	ldr	r2, [r2, #4]
 8008bf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d103      	bne.n	8008c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	1e5a      	subs	r2, r3, #1
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xQueueGenericReset+0x2a>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	60bb      	str	r3, [r7, #8]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c4e:	f002 fa69 	bl	800b124 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	68f9      	ldr	r1, [r7, #12]
 8008c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	441a      	add	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	22ff      	movs	r2, #255	; 0xff
 8008c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d114      	bne.n	8008cce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01a      	beq.n	8008ce2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3310      	adds	r3, #16
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fabb 	bl	800a22c <xTaskRemoveFromEventList>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d012      	beq.n	8008ce2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <xQueueGenericReset+0xcc>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	e009      	b.n	8008ce2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3310      	adds	r3, #16
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fef2 	bl	8008abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3324      	adds	r3, #36	; 0x24
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff feed 	bl	8008abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ce2:	f002 fa4f 	bl	800b184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ce6:	2301      	movs	r3, #1
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	e000ed04 	.word	0xe000ed04

08008cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08e      	sub	sp, #56	; 0x38
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <xQueueGenericCreateStatic+0x52>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <xQueueGenericCreateStatic+0x56>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <xQueueGenericCreateStatic+0x58>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	623b      	str	r3, [r7, #32]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <xQueueGenericCreateStatic+0x7e>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <xQueueGenericCreateStatic+0x82>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <xQueueGenericCreateStatic+0x84>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	61fb      	str	r3, [r7, #28]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d92:	2350      	movs	r3, #80	; 0x50
 8008d94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b50      	cmp	r3, #80	; 0x50
 8008d9a:	d00a      	beq.n	8008db2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	61bb      	str	r3, [r7, #24]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008dc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f843 	bl	8008e5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3730      	adds	r7, #48	; 0x30
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b08a      	sub	sp, #40	; 0x28
 8008de6:	af02      	add	r7, sp, #8
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	4613      	mov	r3, r2
 8008dee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <xQueueGenericCreate+0x2a>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	613b      	str	r3, [r7, #16]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e004      	b.n	8008e22 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	fb02 f303 	mul.w	r3, r2, r3
 8008e20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3350      	adds	r3, #80	; 0x50
 8008e26:	4618      	mov	r0, r3
 8008e28:	f002 fa9e 	bl	800b368 <pvPortMalloc>
 8008e2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3350      	adds	r3, #80	; 0x50
 8008e38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e42:	79fa      	ldrb	r2, [r7, #7]
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f805 	bl	8008e5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e54:	69bb      	ldr	r3, [r7, #24]
	}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e002      	b.n	8008e80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	69b8      	ldr	r0, [r7, #24]
 8008e90:	f7ff fec8 	bl	8008c24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	78fa      	ldrb	r2, [r7, #3]
 8008e98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00e      	beq.n	8008ed0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f838 	bl	8008f40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	461a      	mov	r2, r3
 8008eee:	6939      	ldr	r1, [r7, #16]
 8008ef0:	6978      	ldr	r0, [r7, #20]
 8008ef2:	f7ff ff76 	bl	8008de2 <xQueueGenericCreate>
 8008ef6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff ffd3 	bl	8008ea4 <prvInitialiseMutex>

		return pxNewQueue;
 8008efe:	68fb      	ldr	r3, [r7, #12]
	}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f14:	2301      	movs	r3, #1
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	6939      	ldr	r1, [r7, #16]
 8008f26:	6978      	ldr	r0, [r7, #20]
 8008f28:	f7ff fee4 	bl	8008cf4 <xQueueGenericCreateStatic>
 8008f2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff ffb8 	bl	8008ea4 <prvInitialiseMutex>

		return pxNewQueue;
 8008f34:	68fb      	ldr	r3, [r7, #12]
	}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	; 0x38
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xQueueGenericSend+0x32>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <xQueueGenericSend+0x40>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <xQueueGenericSend+0x44>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <xQueueGenericSend+0x46>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d103      	bne.n	8008fae <xQueueGenericSend+0x6e>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericSend+0x72>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericSend+0x74>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericSend+0x8e>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	623b      	str	r3, [r7, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fce:	f001 fb67 	bl	800a6a0 <xTaskGetSchedulerState>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <xQueueGenericSend+0x9e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <xQueueGenericSend+0xa2>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueGenericSend+0xa4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61fb      	str	r3, [r7, #28]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ffe:	f002 f891 	bl	800b124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <xQueueGenericSend+0xd4>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b02      	cmp	r3, #2
 8009012:	d129      	bne.n	8009068 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800901a:	f000 fa07 	bl	800942c <prvCopyDataToQueue>
 800901e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d010      	beq.n	800904a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	4618      	mov	r0, r3
 800902e:	f001 f8fd 	bl	800a22c <xTaskRemoveFromEventList>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d013      	beq.n	8009060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009038:	4b3f      	ldr	r3, [pc, #252]	; (8009138 <xQueueGenericSend+0x1f8>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	e00a      	b.n	8009060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009050:	4b39      	ldr	r3, [pc, #228]	; (8009138 <xQueueGenericSend+0x1f8>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009060:	f002 f890 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 8009064:	2301      	movs	r3, #1
 8009066:	e063      	b.n	8009130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800906e:	f002 f889 	bl	800b184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009072:	2300      	movs	r3, #0
 8009074:	e05c      	b.n	8009130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800907c:	f107 0314 	add.w	r3, r7, #20
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f999 	bl	800a3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009086:	2301      	movs	r3, #1
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800908a:	f002 f87b 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800908e:	f000 fe9f 	bl	8009dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009092:	f002 f847 	bl	800b124 <vPortEnterCritical>
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800909c:	b25b      	sxtb	r3, r3
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d103      	bne.n	80090ac <xQueueGenericSend+0x16c>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090b2:	b25b      	sxtb	r3, r3
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d103      	bne.n	80090c2 <xQueueGenericSend+0x182>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090c2:	f002 f85f 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090c6:	1d3a      	adds	r2, r7, #4
 80090c8:	f107 0314 	add.w	r3, r7, #20
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 f988 	bl	800a3e4 <xTaskCheckForTimeOut>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d124      	bne.n	8009124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090dc:	f000 fa9e 	bl	800961c <prvIsQueueFull>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d018      	beq.n	8009118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	3310      	adds	r3, #16
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f001 f84c 	bl	800a18c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f6:	f000 fa29 	bl	800954c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090fa:	f000 fe77 	bl	8009dec <xTaskResumeAll>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f47f af7c 	bne.w	8008ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <xQueueGenericSend+0x1f8>)
 8009108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	e772      	b.n	8008ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911a:	f000 fa17 	bl	800954c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800911e:	f000 fe65 	bl	8009dec <xTaskResumeAll>
 8009122:	e76c      	b.n	8008ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009126:	f000 fa11 	bl	800954c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800912a:	f000 fe5f 	bl	8009dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800912e:	2300      	movs	r3, #0
		}
	}
}
 8009130:	4618      	mov	r0, r3
 8009132:	3738      	adds	r7, #56	; 0x38
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08e      	sub	sp, #56	; 0x38
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <xQueueGenericSendFromISR+0x3c>
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <xQueueGenericSendFromISR+0x40>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <xQueueGenericSendFromISR+0x42>
 800917c:	2300      	movs	r3, #0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	623b      	str	r3, [r7, #32]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSendFromISR+0x6a>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <xQueueGenericSendFromISR+0x6e>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <xQueueGenericSendFromISR+0x70>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61fb      	str	r3, [r7, #28]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091c6:	f002 f88f 	bl	800b2e8 <vPortValidateInterruptPriority>
	__asm volatile
 80091ca:	f3ef 8211 	mrs	r2, BASEPRI
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61ba      	str	r2, [r7, #24]
 80091e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d302      	bcc.n	80091f8 <xQueueGenericSendFromISR+0xbc>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d12c      	bne.n	8009252 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009208:	f000 f910 	bl	800942c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800920c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009214:	d112      	bne.n	800923c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d016      	beq.n	800924c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	3324      	adds	r3, #36	; 0x24
 8009222:	4618      	mov	r0, r3
 8009224:	f001 f802 	bl	800a22c <xTaskRemoveFromEventList>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00e      	beq.n	800924c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	e007      	b.n	800924c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800923c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009240:	3301      	adds	r3, #1
 8009242:	b2db      	uxtb	r3, r3
 8009244:	b25a      	sxtb	r2, r3
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800924c:	2301      	movs	r3, #1
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009250:	e001      	b.n	8009256 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009252:	2300      	movs	r3, #0
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f383 8811 	msr	BASEPRI, r3
}
 8009260:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009264:	4618      	mov	r0, r3
 8009266:	3738      	adds	r7, #56	; 0x38
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08c      	sub	sp, #48	; 0x30
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <xQueueReceive+0x30>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	623b      	str	r3, [r7, #32]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d103      	bne.n	80092aa <xQueueReceive+0x3e>
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <xQueueReceive+0x42>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <xQueueReceive+0x44>
 80092ae:	2300      	movs	r3, #0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <xQueueReceive+0x5e>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	61fb      	str	r3, [r7, #28]
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ca:	f001 f9e9 	bl	800a6a0 <xTaskGetSchedulerState>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <xQueueReceive+0x6e>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <xQueueReceive+0x72>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <xQueueReceive+0x74>
 80092de:	2300      	movs	r3, #0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xQueueReceive+0x8e>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	61bb      	str	r3, [r7, #24]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80092fa:	f001 ff13 	bl	800b124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	d01f      	beq.n	800934a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930e:	f000 f8f7 	bl	8009500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	1e5a      	subs	r2, r3, #1
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00f      	beq.n	8009342 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	3310      	adds	r3, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f000 ff80 	bl	800a22c <xTaskRemoveFromEventList>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009332:	4b3d      	ldr	r3, [pc, #244]	; (8009428 <xQueueReceive+0x1bc>)
 8009334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009342:	f001 ff1f 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 8009346:	2301      	movs	r3, #1
 8009348:	e069      	b.n	800941e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009350:	f001 ff18 	bl	800b184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009354:	2300      	movs	r3, #0
 8009356:	e062      	b.n	800941e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800935e:	f107 0310 	add.w	r3, r7, #16
 8009362:	4618      	mov	r0, r3
 8009364:	f001 f828 	bl	800a3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800936c:	f001 ff0a 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009370:	f000 fd2e 	bl	8009dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009374:	f001 fed6 	bl	800b124 <vPortEnterCritical>
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800937e:	b25b      	sxtb	r3, r3
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d103      	bne.n	800938e <xQueueReceive+0x122>
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009394:	b25b      	sxtb	r3, r3
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d103      	bne.n	80093a4 <xQueueReceive+0x138>
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a4:	f001 feee 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093a8:	1d3a      	adds	r2, r7, #4
 80093aa:	f107 0310 	add.w	r3, r7, #16
 80093ae:	4611      	mov	r1, r2
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f817 	bl	800a3e4 <xTaskCheckForTimeOut>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d123      	bne.n	8009404 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093be:	f000 f917 	bl	80095f0 <prvIsQueueEmpty>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d017      	beq.n	80093f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	3324      	adds	r3, #36	; 0x24
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fedb 	bl	800a18c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d8:	f000 f8b8 	bl	800954c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093dc:	f000 fd06 	bl	8009dec <xTaskResumeAll>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d189      	bne.n	80092fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093e6:	4b10      	ldr	r3, [pc, #64]	; (8009428 <xQueueReceive+0x1bc>)
 80093e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	e780      	b.n	80092fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fa:	f000 f8a7 	bl	800954c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093fe:	f000 fcf5 	bl	8009dec <xTaskResumeAll>
 8009402:	e77a      	b.n	80092fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009406:	f000 f8a1 	bl	800954c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800940a:	f000 fcef 	bl	8009dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800940e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009410:	f000 f8ee 	bl	80095f0 <prvIsQueueEmpty>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	f43f af6f 	beq.w	80092fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800941c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800941e:	4618      	mov	r0, r3
 8009420:	3730      	adds	r7, #48	; 0x30
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10d      	bne.n	8009466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d14d      	bne.n	80094ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	4618      	mov	r0, r3
 8009458:	f001 f940 	bl	800a6dc <xTaskPriorityDisinherit>
 800945c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	605a      	str	r2, [r3, #4]
 8009464:	e043      	b.n	80094ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d119      	bne.n	80094a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6898      	ldr	r0, [r3, #8]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	461a      	mov	r2, r3
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	f002 fc29 	bl	800bcce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	441a      	add	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d32b      	bcc.n	80094ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	609a      	str	r2, [r3, #8]
 800949e:	e026      	b.n	80094ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68d8      	ldr	r0, [r3, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	461a      	mov	r2, r3
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	f002 fc0f 	bl	800bcce <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b8:	425b      	negs	r3, r3
 80094ba:	441a      	add	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d207      	bcs.n	80094dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	425b      	negs	r3, r3
 80094d6:	441a      	add	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d105      	bne.n	80094ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094f6:	697b      	ldr	r3, [r7, #20]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d018      	beq.n	8009544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	441a      	add	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d303      	bcc.n	8009534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68d9      	ldr	r1, [r3, #12]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	461a      	mov	r2, r3
 800953e:	6838      	ldr	r0, [r7, #0]
 8009540:	f002 fbc5 	bl	800bcce <memcpy>
	}
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009554:	f001 fde6 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800955e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009560:	e011      	b.n	8009586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	2b00      	cmp	r3, #0
 8009568:	d012      	beq.n	8009590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3324      	adds	r3, #36	; 0x24
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fe5c 	bl	800a22c <xTaskRemoveFromEventList>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800957a:	f000 ff95 	bl	800a4a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	3b01      	subs	r3, #1
 8009582:	b2db      	uxtb	r3, r3
 8009584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	dce9      	bgt.n	8009562 <prvUnlockQueue+0x16>
 800958e:	e000      	b.n	8009592 <prvUnlockQueue+0x46>
					break;
 8009590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800959a:	f001 fdf3 	bl	800b184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800959e:	f001 fdc1 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095aa:	e011      	b.n	80095d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d012      	beq.n	80095da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3310      	adds	r3, #16
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fe37 	bl	800a22c <xTaskRemoveFromEventList>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095c4:	f000 ff70 	bl	800a4a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dce9      	bgt.n	80095ac <prvUnlockQueue+0x60>
 80095d8:	e000      	b.n	80095dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	22ff      	movs	r2, #255	; 0xff
 80095e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095e4:	f001 fdce 	bl	800b184 <vPortExitCritical>
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095f8:	f001 fd94 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009604:	2301      	movs	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e001      	b.n	800960e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800960e:	f001 fdb9 	bl	800b184 <vPortExitCritical>

	return xReturn;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009624:	f001 fd7e 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009630:	429a      	cmp	r2, r3
 8009632:	d102      	bne.n	800963a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e001      	b.n	800963e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800963e:	f001 fda1 	bl	800b184 <vPortExitCritical>

	return xReturn;
 8009642:	68fb      	ldr	r3, [r7, #12]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	e014      	b.n	8009686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800965c:	4a0f      	ldr	r2, [pc, #60]	; (800969c <vQueueAddToRegistry+0x50>)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009668:	490c      	ldr	r1, [pc, #48]	; (800969c <vQueueAddToRegistry+0x50>)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009672:	4a0a      	ldr	r2, [pc, #40]	; (800969c <vQueueAddToRegistry+0x50>)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4413      	add	r3, r2
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800967e:	e006      	b.n	800968e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3301      	adds	r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b07      	cmp	r3, #7
 800968a:	d9e7      	bls.n	800965c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000cc0 	.word	0x20000cc0

080096a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096b0:	f001 fd38 	bl	800b124 <vPortEnterCritical>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c0:	d103      	bne.n	80096ca <vQueueWaitForMessageRestricted+0x2a>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d0:	b25b      	sxtb	r3, r3
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d103      	bne.n	80096e0 <vQueueWaitForMessageRestricted+0x40>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e0:	f001 fd50 	bl	800b184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3324      	adds	r3, #36	; 0x24
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fd6d 	bl	800a1d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7ff ff26 	bl	800954c <prvUnlockQueue>
	}
 8009700:	bf00      	nop
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08e      	sub	sp, #56	; 0x38
 800970c:	af04      	add	r7, sp, #16
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <xTaskCreateStatic+0x2a>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	623b      	str	r3, [r7, #32]
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xTaskCreateStatic+0x46>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61fb      	str	r3, [r7, #28]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800974e:	23ac      	movs	r3, #172	; 0xac
 8009750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2bac      	cmp	r3, #172	; 0xac
 8009756:	d00a      	beq.n	800976e <xTaskCreateStatic+0x66>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01e      	beq.n	80097b2 <xTaskCreateStatic+0xaa>
 8009774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01b      	beq.n	80097b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009782:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	2202      	movs	r2, #2
 8009788:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800978c:	2300      	movs	r3, #0
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f851 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097ac:	f000 f8ec 	bl	8009988 <prvAddNewTaskToReadyList>
 80097b0:	e001      	b.n	80097b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097b6:	697b      	ldr	r3, [r7, #20]
	}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3728      	adds	r7, #40	; 0x28
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08c      	sub	sp, #48	; 0x30
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 fdc7 	bl	800b368 <pvPortMalloc>
 80097da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00e      	beq.n	8009800 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80097e2:	20ac      	movs	r0, #172	; 0xac
 80097e4:	f001 fdc0 	bl	800b368 <pvPortMalloc>
 80097e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	631a      	str	r2, [r3, #48]	; 0x30
 80097f6:	e005      	b.n	8009804 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097f8:	6978      	ldr	r0, [r7, #20]
 80097fa:	f001 fe79 	bl	800b4f0 <vPortFree>
 80097fe:	e001      	b.n	8009804 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d017      	beq.n	800983a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009812:	88fa      	ldrh	r2, [r7, #6]
 8009814:	2300      	movs	r3, #0
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 f80f 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800982e:	69f8      	ldr	r0, [r7, #28]
 8009830:	f000 f8aa 	bl	8009988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009834:	2301      	movs	r3, #1
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e002      	b.n	8009840 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800983a:	f04f 33ff 	mov.w	r3, #4294967295
 800983e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009840:	69bb      	ldr	r3, [r7, #24]
	}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	461a      	mov	r2, r3
 8009864:	21a5      	movs	r1, #165	; 0xa5
 8009866:	f002 f961 	bl	800bb2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009874:	3b01      	subs	r3, #1
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	f023 0307 	bic.w	r3, r3, #7
 8009882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	617b      	str	r3, [r7, #20]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e012      	b.n	80098d0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4413      	add	r3, r2
 80098b0:	7819      	ldrb	r1, [r3, #0]
 80098b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	4413      	add	r3, r2
 80098b8:	3334      	adds	r3, #52	; 0x34
 80098ba:	460a      	mov	r2, r1
 80098bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	4413      	add	r3, r2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d006      	beq.n	80098d8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	3301      	adds	r3, #1
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b13      	cmp	r3, #19
 80098d4:	d9e9      	bls.n	80098aa <prvInitialiseNewTask+0x5e>
 80098d6:	e000      	b.n	80098da <prvInitialiseNewTask+0x8e>
		{
			break;
 80098d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	2b37      	cmp	r3, #55	; 0x37
 80098e6:	d901      	bls.n	80098ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098e8:	2337      	movs	r3, #55	; 0x37
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	2200      	movs	r2, #0
 80098fc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff f8fa 	bl	8008afc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	3318      	adds	r3, #24
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff f8f5 	bl	8008afc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	2200      	movs	r2, #0
 8009934:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	3358      	adds	r3, #88	; 0x58
 800993c:	224c      	movs	r2, #76	; 0x4c
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f002 f8f3 	bl	800bb2c <memset>
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	4a0c      	ldr	r2, [pc, #48]	; (800997c <prvInitialiseNewTask+0x130>)
 800994a:	65da      	str	r2, [r3, #92]	; 0x5c
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	4a0c      	ldr	r2, [pc, #48]	; (8009980 <prvInitialiseNewTask+0x134>)
 8009950:	661a      	str	r2, [r3, #96]	; 0x60
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	4a0b      	ldr	r2, [pc, #44]	; (8009984 <prvInitialiseNewTask+0x138>)
 8009956:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	69b8      	ldr	r0, [r7, #24]
 800995e:	f001 fab1 	bl	800aec4 <pxPortInitialiseStack>
 8009962:	4602      	mov	r2, r0
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009974:	bf00      	nop
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000274c 	.word	0x2000274c
 8009980:	200027b4 	.word	0x200027b4
 8009984:	2000281c 	.word	0x2000281c

08009988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009990:	f001 fbc8 	bl	800b124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009994:	4b2d      	ldr	r3, [pc, #180]	; (8009a4c <prvAddNewTaskToReadyList+0xc4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	4a2c      	ldr	r2, [pc, #176]	; (8009a4c <prvAddNewTaskToReadyList+0xc4>)
 800999c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800999e:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <prvAddNewTaskToReadyList+0xc8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099a6:	4a2a      	ldr	r2, [pc, #168]	; (8009a50 <prvAddNewTaskToReadyList+0xc8>)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099ac:	4b27      	ldr	r3, [pc, #156]	; (8009a4c <prvAddNewTaskToReadyList+0xc4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d110      	bne.n	80099d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099b4:	f000 fd9c 	bl	800a4f0 <prvInitialiseTaskLists>
 80099b8:	e00d      	b.n	80099d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099ba:	4b26      	ldr	r3, [pc, #152]	; (8009a54 <prvAddNewTaskToReadyList+0xcc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <prvAddNewTaskToReadyList+0xc8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d802      	bhi.n	80099d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099d0:	4a1f      	ldr	r2, [pc, #124]	; (8009a50 <prvAddNewTaskToReadyList+0xc8>)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099d6:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <prvAddNewTaskToReadyList+0xd0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	4a1e      	ldr	r2, [pc, #120]	; (8009a58 <prvAddNewTaskToReadyList+0xd0>)
 80099de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099e0:	4b1d      	ldr	r3, [pc, #116]	; (8009a58 <prvAddNewTaskToReadyList+0xd0>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <prvAddNewTaskToReadyList+0xd4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d903      	bls.n	80099fc <prvAddNewTaskToReadyList+0x74>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <prvAddNewTaskToReadyList+0xd4>)
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <prvAddNewTaskToReadyList+0xd8>)
 8009a0a:	441a      	add	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7ff f87f 	bl	8008b16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a18:	f001 fbb4 	bl	800b184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <prvAddNewTaskToReadyList+0xcc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00e      	beq.n	8009a42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <prvAddNewTaskToReadyList+0xc8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d207      	bcs.n	8009a42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a32:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <prvAddNewTaskToReadyList+0xdc>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200011d4 	.word	0x200011d4
 8009a50:	20000d00 	.word	0x20000d00
 8009a54:	200011e0 	.word	0x200011e0
 8009a58:	200011f0 	.word	0x200011f0
 8009a5c:	200011dc 	.word	0x200011dc
 8009a60:	20000d04 	.word	0x20000d04
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d017      	beq.n	8009aaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a7a:	4b13      	ldr	r3, [pc, #76]	; (8009ac8 <vTaskDelay+0x60>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <vTaskDelay+0x30>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a98:	f000 f99a 	bl	8009dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fe8a 	bl	800a7b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009aa4:	f000 f9a2 	bl	8009dec <xTaskResumeAll>
 8009aa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ab0:	4b06      	ldr	r3, [pc, #24]	; (8009acc <vTaskDelay+0x64>)
 8009ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	200011fc 	.word	0x200011fc
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009ad8:	f001 fb24 	bl	800b124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <vTaskSuspend+0x18>
 8009ae2:	4b30      	ldr	r3, [pc, #192]	; (8009ba4 <vTaskSuspend+0xd4>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	e000      	b.n	8009aea <vTaskSuspend+0x1a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff f86d 	bl	8008bd0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d004      	beq.n	8009b08 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3318      	adds	r3, #24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff f864 	bl	8008bd0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4826      	ldr	r0, [pc, #152]	; (8009ba8 <vTaskSuspend+0xd8>)
 8009b10:	f7ff f801 	bl	8008b16 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d103      	bne.n	8009b28 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009b28:	f001 fb2c 	bl	800b184 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009b2c:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <vTaskSuspend+0xdc>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009b34:	f001 faf6 	bl	800b124 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009b38:	f000 fd7c 	bl	800a634 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009b3c:	f001 fb22 	bl	800b184 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009b40:	4b18      	ldr	r3, [pc, #96]	; (8009ba4 <vTaskSuspend+0xd4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d127      	bne.n	8009b9a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009b4a:	4b18      	ldr	r3, [pc, #96]	; (8009bac <vTaskSuspend+0xdc>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d017      	beq.n	8009b82 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009b52:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <vTaskSuspend+0xe0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <vTaskSuspend+0xa0>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	60bb      	str	r3, [r7, #8]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <vTaskSuspend+0xe4>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b80:	e00b      	b.n	8009b9a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009b82:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <vTaskSuspend+0xd8>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <vTaskSuspend+0xe8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d103      	bne.n	8009b96 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <vTaskSuspend+0xd4>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
	}
 8009b94:	e001      	b.n	8009b9a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009b96:	f000 fa95 	bl	800a0c4 <vTaskSwitchContext>
	}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000d00 	.word	0x20000d00
 8009ba8:	200011c0 	.word	0x200011c0
 8009bac:	200011e0 	.word	0x200011e0
 8009bb0:	200011fc 	.word	0x200011fc
 8009bb4:	e000ed04 	.word	0xe000ed04
 8009bb8:	200011d4 	.word	0x200011d4

08009bbc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	60fb      	str	r3, [r7, #12]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	4a0f      	ldr	r2, [pc, #60]	; (8009c2c <prvTaskIsTaskSuspended+0x70>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d101      	bne.n	8009bf6 <prvTaskIsTaskSuspended+0x3a>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <prvTaskIsTaskSuspended+0x3c>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00f      	beq.n	8009c1c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c00:	4a0b      	ldr	r2, [pc, #44]	; (8009c30 <prvTaskIsTaskSuspended+0x74>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00a      	beq.n	8009c1c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <prvTaskIsTaskSuspended+0x56>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <prvTaskIsTaskSuspended+0x58>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c1c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009c1e:	4618      	mov	r0, r3
 8009c20:	371c      	adds	r7, #28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	200011c0 	.word	0x200011c0
 8009c30:	20001194 	.word	0x20001194

08009c34 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <vTaskResume+0x28>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60bb      	str	r3, [r7, #8]
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d03a      	beq.n	8009cd8 <vTaskResume+0xa4>
 8009c62:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <vTaskResume+0xac>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d035      	beq.n	8009cd8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009c6c:	f001 fa5a 	bl	800b124 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7ff ffa3 	bl	8009bbc <prvTaskIsTaskSuspended>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02b      	beq.n	8009cd4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe ffa5 	bl	8008bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <vTaskResume+0xb0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d903      	bls.n	8009c9a <vTaskResume+0x66>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <vTaskResume+0xb0>)
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4a10      	ldr	r2, [pc, #64]	; (8009ce8 <vTaskResume+0xb4>)
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f7fe ff30 	bl	8008b16 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <vTaskResume+0xac>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d307      	bcc.n	8009cd4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <vTaskResume+0xb8>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009cd4:	f001 fa56 	bl	800b184 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cd8:	bf00      	nop
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	20000d00 	.word	0x20000d00
 8009ce4:	200011dc 	.word	0x200011dc
 8009ce8:	20000d04 	.word	0x20000d04
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	; 0x28
 8009cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009cfe:	463a      	mov	r2, r7
 8009d00:	1d39      	adds	r1, r7, #4
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fd28 	bl	800875c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	9202      	str	r2, [sp, #8]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	460a      	mov	r2, r1
 8009d1e:	4924      	ldr	r1, [pc, #144]	; (8009db0 <vTaskStartScheduler+0xc0>)
 8009d20:	4824      	ldr	r0, [pc, #144]	; (8009db4 <vTaskStartScheduler+0xc4>)
 8009d22:	f7ff fcf1 	bl	8009708 <xTaskCreateStatic>
 8009d26:	4603      	mov	r3, r0
 8009d28:	4a23      	ldr	r2, [pc, #140]	; (8009db8 <vTaskStartScheduler+0xc8>)
 8009d2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d2c:	4b22      	ldr	r3, [pc, #136]	; (8009db8 <vTaskStartScheduler+0xc8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d34:	2301      	movs	r3, #1
 8009d36:	617b      	str	r3, [r7, #20]
 8009d38:	e001      	b.n	8009d3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d102      	bne.n	8009d4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d44:	f000 fd8c 	bl	800a860 <xTimerCreateTimerTask>
 8009d48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d11b      	bne.n	8009d88 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d64:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <vTaskStartScheduler+0xcc>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3358      	adds	r3, #88	; 0x58
 8009d6a:	4a15      	ldr	r2, [pc, #84]	; (8009dc0 <vTaskStartScheduler+0xd0>)
 8009d6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d6e:	4b15      	ldr	r3, [pc, #84]	; (8009dc4 <vTaskStartScheduler+0xd4>)
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <vTaskStartScheduler+0xd8>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <vTaskStartScheduler+0xdc>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d82:	f001 f92d 	bl	800afe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d86:	e00e      	b.n	8009da6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d10a      	bne.n	8009da6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60fb      	str	r3, [r7, #12]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <vTaskStartScheduler+0xb4>
}
 8009da6:	bf00      	nop
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	0800cab4 	.word	0x0800cab4
 8009db4:	0800a4c1 	.word	0x0800a4c1
 8009db8:	200011f8 	.word	0x200011f8
 8009dbc:	20000d00 	.word	0x20000d00
 8009dc0:	200000f4 	.word	0x200000f4
 8009dc4:	200011f4 	.word	0x200011f4
 8009dc8:	200011e0 	.word	0x200011e0
 8009dcc:	200011d8 	.word	0x200011d8

08009dd0 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <vTaskSuspendAll+0x18>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	4a03      	ldr	r2, [pc, #12]	; (8009de8 <vTaskSuspendAll+0x18>)
 8009ddc:	6013      	str	r3, [r2, #0]
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	200011fc 	.word	0x200011fc

08009dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dfa:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <xTaskResumeAll+0x118>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	603b      	str	r3, [r7, #0]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e18:	f001 f984 	bl	800b124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e1c:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <xTaskResumeAll+0x118>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	4a38      	ldr	r2, [pc, #224]	; (8009f04 <xTaskResumeAll+0x118>)
 8009e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e26:	4b37      	ldr	r3, [pc, #220]	; (8009f04 <xTaskResumeAll+0x118>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d162      	bne.n	8009ef4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e2e:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <xTaskResumeAll+0x11c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d05e      	beq.n	8009ef4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e36:	e02f      	b.n	8009e98 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009e38:	4b34      	ldr	r3, [pc, #208]	; (8009f0c <xTaskResumeAll+0x120>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3318      	adds	r3, #24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fec3 	bl	8008bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe febe 	bl	8008bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e58:	4b2d      	ldr	r3, [pc, #180]	; (8009f10 <xTaskResumeAll+0x124>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d903      	bls.n	8009e68 <xTaskResumeAll+0x7c>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	4a2a      	ldr	r2, [pc, #168]	; (8009f10 <xTaskResumeAll+0x124>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <xTaskResumeAll+0x128>)
 8009e76:	441a      	add	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fe49 	bl	8008b16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <xTaskResumeAll+0x12c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d302      	bcc.n	8009e98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e92:	4b22      	ldr	r3, [pc, #136]	; (8009f1c <xTaskResumeAll+0x130>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e98:	4b1c      	ldr	r3, [pc, #112]	; (8009f0c <xTaskResumeAll+0x120>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1cb      	bne.n	8009e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ea6:	f000 fbc5 	bl	800a634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <xTaskResumeAll+0x134>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d010      	beq.n	8009ed8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eb6:	f000 f847 	bl	8009f48 <xTaskIncrementTick>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ec0:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <xTaskResumeAll+0x130>)
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f1      	bne.n	8009eb6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <xTaskResumeAll+0x134>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ed8:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <xTaskResumeAll+0x130>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d009      	beq.n	8009ef4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <xTaskResumeAll+0x138>)
 8009ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef4:	f001 f946 	bl	800b184 <vPortExitCritical>

	return xAlreadyYielded;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	200011fc 	.word	0x200011fc
 8009f08:	200011d4 	.word	0x200011d4
 8009f0c:	20001194 	.word	0x20001194
 8009f10:	200011dc 	.word	0x200011dc
 8009f14:	20000d04 	.word	0x20000d04
 8009f18:	20000d00 	.word	0x20000d00
 8009f1c:	200011e8 	.word	0x200011e8
 8009f20:	200011e4 	.word	0x200011e4
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <xTaskGetTickCount+0x1c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f34:	687b      	ldr	r3, [r7, #4]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	200011d8 	.word	0x200011d8

08009f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f52:	4b51      	ldr	r3, [pc, #324]	; (800a098 <xTaskIncrementTick+0x150>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f040 808e 	bne.w	800a078 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f5c:	4b4f      	ldr	r3, [pc, #316]	; (800a09c <xTaskIncrementTick+0x154>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f64:	4a4d      	ldr	r2, [pc, #308]	; (800a09c <xTaskIncrementTick+0x154>)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d120      	bne.n	8009fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f70:	4b4b      	ldr	r3, [pc, #300]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	603b      	str	r3, [r7, #0]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xTaskIncrementTick+0x46>
 8009f90:	4b43      	ldr	r3, [pc, #268]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	4b43      	ldr	r3, [pc, #268]	; (800a0a4 <xTaskIncrementTick+0x15c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a41      	ldr	r2, [pc, #260]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	4a41      	ldr	r2, [pc, #260]	; (800a0a4 <xTaskIncrementTick+0x15c>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	4b40      	ldr	r3, [pc, #256]	; (800a0a8 <xTaskIncrementTick+0x160>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	4a3f      	ldr	r2, [pc, #252]	; (800a0a8 <xTaskIncrementTick+0x160>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	f000 fb41 	bl	800a634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fb2:	4b3e      	ldr	r3, [pc, #248]	; (800a0ac <xTaskIncrementTick+0x164>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d34e      	bcc.n	800a05a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fbc:	4b38      	ldr	r3, [pc, #224]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <xTaskIncrementTick+0x82>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <xTaskIncrementTick+0x84>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fd0:	4b36      	ldr	r3, [pc, #216]	; (800a0ac <xTaskIncrementTick+0x164>)
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	601a      	str	r2, [r3, #0]
					break;
 8009fd8:	e03f      	b.n	800a05a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009fda:	4b31      	ldr	r3, [pc, #196]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d203      	bcs.n	8009ffa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ff2:	4a2e      	ldr	r2, [pc, #184]	; (800a0ac <xTaskIncrementTick+0x164>)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6013      	str	r3, [r2, #0]
						break;
 8009ff8:	e02f      	b.n	800a05a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fde6 	bl	8008bd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3318      	adds	r3, #24
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fddd 	bl	8008bd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	4b25      	ldr	r3, [pc, #148]	; (800a0b0 <xTaskIncrementTick+0x168>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d903      	bls.n	800a02a <xTaskIncrementTick+0xe2>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a22      	ldr	r2, [pc, #136]	; (800a0b0 <xTaskIncrementTick+0x168>)
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4a1f      	ldr	r2, [pc, #124]	; (800a0b4 <xTaskIncrementTick+0x16c>)
 800a038:	441a      	add	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fe fd68 	bl	8008b16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04a:	4b1b      	ldr	r3, [pc, #108]	; (800a0b8 <xTaskIncrementTick+0x170>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	429a      	cmp	r2, r3
 800a052:	d3b3      	bcc.n	8009fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a058:	e7b0      	b.n	8009fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a05a:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <xTaskIncrementTick+0x170>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a060:	4914      	ldr	r1, [pc, #80]	; (800a0b4 <xTaskIncrementTick+0x16c>)
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d907      	bls.n	800a082 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e004      	b.n	800a082 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a078:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <xTaskIncrementTick+0x174>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	4a0f      	ldr	r2, [pc, #60]	; (800a0bc <xTaskIncrementTick+0x174>)
 800a080:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <xTaskIncrementTick+0x178>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a08a:	2301      	movs	r3, #1
 800a08c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a08e:	697b      	ldr	r3, [r7, #20]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200011fc 	.word	0x200011fc
 800a09c:	200011d8 	.word	0x200011d8
 800a0a0:	2000118c 	.word	0x2000118c
 800a0a4:	20001190 	.word	0x20001190
 800a0a8:	200011ec 	.word	0x200011ec
 800a0ac:	200011f4 	.word	0x200011f4
 800a0b0:	200011dc 	.word	0x200011dc
 800a0b4:	20000d04 	.word	0x20000d04
 800a0b8:	20000d00 	.word	0x20000d00
 800a0bc:	200011e4 	.word	0x200011e4
 800a0c0:	200011e8 	.word	0x200011e8

0800a0c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ca:	4b2a      	ldr	r3, [pc, #168]	; (800a174 <vTaskSwitchContext+0xb0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0d2:	4b29      	ldr	r3, [pc, #164]	; (800a178 <vTaskSwitchContext+0xb4>)
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0d8:	e046      	b.n	800a168 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a0da:	4b27      	ldr	r3, [pc, #156]	; (800a178 <vTaskSwitchContext+0xb4>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a0e0:	4b26      	ldr	r3, [pc, #152]	; (800a17c <vTaskSwitchContext+0xb8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	e010      	b.n	800a10a <vTaskSwitchContext+0x46>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10a      	bne.n	800a104 <vTaskSwitchContext+0x40>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <vTaskSwitchContext+0x3e>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3b01      	subs	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	491d      	ldr	r1, [pc, #116]	; (800a180 <vTaskSwitchContext+0xbc>)
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	440b      	add	r3, r1
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0e4      	beq.n	800a0e8 <vTaskSwitchContext+0x24>
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4a15      	ldr	r2, [pc, #84]	; (800a180 <vTaskSwitchContext+0xbc>)
 800a12a:	4413      	add	r3, r2
 800a12c:	60bb      	str	r3, [r7, #8]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	605a      	str	r2, [r3, #4]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	3308      	adds	r3, #8
 800a140:	429a      	cmp	r2, r3
 800a142:	d104      	bne.n	800a14e <vTaskSwitchContext+0x8a>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4a0b      	ldr	r2, [pc, #44]	; (800a184 <vTaskSwitchContext+0xc0>)
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	4a08      	ldr	r2, [pc, #32]	; (800a17c <vTaskSwitchContext+0xb8>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a15e:	4b09      	ldr	r3, [pc, #36]	; (800a184 <vTaskSwitchContext+0xc0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3358      	adds	r3, #88	; 0x58
 800a164:	4a08      	ldr	r2, [pc, #32]	; (800a188 <vTaskSwitchContext+0xc4>)
 800a166:	6013      	str	r3, [r2, #0]
}
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	200011fc 	.word	0x200011fc
 800a178:	200011e8 	.word	0x200011e8
 800a17c:	200011dc 	.word	0x200011dc
 800a180:	20000d04 	.word	0x20000d04
 800a184:	20000d00 	.word	0x20000d00
 800a188:	200000f4 	.word	0x200000f4

0800a18c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <vTaskPlaceOnEventList+0x44>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3318      	adds	r3, #24
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fe fccf 	bl	8008b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	6838      	ldr	r0, [r7, #0]
 800a1c4:	f000 faf8 	bl	800a7b8 <prvAddCurrentTaskToDelayedList>
}
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000d00 	.word	0x20000d00

0800a1d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	617b      	str	r3, [r7, #20]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <vTaskPlaceOnEventListRestricted+0x54>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3318      	adds	r3, #24
 800a202:	4619      	mov	r1, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7fe fc86 	bl	8008b16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	68b8      	ldr	r0, [r7, #8]
 800a21a:	f000 facd 	bl	800a7b8 <prvAddCurrentTaskToDelayedList>
	}
 800a21e:	bf00      	nop
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000d00 	.word	0x20000d00

0800a22c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	3318      	adds	r3, #24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe fcb7 	bl	8008bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a262:	4b1e      	ldr	r3, [pc, #120]	; (800a2dc <xTaskRemoveFromEventList+0xb0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11d      	bne.n	800a2a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fcae 	bl	8008bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <xTaskRemoveFromEventList+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <xTaskRemoveFromEventList+0x5c>
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <xTaskRemoveFromEventList+0xb4>)
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4a13      	ldr	r2, [pc, #76]	; (800a2e4 <xTaskRemoveFromEventList+0xb8>)
 800a296:	441a      	add	r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe fc39 	bl	8008b16 <vListInsertEnd>
 800a2a4:	e005      	b.n	800a2b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	3318      	adds	r3, #24
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	480e      	ldr	r0, [pc, #56]	; (800a2e8 <xTaskRemoveFromEventList+0xbc>)
 800a2ae:	f7fe fc32 	bl	8008b16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <xTaskRemoveFromEventList+0xc0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d905      	bls.n	800a2cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <xTaskRemoveFromEventList+0xc4>)
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e001      	b.n	800a2d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a2d0:	697b      	ldr	r3, [r7, #20]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200011fc 	.word	0x200011fc
 800a2e0:	200011dc 	.word	0x200011dc
 800a2e4:	20000d04 	.word	0x20000d04
 800a2e8:	20001194 	.word	0x20001194
 800a2ec:	20000d00 	.word	0x20000d00
 800a2f0:	200011e8 	.word	0x200011e8

0800a2f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a2fe:	4b29      	ldr	r3, [pc, #164]	; (800a3a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	613b      	str	r3, [r7, #16]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fe fc41 	bl	8008bd0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	3304      	adds	r3, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe fc3c 	bl	8008bd0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d903      	bls.n	800a36c <vTaskRemoveFromUnorderedEventList+0x78>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	4a0f      	ldr	r2, [pc, #60]	; (800a3a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a37a:	441a      	add	r2, r3
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7fe fbc7 	bl	8008b16 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	429a      	cmp	r2, r3
 800a394:	d902      	bls.n	800a39c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a398:	2201      	movs	r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
	}
}
 800a39c:	bf00      	nop
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200011fc 	.word	0x200011fc
 800a3a8:	200011dc 	.word	0x200011dc
 800a3ac:	20000d04 	.word	0x20000d04
 800a3b0:	20000d00 	.word	0x20000d00
 800a3b4:	200011e8 	.word	0x200011e8

0800a3b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <vTaskInternalSetTimeOutState+0x24>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <vTaskInternalSetTimeOutState+0x28>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	605a      	str	r2, [r3, #4]
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200011ec 	.word	0x200011ec
 800a3e0:	200011d8 	.word	0x200011d8

0800a3e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	613b      	str	r3, [r7, #16]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a426:	f000 fe7d 	bl	800b124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a42a:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <xTaskCheckForTimeOut+0xbc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d102      	bne.n	800a44a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	61fb      	str	r3, [r7, #28]
 800a448:	e023      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <xTaskCheckForTimeOut+0xc0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d007      	beq.n	800a466 <xTaskCheckForTimeOut+0x82>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	61fb      	str	r3, [r7, #28]
 800a464:	e015      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d20b      	bcs.n	800a488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	1ad2      	subs	r2, r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff9b 	bl	800a3b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a482:	2300      	movs	r3, #0
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	e004      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a48e:	2301      	movs	r3, #1
 800a490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a492:	f000 fe77 	bl	800b184 <vPortExitCritical>

	return xReturn;
 800a496:	69fb      	ldr	r3, [r7, #28]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200011d8 	.word	0x200011d8
 800a4a4:	200011ec 	.word	0x200011ec

0800a4a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4ac:	4b03      	ldr	r3, [pc, #12]	; (800a4bc <vTaskMissedYield+0x14>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
}
 800a4b2:	bf00      	nop
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	200011e8 	.word	0x200011e8

0800a4c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4c8:	f000 f852 	bl	800a570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <prvIdleTask+0x28>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d9f9      	bls.n	800a4c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <prvIdleTask+0x2c>)
 800a4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4e4:	e7f0      	b.n	800a4c8 <prvIdleTask+0x8>
 800a4e6:	bf00      	nop
 800a4e8:	20000d04 	.word	0x20000d04
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
 800a4fa:	e00c      	b.n	800a516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4a12      	ldr	r2, [pc, #72]	; (800a550 <prvInitialiseTaskLists+0x60>)
 800a508:	4413      	add	r3, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fad6 	bl	8008abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3301      	adds	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b37      	cmp	r3, #55	; 0x37
 800a51a:	d9ef      	bls.n	800a4fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a51c:	480d      	ldr	r0, [pc, #52]	; (800a554 <prvInitialiseTaskLists+0x64>)
 800a51e:	f7fe facd 	bl	8008abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a522:	480d      	ldr	r0, [pc, #52]	; (800a558 <prvInitialiseTaskLists+0x68>)
 800a524:	f7fe faca 	bl	8008abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a528:	480c      	ldr	r0, [pc, #48]	; (800a55c <prvInitialiseTaskLists+0x6c>)
 800a52a:	f7fe fac7 	bl	8008abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a52e:	480c      	ldr	r0, [pc, #48]	; (800a560 <prvInitialiseTaskLists+0x70>)
 800a530:	f7fe fac4 	bl	8008abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a534:	480b      	ldr	r0, [pc, #44]	; (800a564 <prvInitialiseTaskLists+0x74>)
 800a536:	f7fe fac1 	bl	8008abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <prvInitialiseTaskLists+0x78>)
 800a53c:	4a05      	ldr	r2, [pc, #20]	; (800a554 <prvInitialiseTaskLists+0x64>)
 800a53e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <prvInitialiseTaskLists+0x7c>)
 800a542:	4a05      	ldr	r2, [pc, #20]	; (800a558 <prvInitialiseTaskLists+0x68>)
 800a544:	601a      	str	r2, [r3, #0]
}
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000d04 	.word	0x20000d04
 800a554:	20001164 	.word	0x20001164
 800a558:	20001178 	.word	0x20001178
 800a55c:	20001194 	.word	0x20001194
 800a560:	200011a8 	.word	0x200011a8
 800a564:	200011c0 	.word	0x200011c0
 800a568:	2000118c 	.word	0x2000118c
 800a56c:	20001190 	.word	0x20001190

0800a570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a576:	e019      	b.n	800a5ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a578:	f000 fdd4 	bl	800b124 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a57c:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <prvCheckTasksWaitingTermination+0x50>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fb21 	bl	8008bd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <prvCheckTasksWaitingTermination+0x54>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3b01      	subs	r3, #1
 800a594:	4a0b      	ldr	r2, [pc, #44]	; (800a5c4 <prvCheckTasksWaitingTermination+0x54>)
 800a596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a598:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a5a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5a2:	f000 fdef 	bl	800b184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f810 	bl	800a5cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ac:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e1      	bne.n	800a578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200011a8 	.word	0x200011a8
 800a5c4:	200011d4 	.word	0x200011d4
 800a5c8:	200011bc 	.word	0x200011bc

0800a5cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3358      	adds	r3, #88	; 0x58
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 fabf 	bl	800bb5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d108      	bne.n	800a5fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 ff7f 	bl	800b4f0 <vPortFree>
				vPortFree( pxTCB );
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 ff7c 	bl	800b4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5f8:	e018      	b.n	800a62c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a600:	2b01      	cmp	r3, #1
 800a602:	d103      	bne.n	800a60c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 ff73 	bl	800b4f0 <vPortFree>
	}
 800a60a:	e00f      	b.n	800a62c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a612:	2b02      	cmp	r3, #2
 800a614:	d00a      	beq.n	800a62c <prvDeleteTCB+0x60>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	e7fe      	b.n	800a62a <prvDeleteTCB+0x5e>
	}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a63a:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <prvResetNextTaskUnblockTime+0x44>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <prvResetNextTaskUnblockTime+0x14>
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <prvResetNextTaskUnblockTime+0x16>
 800a648:	2300      	movs	r3, #0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d004      	beq.n	800a658 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a64e:	4b0b      	ldr	r3, [pc, #44]	; (800a67c <prvResetNextTaskUnblockTime+0x48>)
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a656:	e008      	b.n	800a66a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <prvResetNextTaskUnblockTime+0x44>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	4a05      	ldr	r2, [pc, #20]	; (800a67c <prvResetNextTaskUnblockTime+0x48>)
 800a668:	6013      	str	r3, [r2, #0]
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	2000118c 	.word	0x2000118c
 800a67c:	200011f4 	.word	0x200011f4

0800a680 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <xTaskGetCurrentTaskHandle+0x1c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a68c:	687b      	ldr	r3, [r7, #4]
	}
 800a68e:	4618      	mov	r0, r3
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	20000d00 	.word	0x20000d00

0800a6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <xTaskGetSchedulerState+0x34>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	607b      	str	r3, [r7, #4]
 800a6b2:	e008      	b.n	800a6c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <xTaskGetSchedulerState+0x38>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	e001      	b.n	800a6c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6c6:	687b      	ldr	r3, [r7, #4]
	}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	200011e0 	.word	0x200011e0
 800a6d8:	200011fc 	.word	0x200011fc

0800a6dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d056      	beq.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6f2:	4b2e      	ldr	r3, [pc, #184]	; (800a7ac <xTaskPriorityDisinherit+0xd0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d00a      	beq.n	800a712 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	60fb      	str	r3, [r7, #12]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60bb      	str	r3, [r7, #8]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a742:	429a      	cmp	r2, r3
 800a744:	d02c      	beq.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d128      	bne.n	800a7a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3304      	adds	r3, #4
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fa3c 	bl	8008bd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <xTaskPriorityDisinherit+0xd4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	429a      	cmp	r2, r3
 800a776:	d903      	bls.n	800a780 <xTaskPriorityDisinherit+0xa4>
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	4a0c      	ldr	r2, [pc, #48]	; (800a7b0 <xTaskPriorityDisinherit+0xd4>)
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <xTaskPriorityDisinherit+0xd8>)
 800a78e:	441a      	add	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	3304      	adds	r3, #4
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f7fe f9bd 	bl	8008b16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7a0:	697b      	ldr	r3, [r7, #20]
	}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000d00 	.word	0x20000d00
 800a7b0:	200011dc 	.word	0x200011dc
 800a7b4:	20000d04 	.word	0x20000d04

0800a7b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7c2:	4b21      	ldr	r3, [pc, #132]	; (800a848 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c8:	4b20      	ldr	r3, [pc, #128]	; (800a84c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe f9fe 	bl	8008bd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d10a      	bne.n	800a7f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4819      	ldr	r0, [pc, #100]	; (800a850 <prvAddCurrentTaskToDelayedList+0x98>)
 800a7ec:	f7fe f993 	bl	8008b16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7f0:	e026      	b.n	800a840 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7fa:	4b14      	ldr	r3, [pc, #80]	; (800a84c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	429a      	cmp	r2, r3
 800a808:	d209      	bcs.n	800a81e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a80a:	4b12      	ldr	r3, [pc, #72]	; (800a854 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <prvAddCurrentTaskToDelayedList+0x94>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3304      	adds	r3, #4
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f7fe f9a1 	bl	8008b5e <vListInsert>
}
 800a81c:	e010      	b.n	800a840 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a81e:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <prvAddCurrentTaskToDelayedList+0x94>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3304      	adds	r3, #4
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7fe f997 	bl	8008b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	429a      	cmp	r2, r3
 800a838:	d202      	bcs.n	800a840 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a83a:	4a08      	ldr	r2, [pc, #32]	; (800a85c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6013      	str	r3, [r2, #0]
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	200011d8 	.word	0x200011d8
 800a84c:	20000d00 	.word	0x20000d00
 800a850:	200011c0 	.word	0x200011c0
 800a854:	20001190 	.word	0x20001190
 800a858:	2000118c 	.word	0x2000118c
 800a85c:	200011f4 	.word	0x200011f4

0800a860 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a86a:	f000 facb 	bl	800ae04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a86e:	4b1c      	ldr	r3, [pc, #112]	; (800a8e0 <xTimerCreateTimerTask+0x80>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d021      	beq.n	800a8ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a87e:	1d3a      	adds	r2, r7, #4
 800a880:	f107 0108 	add.w	r1, r7, #8
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fd ff81 	bl	8008790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	9202      	str	r2, [sp, #8]
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	2302      	movs	r3, #2
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2300      	movs	r3, #0
 800a89e:	460a      	mov	r2, r1
 800a8a0:	4910      	ldr	r1, [pc, #64]	; (800a8e4 <xTimerCreateTimerTask+0x84>)
 800a8a2:	4811      	ldr	r0, [pc, #68]	; (800a8e8 <xTimerCreateTimerTask+0x88>)
 800a8a4:	f7fe ff30 	bl	8009708 <xTaskCreateStatic>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	4a10      	ldr	r2, [pc, #64]	; (800a8ec <xTimerCreateTimerTask+0x8c>)
 800a8ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <xTimerCreateTimerTask+0x8c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	613b      	str	r3, [r7, #16]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8d6:	697b      	ldr	r3, [r7, #20]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20001230 	.word	0x20001230
 800a8e4:	0800cabc 	.word	0x0800cabc
 800a8e8:	0800aa0d 	.word	0x0800aa0d
 800a8ec:	20001234 	.word	0x20001234

0800a8f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08a      	sub	sp, #40	; 0x28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a91e:	4b1a      	ldr	r3, [pc, #104]	; (800a988 <xTimerGenericCommand+0x98>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d02a      	beq.n	800a97c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b05      	cmp	r3, #5
 800a936:	dc18      	bgt.n	800a96a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a938:	f7ff feb2 	bl	800a6a0 <xTaskGetSchedulerState>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d109      	bne.n	800a956 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a942:	4b11      	ldr	r3, [pc, #68]	; (800a988 <xTimerGenericCommand+0x98>)
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	f107 0110 	add.w	r1, r7, #16
 800a94a:	2300      	movs	r3, #0
 800a94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94e:	f7fe faf7 	bl	8008f40 <xQueueGenericSend>
 800a952:	6278      	str	r0, [r7, #36]	; 0x24
 800a954:	e012      	b.n	800a97c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <xTimerGenericCommand+0x98>)
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f107 0110 	add.w	r1, r7, #16
 800a95e:	2300      	movs	r3, #0
 800a960:	2200      	movs	r2, #0
 800a962:	f7fe faed 	bl	8008f40 <xQueueGenericSend>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24
 800a968:	e008      	b.n	800a97c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <xTimerGenericCommand+0x98>)
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	f107 0110 	add.w	r1, r7, #16
 800a972:	2300      	movs	r3, #0
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	f7fe fbe1 	bl	800913c <xQueueGenericSendFromISR>
 800a97a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20001230 	.word	0x20001230

0800a98c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af02      	add	r7, sp, #8
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a996:	4b1c      	ldr	r3, [pc, #112]	; (800aa08 <prvProcessExpiredTimer+0x7c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe f913 	bl	8008bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d122      	bne.n	800a9f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	18d1      	adds	r1, r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	6978      	ldr	r0, [r7, #20]
 800a9c0:	f000 f8c8 	bl	800ab54 <prvInsertTimerInActiveList>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d016      	beq.n	800a9f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6978      	ldr	r0, [r7, #20]
 800a9d6:	f7ff ff8b 	bl	800a8f0 <xTimerGenericCommand>
 800a9da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	60fb      	str	r3, [r7, #12]
}
 800a9f4:	bf00      	nop
 800a9f6:	e7fe      	b.n	800a9f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	6978      	ldr	r0, [r7, #20]
 800a9fe:	4798      	blx	r3
}
 800aa00:	bf00      	nop
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	20001228 	.word	0x20001228

0800aa0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f857 	bl	800aacc <prvGetNextExpireTime>
 800aa1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4619      	mov	r1, r3
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f803 	bl	800aa30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa2a:	f000 f8d5 	bl	800abd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa2e:	e7f1      	b.n	800aa14 <prvTimerTask+0x8>

0800aa30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa3a:	f7ff f9c9 	bl	8009dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f866 	bl	800ab14 <prvSampleTimeNow>
 800aa48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d130      	bne.n	800aab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <prvProcessTimerOrBlockTask+0x3c>
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d806      	bhi.n	800aa6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa5e:	f7ff f9c5 	bl	8009dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff ff91 	bl	800a98c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa6a:	e024      	b.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d008      	beq.n	800aa84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <prvProcessTimerOrBlockTask+0x90>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2301      	moveq	r3, #1
 800aa7e:	2300      	movne	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa84:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <prvProcessTimerOrBlockTask+0x94>)
 800aa86:	6818      	ldr	r0, [r3, #0]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7fe fe05 	bl	80096a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa96:	f7ff f9a9 	bl	8009dec <xTaskResumeAll>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <prvProcessTimerOrBlockTask+0x98>)
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
}
 800aab0:	e001      	b.n	800aab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aab2:	f7ff f99b 	bl	8009dec <xTaskResumeAll>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	2000122c 	.word	0x2000122c
 800aac4:	20001230 	.word	0x20001230
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <prvGetNextExpireTime+0x44>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bf0c      	ite	eq
 800aade:	2301      	moveq	r3, #1
 800aae0:	2300      	movne	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaf2:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <prvGetNextExpireTime+0x44>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	e001      	b.n	800ab02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab02:	68fb      	ldr	r3, [r7, #12]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	20001228 	.word	0x20001228

0800ab14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab1c:	f7ff fa04 	bl	8009f28 <xTaskGetTickCount>
 800ab20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab22:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <prvSampleTimeNow+0x3c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d205      	bcs.n	800ab38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab2c:	f000 f908 	bl	800ad40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e002      	b.n	800ab3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab3e:	4a04      	ldr	r2, [pc, #16]	; (800ab50 <prvSampleTimeNow+0x3c>)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab44:	68fb      	ldr	r3, [r7, #12]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20001238 	.word	0x20001238

0800ab54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d812      	bhi.n	800aba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	1ad2      	subs	r2, r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e01b      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab8e:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <prvInsertTimerInActiveList+0x7c>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7fd ffe0 	bl	8008b5e <vListInsert>
 800ab9e:	e012      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d206      	bcs.n	800abb6 <prvInsertTimerInActiveList+0x62>
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d302      	bcc.n	800abb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	e007      	b.n	800abc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abb6:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <prvInsertTimerInActiveList+0x80>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f7fd ffcc 	bl	8008b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abc6:	697b      	ldr	r3, [r7, #20]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	2000122c 	.word	0x2000122c
 800abd4:	20001228 	.word	0x20001228

0800abd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08e      	sub	sp, #56	; 0x38
 800abdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abde:	e09d      	b.n	800ad1c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	da18      	bge.n	800ac18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abe6:	1d3b      	adds	r3, r7, #4
 800abe8:	3304      	adds	r3, #4
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	61fb      	str	r3, [r7, #28]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac0e:	6850      	ldr	r0, [r2, #4]
 800ac10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac12:	6892      	ldr	r2, [r2, #8]
 800ac14:	4611      	mov	r1, r2
 800ac16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	db7e      	blt.n	800ad1c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fd ffce 	bl	8008bd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac34:	463b      	mov	r3, r7
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff ff6c 	bl	800ab14 <prvSampleTimeNow>
 800ac3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b09      	cmp	r3, #9
 800ac42:	d86a      	bhi.n	800ad1a <prvProcessReceivedCommands+0x142>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <prvProcessReceivedCommands+0x74>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac75 	.word	0x0800ac75
 800ac50:	0800ac75 	.word	0x0800ac75
 800ac54:	0800ac75 	.word	0x0800ac75
 800ac58:	0800ad1d 	.word	0x0800ad1d
 800ac5c:	0800acd1 	.word	0x0800acd1
 800ac60:	0800ad09 	.word	0x0800ad09
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac75 	.word	0x0800ac75
 800ac6c:	0800ad1d 	.word	0x0800ad1d
 800ac70:	0800acd1 	.word	0x0800acd1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	18d1      	adds	r1, r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac82:	f7ff ff67 	bl	800ab54 <prvInsertTimerInActiveList>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d047      	beq.n	800ad1c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d13f      	bne.n	800ad1c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	441a      	add	r2, r3
 800aca4:	2300      	movs	r3, #0
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	2100      	movs	r1, #0
 800acac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acae:	f7ff fe1f 	bl	800a8f0 <xTimerGenericCommand>
 800acb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d130      	bne.n	800ad1c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61bb      	str	r3, [r7, #24]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10a      	bne.n	800acf4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	617b      	str	r3, [r7, #20]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	18d1      	adds	r1, r2, r3
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f7ff ff27 	bl	800ab54 <prvInsertTimerInActiveList>
					break;
 800ad06:	e009      	b.n	800ad1c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d104      	bne.n	800ad1c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ad12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad14:	f000 fbec 	bl	800b4f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad18:	e000      	b.n	800ad1c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800ad1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad1c:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <prvProcessReceivedCommands+0x164>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1d39      	adds	r1, r7, #4
 800ad22:	2200      	movs	r2, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe faa1 	bl	800926c <xQueueReceive>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f47f af57 	bne.w	800abe0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	3730      	adds	r7, #48	; 0x30
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20001230 	.word	0x20001230

0800ad40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad46:	e045      	b.n	800add4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad48:	4b2c      	ldr	r3, [pc, #176]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad52:	4b2a      	ldr	r3, [pc, #168]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fd ff35 	bl	8008bd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d12e      	bne.n	800add4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d90e      	bls.n	800ada6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad94:	4b19      	ldr	r3, [pc, #100]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7fd fedd 	bl	8008b5e <vListInsert>
 800ada4:	e016      	b.n	800add4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ada6:	2300      	movs	r3, #0
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	2100      	movs	r1, #0
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fd9d 	bl	800a8f0 <xTimerGenericCommand>
 800adb6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	603b      	str	r3, [r7, #0]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800add4:	4b09      	ldr	r3, [pc, #36]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1b4      	bne.n	800ad48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adde:	4b07      	ldr	r3, [pc, #28]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a04      	ldr	r2, [pc, #16]	; (800adfc <prvSwitchTimerLists+0xbc>)
 800adea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adec:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <prvSwitchTimerLists+0xc0>)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	6013      	str	r3, [r2, #0]
}
 800adf2:	bf00      	nop
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20001228 	.word	0x20001228
 800ae00:	2000122c 	.word	0x2000122c

0800ae04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae0a:	f000 f98b 	bl	800b124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae0e:	4b15      	ldr	r3, [pc, #84]	; (800ae64 <prvCheckForValidListAndQueue+0x60>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d120      	bne.n	800ae58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae16:	4814      	ldr	r0, [pc, #80]	; (800ae68 <prvCheckForValidListAndQueue+0x64>)
 800ae18:	f7fd fe50 	bl	8008abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae1c:	4813      	ldr	r0, [pc, #76]	; (800ae6c <prvCheckForValidListAndQueue+0x68>)
 800ae1e:	f7fd fe4d 	bl	8008abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <prvCheckForValidListAndQueue+0x6c>)
 800ae24:	4a10      	ldr	r2, [pc, #64]	; (800ae68 <prvCheckForValidListAndQueue+0x64>)
 800ae26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae28:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <prvCheckForValidListAndQueue+0x70>)
 800ae2a:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <prvCheckForValidListAndQueue+0x68>)
 800ae2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae2e:	2300      	movs	r3, #0
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <prvCheckForValidListAndQueue+0x74>)
 800ae34:	4a11      	ldr	r2, [pc, #68]	; (800ae7c <prvCheckForValidListAndQueue+0x78>)
 800ae36:	2110      	movs	r1, #16
 800ae38:	200a      	movs	r0, #10
 800ae3a:	f7fd ff5b 	bl	8008cf4 <xQueueGenericCreateStatic>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4a08      	ldr	r2, [pc, #32]	; (800ae64 <prvCheckForValidListAndQueue+0x60>)
 800ae42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <prvCheckForValidListAndQueue+0x60>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <prvCheckForValidListAndQueue+0x60>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	490b      	ldr	r1, [pc, #44]	; (800ae80 <prvCheckForValidListAndQueue+0x7c>)
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe fbfa 	bl	800964c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae58:	f000 f994 	bl	800b184 <vPortExitCritical>
}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20001230 	.word	0x20001230
 800ae68:	20001200 	.word	0x20001200
 800ae6c:	20001214 	.word	0x20001214
 800ae70:	20001228 	.word	0x20001228
 800ae74:	2000122c 	.word	0x2000122c
 800ae78:	200012dc 	.word	0x200012dc
 800ae7c:	2000123c 	.word	0x2000123c
 800ae80:	0800cac4 	.word	0x0800cac4

0800ae84 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ae92:	f06f 0301 	mvn.w	r3, #1
 800ae96:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aea4:	4b06      	ldr	r3, [pc, #24]	; (800aec0 <xTimerPendFunctionCallFromISR+0x3c>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	f107 0114 	add.w	r1, r7, #20
 800aeac:	2300      	movs	r3, #0
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	f7fe f944 	bl	800913c <xQueueGenericSendFromISR>
 800aeb4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3728      	adds	r7, #40	; 0x28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20001230 	.word	0x20001230

0800aec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3b04      	subs	r3, #4
 800aed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aedc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3b04      	subs	r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f023 0201 	bic.w	r2, r3, #1
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3b04      	subs	r3, #4
 800aef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aef4:	4a0c      	ldr	r2, [pc, #48]	; (800af28 <pxPortInitialiseStack+0x64>)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3b14      	subs	r3, #20
 800aefe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3b04      	subs	r3, #4
 800af0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f06f 0202 	mvn.w	r2, #2
 800af12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3b20      	subs	r3, #32
 800af18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af1a:	68fb      	ldr	r3, [r7, #12]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	0800af2d 	.word	0x0800af2d

0800af2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <prvTaskExitError+0x54>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d00a      	beq.n	800af56 <prvTaskExitError+0x2a>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	60fb      	str	r3, [r7, #12]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <prvTaskExitError+0x28>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	60bb      	str	r3, [r7, #8]
}
 800af68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af6a:	bf00      	nop
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0fc      	beq.n	800af6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20000098 	.word	0x20000098
	...

0800af90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <pxCurrentTCBConst2>)
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	6808      	ldr	r0, [r1, #0]
 800af96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9a:	f380 8809 	msr	PSP, r0
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8811 	msr	BASEPRI, r0
 800afaa:	4770      	bx	lr
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst2>:
 800afb0:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afb8:	4808      	ldr	r0, [pc, #32]	; (800afdc <prvPortStartFirstTask+0x24>)
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	6800      	ldr	r0, [r0, #0]
 800afbe:	f380 8808 	msr	MSP, r0
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f380 8814 	msr	CONTROL, r0
 800afca:	b662      	cpsie	i
 800afcc:	b661      	cpsie	f
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	df00      	svc	0
 800afd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afda:	bf00      	nop
 800afdc:	e000ed08 	.word	0xe000ed08

0800afe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afe6:	4b46      	ldr	r3, [pc, #280]	; (800b100 <xPortStartScheduler+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a46      	ldr	r2, [pc, #280]	; (800b104 <xPortStartScheduler+0x124>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10a      	bne.n	800b006 <xPortStartScheduler+0x26>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	613b      	str	r3, [r7, #16]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b006:	4b3e      	ldr	r3, [pc, #248]	; (800b100 <xPortStartScheduler+0x120>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a3f      	ldr	r2, [pc, #252]	; (800b108 <xPortStartScheduler+0x128>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d10a      	bne.n	800b026 <xPortStartScheduler+0x46>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60fb      	str	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <xPortStartScheduler+0x12c>)
 800b028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	22ff      	movs	r2, #255	; 0xff
 800b036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <xPortStartScheduler+0x130>)
 800b04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b04e:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xPortStartScheduler+0x134>)
 800b050:	2207      	movs	r2, #7
 800b052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b054:	e009      	b.n	800b06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <xPortStartScheduler+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a2d      	ldr	r2, [pc, #180]	; (800b114 <xPortStartScheduler+0x134>)
 800b05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d0ef      	beq.n	800b056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b076:	4b27      	ldr	r3, [pc, #156]	; (800b114 <xPortStartScheduler+0x134>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1c3 0307 	rsb	r3, r3, #7
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d00a      	beq.n	800b098 <xPortStartScheduler+0xb8>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60bb      	str	r3, [r7, #8]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b098:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <xPortStartScheduler+0x134>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <xPortStartScheduler+0x134>)
 800b0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0b6:	4b18      	ldr	r3, [pc, #96]	; (800b118 <xPortStartScheduler+0x138>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <xPortStartScheduler+0x138>)
 800b0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0ce:	f000 f8dd 	bl	800b28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <xPortStartScheduler+0x13c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0d8:	f000 f8fc 	bl	800b2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0dc:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xPortStartScheduler+0x140>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <xPortStartScheduler+0x140>)
 800b0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0e8:	f7ff ff66 	bl	800afb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ec:	f7fe ffea 	bl	800a0c4 <vTaskSwitchContext>
	prvTaskExitError();
 800b0f0:	f7ff ff1c 	bl	800af2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000ed00 	.word	0xe000ed00
 800b104:	410fc271 	.word	0x410fc271
 800b108:	410fc270 	.word	0x410fc270
 800b10c:	e000e400 	.word	0xe000e400
 800b110:	2000132c 	.word	0x2000132c
 800b114:	20001330 	.word	0x20001330
 800b118:	e000ed20 	.word	0xe000ed20
 800b11c:	20000098 	.word	0x20000098
 800b120:	e000ef34 	.word	0xe000ef34

0800b124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	607b      	str	r3, [r7, #4]
}
 800b13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <vPortEnterCritical+0x58>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <vPortEnterCritical+0x58>)
 800b146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b148:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <vPortEnterCritical+0x58>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <vPortEnterCritical+0x5c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <vPortEnterCritical+0x4c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	603b      	str	r3, [r7, #0]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vPortEnterCritical+0x4a>
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	20000098 	.word	0x20000098
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <vPortExitCritical+0x50>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vPortExitCritical+0x24>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	607b      	str	r3, [r7, #4]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <vPortExitCritical+0x42>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f383 8811 	msr	BASEPRI, r3
}
 800b1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000098 	.word	0x20000098
	...

0800b1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1e0:	f3ef 8009 	mrs	r0, PSP
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <pxCurrentTCBConst>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	f01e 0f10 	tst.w	lr, #16
 800b1f0:	bf08      	it	eq
 800b1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	6010      	str	r0, [r2, #0]
 800b1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b204:	f380 8811 	msr	BASEPRI, r0
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f7fe ff58 	bl	800a0c4 <vTaskSwitchContext>
 800b214:	f04f 0000 	mov.w	r0, #0
 800b218:	f380 8811 	msr	BASEPRI, r0
 800b21c:	bc09      	pop	{r0, r3}
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	6808      	ldr	r0, [r1, #0]
 800b222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b226:	f01e 0f10 	tst.w	lr, #16
 800b22a:	bf08      	it	eq
 800b22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b230:	f380 8809 	msr	PSP, r0
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst>:
 800b240:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b262:	f7fe fe71 	bl	8009f48 <xTaskIncrementTick>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <SysTick_Handler+0x40>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <vPortSetupTimerInterrupt+0x38>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <vPortSetupTimerInterrupt+0x3c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <vPortSetupTimerInterrupt+0x40>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	099b      	lsrs	r3, r3, #6
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <vPortSetupTimerInterrupt+0x44>)
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ae:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	e000e010 	.word	0xe000e010
 800b2c4:	e000e018 	.word	0xe000e018
 800b2c8:	20000060 	.word	0x20000060
 800b2cc:	10624dd3 	.word	0x10624dd3
 800b2d0:	e000e014 	.word	0xe000e014

0800b2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2e4 <vPortEnableVFP+0x10>
 800b2d8:	6801      	ldr	r1, [r0, #0]
 800b2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2de:	6001      	str	r1, [r0, #0]
 800b2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed88 	.word	0xe000ed88

0800b2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ee:	f3ef 8305 	mrs	r3, IPSR
 800b2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b0f      	cmp	r3, #15
 800b2f8:	d914      	bls.n	800b324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <vPortValidateInterruptPriority+0x70>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b304:	4b15      	ldr	r3, [pc, #84]	; (800b35c <vPortValidateInterruptPriority+0x74>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	7afa      	ldrb	r2, [r7, #11]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d20a      	bcs.n	800b324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	607b      	str	r3, [r7, #4]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <vPortValidateInterruptPriority+0x78>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <vPortValidateInterruptPriority+0x7c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d90a      	bls.n	800b34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	603b      	str	r3, [r7, #0]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <vPortValidateInterruptPriority+0x60>
	}
 800b34a:	bf00      	nop
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	e000e3f0 	.word	0xe000e3f0
 800b35c:	2000132c 	.word	0x2000132c
 800b360:	e000ed0c 	.word	0xe000ed0c
 800b364:	20001330 	.word	0x20001330

0800b368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b374:	f7fe fd2c 	bl	8009dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b378:	4b58      	ldr	r3, [pc, #352]	; (800b4dc <pvPortMalloc+0x174>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b380:	f000 f910 	bl	800b5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b384:	4b56      	ldr	r3, [pc, #344]	; (800b4e0 <pvPortMalloc+0x178>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4013      	ands	r3, r2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 808e 	bne.w	800b4ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01d      	beq.n	800b3d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b398:	2208      	movs	r2, #8
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d014      	beq.n	800b3d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f023 0307 	bic.w	r3, r3, #7
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d069      	beq.n	800b4ae <pvPortMalloc+0x146>
 800b3da:	4b42      	ldr	r3, [pc, #264]	; (800b4e4 <pvPortMalloc+0x17c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d864      	bhi.n	800b4ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3e4:	4b40      	ldr	r3, [pc, #256]	; (800b4e8 <pvPortMalloc+0x180>)
 800b3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3e8:	4b3f      	ldr	r3, [pc, #252]	; (800b4e8 <pvPortMalloc+0x180>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ee:	e004      	b.n	800b3fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	d903      	bls.n	800b40c <pvPortMalloc+0xa4>
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1f1      	bne.n	800b3f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b40c:	4b33      	ldr	r3, [pc, #204]	; (800b4dc <pvPortMalloc+0x174>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b412:	429a      	cmp	r2, r3
 800b414:	d04b      	beq.n	800b4ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2208      	movs	r2, #8
 800b41c:	4413      	add	r3, r2
 800b41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	2308      	movs	r3, #8
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	429a      	cmp	r2, r3
 800b436:	d91f      	bls.n	800b478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4413      	add	r3, r2
 800b43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <pvPortMalloc+0xf8>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	613b      	str	r3, [r7, #16]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	1ad2      	subs	r2, r2, r3
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b472:	69b8      	ldr	r0, [r7, #24]
 800b474:	f000 f8f8 	bl	800b668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b478:	4b1a      	ldr	r3, [pc, #104]	; (800b4e4 <pvPortMalloc+0x17c>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	4a18      	ldr	r2, [pc, #96]	; (800b4e4 <pvPortMalloc+0x17c>)
 800b484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b486:	4b17      	ldr	r3, [pc, #92]	; (800b4e4 <pvPortMalloc+0x17c>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4b18      	ldr	r3, [pc, #96]	; (800b4ec <pvPortMalloc+0x184>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d203      	bcs.n	800b49a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b492:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <pvPortMalloc+0x17c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <pvPortMalloc+0x184>)
 800b498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <pvPortMalloc+0x178>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4ae:	f7fe fc9d 	bl	8009dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	f003 0307 	and.w	r3, r3, #7
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00a      	beq.n	800b4d2 <pvPortMalloc+0x16a>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60fb      	str	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <pvPortMalloc+0x168>
	return pvReturn;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3728      	adds	r7, #40	; 0x28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	2000273c 	.word	0x2000273c
 800b4e0:	20002748 	.word	0x20002748
 800b4e4:	20002740 	.word	0x20002740
 800b4e8:	20002734 	.word	0x20002734
 800b4ec:	20002744 	.word	0x20002744

0800b4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d048      	beq.n	800b594 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b502:	2308      	movs	r3, #8
 800b504:	425b      	negs	r3, r3
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	4413      	add	r3, r2
 800b50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	4b21      	ldr	r3, [pc, #132]	; (800b59c <vPortFree+0xac>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4013      	ands	r3, r2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10a      	bne.n	800b534 <vPortFree+0x44>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60fb      	str	r3, [r7, #12]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <vPortFree+0x62>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60bb      	str	r3, [r7, #8]
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	4b11      	ldr	r3, [pc, #68]	; (800b59c <vPortFree+0xac>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4013      	ands	r3, r2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d019      	beq.n	800b594 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d115      	bne.n	800b594 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	4b0b      	ldr	r3, [pc, #44]	; (800b59c <vPortFree+0xac>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	43db      	mvns	r3, r3
 800b572:	401a      	ands	r2, r3
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b578:	f7fe fc2a 	bl	8009dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <vPortFree+0xb0>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4413      	add	r3, r2
 800b586:	4a06      	ldr	r2, [pc, #24]	; (800b5a0 <vPortFree+0xb0>)
 800b588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b58a:	6938      	ldr	r0, [r7, #16]
 800b58c:	f000 f86c 	bl	800b668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b590:	f7fe fc2c 	bl	8009dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b594:	bf00      	nop
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20002748 	.word	0x20002748
 800b5a0:	20002740 	.word	0x20002740

0800b5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5b0:	4b27      	ldr	r3, [pc, #156]	; (800b650 <prvHeapInit+0xac>)
 800b5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00c      	beq.n	800b5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3307      	adds	r3, #7
 800b5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f023 0307 	bic.w	r3, r3, #7
 800b5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <prvHeapInit+0xac>)
 800b5d4:	4413      	add	r3, r2
 800b5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <prvHeapInit+0xb0>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <prvHeapInit+0xb0>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	1a9b      	subs	r3, r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 0307 	bic.w	r3, r3, #7
 800b5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a15      	ldr	r2, [pc, #84]	; (800b658 <prvHeapInit+0xb4>)
 800b604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <prvHeapInit+0xb4>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b60e:	4b12      	ldr	r3, [pc, #72]	; (800b658 <prvHeapInit+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <prvHeapInit+0xb4>)
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a0a      	ldr	r2, [pc, #40]	; (800b65c <prvHeapInit+0xb8>)
 800b632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <prvHeapInit+0xbc>)
 800b63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b63c:	4b09      	ldr	r3, [pc, #36]	; (800b664 <prvHeapInit+0xc0>)
 800b63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b642:	601a      	str	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	20001334 	.word	0x20001334
 800b654:	20002734 	.word	0x20002734
 800b658:	2000273c 	.word	0x2000273c
 800b65c:	20002744 	.word	0x20002744
 800b660:	20002740 	.word	0x20002740
 800b664:	20002748 	.word	0x20002748

0800b668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b670:	4b28      	ldr	r3, [pc, #160]	; (800b714 <prvInsertBlockIntoFreeList+0xac>)
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e002      	b.n	800b67c <prvInsertBlockIntoFreeList+0x14>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	429a      	cmp	r2, r3
 800b684:	d8f7      	bhi.n	800b676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	4413      	add	r3, r2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d108      	bne.n	800b6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	441a      	add	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d118      	bne.n	800b6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b15      	ldr	r3, [pc, #84]	; (800b718 <prvInsertBlockIntoFreeList+0xb0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d00d      	beq.n	800b6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	e008      	b.n	800b6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6e6:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <prvInsertBlockIntoFreeList+0xb0>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	e003      	b.n	800b6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d002      	beq.n	800b706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b706:	bf00      	nop
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20002734 	.word	0x20002734
 800b718:	2000273c 	.word	0x2000273c

0800b71c <std>:
 800b71c:	2300      	movs	r3, #0
 800b71e:	b510      	push	{r4, lr}
 800b720:	4604      	mov	r4, r0
 800b722:	e9c0 3300 	strd	r3, r3, [r0]
 800b726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b72a:	6083      	str	r3, [r0, #8]
 800b72c:	8181      	strh	r1, [r0, #12]
 800b72e:	6643      	str	r3, [r0, #100]	; 0x64
 800b730:	81c2      	strh	r2, [r0, #14]
 800b732:	6183      	str	r3, [r0, #24]
 800b734:	4619      	mov	r1, r3
 800b736:	2208      	movs	r2, #8
 800b738:	305c      	adds	r0, #92	; 0x5c
 800b73a:	f000 f9f7 	bl	800bb2c <memset>
 800b73e:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <std+0x58>)
 800b740:	6263      	str	r3, [r4, #36]	; 0x24
 800b742:	4b0d      	ldr	r3, [pc, #52]	; (800b778 <std+0x5c>)
 800b744:	62a3      	str	r3, [r4, #40]	; 0x28
 800b746:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <std+0x60>)
 800b748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b74a:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <std+0x64>)
 800b74c:	6323      	str	r3, [r4, #48]	; 0x30
 800b74e:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <std+0x68>)
 800b750:	6224      	str	r4, [r4, #32]
 800b752:	429c      	cmp	r4, r3
 800b754:	d006      	beq.n	800b764 <std+0x48>
 800b756:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b75a:	4294      	cmp	r4, r2
 800b75c:	d002      	beq.n	800b764 <std+0x48>
 800b75e:	33d0      	adds	r3, #208	; 0xd0
 800b760:	429c      	cmp	r4, r3
 800b762:	d105      	bne.n	800b770 <std+0x54>
 800b764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b76c:	f000 baac 	b.w	800bcc8 <__retarget_lock_init_recursive>
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop
 800b774:	0800b97d 	.word	0x0800b97d
 800b778:	0800b99f 	.word	0x0800b99f
 800b77c:	0800b9d7 	.word	0x0800b9d7
 800b780:	0800b9fb 	.word	0x0800b9fb
 800b784:	2000274c 	.word	0x2000274c

0800b788 <stdio_exit_handler>:
 800b788:	4a02      	ldr	r2, [pc, #8]	; (800b794 <stdio_exit_handler+0xc>)
 800b78a:	4903      	ldr	r1, [pc, #12]	; (800b798 <stdio_exit_handler+0x10>)
 800b78c:	4803      	ldr	r0, [pc, #12]	; (800b79c <stdio_exit_handler+0x14>)
 800b78e:	f000 b869 	b.w	800b864 <_fwalk_sglue>
 800b792:	bf00      	nop
 800b794:	2000009c 	.word	0x2000009c
 800b798:	0800c591 	.word	0x0800c591
 800b79c:	200000a8 	.word	0x200000a8

0800b7a0 <cleanup_stdio>:
 800b7a0:	6841      	ldr	r1, [r0, #4]
 800b7a2:	4b0c      	ldr	r3, [pc, #48]	; (800b7d4 <cleanup_stdio+0x34>)
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	b510      	push	{r4, lr}
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	d001      	beq.n	800b7b0 <cleanup_stdio+0x10>
 800b7ac:	f000 fef0 	bl	800c590 <_fflush_r>
 800b7b0:	68a1      	ldr	r1, [r4, #8]
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <cleanup_stdio+0x38>)
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d002      	beq.n	800b7be <cleanup_stdio+0x1e>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fee9 	bl	800c590 <_fflush_r>
 800b7be:	68e1      	ldr	r1, [r4, #12]
 800b7c0:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <cleanup_stdio+0x3c>)
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	d004      	beq.n	800b7d0 <cleanup_stdio+0x30>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7cc:	f000 bee0 	b.w	800c590 <_fflush_r>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	bf00      	nop
 800b7d4:	2000274c 	.word	0x2000274c
 800b7d8:	200027b4 	.word	0x200027b4
 800b7dc:	2000281c 	.word	0x2000281c

0800b7e0 <global_stdio_init.part.0>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <global_stdio_init.part.0+0x30>)
 800b7e4:	4c0b      	ldr	r4, [pc, #44]	; (800b814 <global_stdio_init.part.0+0x34>)
 800b7e6:	4a0c      	ldr	r2, [pc, #48]	; (800b818 <global_stdio_init.part.0+0x38>)
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2104      	movs	r1, #4
 800b7f0:	f7ff ff94 	bl	800b71c <std>
 800b7f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	2109      	movs	r1, #9
 800b7fc:	f7ff ff8e 	bl	800b71c <std>
 800b800:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b804:	2202      	movs	r2, #2
 800b806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b80a:	2112      	movs	r1, #18
 800b80c:	f7ff bf86 	b.w	800b71c <std>
 800b810:	20002884 	.word	0x20002884
 800b814:	2000274c 	.word	0x2000274c
 800b818:	0800b789 	.word	0x0800b789

0800b81c <__sfp_lock_acquire>:
 800b81c:	4801      	ldr	r0, [pc, #4]	; (800b824 <__sfp_lock_acquire+0x8>)
 800b81e:	f000 ba54 	b.w	800bcca <__retarget_lock_acquire_recursive>
 800b822:	bf00      	nop
 800b824:	2000288d 	.word	0x2000288d

0800b828 <__sfp_lock_release>:
 800b828:	4801      	ldr	r0, [pc, #4]	; (800b830 <__sfp_lock_release+0x8>)
 800b82a:	f000 ba4f 	b.w	800bccc <__retarget_lock_release_recursive>
 800b82e:	bf00      	nop
 800b830:	2000288d 	.word	0x2000288d

0800b834 <__sinit>:
 800b834:	b510      	push	{r4, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	f7ff fff0 	bl	800b81c <__sfp_lock_acquire>
 800b83c:	6a23      	ldr	r3, [r4, #32]
 800b83e:	b11b      	cbz	r3, 800b848 <__sinit+0x14>
 800b840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b844:	f7ff bff0 	b.w	800b828 <__sfp_lock_release>
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <__sinit+0x28>)
 800b84a:	6223      	str	r3, [r4, #32]
 800b84c:	4b04      	ldr	r3, [pc, #16]	; (800b860 <__sinit+0x2c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1f5      	bne.n	800b840 <__sinit+0xc>
 800b854:	f7ff ffc4 	bl	800b7e0 <global_stdio_init.part.0>
 800b858:	e7f2      	b.n	800b840 <__sinit+0xc>
 800b85a:	bf00      	nop
 800b85c:	0800b7a1 	.word	0x0800b7a1
 800b860:	20002884 	.word	0x20002884

0800b864 <_fwalk_sglue>:
 800b864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b868:	4607      	mov	r7, r0
 800b86a:	4688      	mov	r8, r1
 800b86c:	4614      	mov	r4, r2
 800b86e:	2600      	movs	r6, #0
 800b870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b874:	f1b9 0901 	subs.w	r9, r9, #1
 800b878:	d505      	bpl.n	800b886 <_fwalk_sglue+0x22>
 800b87a:	6824      	ldr	r4, [r4, #0]
 800b87c:	2c00      	cmp	r4, #0
 800b87e:	d1f7      	bne.n	800b870 <_fwalk_sglue+0xc>
 800b880:	4630      	mov	r0, r6
 800b882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b886:	89ab      	ldrh	r3, [r5, #12]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d907      	bls.n	800b89c <_fwalk_sglue+0x38>
 800b88c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b890:	3301      	adds	r3, #1
 800b892:	d003      	beq.n	800b89c <_fwalk_sglue+0x38>
 800b894:	4629      	mov	r1, r5
 800b896:	4638      	mov	r0, r7
 800b898:	47c0      	blx	r8
 800b89a:	4306      	orrs	r6, r0
 800b89c:	3568      	adds	r5, #104	; 0x68
 800b89e:	e7e9      	b.n	800b874 <_fwalk_sglue+0x10>

0800b8a0 <iprintf>:
 800b8a0:	b40f      	push	{r0, r1, r2, r3}
 800b8a2:	b507      	push	{r0, r1, r2, lr}
 800b8a4:	4906      	ldr	r1, [pc, #24]	; (800b8c0 <iprintf+0x20>)
 800b8a6:	ab04      	add	r3, sp, #16
 800b8a8:	6808      	ldr	r0, [r1, #0]
 800b8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ae:	6881      	ldr	r1, [r0, #8]
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	f000 fb3d 	bl	800bf30 <_vfiprintf_r>
 800b8b6:	b003      	add	sp, #12
 800b8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8bc:	b004      	add	sp, #16
 800b8be:	4770      	bx	lr
 800b8c0:	200000f4 	.word	0x200000f4

0800b8c4 <_puts_r>:
 800b8c4:	6a03      	ldr	r3, [r0, #32]
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	6884      	ldr	r4, [r0, #8]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	460e      	mov	r6, r1
 800b8ce:	b90b      	cbnz	r3, 800b8d4 <_puts_r+0x10>
 800b8d0:	f7ff ffb0 	bl	800b834 <__sinit>
 800b8d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d6:	07db      	lsls	r3, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_puts_r+0x22>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	0598      	lsls	r0, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_puts_r+0x22>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e2:	f000 f9f2 	bl	800bcca <__retarget_lock_acquire_recursive>
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	0719      	lsls	r1, r3, #28
 800b8ea:	d513      	bpl.n	800b914 <_puts_r+0x50>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	b18b      	cbz	r3, 800b914 <_puts_r+0x50>
 800b8f0:	3e01      	subs	r6, #1
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	60a3      	str	r3, [r4, #8]
 800b8fc:	b9e9      	cbnz	r1, 800b93a <_puts_r+0x76>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da2e      	bge.n	800b960 <_puts_r+0x9c>
 800b902:	4622      	mov	r2, r4
 800b904:	210a      	movs	r1, #10
 800b906:	4628      	mov	r0, r5
 800b908:	f000 f87b 	bl	800ba02 <__swbuf_r>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d007      	beq.n	800b920 <_puts_r+0x5c>
 800b910:	250a      	movs	r5, #10
 800b912:	e007      	b.n	800b924 <_puts_r+0x60>
 800b914:	4621      	mov	r1, r4
 800b916:	4628      	mov	r0, r5
 800b918:	f000 f8b0 	bl	800ba7c <__swsetup_r>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d0e7      	beq.n	800b8f0 <_puts_r+0x2c>
 800b920:	f04f 35ff 	mov.w	r5, #4294967295
 800b924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b926:	07da      	lsls	r2, r3, #31
 800b928:	d405      	bmi.n	800b936 <_puts_r+0x72>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	059b      	lsls	r3, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_puts_r+0x72>
 800b930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b932:	f000 f9cb 	bl	800bccc <__retarget_lock_release_recursive>
 800b936:	4628      	mov	r0, r5
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da04      	bge.n	800b948 <_puts_r+0x84>
 800b93e:	69a2      	ldr	r2, [r4, #24]
 800b940:	429a      	cmp	r2, r3
 800b942:	dc06      	bgt.n	800b952 <_puts_r+0x8e>
 800b944:	290a      	cmp	r1, #10
 800b946:	d004      	beq.n	800b952 <_puts_r+0x8e>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	6022      	str	r2, [r4, #0]
 800b94e:	7019      	strb	r1, [r3, #0]
 800b950:	e7cf      	b.n	800b8f2 <_puts_r+0x2e>
 800b952:	4622      	mov	r2, r4
 800b954:	4628      	mov	r0, r5
 800b956:	f000 f854 	bl	800ba02 <__swbuf_r>
 800b95a:	3001      	adds	r0, #1
 800b95c:	d1c9      	bne.n	800b8f2 <_puts_r+0x2e>
 800b95e:	e7df      	b.n	800b920 <_puts_r+0x5c>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	250a      	movs	r5, #10
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	6022      	str	r2, [r4, #0]
 800b968:	701d      	strb	r5, [r3, #0]
 800b96a:	e7db      	b.n	800b924 <_puts_r+0x60>

0800b96c <puts>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	; (800b978 <puts+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f7ff bfa7 	b.w	800b8c4 <_puts_r>
 800b976:	bf00      	nop
 800b978:	200000f4 	.word	0x200000f4

0800b97c <__sread>:
 800b97c:	b510      	push	{r4, lr}
 800b97e:	460c      	mov	r4, r1
 800b980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b984:	f000 f952 	bl	800bc2c <_read_r>
 800b988:	2800      	cmp	r0, #0
 800b98a:	bfab      	itete	ge
 800b98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b98e:	89a3      	ldrhlt	r3, [r4, #12]
 800b990:	181b      	addge	r3, r3, r0
 800b992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b996:	bfac      	ite	ge
 800b998:	6563      	strge	r3, [r4, #84]	; 0x54
 800b99a:	81a3      	strhlt	r3, [r4, #12]
 800b99c:	bd10      	pop	{r4, pc}

0800b99e <__swrite>:
 800b99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a2:	461f      	mov	r7, r3
 800b9a4:	898b      	ldrh	r3, [r1, #12]
 800b9a6:	05db      	lsls	r3, r3, #23
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	4616      	mov	r6, r2
 800b9ae:	d505      	bpl.n	800b9bc <__swrite+0x1e>
 800b9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f000 f926 	bl	800bc08 <_lseek_r>
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9c6:	81a3      	strh	r3, [r4, #12]
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d2:	f000 b93d 	b.w	800bc50 <_write_r>

0800b9d6 <__sseek>:
 800b9d6:	b510      	push	{r4, lr}
 800b9d8:	460c      	mov	r4, r1
 800b9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9de:	f000 f913 	bl	800bc08 <_lseek_r>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	bf15      	itete	ne
 800b9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9f2:	81a3      	strheq	r3, [r4, #12]
 800b9f4:	bf18      	it	ne
 800b9f6:	81a3      	strhne	r3, [r4, #12]
 800b9f8:	bd10      	pop	{r4, pc}

0800b9fa <__sclose>:
 800b9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fe:	f000 b89d 	b.w	800bb3c <_close_r>

0800ba02 <__swbuf_r>:
 800ba02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba04:	460e      	mov	r6, r1
 800ba06:	4614      	mov	r4, r2
 800ba08:	4605      	mov	r5, r0
 800ba0a:	b118      	cbz	r0, 800ba14 <__swbuf_r+0x12>
 800ba0c:	6a03      	ldr	r3, [r0, #32]
 800ba0e:	b90b      	cbnz	r3, 800ba14 <__swbuf_r+0x12>
 800ba10:	f7ff ff10 	bl	800b834 <__sinit>
 800ba14:	69a3      	ldr	r3, [r4, #24]
 800ba16:	60a3      	str	r3, [r4, #8]
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	071a      	lsls	r2, r3, #28
 800ba1c:	d525      	bpl.n	800ba6a <__swbuf_r+0x68>
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	b31b      	cbz	r3, 800ba6a <__swbuf_r+0x68>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	6922      	ldr	r2, [r4, #16]
 800ba26:	1a98      	subs	r0, r3, r2
 800ba28:	6963      	ldr	r3, [r4, #20]
 800ba2a:	b2f6      	uxtb	r6, r6
 800ba2c:	4283      	cmp	r3, r0
 800ba2e:	4637      	mov	r7, r6
 800ba30:	dc04      	bgt.n	800ba3c <__swbuf_r+0x3a>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4628      	mov	r0, r5
 800ba36:	f000 fdab 	bl	800c590 <_fflush_r>
 800ba3a:	b9e0      	cbnz	r0, 800ba76 <__swbuf_r+0x74>
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	60a3      	str	r3, [r4, #8]
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	6022      	str	r2, [r4, #0]
 800ba48:	701e      	strb	r6, [r3, #0]
 800ba4a:	6962      	ldr	r2, [r4, #20]
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d004      	beq.n	800ba5c <__swbuf_r+0x5a>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	07db      	lsls	r3, r3, #31
 800ba56:	d506      	bpl.n	800ba66 <__swbuf_r+0x64>
 800ba58:	2e0a      	cmp	r6, #10
 800ba5a:	d104      	bne.n	800ba66 <__swbuf_r+0x64>
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f000 fd96 	bl	800c590 <_fflush_r>
 800ba64:	b938      	cbnz	r0, 800ba76 <__swbuf_r+0x74>
 800ba66:	4638      	mov	r0, r7
 800ba68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f000 f805 	bl	800ba7c <__swsetup_r>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d0d5      	beq.n	800ba22 <__swbuf_r+0x20>
 800ba76:	f04f 37ff 	mov.w	r7, #4294967295
 800ba7a:	e7f4      	b.n	800ba66 <__swbuf_r+0x64>

0800ba7c <__swsetup_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <__swsetup_r+0xac>)
 800ba80:	4605      	mov	r5, r0
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	460c      	mov	r4, r1
 800ba86:	b118      	cbz	r0, 800ba90 <__swsetup_r+0x14>
 800ba88:	6a03      	ldr	r3, [r0, #32]
 800ba8a:	b90b      	cbnz	r3, 800ba90 <__swsetup_r+0x14>
 800ba8c:	f7ff fed2 	bl	800b834 <__sinit>
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba96:	0718      	lsls	r0, r3, #28
 800ba98:	d422      	bmi.n	800bae0 <__swsetup_r+0x64>
 800ba9a:	06d9      	lsls	r1, r3, #27
 800ba9c:	d407      	bmi.n	800baae <__swsetup_r+0x32>
 800ba9e:	2309      	movs	r3, #9
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800baa6:	81a3      	strh	r3, [r4, #12]
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	e034      	b.n	800bb18 <__swsetup_r+0x9c>
 800baae:	0758      	lsls	r0, r3, #29
 800bab0:	d512      	bpl.n	800bad8 <__swsetup_r+0x5c>
 800bab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bab4:	b141      	cbz	r1, 800bac8 <__swsetup_r+0x4c>
 800bab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baba:	4299      	cmp	r1, r3
 800babc:	d002      	beq.n	800bac4 <__swsetup_r+0x48>
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 f914 	bl	800bcec <_free_r>
 800bac4:	2300      	movs	r3, #0
 800bac6:	6363      	str	r3, [r4, #52]	; 0x34
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	2300      	movs	r3, #0
 800bad2:	6063      	str	r3, [r4, #4]
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f043 0308 	orr.w	r3, r3, #8
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	b94b      	cbnz	r3, 800baf8 <__swsetup_r+0x7c>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800baea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baee:	d003      	beq.n	800baf8 <__swsetup_r+0x7c>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 fd9a 	bl	800c62c <__smakebuf_r>
 800baf8:	89a0      	ldrh	r0, [r4, #12]
 800bafa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bafe:	f010 0301 	ands.w	r3, r0, #1
 800bb02:	d00a      	beq.n	800bb1a <__swsetup_r+0x9e>
 800bb04:	2300      	movs	r3, #0
 800bb06:	60a3      	str	r3, [r4, #8]
 800bb08:	6963      	ldr	r3, [r4, #20]
 800bb0a:	425b      	negs	r3, r3
 800bb0c:	61a3      	str	r3, [r4, #24]
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	b943      	cbnz	r3, 800bb24 <__swsetup_r+0xa8>
 800bb12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb16:	d1c4      	bne.n	800baa2 <__swsetup_r+0x26>
 800bb18:	bd38      	pop	{r3, r4, r5, pc}
 800bb1a:	0781      	lsls	r1, r0, #30
 800bb1c:	bf58      	it	pl
 800bb1e:	6963      	ldrpl	r3, [r4, #20]
 800bb20:	60a3      	str	r3, [r4, #8]
 800bb22:	e7f4      	b.n	800bb0e <__swsetup_r+0x92>
 800bb24:	2000      	movs	r0, #0
 800bb26:	e7f7      	b.n	800bb18 <__swsetup_r+0x9c>
 800bb28:	200000f4 	.word	0x200000f4

0800bb2c <memset>:
 800bb2c:	4402      	add	r2, r0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d100      	bne.n	800bb36 <memset+0xa>
 800bb34:	4770      	bx	lr
 800bb36:	f803 1b01 	strb.w	r1, [r3], #1
 800bb3a:	e7f9      	b.n	800bb30 <memset+0x4>

0800bb3c <_close_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4d06      	ldr	r5, [pc, #24]	; (800bb58 <_close_r+0x1c>)
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f5 f9bd 	bl	8000ec6 <_close>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_close_r+0x1a>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_close_r+0x1a>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20002888 	.word	0x20002888

0800bb5c <_reclaim_reent>:
 800bb5c:	4b29      	ldr	r3, [pc, #164]	; (800bc04 <_reclaim_reent+0xa8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4283      	cmp	r3, r0
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	4604      	mov	r4, r0
 800bb66:	d04b      	beq.n	800bc00 <_reclaim_reent+0xa4>
 800bb68:	69c3      	ldr	r3, [r0, #28]
 800bb6a:	b143      	cbz	r3, 800bb7e <_reclaim_reent+0x22>
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d144      	bne.n	800bbfc <_reclaim_reent+0xa0>
 800bb72:	69e3      	ldr	r3, [r4, #28]
 800bb74:	6819      	ldr	r1, [r3, #0]
 800bb76:	b111      	cbz	r1, 800bb7e <_reclaim_reent+0x22>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f8b7 	bl	800bcec <_free_r>
 800bb7e:	6961      	ldr	r1, [r4, #20]
 800bb80:	b111      	cbz	r1, 800bb88 <_reclaim_reent+0x2c>
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 f8b2 	bl	800bcec <_free_r>
 800bb88:	69e1      	ldr	r1, [r4, #28]
 800bb8a:	b111      	cbz	r1, 800bb92 <_reclaim_reent+0x36>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 f8ad 	bl	800bcec <_free_r>
 800bb92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb94:	b111      	cbz	r1, 800bb9c <_reclaim_reent+0x40>
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f8a8 	bl	800bcec <_free_r>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	b111      	cbz	r1, 800bba6 <_reclaim_reent+0x4a>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 f8a3 	bl	800bcec <_free_r>
 800bba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bba8:	b111      	cbz	r1, 800bbb0 <_reclaim_reent+0x54>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f89e 	bl	800bcec <_free_r>
 800bbb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbb2:	b111      	cbz	r1, 800bbba <_reclaim_reent+0x5e>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 f899 	bl	800bcec <_free_r>
 800bbba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bbbc:	b111      	cbz	r1, 800bbc4 <_reclaim_reent+0x68>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 f894 	bl	800bcec <_free_r>
 800bbc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bbc6:	b111      	cbz	r1, 800bbce <_reclaim_reent+0x72>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 f88f 	bl	800bcec <_free_r>
 800bbce:	6a23      	ldr	r3, [r4, #32]
 800bbd0:	b1b3      	cbz	r3, 800bc00 <_reclaim_reent+0xa4>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbd8:	4718      	bx	r3
 800bbda:	5949      	ldr	r1, [r1, r5]
 800bbdc:	b941      	cbnz	r1, 800bbf0 <_reclaim_reent+0x94>
 800bbde:	3504      	adds	r5, #4
 800bbe0:	69e3      	ldr	r3, [r4, #28]
 800bbe2:	2d80      	cmp	r5, #128	; 0x80
 800bbe4:	68d9      	ldr	r1, [r3, #12]
 800bbe6:	d1f8      	bne.n	800bbda <_reclaim_reent+0x7e>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 f87f 	bl	800bcec <_free_r>
 800bbee:	e7c0      	b.n	800bb72 <_reclaim_reent+0x16>
 800bbf0:	680e      	ldr	r6, [r1, #0]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 f87a 	bl	800bcec <_free_r>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	e7ef      	b.n	800bbdc <_reclaim_reent+0x80>
 800bbfc:	2500      	movs	r5, #0
 800bbfe:	e7ef      	b.n	800bbe0 <_reclaim_reent+0x84>
 800bc00:	bd70      	pop	{r4, r5, r6, pc}
 800bc02:	bf00      	nop
 800bc04:	200000f4 	.word	0x200000f4

0800bc08 <_lseek_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d07      	ldr	r5, [pc, #28]	; (800bc28 <_lseek_r+0x20>)
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	602a      	str	r2, [r5, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	f7f5 f97c 	bl	8000f14 <_lseek>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_lseek_r+0x1e>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_lseek_r+0x1e>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20002888 	.word	0x20002888

0800bc2c <_read_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d07      	ldr	r5, [pc, #28]	; (800bc4c <_read_r+0x20>)
 800bc30:	4604      	mov	r4, r0
 800bc32:	4608      	mov	r0, r1
 800bc34:	4611      	mov	r1, r2
 800bc36:	2200      	movs	r2, #0
 800bc38:	602a      	str	r2, [r5, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f7f5 f90a 	bl	8000e54 <_read>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_read_r+0x1e>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_read_r+0x1e>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20002888 	.word	0x20002888

0800bc50 <_write_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4d07      	ldr	r5, [pc, #28]	; (800bc70 <_write_r+0x20>)
 800bc54:	4604      	mov	r4, r0
 800bc56:	4608      	mov	r0, r1
 800bc58:	4611      	mov	r1, r2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	602a      	str	r2, [r5, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f7f5 f915 	bl	8000e8e <_write>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_write_r+0x1e>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_write_r+0x1e>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20002888 	.word	0x20002888

0800bc74 <__errno>:
 800bc74:	4b01      	ldr	r3, [pc, #4]	; (800bc7c <__errno+0x8>)
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	200000f4 	.word	0x200000f4

0800bc80 <__libc_init_array>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	4d0d      	ldr	r5, [pc, #52]	; (800bcb8 <__libc_init_array+0x38>)
 800bc84:	4c0d      	ldr	r4, [pc, #52]	; (800bcbc <__libc_init_array+0x3c>)
 800bc86:	1b64      	subs	r4, r4, r5
 800bc88:	10a4      	asrs	r4, r4, #2
 800bc8a:	2600      	movs	r6, #0
 800bc8c:	42a6      	cmp	r6, r4
 800bc8e:	d109      	bne.n	800bca4 <__libc_init_array+0x24>
 800bc90:	4d0b      	ldr	r5, [pc, #44]	; (800bcc0 <__libc_init_array+0x40>)
 800bc92:	4c0c      	ldr	r4, [pc, #48]	; (800bcc4 <__libc_init_array+0x44>)
 800bc94:	f000 fd38 	bl	800c708 <_init>
 800bc98:	1b64      	subs	r4, r4, r5
 800bc9a:	10a4      	asrs	r4, r4, #2
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	42a6      	cmp	r6, r4
 800bca0:	d105      	bne.n	800bcae <__libc_init_array+0x2e>
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca8:	4798      	blx	r3
 800bcaa:	3601      	adds	r6, #1
 800bcac:	e7ee      	b.n	800bc8c <__libc_init_array+0xc>
 800bcae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb2:	4798      	blx	r3
 800bcb4:	3601      	adds	r6, #1
 800bcb6:	e7f2      	b.n	800bc9e <__libc_init_array+0x1e>
 800bcb8:	0800cbf8 	.word	0x0800cbf8
 800bcbc:	0800cbf8 	.word	0x0800cbf8
 800bcc0:	0800cbf8 	.word	0x0800cbf8
 800bcc4:	0800cbfc 	.word	0x0800cbfc

0800bcc8 <__retarget_lock_init_recursive>:
 800bcc8:	4770      	bx	lr

0800bcca <__retarget_lock_acquire_recursive>:
 800bcca:	4770      	bx	lr

0800bccc <__retarget_lock_release_recursive>:
 800bccc:	4770      	bx	lr

0800bcce <memcpy>:
 800bcce:	440a      	add	r2, r1
 800bcd0:	4291      	cmp	r1, r2
 800bcd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcd6:	d100      	bne.n	800bcda <memcpy+0xc>
 800bcd8:	4770      	bx	lr
 800bcda:	b510      	push	{r4, lr}
 800bcdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bce4:	4291      	cmp	r1, r2
 800bce6:	d1f9      	bne.n	800bcdc <memcpy+0xe>
 800bce8:	bd10      	pop	{r4, pc}
	...

0800bcec <_free_r>:
 800bcec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcee:	2900      	cmp	r1, #0
 800bcf0:	d044      	beq.n	800bd7c <_free_r+0x90>
 800bcf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf6:	9001      	str	r0, [sp, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f1a1 0404 	sub.w	r4, r1, #4
 800bcfe:	bfb8      	it	lt
 800bd00:	18e4      	addlt	r4, r4, r3
 800bd02:	f000 f8df 	bl	800bec4 <__malloc_lock>
 800bd06:	4a1e      	ldr	r2, [pc, #120]	; (800bd80 <_free_r+0x94>)
 800bd08:	9801      	ldr	r0, [sp, #4]
 800bd0a:	6813      	ldr	r3, [r2, #0]
 800bd0c:	b933      	cbnz	r3, 800bd1c <_free_r+0x30>
 800bd0e:	6063      	str	r3, [r4, #4]
 800bd10:	6014      	str	r4, [r2, #0]
 800bd12:	b003      	add	sp, #12
 800bd14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd18:	f000 b8da 	b.w	800bed0 <__malloc_unlock>
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	d908      	bls.n	800bd32 <_free_r+0x46>
 800bd20:	6825      	ldr	r5, [r4, #0]
 800bd22:	1961      	adds	r1, r4, r5
 800bd24:	428b      	cmp	r3, r1
 800bd26:	bf01      	itttt	eq
 800bd28:	6819      	ldreq	r1, [r3, #0]
 800bd2a:	685b      	ldreq	r3, [r3, #4]
 800bd2c:	1949      	addeq	r1, r1, r5
 800bd2e:	6021      	streq	r1, [r4, #0]
 800bd30:	e7ed      	b.n	800bd0e <_free_r+0x22>
 800bd32:	461a      	mov	r2, r3
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	b10b      	cbz	r3, 800bd3c <_free_r+0x50>
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	d9fa      	bls.n	800bd32 <_free_r+0x46>
 800bd3c:	6811      	ldr	r1, [r2, #0]
 800bd3e:	1855      	adds	r5, r2, r1
 800bd40:	42a5      	cmp	r5, r4
 800bd42:	d10b      	bne.n	800bd5c <_free_r+0x70>
 800bd44:	6824      	ldr	r4, [r4, #0]
 800bd46:	4421      	add	r1, r4
 800bd48:	1854      	adds	r4, r2, r1
 800bd4a:	42a3      	cmp	r3, r4
 800bd4c:	6011      	str	r1, [r2, #0]
 800bd4e:	d1e0      	bne.n	800bd12 <_free_r+0x26>
 800bd50:	681c      	ldr	r4, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	6053      	str	r3, [r2, #4]
 800bd56:	440c      	add	r4, r1
 800bd58:	6014      	str	r4, [r2, #0]
 800bd5a:	e7da      	b.n	800bd12 <_free_r+0x26>
 800bd5c:	d902      	bls.n	800bd64 <_free_r+0x78>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	6003      	str	r3, [r0, #0]
 800bd62:	e7d6      	b.n	800bd12 <_free_r+0x26>
 800bd64:	6825      	ldr	r5, [r4, #0]
 800bd66:	1961      	adds	r1, r4, r5
 800bd68:	428b      	cmp	r3, r1
 800bd6a:	bf04      	itt	eq
 800bd6c:	6819      	ldreq	r1, [r3, #0]
 800bd6e:	685b      	ldreq	r3, [r3, #4]
 800bd70:	6063      	str	r3, [r4, #4]
 800bd72:	bf04      	itt	eq
 800bd74:	1949      	addeq	r1, r1, r5
 800bd76:	6021      	streq	r1, [r4, #0]
 800bd78:	6054      	str	r4, [r2, #4]
 800bd7a:	e7ca      	b.n	800bd12 <_free_r+0x26>
 800bd7c:	b003      	add	sp, #12
 800bd7e:	bd30      	pop	{r4, r5, pc}
 800bd80:	20002890 	.word	0x20002890

0800bd84 <sbrk_aligned>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	4e0e      	ldr	r6, [pc, #56]	; (800bdc0 <sbrk_aligned+0x3c>)
 800bd88:	460c      	mov	r4, r1
 800bd8a:	6831      	ldr	r1, [r6, #0]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	b911      	cbnz	r1, 800bd96 <sbrk_aligned+0x12>
 800bd90:	f000 fcaa 	bl	800c6e8 <_sbrk_r>
 800bd94:	6030      	str	r0, [r6, #0]
 800bd96:	4621      	mov	r1, r4
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f000 fca5 	bl	800c6e8 <_sbrk_r>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d00a      	beq.n	800bdb8 <sbrk_aligned+0x34>
 800bda2:	1cc4      	adds	r4, r0, #3
 800bda4:	f024 0403 	bic.w	r4, r4, #3
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d007      	beq.n	800bdbc <sbrk_aligned+0x38>
 800bdac:	1a21      	subs	r1, r4, r0
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f000 fc9a 	bl	800c6e8 <_sbrk_r>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d101      	bne.n	800bdbc <sbrk_aligned+0x38>
 800bdb8:	f04f 34ff 	mov.w	r4, #4294967295
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	20002894 	.word	0x20002894

0800bdc4 <_malloc_r>:
 800bdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc8:	1ccd      	adds	r5, r1, #3
 800bdca:	f025 0503 	bic.w	r5, r5, #3
 800bdce:	3508      	adds	r5, #8
 800bdd0:	2d0c      	cmp	r5, #12
 800bdd2:	bf38      	it	cc
 800bdd4:	250c      	movcc	r5, #12
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	4607      	mov	r7, r0
 800bdda:	db01      	blt.n	800bde0 <_malloc_r+0x1c>
 800bddc:	42a9      	cmp	r1, r5
 800bdde:	d905      	bls.n	800bdec <_malloc_r+0x28>
 800bde0:	230c      	movs	r3, #12
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	2600      	movs	r6, #0
 800bde6:	4630      	mov	r0, r6
 800bde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bec0 <_malloc_r+0xfc>
 800bdf0:	f000 f868 	bl	800bec4 <__malloc_lock>
 800bdf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf8:	461c      	mov	r4, r3
 800bdfa:	bb5c      	cbnz	r4, 800be54 <_malloc_r+0x90>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4638      	mov	r0, r7
 800be00:	f7ff ffc0 	bl	800bd84 <sbrk_aligned>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	4604      	mov	r4, r0
 800be08:	d155      	bne.n	800beb6 <_malloc_r+0xf2>
 800be0a:	f8d8 4000 	ldr.w	r4, [r8]
 800be0e:	4626      	mov	r6, r4
 800be10:	2e00      	cmp	r6, #0
 800be12:	d145      	bne.n	800bea0 <_malloc_r+0xdc>
 800be14:	2c00      	cmp	r4, #0
 800be16:	d048      	beq.n	800beaa <_malloc_r+0xe6>
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	4631      	mov	r1, r6
 800be1c:	4638      	mov	r0, r7
 800be1e:	eb04 0903 	add.w	r9, r4, r3
 800be22:	f000 fc61 	bl	800c6e8 <_sbrk_r>
 800be26:	4581      	cmp	r9, r0
 800be28:	d13f      	bne.n	800beaa <_malloc_r+0xe6>
 800be2a:	6821      	ldr	r1, [r4, #0]
 800be2c:	1a6d      	subs	r5, r5, r1
 800be2e:	4629      	mov	r1, r5
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff ffa7 	bl	800bd84 <sbrk_aligned>
 800be36:	3001      	adds	r0, #1
 800be38:	d037      	beq.n	800beaa <_malloc_r+0xe6>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	442b      	add	r3, r5
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	f8d8 3000 	ldr.w	r3, [r8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d038      	beq.n	800beba <_malloc_r+0xf6>
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	42a2      	cmp	r2, r4
 800be4c:	d12b      	bne.n	800bea6 <_malloc_r+0xe2>
 800be4e:	2200      	movs	r2, #0
 800be50:	605a      	str	r2, [r3, #4]
 800be52:	e00f      	b.n	800be74 <_malloc_r+0xb0>
 800be54:	6822      	ldr	r2, [r4, #0]
 800be56:	1b52      	subs	r2, r2, r5
 800be58:	d41f      	bmi.n	800be9a <_malloc_r+0xd6>
 800be5a:	2a0b      	cmp	r2, #11
 800be5c:	d917      	bls.n	800be8e <_malloc_r+0xca>
 800be5e:	1961      	adds	r1, r4, r5
 800be60:	42a3      	cmp	r3, r4
 800be62:	6025      	str	r5, [r4, #0]
 800be64:	bf18      	it	ne
 800be66:	6059      	strne	r1, [r3, #4]
 800be68:	6863      	ldr	r3, [r4, #4]
 800be6a:	bf08      	it	eq
 800be6c:	f8c8 1000 	streq.w	r1, [r8]
 800be70:	5162      	str	r2, [r4, r5]
 800be72:	604b      	str	r3, [r1, #4]
 800be74:	4638      	mov	r0, r7
 800be76:	f104 060b 	add.w	r6, r4, #11
 800be7a:	f000 f829 	bl	800bed0 <__malloc_unlock>
 800be7e:	f026 0607 	bic.w	r6, r6, #7
 800be82:	1d23      	adds	r3, r4, #4
 800be84:	1af2      	subs	r2, r6, r3
 800be86:	d0ae      	beq.n	800bde6 <_malloc_r+0x22>
 800be88:	1b9b      	subs	r3, r3, r6
 800be8a:	50a3      	str	r3, [r4, r2]
 800be8c:	e7ab      	b.n	800bde6 <_malloc_r+0x22>
 800be8e:	42a3      	cmp	r3, r4
 800be90:	6862      	ldr	r2, [r4, #4]
 800be92:	d1dd      	bne.n	800be50 <_malloc_r+0x8c>
 800be94:	f8c8 2000 	str.w	r2, [r8]
 800be98:	e7ec      	b.n	800be74 <_malloc_r+0xb0>
 800be9a:	4623      	mov	r3, r4
 800be9c:	6864      	ldr	r4, [r4, #4]
 800be9e:	e7ac      	b.n	800bdfa <_malloc_r+0x36>
 800bea0:	4634      	mov	r4, r6
 800bea2:	6876      	ldr	r6, [r6, #4]
 800bea4:	e7b4      	b.n	800be10 <_malloc_r+0x4c>
 800bea6:	4613      	mov	r3, r2
 800bea8:	e7cc      	b.n	800be44 <_malloc_r+0x80>
 800beaa:	230c      	movs	r3, #12
 800beac:	603b      	str	r3, [r7, #0]
 800beae:	4638      	mov	r0, r7
 800beb0:	f000 f80e 	bl	800bed0 <__malloc_unlock>
 800beb4:	e797      	b.n	800bde6 <_malloc_r+0x22>
 800beb6:	6025      	str	r5, [r4, #0]
 800beb8:	e7dc      	b.n	800be74 <_malloc_r+0xb0>
 800beba:	605b      	str	r3, [r3, #4]
 800bebc:	deff      	udf	#255	; 0xff
 800bebe:	bf00      	nop
 800bec0:	20002890 	.word	0x20002890

0800bec4 <__malloc_lock>:
 800bec4:	4801      	ldr	r0, [pc, #4]	; (800becc <__malloc_lock+0x8>)
 800bec6:	f7ff bf00 	b.w	800bcca <__retarget_lock_acquire_recursive>
 800beca:	bf00      	nop
 800becc:	2000288c 	.word	0x2000288c

0800bed0 <__malloc_unlock>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__malloc_unlock+0x8>)
 800bed2:	f7ff befb 	b.w	800bccc <__retarget_lock_release_recursive>
 800bed6:	bf00      	nop
 800bed8:	2000288c 	.word	0x2000288c

0800bedc <__sfputc_r>:
 800bedc:	6893      	ldr	r3, [r2, #8]
 800bede:	3b01      	subs	r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	b410      	push	{r4}
 800bee4:	6093      	str	r3, [r2, #8]
 800bee6:	da08      	bge.n	800befa <__sfputc_r+0x1e>
 800bee8:	6994      	ldr	r4, [r2, #24]
 800beea:	42a3      	cmp	r3, r4
 800beec:	db01      	blt.n	800bef2 <__sfputc_r+0x16>
 800beee:	290a      	cmp	r1, #10
 800bef0:	d103      	bne.n	800befa <__sfputc_r+0x1e>
 800bef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef6:	f7ff bd84 	b.w	800ba02 <__swbuf_r>
 800befa:	6813      	ldr	r3, [r2, #0]
 800befc:	1c58      	adds	r0, r3, #1
 800befe:	6010      	str	r0, [r2, #0]
 800bf00:	7019      	strb	r1, [r3, #0]
 800bf02:	4608      	mov	r0, r1
 800bf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <__sfputs_r>:
 800bf0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	460f      	mov	r7, r1
 800bf10:	4614      	mov	r4, r2
 800bf12:	18d5      	adds	r5, r2, r3
 800bf14:	42ac      	cmp	r4, r5
 800bf16:	d101      	bne.n	800bf1c <__sfputs_r+0x12>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e007      	b.n	800bf2c <__sfputs_r+0x22>
 800bf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf20:	463a      	mov	r2, r7
 800bf22:	4630      	mov	r0, r6
 800bf24:	f7ff ffda 	bl	800bedc <__sfputc_r>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d1f3      	bne.n	800bf14 <__sfputs_r+0xa>
 800bf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf30 <_vfiprintf_r>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	460d      	mov	r5, r1
 800bf36:	b09d      	sub	sp, #116	; 0x74
 800bf38:	4614      	mov	r4, r2
 800bf3a:	4698      	mov	r8, r3
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	b118      	cbz	r0, 800bf48 <_vfiprintf_r+0x18>
 800bf40:	6a03      	ldr	r3, [r0, #32]
 800bf42:	b90b      	cbnz	r3, 800bf48 <_vfiprintf_r+0x18>
 800bf44:	f7ff fc76 	bl	800b834 <__sinit>
 800bf48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf4a:	07d9      	lsls	r1, r3, #31
 800bf4c:	d405      	bmi.n	800bf5a <_vfiprintf_r+0x2a>
 800bf4e:	89ab      	ldrh	r3, [r5, #12]
 800bf50:	059a      	lsls	r2, r3, #22
 800bf52:	d402      	bmi.n	800bf5a <_vfiprintf_r+0x2a>
 800bf54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf56:	f7ff feb8 	bl	800bcca <__retarget_lock_acquire_recursive>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	071b      	lsls	r3, r3, #28
 800bf5e:	d501      	bpl.n	800bf64 <_vfiprintf_r+0x34>
 800bf60:	692b      	ldr	r3, [r5, #16]
 800bf62:	b99b      	cbnz	r3, 800bf8c <_vfiprintf_r+0x5c>
 800bf64:	4629      	mov	r1, r5
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7ff fd88 	bl	800ba7c <__swsetup_r>
 800bf6c:	b170      	cbz	r0, 800bf8c <_vfiprintf_r+0x5c>
 800bf6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf70:	07dc      	lsls	r4, r3, #31
 800bf72:	d504      	bpl.n	800bf7e <_vfiprintf_r+0x4e>
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	b01d      	add	sp, #116	; 0x74
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7e:	89ab      	ldrh	r3, [r5, #12]
 800bf80:	0598      	lsls	r0, r3, #22
 800bf82:	d4f7      	bmi.n	800bf74 <_vfiprintf_r+0x44>
 800bf84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf86:	f7ff fea1 	bl	800bccc <__retarget_lock_release_recursive>
 800bf8a:	e7f3      	b.n	800bf74 <_vfiprintf_r+0x44>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf90:	2320      	movs	r3, #32
 800bf92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf96:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf9a:	2330      	movs	r3, #48	; 0x30
 800bf9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c150 <_vfiprintf_r+0x220>
 800bfa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfa4:	f04f 0901 	mov.w	r9, #1
 800bfa8:	4623      	mov	r3, r4
 800bfaa:	469a      	mov	sl, r3
 800bfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb0:	b10a      	cbz	r2, 800bfb6 <_vfiprintf_r+0x86>
 800bfb2:	2a25      	cmp	r2, #37	; 0x25
 800bfb4:	d1f9      	bne.n	800bfaa <_vfiprintf_r+0x7a>
 800bfb6:	ebba 0b04 	subs.w	fp, sl, r4
 800bfba:	d00b      	beq.n	800bfd4 <_vfiprintf_r+0xa4>
 800bfbc:	465b      	mov	r3, fp
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f7ff ffa1 	bl	800bf0a <__sfputs_r>
 800bfc8:	3001      	adds	r0, #1
 800bfca:	f000 80a9 	beq.w	800c120 <_vfiprintf_r+0x1f0>
 800bfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfd0:	445a      	add	r2, fp
 800bfd2:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80a1 	beq.w	800c120 <_vfiprintf_r+0x1f0>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfe8:	f10a 0a01 	add.w	sl, sl, #1
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	9307      	str	r3, [sp, #28]
 800bff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bff4:	931a      	str	r3, [sp, #104]	; 0x68
 800bff6:	4654      	mov	r4, sl
 800bff8:	2205      	movs	r2, #5
 800bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffe:	4854      	ldr	r0, [pc, #336]	; (800c150 <_vfiprintf_r+0x220>)
 800c000:	f7f4 f8ee 	bl	80001e0 <memchr>
 800c004:	9a04      	ldr	r2, [sp, #16]
 800c006:	b9d8      	cbnz	r0, 800c040 <_vfiprintf_r+0x110>
 800c008:	06d1      	lsls	r1, r2, #27
 800c00a:	bf44      	itt	mi
 800c00c:	2320      	movmi	r3, #32
 800c00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c012:	0713      	lsls	r3, r2, #28
 800c014:	bf44      	itt	mi
 800c016:	232b      	movmi	r3, #43	; 0x2b
 800c018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c01c:	f89a 3000 	ldrb.w	r3, [sl]
 800c020:	2b2a      	cmp	r3, #42	; 0x2a
 800c022:	d015      	beq.n	800c050 <_vfiprintf_r+0x120>
 800c024:	9a07      	ldr	r2, [sp, #28]
 800c026:	4654      	mov	r4, sl
 800c028:	2000      	movs	r0, #0
 800c02a:	f04f 0c0a 	mov.w	ip, #10
 800c02e:	4621      	mov	r1, r4
 800c030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c034:	3b30      	subs	r3, #48	; 0x30
 800c036:	2b09      	cmp	r3, #9
 800c038:	d94d      	bls.n	800c0d6 <_vfiprintf_r+0x1a6>
 800c03a:	b1b0      	cbz	r0, 800c06a <_vfiprintf_r+0x13a>
 800c03c:	9207      	str	r2, [sp, #28]
 800c03e:	e014      	b.n	800c06a <_vfiprintf_r+0x13a>
 800c040:	eba0 0308 	sub.w	r3, r0, r8
 800c044:	fa09 f303 	lsl.w	r3, r9, r3
 800c048:	4313      	orrs	r3, r2
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	46a2      	mov	sl, r4
 800c04e:	e7d2      	b.n	800bff6 <_vfiprintf_r+0xc6>
 800c050:	9b03      	ldr	r3, [sp, #12]
 800c052:	1d19      	adds	r1, r3, #4
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	9103      	str	r1, [sp, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	bfbb      	ittet	lt
 800c05c:	425b      	neglt	r3, r3
 800c05e:	f042 0202 	orrlt.w	r2, r2, #2
 800c062:	9307      	strge	r3, [sp, #28]
 800c064:	9307      	strlt	r3, [sp, #28]
 800c066:	bfb8      	it	lt
 800c068:	9204      	strlt	r2, [sp, #16]
 800c06a:	7823      	ldrb	r3, [r4, #0]
 800c06c:	2b2e      	cmp	r3, #46	; 0x2e
 800c06e:	d10c      	bne.n	800c08a <_vfiprintf_r+0x15a>
 800c070:	7863      	ldrb	r3, [r4, #1]
 800c072:	2b2a      	cmp	r3, #42	; 0x2a
 800c074:	d134      	bne.n	800c0e0 <_vfiprintf_r+0x1b0>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	1d1a      	adds	r2, r3, #4
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	9203      	str	r2, [sp, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bfb8      	it	lt
 800c082:	f04f 33ff 	movlt.w	r3, #4294967295
 800c086:	3402      	adds	r4, #2
 800c088:	9305      	str	r3, [sp, #20]
 800c08a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c160 <_vfiprintf_r+0x230>
 800c08e:	7821      	ldrb	r1, [r4, #0]
 800c090:	2203      	movs	r2, #3
 800c092:	4650      	mov	r0, sl
 800c094:	f7f4 f8a4 	bl	80001e0 <memchr>
 800c098:	b138      	cbz	r0, 800c0aa <_vfiprintf_r+0x17a>
 800c09a:	9b04      	ldr	r3, [sp, #16]
 800c09c:	eba0 000a 	sub.w	r0, r0, sl
 800c0a0:	2240      	movs	r2, #64	; 0x40
 800c0a2:	4082      	lsls	r2, r0
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	3401      	adds	r4, #1
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ae:	4829      	ldr	r0, [pc, #164]	; (800c154 <_vfiprintf_r+0x224>)
 800c0b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0b4:	2206      	movs	r2, #6
 800c0b6:	f7f4 f893 	bl	80001e0 <memchr>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d03f      	beq.n	800c13e <_vfiprintf_r+0x20e>
 800c0be:	4b26      	ldr	r3, [pc, #152]	; (800c158 <_vfiprintf_r+0x228>)
 800c0c0:	bb1b      	cbnz	r3, 800c10a <_vfiprintf_r+0x1da>
 800c0c2:	9b03      	ldr	r3, [sp, #12]
 800c0c4:	3307      	adds	r3, #7
 800c0c6:	f023 0307 	bic.w	r3, r3, #7
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	9303      	str	r3, [sp, #12]
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	443b      	add	r3, r7
 800c0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d4:	e768      	b.n	800bfa8 <_vfiprintf_r+0x78>
 800c0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0da:	460c      	mov	r4, r1
 800c0dc:	2001      	movs	r0, #1
 800c0de:	e7a6      	b.n	800c02e <_vfiprintf_r+0xfe>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	3401      	adds	r4, #1
 800c0e4:	9305      	str	r3, [sp, #20]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	f04f 0c0a 	mov.w	ip, #10
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f2:	3a30      	subs	r2, #48	; 0x30
 800c0f4:	2a09      	cmp	r2, #9
 800c0f6:	d903      	bls.n	800c100 <_vfiprintf_r+0x1d0>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d0c6      	beq.n	800c08a <_vfiprintf_r+0x15a>
 800c0fc:	9105      	str	r1, [sp, #20]
 800c0fe:	e7c4      	b.n	800c08a <_vfiprintf_r+0x15a>
 800c100:	fb0c 2101 	mla	r1, ip, r1, r2
 800c104:	4604      	mov	r4, r0
 800c106:	2301      	movs	r3, #1
 800c108:	e7f0      	b.n	800c0ec <_vfiprintf_r+0x1bc>
 800c10a:	ab03      	add	r3, sp, #12
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	462a      	mov	r2, r5
 800c110:	4b12      	ldr	r3, [pc, #72]	; (800c15c <_vfiprintf_r+0x22c>)
 800c112:	a904      	add	r1, sp, #16
 800c114:	4630      	mov	r0, r6
 800c116:	f3af 8000 	nop.w
 800c11a:	4607      	mov	r7, r0
 800c11c:	1c78      	adds	r0, r7, #1
 800c11e:	d1d6      	bne.n	800c0ce <_vfiprintf_r+0x19e>
 800c120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c122:	07d9      	lsls	r1, r3, #31
 800c124:	d405      	bmi.n	800c132 <_vfiprintf_r+0x202>
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	059a      	lsls	r2, r3, #22
 800c12a:	d402      	bmi.n	800c132 <_vfiprintf_r+0x202>
 800c12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c12e:	f7ff fdcd 	bl	800bccc <__retarget_lock_release_recursive>
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	065b      	lsls	r3, r3, #25
 800c136:	f53f af1d 	bmi.w	800bf74 <_vfiprintf_r+0x44>
 800c13a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c13c:	e71c      	b.n	800bf78 <_vfiprintf_r+0x48>
 800c13e:	ab03      	add	r3, sp, #12
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	462a      	mov	r2, r5
 800c144:	4b05      	ldr	r3, [pc, #20]	; (800c15c <_vfiprintf_r+0x22c>)
 800c146:	a904      	add	r1, sp, #16
 800c148:	4630      	mov	r0, r6
 800c14a:	f000 f879 	bl	800c240 <_printf_i>
 800c14e:	e7e4      	b.n	800c11a <_vfiprintf_r+0x1ea>
 800c150:	0800cbc4 	.word	0x0800cbc4
 800c154:	0800cbce 	.word	0x0800cbce
 800c158:	00000000 	.word	0x00000000
 800c15c:	0800bf0b 	.word	0x0800bf0b
 800c160:	0800cbca 	.word	0x0800cbca

0800c164 <_printf_common>:
 800c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	4616      	mov	r6, r2
 800c16a:	4699      	mov	r9, r3
 800c16c:	688a      	ldr	r2, [r1, #8]
 800c16e:	690b      	ldr	r3, [r1, #16]
 800c170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c174:	4293      	cmp	r3, r2
 800c176:	bfb8      	it	lt
 800c178:	4613      	movlt	r3, r2
 800c17a:	6033      	str	r3, [r6, #0]
 800c17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c180:	4607      	mov	r7, r0
 800c182:	460c      	mov	r4, r1
 800c184:	b10a      	cbz	r2, 800c18a <_printf_common+0x26>
 800c186:	3301      	adds	r3, #1
 800c188:	6033      	str	r3, [r6, #0]
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	0699      	lsls	r1, r3, #26
 800c18e:	bf42      	ittt	mi
 800c190:	6833      	ldrmi	r3, [r6, #0]
 800c192:	3302      	addmi	r3, #2
 800c194:	6033      	strmi	r3, [r6, #0]
 800c196:	6825      	ldr	r5, [r4, #0]
 800c198:	f015 0506 	ands.w	r5, r5, #6
 800c19c:	d106      	bne.n	800c1ac <_printf_common+0x48>
 800c19e:	f104 0a19 	add.w	sl, r4, #25
 800c1a2:	68e3      	ldr	r3, [r4, #12]
 800c1a4:	6832      	ldr	r2, [r6, #0]
 800c1a6:	1a9b      	subs	r3, r3, r2
 800c1a8:	42ab      	cmp	r3, r5
 800c1aa:	dc26      	bgt.n	800c1fa <_printf_common+0x96>
 800c1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1b0:	1e13      	subs	r3, r2, #0
 800c1b2:	6822      	ldr	r2, [r4, #0]
 800c1b4:	bf18      	it	ne
 800c1b6:	2301      	movne	r3, #1
 800c1b8:	0692      	lsls	r2, r2, #26
 800c1ba:	d42b      	bmi.n	800c214 <_printf_common+0xb0>
 800c1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	47c0      	blx	r8
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d01e      	beq.n	800c208 <_printf_common+0xa4>
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	6922      	ldr	r2, [r4, #16]
 800c1ce:	f003 0306 	and.w	r3, r3, #6
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	bf02      	ittt	eq
 800c1d6:	68e5      	ldreq	r5, [r4, #12]
 800c1d8:	6833      	ldreq	r3, [r6, #0]
 800c1da:	1aed      	subeq	r5, r5, r3
 800c1dc:	68a3      	ldr	r3, [r4, #8]
 800c1de:	bf0c      	ite	eq
 800c1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1e4:	2500      	movne	r5, #0
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	bfc4      	itt	gt
 800c1ea:	1a9b      	subgt	r3, r3, r2
 800c1ec:	18ed      	addgt	r5, r5, r3
 800c1ee:	2600      	movs	r6, #0
 800c1f0:	341a      	adds	r4, #26
 800c1f2:	42b5      	cmp	r5, r6
 800c1f4:	d11a      	bne.n	800c22c <_printf_common+0xc8>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e008      	b.n	800c20c <_printf_common+0xa8>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	4652      	mov	r2, sl
 800c1fe:	4649      	mov	r1, r9
 800c200:	4638      	mov	r0, r7
 800c202:	47c0      	blx	r8
 800c204:	3001      	adds	r0, #1
 800c206:	d103      	bne.n	800c210 <_printf_common+0xac>
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c210:	3501      	adds	r5, #1
 800c212:	e7c6      	b.n	800c1a2 <_printf_common+0x3e>
 800c214:	18e1      	adds	r1, r4, r3
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	2030      	movs	r0, #48	; 0x30
 800c21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c21e:	4422      	add	r2, r4
 800c220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c228:	3302      	adds	r3, #2
 800c22a:	e7c7      	b.n	800c1bc <_printf_common+0x58>
 800c22c:	2301      	movs	r3, #1
 800c22e:	4622      	mov	r2, r4
 800c230:	4649      	mov	r1, r9
 800c232:	4638      	mov	r0, r7
 800c234:	47c0      	blx	r8
 800c236:	3001      	adds	r0, #1
 800c238:	d0e6      	beq.n	800c208 <_printf_common+0xa4>
 800c23a:	3601      	adds	r6, #1
 800c23c:	e7d9      	b.n	800c1f2 <_printf_common+0x8e>
	...

0800c240 <_printf_i>:
 800c240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c244:	7e0f      	ldrb	r7, [r1, #24]
 800c246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c248:	2f78      	cmp	r7, #120	; 0x78
 800c24a:	4691      	mov	r9, r2
 800c24c:	4680      	mov	r8, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	469a      	mov	sl, r3
 800c252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c256:	d807      	bhi.n	800c268 <_printf_i+0x28>
 800c258:	2f62      	cmp	r7, #98	; 0x62
 800c25a:	d80a      	bhi.n	800c272 <_printf_i+0x32>
 800c25c:	2f00      	cmp	r7, #0
 800c25e:	f000 80d4 	beq.w	800c40a <_printf_i+0x1ca>
 800c262:	2f58      	cmp	r7, #88	; 0x58
 800c264:	f000 80c0 	beq.w	800c3e8 <_printf_i+0x1a8>
 800c268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c270:	e03a      	b.n	800c2e8 <_printf_i+0xa8>
 800c272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c276:	2b15      	cmp	r3, #21
 800c278:	d8f6      	bhi.n	800c268 <_printf_i+0x28>
 800c27a:	a101      	add	r1, pc, #4	; (adr r1, 800c280 <_printf_i+0x40>)
 800c27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c280:	0800c2d9 	.word	0x0800c2d9
 800c284:	0800c2ed 	.word	0x0800c2ed
 800c288:	0800c269 	.word	0x0800c269
 800c28c:	0800c269 	.word	0x0800c269
 800c290:	0800c269 	.word	0x0800c269
 800c294:	0800c269 	.word	0x0800c269
 800c298:	0800c2ed 	.word	0x0800c2ed
 800c29c:	0800c269 	.word	0x0800c269
 800c2a0:	0800c269 	.word	0x0800c269
 800c2a4:	0800c269 	.word	0x0800c269
 800c2a8:	0800c269 	.word	0x0800c269
 800c2ac:	0800c3f1 	.word	0x0800c3f1
 800c2b0:	0800c319 	.word	0x0800c319
 800c2b4:	0800c3ab 	.word	0x0800c3ab
 800c2b8:	0800c269 	.word	0x0800c269
 800c2bc:	0800c269 	.word	0x0800c269
 800c2c0:	0800c413 	.word	0x0800c413
 800c2c4:	0800c269 	.word	0x0800c269
 800c2c8:	0800c319 	.word	0x0800c319
 800c2cc:	0800c269 	.word	0x0800c269
 800c2d0:	0800c269 	.word	0x0800c269
 800c2d4:	0800c3b3 	.word	0x0800c3b3
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	1d1a      	adds	r2, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	602a      	str	r2, [r5, #0]
 800c2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e09f      	b.n	800c42c <_printf_i+0x1ec>
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	0607      	lsls	r7, r0, #24
 800c2f2:	f103 0104 	add.w	r1, r3, #4
 800c2f6:	6029      	str	r1, [r5, #0]
 800c2f8:	d501      	bpl.n	800c2fe <_printf_i+0xbe>
 800c2fa:	681e      	ldr	r6, [r3, #0]
 800c2fc:	e003      	b.n	800c306 <_printf_i+0xc6>
 800c2fe:	0646      	lsls	r6, r0, #25
 800c300:	d5fb      	bpl.n	800c2fa <_printf_i+0xba>
 800c302:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c306:	2e00      	cmp	r6, #0
 800c308:	da03      	bge.n	800c312 <_printf_i+0xd2>
 800c30a:	232d      	movs	r3, #45	; 0x2d
 800c30c:	4276      	negs	r6, r6
 800c30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c312:	485a      	ldr	r0, [pc, #360]	; (800c47c <_printf_i+0x23c>)
 800c314:	230a      	movs	r3, #10
 800c316:	e012      	b.n	800c33e <_printf_i+0xfe>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	6820      	ldr	r0, [r4, #0]
 800c31c:	1d19      	adds	r1, r3, #4
 800c31e:	6029      	str	r1, [r5, #0]
 800c320:	0605      	lsls	r5, r0, #24
 800c322:	d501      	bpl.n	800c328 <_printf_i+0xe8>
 800c324:	681e      	ldr	r6, [r3, #0]
 800c326:	e002      	b.n	800c32e <_printf_i+0xee>
 800c328:	0641      	lsls	r1, r0, #25
 800c32a:	d5fb      	bpl.n	800c324 <_printf_i+0xe4>
 800c32c:	881e      	ldrh	r6, [r3, #0]
 800c32e:	4853      	ldr	r0, [pc, #332]	; (800c47c <_printf_i+0x23c>)
 800c330:	2f6f      	cmp	r7, #111	; 0x6f
 800c332:	bf0c      	ite	eq
 800c334:	2308      	moveq	r3, #8
 800c336:	230a      	movne	r3, #10
 800c338:	2100      	movs	r1, #0
 800c33a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c33e:	6865      	ldr	r5, [r4, #4]
 800c340:	60a5      	str	r5, [r4, #8]
 800c342:	2d00      	cmp	r5, #0
 800c344:	bfa2      	ittt	ge
 800c346:	6821      	ldrge	r1, [r4, #0]
 800c348:	f021 0104 	bicge.w	r1, r1, #4
 800c34c:	6021      	strge	r1, [r4, #0]
 800c34e:	b90e      	cbnz	r6, 800c354 <_printf_i+0x114>
 800c350:	2d00      	cmp	r5, #0
 800c352:	d04b      	beq.n	800c3ec <_printf_i+0x1ac>
 800c354:	4615      	mov	r5, r2
 800c356:	fbb6 f1f3 	udiv	r1, r6, r3
 800c35a:	fb03 6711 	mls	r7, r3, r1, r6
 800c35e:	5dc7      	ldrb	r7, [r0, r7]
 800c360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c364:	4637      	mov	r7, r6
 800c366:	42bb      	cmp	r3, r7
 800c368:	460e      	mov	r6, r1
 800c36a:	d9f4      	bls.n	800c356 <_printf_i+0x116>
 800c36c:	2b08      	cmp	r3, #8
 800c36e:	d10b      	bne.n	800c388 <_printf_i+0x148>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	07de      	lsls	r6, r3, #31
 800c374:	d508      	bpl.n	800c388 <_printf_i+0x148>
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	6861      	ldr	r1, [r4, #4]
 800c37a:	4299      	cmp	r1, r3
 800c37c:	bfde      	ittt	le
 800c37e:	2330      	movle	r3, #48	; 0x30
 800c380:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c384:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c388:	1b52      	subs	r2, r2, r5
 800c38a:	6122      	str	r2, [r4, #16]
 800c38c:	f8cd a000 	str.w	sl, [sp]
 800c390:	464b      	mov	r3, r9
 800c392:	aa03      	add	r2, sp, #12
 800c394:	4621      	mov	r1, r4
 800c396:	4640      	mov	r0, r8
 800c398:	f7ff fee4 	bl	800c164 <_printf_common>
 800c39c:	3001      	adds	r0, #1
 800c39e:	d14a      	bne.n	800c436 <_printf_i+0x1f6>
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	b004      	add	sp, #16
 800c3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f043 0320 	orr.w	r3, r3, #32
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	4833      	ldr	r0, [pc, #204]	; (800c480 <_printf_i+0x240>)
 800c3b4:	2778      	movs	r7, #120	; 0x78
 800c3b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	6829      	ldr	r1, [r5, #0]
 800c3be:	061f      	lsls	r7, r3, #24
 800c3c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3c4:	d402      	bmi.n	800c3cc <_printf_i+0x18c>
 800c3c6:	065f      	lsls	r7, r3, #25
 800c3c8:	bf48      	it	mi
 800c3ca:	b2b6      	uxthmi	r6, r6
 800c3cc:	07df      	lsls	r7, r3, #31
 800c3ce:	bf48      	it	mi
 800c3d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c3d4:	6029      	str	r1, [r5, #0]
 800c3d6:	bf48      	it	mi
 800c3d8:	6023      	strmi	r3, [r4, #0]
 800c3da:	b91e      	cbnz	r6, 800c3e4 <_printf_i+0x1a4>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	f023 0320 	bic.w	r3, r3, #32
 800c3e2:	6023      	str	r3, [r4, #0]
 800c3e4:	2310      	movs	r3, #16
 800c3e6:	e7a7      	b.n	800c338 <_printf_i+0xf8>
 800c3e8:	4824      	ldr	r0, [pc, #144]	; (800c47c <_printf_i+0x23c>)
 800c3ea:	e7e4      	b.n	800c3b6 <_printf_i+0x176>
 800c3ec:	4615      	mov	r5, r2
 800c3ee:	e7bd      	b.n	800c36c <_printf_i+0x12c>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	6826      	ldr	r6, [r4, #0]
 800c3f4:	6961      	ldr	r1, [r4, #20]
 800c3f6:	1d18      	adds	r0, r3, #4
 800c3f8:	6028      	str	r0, [r5, #0]
 800c3fa:	0635      	lsls	r5, r6, #24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	d501      	bpl.n	800c404 <_printf_i+0x1c4>
 800c400:	6019      	str	r1, [r3, #0]
 800c402:	e002      	b.n	800c40a <_printf_i+0x1ca>
 800c404:	0670      	lsls	r0, r6, #25
 800c406:	d5fb      	bpl.n	800c400 <_printf_i+0x1c0>
 800c408:	8019      	strh	r1, [r3, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	4615      	mov	r5, r2
 800c410:	e7bc      	b.n	800c38c <_printf_i+0x14c>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	1d1a      	adds	r2, r3, #4
 800c416:	602a      	str	r2, [r5, #0]
 800c418:	681d      	ldr	r5, [r3, #0]
 800c41a:	6862      	ldr	r2, [r4, #4]
 800c41c:	2100      	movs	r1, #0
 800c41e:	4628      	mov	r0, r5
 800c420:	f7f3 fede 	bl	80001e0 <memchr>
 800c424:	b108      	cbz	r0, 800c42a <_printf_i+0x1ea>
 800c426:	1b40      	subs	r0, r0, r5
 800c428:	6060      	str	r0, [r4, #4]
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	2300      	movs	r3, #0
 800c430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c434:	e7aa      	b.n	800c38c <_printf_i+0x14c>
 800c436:	6923      	ldr	r3, [r4, #16]
 800c438:	462a      	mov	r2, r5
 800c43a:	4649      	mov	r1, r9
 800c43c:	4640      	mov	r0, r8
 800c43e:	47d0      	blx	sl
 800c440:	3001      	adds	r0, #1
 800c442:	d0ad      	beq.n	800c3a0 <_printf_i+0x160>
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	079b      	lsls	r3, r3, #30
 800c448:	d413      	bmi.n	800c472 <_printf_i+0x232>
 800c44a:	68e0      	ldr	r0, [r4, #12]
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	4298      	cmp	r0, r3
 800c450:	bfb8      	it	lt
 800c452:	4618      	movlt	r0, r3
 800c454:	e7a6      	b.n	800c3a4 <_printf_i+0x164>
 800c456:	2301      	movs	r3, #1
 800c458:	4632      	mov	r2, r6
 800c45a:	4649      	mov	r1, r9
 800c45c:	4640      	mov	r0, r8
 800c45e:	47d0      	blx	sl
 800c460:	3001      	adds	r0, #1
 800c462:	d09d      	beq.n	800c3a0 <_printf_i+0x160>
 800c464:	3501      	adds	r5, #1
 800c466:	68e3      	ldr	r3, [r4, #12]
 800c468:	9903      	ldr	r1, [sp, #12]
 800c46a:	1a5b      	subs	r3, r3, r1
 800c46c:	42ab      	cmp	r3, r5
 800c46e:	dcf2      	bgt.n	800c456 <_printf_i+0x216>
 800c470:	e7eb      	b.n	800c44a <_printf_i+0x20a>
 800c472:	2500      	movs	r5, #0
 800c474:	f104 0619 	add.w	r6, r4, #25
 800c478:	e7f5      	b.n	800c466 <_printf_i+0x226>
 800c47a:	bf00      	nop
 800c47c:	0800cbd5 	.word	0x0800cbd5
 800c480:	0800cbe6 	.word	0x0800cbe6

0800c484 <__sflush_r>:
 800c484:	898a      	ldrh	r2, [r1, #12]
 800c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48a:	4605      	mov	r5, r0
 800c48c:	0710      	lsls	r0, r2, #28
 800c48e:	460c      	mov	r4, r1
 800c490:	d458      	bmi.n	800c544 <__sflush_r+0xc0>
 800c492:	684b      	ldr	r3, [r1, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc05      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dc02      	bgt.n	800c4a4 <__sflush_r+0x20>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d0f9      	beq.n	800c49e <__sflush_r+0x1a>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4b0:	682f      	ldr	r7, [r5, #0]
 800c4b2:	6a21      	ldr	r1, [r4, #32]
 800c4b4:	602b      	str	r3, [r5, #0]
 800c4b6:	d032      	beq.n	800c51e <__sflush_r+0x9a>
 800c4b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	075a      	lsls	r2, r3, #29
 800c4be:	d505      	bpl.n	800c4cc <__sflush_r+0x48>
 800c4c0:	6863      	ldr	r3, [r4, #4]
 800c4c2:	1ac0      	subs	r0, r0, r3
 800c4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c6:	b10b      	cbz	r3, 800c4cc <__sflush_r+0x48>
 800c4c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4ca:	1ac0      	subs	r0, r0, r3
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4d2:	6a21      	ldr	r1, [r4, #32]
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	47b0      	blx	r6
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	d106      	bne.n	800c4ec <__sflush_r+0x68>
 800c4de:	6829      	ldr	r1, [r5, #0]
 800c4e0:	291d      	cmp	r1, #29
 800c4e2:	d82b      	bhi.n	800c53c <__sflush_r+0xb8>
 800c4e4:	4a29      	ldr	r2, [pc, #164]	; (800c58c <__sflush_r+0x108>)
 800c4e6:	410a      	asrs	r2, r1
 800c4e8:	07d6      	lsls	r6, r2, #31
 800c4ea:	d427      	bmi.n	800c53c <__sflush_r+0xb8>
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	6062      	str	r2, [r4, #4]
 800c4f0:	04d9      	lsls	r1, r3, #19
 800c4f2:	6922      	ldr	r2, [r4, #16]
 800c4f4:	6022      	str	r2, [r4, #0]
 800c4f6:	d504      	bpl.n	800c502 <__sflush_r+0x7e>
 800c4f8:	1c42      	adds	r2, r0, #1
 800c4fa:	d101      	bne.n	800c500 <__sflush_r+0x7c>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	b903      	cbnz	r3, 800c502 <__sflush_r+0x7e>
 800c500:	6560      	str	r0, [r4, #84]	; 0x54
 800c502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c504:	602f      	str	r7, [r5, #0]
 800c506:	2900      	cmp	r1, #0
 800c508:	d0c9      	beq.n	800c49e <__sflush_r+0x1a>
 800c50a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50e:	4299      	cmp	r1, r3
 800c510:	d002      	beq.n	800c518 <__sflush_r+0x94>
 800c512:	4628      	mov	r0, r5
 800c514:	f7ff fbea 	bl	800bcec <_free_r>
 800c518:	2000      	movs	r0, #0
 800c51a:	6360      	str	r0, [r4, #52]	; 0x34
 800c51c:	e7c0      	b.n	800c4a0 <__sflush_r+0x1c>
 800c51e:	2301      	movs	r3, #1
 800c520:	4628      	mov	r0, r5
 800c522:	47b0      	blx	r6
 800c524:	1c41      	adds	r1, r0, #1
 800c526:	d1c8      	bne.n	800c4ba <__sflush_r+0x36>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0c5      	beq.n	800c4ba <__sflush_r+0x36>
 800c52e:	2b1d      	cmp	r3, #29
 800c530:	d001      	beq.n	800c536 <__sflush_r+0xb2>
 800c532:	2b16      	cmp	r3, #22
 800c534:	d101      	bne.n	800c53a <__sflush_r+0xb6>
 800c536:	602f      	str	r7, [r5, #0]
 800c538:	e7b1      	b.n	800c49e <__sflush_r+0x1a>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c540:	81a3      	strh	r3, [r4, #12]
 800c542:	e7ad      	b.n	800c4a0 <__sflush_r+0x1c>
 800c544:	690f      	ldr	r7, [r1, #16]
 800c546:	2f00      	cmp	r7, #0
 800c548:	d0a9      	beq.n	800c49e <__sflush_r+0x1a>
 800c54a:	0793      	lsls	r3, r2, #30
 800c54c:	680e      	ldr	r6, [r1, #0]
 800c54e:	bf08      	it	eq
 800c550:	694b      	ldreq	r3, [r1, #20]
 800c552:	600f      	str	r7, [r1, #0]
 800c554:	bf18      	it	ne
 800c556:	2300      	movne	r3, #0
 800c558:	eba6 0807 	sub.w	r8, r6, r7
 800c55c:	608b      	str	r3, [r1, #8]
 800c55e:	f1b8 0f00 	cmp.w	r8, #0
 800c562:	dd9c      	ble.n	800c49e <__sflush_r+0x1a>
 800c564:	6a21      	ldr	r1, [r4, #32]
 800c566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c568:	4643      	mov	r3, r8
 800c56a:	463a      	mov	r2, r7
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b0      	blx	r6
 800c570:	2800      	cmp	r0, #0
 800c572:	dc06      	bgt.n	800c582 <__sflush_r+0xfe>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	e78e      	b.n	800c4a0 <__sflush_r+0x1c>
 800c582:	4407      	add	r7, r0
 800c584:	eba8 0800 	sub.w	r8, r8, r0
 800c588:	e7e9      	b.n	800c55e <__sflush_r+0xda>
 800c58a:	bf00      	nop
 800c58c:	dfbffffe 	.word	0xdfbffffe

0800c590 <_fflush_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	4605      	mov	r5, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b913      	cbnz	r3, 800c5a0 <_fflush_r+0x10>
 800c59a:	2500      	movs	r5, #0
 800c59c:	4628      	mov	r0, r5
 800c59e:	bd38      	pop	{r3, r4, r5, pc}
 800c5a0:	b118      	cbz	r0, 800c5aa <_fflush_r+0x1a>
 800c5a2:	6a03      	ldr	r3, [r0, #32]
 800c5a4:	b90b      	cbnz	r3, 800c5aa <_fflush_r+0x1a>
 800c5a6:	f7ff f945 	bl	800b834 <__sinit>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0f3      	beq.n	800c59a <_fflush_r+0xa>
 800c5b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5b4:	07d0      	lsls	r0, r2, #31
 800c5b6:	d404      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5b8:	0599      	lsls	r1, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_fflush_r+0x32>
 800c5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5be:	f7ff fb84 	bl	800bcca <__retarget_lock_acquire_recursive>
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f7ff ff5d 	bl	800c484 <__sflush_r>
 800c5ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5cc:	07da      	lsls	r2, r3, #31
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	d4e4      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	d4e1      	bmi.n	800c59c <_fflush_r+0xc>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5da:	f7ff fb77 	bl	800bccc <__retarget_lock_release_recursive>
 800c5de:	e7dd      	b.n	800c59c <_fflush_r+0xc>

0800c5e0 <__swhatbuf_r>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e8:	2900      	cmp	r1, #0
 800c5ea:	b096      	sub	sp, #88	; 0x58
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	461e      	mov	r6, r3
 800c5f0:	da0d      	bge.n	800c60e <__swhatbuf_r+0x2e>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5f8:	f04f 0100 	mov.w	r1, #0
 800c5fc:	bf0c      	ite	eq
 800c5fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c602:	2340      	movne	r3, #64	; 0x40
 800c604:	2000      	movs	r0, #0
 800c606:	6031      	str	r1, [r6, #0]
 800c608:	602b      	str	r3, [r5, #0]
 800c60a:	b016      	add	sp, #88	; 0x58
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	466a      	mov	r2, sp
 800c610:	f000 f848 	bl	800c6a4 <_fstat_r>
 800c614:	2800      	cmp	r0, #0
 800c616:	dbec      	blt.n	800c5f2 <__swhatbuf_r+0x12>
 800c618:	9901      	ldr	r1, [sp, #4]
 800c61a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c61e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c622:	4259      	negs	r1, r3
 800c624:	4159      	adcs	r1, r3
 800c626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c62a:	e7eb      	b.n	800c604 <__swhatbuf_r+0x24>

0800c62c <__smakebuf_r>:
 800c62c:	898b      	ldrh	r3, [r1, #12]
 800c62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c630:	079d      	lsls	r5, r3, #30
 800c632:	4606      	mov	r6, r0
 800c634:	460c      	mov	r4, r1
 800c636:	d507      	bpl.n	800c648 <__smakebuf_r+0x1c>
 800c638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	2301      	movs	r3, #1
 800c642:	6163      	str	r3, [r4, #20]
 800c644:	b002      	add	sp, #8
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	ab01      	add	r3, sp, #4
 800c64a:	466a      	mov	r2, sp
 800c64c:	f7ff ffc8 	bl	800c5e0 <__swhatbuf_r>
 800c650:	9900      	ldr	r1, [sp, #0]
 800c652:	4605      	mov	r5, r0
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fbb5 	bl	800bdc4 <_malloc_r>
 800c65a:	b948      	cbnz	r0, 800c670 <__smakebuf_r+0x44>
 800c65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c660:	059a      	lsls	r2, r3, #22
 800c662:	d4ef      	bmi.n	800c644 <__smakebuf_r+0x18>
 800c664:	f023 0303 	bic.w	r3, r3, #3
 800c668:	f043 0302 	orr.w	r3, r3, #2
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	e7e3      	b.n	800c638 <__smakebuf_r+0xc>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	6020      	str	r0, [r4, #0]
 800c674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	6163      	str	r3, [r4, #20]
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	6120      	str	r0, [r4, #16]
 800c682:	b15b      	cbz	r3, 800c69c <__smakebuf_r+0x70>
 800c684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c688:	4630      	mov	r0, r6
 800c68a:	f000 f81d 	bl	800c6c8 <_isatty_r>
 800c68e:	b128      	cbz	r0, 800c69c <__smakebuf_r+0x70>
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	431d      	orrs	r5, r3
 800c6a0:	81a5      	strh	r5, [r4, #12]
 800c6a2:	e7cf      	b.n	800c644 <__smakebuf_r+0x18>

0800c6a4 <_fstat_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4d07      	ldr	r5, [pc, #28]	; (800c6c4 <_fstat_r+0x20>)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	602b      	str	r3, [r5, #0]
 800c6b2:	f7f4 fc14 	bl	8000ede <_fstat>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	d102      	bne.n	800c6c0 <_fstat_r+0x1c>
 800c6ba:	682b      	ldr	r3, [r5, #0]
 800c6bc:	b103      	cbz	r3, 800c6c0 <_fstat_r+0x1c>
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	bd38      	pop	{r3, r4, r5, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20002888 	.word	0x20002888

0800c6c8 <_isatty_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4d06      	ldr	r5, [pc, #24]	; (800c6e4 <_isatty_r+0x1c>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	f7f4 fc13 	bl	8000efe <_isatty>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_isatty_r+0x1a>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_isatty_r+0x1a>
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	20002888 	.word	0x20002888

0800c6e8 <_sbrk_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4d06      	ldr	r5, [pc, #24]	; (800c704 <_sbrk_r+0x1c>)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	f7f4 fc1c 	bl	8000f30 <_sbrk>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_sbrk_r+0x1a>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_sbrk_r+0x1a>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	20002888 	.word	0x20002888

0800c708 <_init>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	bf00      	nop
 800c70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70e:	bc08      	pop	{r3}
 800c710:	469e      	mov	lr, r3
 800c712:	4770      	bx	lr

0800c714 <_fini>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	bf00      	nop
 800c718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71a:	bc08      	pop	{r3}
 800c71c:	469e      	mov	lr, r3
 800c71e:	4770      	bx	lr
