
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c834  0800c834  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c834  0800c834  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c834  0800c834  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800c83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          00002754  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000283c  2000283c  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fb5b  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000491e  00000000  00000000  0003fcf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001798  00000000  00000000  00044618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001238  00000000  00000000  00045db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ae  00000000  00000000  00046fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000201a6  00000000  00000000  0006c496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7790  00000000  00000000  0008c63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006820  00000000  00000000  00163dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c328 	.word	0x0800c328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	0800c328 	.word	0x0800c328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <MX_FREERTOS_Init+0x6c>)
 8000286:	f008 f87b 	bl	8008380 <osMutexNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <MX_FREERTOS_Init+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <MX_FREERTOS_Init+0x74>)
 8000292:	2100      	movs	r1, #0
 8000294:	4818      	ldr	r0, [pc, #96]	; (80002f8 <MX_FREERTOS_Init+0x78>)
 8000296:	f007 fe1f 	bl	8007ed8 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_FREERTOS_Init+0x7c>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <MX_FREERTOS_Init+0x80>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_FREERTOS_Init+0x84>)
 80002a6:	f007 fe17 	bl	8007ed8 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MX_FREERTOS_Init+0x88>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <MX_FREERTOS_Init+0x8c>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4816      	ldr	r0, [pc, #88]	; (8000310 <MX_FREERTOS_Init+0x90>)
 80002b6:	f007 fe0f 	bl	8007ed8 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <MX_FREERTOS_Init+0x94>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_FREERTOS_Init+0x98>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_FREERTOS_Init+0x9c>)
 80002c6:	f007 fe07 	bl	8007ed8 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <MX_FREERTOS_Init+0xa0>)
 80002ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <MX_FREERTOS_Init+0xa4>)
 80002d2:	f007 ff33 	bl	800813c <osEventFlagsNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_FREERTOS_Init+0xa8>)
 80002da:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_FREERTOS_Init+0xac>)
 80002de:	f007 ff2d 	bl	800813c <osEventFlagsNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_FREERTOS_Init+0xb0>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	0800c798 	.word	0x0800c798
 80002f0:	20000114 	.word	0x20000114
 80002f4:	0800c708 	.word	0x0800c708
 80002f8:	08000335 	.word	0x08000335
 80002fc:	20000104 	.word	0x20000104
 8000300:	0800c72c 	.word	0x0800c72c
 8000304:	08000371 	.word	0x08000371
 8000308:	20000108 	.word	0x20000108
 800030c:	0800c750 	.word	0x0800c750
 8000310:	08000401 	.word	0x08000401
 8000314:	2000010c 	.word	0x2000010c
 8000318:	0800c774 	.word	0x0800c774
 800031c:	08000485 	.word	0x08000485
 8000320:	20000110 	.word	0x20000110
 8000324:	0800c7a8 	.word	0x0800c7a8
 8000328:	20000118 	.word	0x20000118
 800032c:	0800c7b8 	.word	0x0800c7b8
 8000330:	2000011c 	.word	0x2000011c

08000334 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <DefaultTask+0x30>)
 800033e:	f001 fe21 	bl	8001f84 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <DefaultTask+0x34>)
 8000344:	f001 fe38 	bl	8001fb8 <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask is Running\n");
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <DefaultTask+0x38>)
 800034a:	f00b f91f 	bl	800b58c <puts>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 800034e:	f007 fe6d 	bl	800802c <osThreadGetId>
 8000352:	4603      	mov	r3, r0
 8000354:	4618      	mov	r0, r3
 8000356:	f007 fe8f 	bl	8008078 <osThreadSuspend>
    osDelay(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f007 febf 	bl	80080e0 <osDelay>
	  printf("DefaultTask is Running\n");
 8000362:	e7f1      	b.n	8000348 <DefaultTask+0x14>
 8000364:	20000058 	.word	0x20000058
 8000368:	20000048 	.word	0x20000048
 800036c:	0800c3b0 	.word	0x0800c3b0

08000370 <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Ultrasonics_Read */

  /* Infinite loop */
  for(;;)
  {
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <RTOS_Ultrasonics_Read+0x64>)
 800037a:	f002 f9b5 	bl	80026e8 <ECU_Ultrasonic_Read>
	  printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4815      	ldr	r0, [pc, #84]	; (80003dc <RTOS_Ultrasonics_Read+0x6c>)
 8000386:	f00b f89b 	bl	800b4c0 <iprintf>

	  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 800038a:	4815      	ldr	r0, [pc, #84]	; (80003e0 <RTOS_Ultrasonics_Read+0x70>)
 800038c:	f002 f9ac 	bl	80026e8 <ECU_Ultrasonic_Read>
	  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4619      	mov	r1, r3
 8000396:	4813      	ldr	r0, [pc, #76]	; (80003e4 <RTOS_Ultrasonics_Read+0x74>)
 8000398:	f00b f892 	bl	800b4c0 <iprintf>

	  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 800039c:	4812      	ldr	r0, [pc, #72]	; (80003e8 <RTOS_Ultrasonics_Read+0x78>)
 800039e:	f002 f9a3 	bl	80026e8 <ECU_Ultrasonic_Read>
	  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4810      	ldr	r0, [pc, #64]	; (80003ec <RTOS_Ultrasonics_Read+0x7c>)
 80003aa:	f00b f889 	bl	800b4c0 <iprintf>

	  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 80003ae:	4810      	ldr	r0, [pc, #64]	; (80003f0 <RTOS_Ultrasonics_Read+0x80>)
 80003b0:	f002 f99a 	bl	80026e8 <ECU_Ultrasonic_Read>
	  //printf("LeftFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <RTOS_Ultrasonics_Read+0x84>)
 80003b6:	f002 f997 	bl	80026e8 <ECU_Ultrasonic_Read>
	  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <RTOS_Ultrasonics_Read+0x88>)
 80003bc:	f002 f994 	bl	80026e8 <ECU_Ultrasonic_Read>
	  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <RTOS_Ultrasonics_Read+0x8c>)
 80003c8:	f00b f87a 	bl	800b4c0 <iprintf>

    osDelay(50);
 80003cc:	2032      	movs	r0, #50	; 0x32
 80003ce:	f007 fe87 	bl	80080e0 <osDelay>
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003d2:	e7d1      	b.n	8000378 <RTOS_Ultrasonics_Read+0x8>
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000498 	.word	0x20000498
 80003dc:	0800c3c8 	.word	0x0800c3c8
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	0800c3ec 	.word	0x0800c3ec
 80003e8:	20000018 	.word	0x20000018
 80003ec:	0800c414 	.word	0x0800c414
 80003f0:	20000024 	.word	0x20000024
 80003f4:	20000030 	.word	0x20000030
 80003f8:	2000003c 	.word	0x2000003c
 80003fc:	0800c43c 	.word	0x0800c43c

08000400 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b57      	cmp	r3, #87	; 0x57
 800040e:	d10c      	bne.n	800042a <RTOS_Car_Next_Step+0x2a>
		  //osMutexAcquire(Car_Conrol_ModeHandle, 10U);
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f007 fee2 	bl	80081e0 <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f007 ff34 	bl	8008290 <osEventFlagsClear>
 8000428:	e00f      	b.n	800044a <RTOS_Car_Next_Step+0x4a>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b55      	cmp	r3, #85	; 0x55
 8000430:	d10b      	bne.n	800044a <RTOS_Car_Next_Step+0x4a>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2101      	movs	r1, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f007 fed1 	bl	80081e0 <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2102      	movs	r1, #2
 8000444:	4618      	mov	r0, r3
 8000446:	f007 fecb 	bl	80081e0 <osEventFlagsSet>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_IDLE){
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f007 ff62 	bl	8008318 <osEventFlagsGet>
 8000454:	4603      	mov	r3, r0
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	2b00      	cmp	r3, #0
 800045c:	d106      	bne.n	800046c <RTOS_Car_Next_Step+0x6c>
		  printf("Mobile Control Mode\n");
 800045e:	4807      	ldr	r0, [pc, #28]	; (800047c <RTOS_Car_Next_Step+0x7c>)
 8000460:	f00b f894 	bl	800b58c <puts>
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000464:	4903      	ldr	r1, [pc, #12]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <RTOS_Car_Next_Step+0x80>)
 8000468:	f001 fe6c 	bl	8002144 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(250);
 800046c:	20fa      	movs	r0, #250	; 0xfa
 800046e:	f007 fe37 	bl	80080e0 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000472:	e7c9      	b.n	8000408 <RTOS_Car_Next_Step+0x8>
 8000474:	20000064 	.word	0x20000064
 8000478:	20000118 	.word	0x20000118
 800047c:	0800c460 	.word	0x0800c460
 8000480:	20000048 	.word	0x20000048

08000484 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]
	uint8_t rear_ultrasonic = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000494:	4b9a      	ldr	r3, [pc, #616]	; (8000700 <RTOS_Automatic_Parking+0x27c>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b77      	cmp	r3, #119	; 0x77
 800049a:	d105      	bne.n	80004a8 <RTOS_Automatic_Parking+0x24>
		  //osMutexRelease(Car_Conrol_ModeHandle);
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800049c:	4b99      	ldr	r3, [pc, #612]	; (8000704 <RTOS_Automatic_Parking+0x280>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f007 fef4 	bl	8008290 <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_ACTIVE)
 80004a8:	4b96      	ldr	r3, [pc, #600]	; (8000704 <RTOS_Automatic_Parking+0x280>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 ff33 	bl	8008318 <osEventFlagsGet>
 80004b2:	4603      	mov	r3, r0
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	f040 816b 	bne.w	8000794 <RTOS_Automatic_Parking+0x310>
	  {
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 80004be:	4892      	ldr	r0, [pc, #584]	; (8000708 <RTOS_Automatic_Parking+0x284>)
 80004c0:	f00b f864 	bl	800b58c <puts>
		  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 80004c4:	4991      	ldr	r1, [pc, #580]	; (800070c <RTOS_Automatic_Parking+0x288>)
 80004c6:	4892      	ldr	r0, [pc, #584]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80004c8:	f001 fe1c 	bl	8002104 <ECU_Motor_ChangeSpeed>
		  /* Select Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT))
 80004cc:	4b8d      	ldr	r3, [pc, #564]	; (8000704 <RTOS_Automatic_Parking+0x280>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f007 ff21 	bl	8008318 <osEventFlagsGet>
 80004d6:	4603      	mov	r3, r0
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	f040 8095 	bne.w	800060c <RTOS_Automatic_Parking+0x188>
		  {
			  printf("Park Right Side\n");
 80004e2:	488c      	ldr	r0, [pc, #560]	; (8000714 <RTOS_Automatic_Parking+0x290>)
 80004e4:	f00b f852 	bl	800b58c <puts>
			  front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 80004e8:	4b8b      	ldr	r3, [pc, #556]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 80004ee:	4b8a      	ldr	r3, [pc, #552]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	73bb      	strb	r3, [r7, #14]
			  ECU_Motor_MoveForward(&moving_motor);
 80004f4:	4886      	ldr	r0, [pc, #536]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80004f6:	f001 fee1 	bl	80022bc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 80004fa:	e002      	b.n	8000502 <RTOS_Automatic_Parking+0x7e>
			  {
				  printf("Searching for Empty Slot\n");
 80004fc:	4887      	ldr	r0, [pc, #540]	; (800071c <RTOS_Automatic_Parking+0x298>)
 80004fe:	f00b f845 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 8000502:	4b85      	ldr	r3, [pc, #532]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	320c      	adds	r2, #12
 800050a:	4293      	cmp	r3, r2
 800050c:	d3f6      	bcc.n	80004fc <RTOS_Automatic_Parking+0x78>
 800050e:	4b82      	ldr	r3, [pc, #520]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	7bba      	ldrb	r2, [r7, #14]
 8000514:	320c      	adds	r2, #12
 8000516:	4293      	cmp	r3, r2
 8000518:	d3f0      	bcc.n	80004fc <RTOS_Automatic_Parking+0x78>
			  }
			  printf("Found the Empty Slot\n");
 800051a:	4881      	ldr	r0, [pc, #516]	; (8000720 <RTOS_Automatic_Parking+0x29c>)
 800051c:	f00b f836 	bl	800b58c <puts>

			  /* Delay to let the car move Forward to half the car length */
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 8000520:	e002      	b.n	8000528 <RTOS_Automatic_Parking+0xa4>
			  {
				  printf("Center the car after Founding the Empty Slot\n");
 8000522:	4880      	ldr	r0, [pc, #512]	; (8000724 <RTOS_Automatic_Parking+0x2a0>)
 8000524:	f00b f832 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 8000528:	4b7b      	ldr	r3, [pc, #492]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	7bfa      	ldrb	r2, [r7, #15]
 800052e:	320c      	adds	r2, #12
 8000530:	4293      	cmp	r3, r2
 8000532:	d8f6      	bhi.n	8000522 <RTOS_Automatic_Parking+0x9e>
 8000534:	4b78      	ldr	r3, [pc, #480]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	7bba      	ldrb	r2, [r7, #14]
 800053a:	320c      	adds	r2, #12
 800053c:	4293      	cmp	r3, r2
 800053e:	d8f0      	bhi.n	8000522 <RTOS_Automatic_Parking+0x9e>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 8000540:	4873      	ldr	r0, [pc, #460]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000542:	f001 feeb 	bl	800231c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000546:	2005      	movs	r0, #5
 8000548:	f002 fa3a 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 800054c:	4870      	ldr	r0, [pc, #448]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 800054e:	f001 ffdd 	bl	800250c <ECU_Motor_Stop>
			  //HAL_Delay(100);
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000552:	4975      	ldr	r1, [pc, #468]	; (8000728 <RTOS_Automatic_Parking+0x2a4>)
 8000554:	486e      	ldr	r0, [pc, #440]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000556:	f001 fdd5 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_MoveReverseRight(&moving_motor);
 800055a:	486d      	ldr	r0, [pc, #436]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 800055c:	f001 ff72 	bl	8002444 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 8000560:	e002      	b.n	8000568 <RTOS_Automatic_Parking+0xe4>
			  {
				  printf("try to Park 1 Reverse Right\n");
 8000562:	4872      	ldr	r0, [pc, #456]	; (800072c <RTOS_Automatic_Parking+0x2a8>)
 8000564:	f00b f812 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 8000568:	4b6b      	ldr	r3, [pc, #428]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d8f8      	bhi.n	8000562 <RTOS_Automatic_Parking+0xde>
			  }

			  ECU_Motor_MoveForward(&moving_motor);
 8000570:	4867      	ldr	r0, [pc, #412]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000572:	f001 fea3 	bl	80022bc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000576:	2005      	movs	r0, #5
 8000578:	f002 fa22 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 800057c:	4864      	ldr	r0, [pc, #400]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 800057e:	f001 ffc5 	bl	800250c <ECU_Motor_Stop>
			  //while(1){};
			  //HAL_Delay(100);
			  ECU_Motor_MoveReverseLeft(&moving_motor);
 8000582:	4863      	ldr	r0, [pc, #396]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000584:	f001 ff90 	bl	80024a8 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8000588:	e002      	b.n	8000590 <RTOS_Automatic_Parking+0x10c>
			  {
				  printf("try to Park 2 Reverse Left\n");
 800058a:	4869      	ldr	r0, [pc, #420]	; (8000730 <RTOS_Automatic_Parking+0x2ac>)
 800058c:	f00a fffe 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8000590:	4b61      	ldr	r3, [pc, #388]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d903      	bls.n	80005a0 <RTOS_Automatic_Parking+0x11c>
 8000598:	4b5f      	ldr	r3, [pc, #380]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	2b04      	cmp	r3, #4
 800059e:	d8f4      	bhi.n	800058a <RTOS_Automatic_Parking+0x106>
			  }
			  ECU_Motor_MoveForward(&moving_motor);
 80005a0:	485b      	ldr	r0, [pc, #364]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005a2:	f001 fe8b 	bl	80022bc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80005a6:	2005      	movs	r0, #5
 80005a8:	f002 fa0a 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 80005ac:	4957      	ldr	r1, [pc, #348]	; (800070c <RTOS_Automatic_Parking+0x288>)
 80005ae:	4858      	ldr	r0, [pc, #352]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005b0:	f001 fda8 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_Stop(&moving_motor);
 80005b4:	4856      	ldr	r0, [pc, #344]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005b6:	f001 ffa9 	bl	800250c <ECU_Motor_Stop>
			  ECU_Motor_MoveForwardRight(&moving_motor);
 80005ba:	4855      	ldr	r0, [pc, #340]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005bc:	f001 fede 	bl	800237c <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4))
 80005c0:	e002      	b.n	80005c8 <RTOS_Automatic_Parking+0x144>
			  {
				  printf("try to Park 3 Forward Right\n");
 80005c2:	485c      	ldr	r0, [pc, #368]	; (8000734 <RTOS_Automatic_Parking+0x2b0>)
 80005c4:	f00a ffe2 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4))
 80005c8:	4b53      	ldr	r3, [pc, #332]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d8f8      	bhi.n	80005c2 <RTOS_Automatic_Parking+0x13e>
 80005d0:	4b51      	ldr	r3, [pc, #324]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d8f4      	bhi.n	80005c2 <RTOS_Automatic_Parking+0x13e>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 80005d8:	484d      	ldr	r0, [pc, #308]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005da:	f001 fe9f 	bl	800231c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80005de:	2005      	movs	r0, #5
 80005e0:	f002 f9ee 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80005e4:	484a      	ldr	r0, [pc, #296]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80005e6:	f001 ff91 	bl	800250c <ECU_Motor_Stop>

			  printf("Finally ... the car should be parked successfully by now\n");
 80005ea:	4853      	ldr	r0, [pc, #332]	; (8000738 <RTOS_Automatic_Parking+0x2b4>)
 80005ec:	f00a ffce 	bl	800b58c <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <RTOS_Automatic_Parking+0x280>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fe4a 	bl	8008290 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 80005fc:	494f      	ldr	r1, [pc, #316]	; (800073c <RTOS_Automatic_Parking+0x2b8>)
 80005fe:	4844      	ldr	r0, [pc, #272]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000600:	f001 fd80 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  Bluetooth_RX_Data = 'S';
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <RTOS_Automatic_Parking+0x27c>)
 8000606:	2253      	movs	r2, #83	; 0x53
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	e0c3      	b.n	8000794 <RTOS_Automatic_Parking+0x310>

		  }
		  /* Select Left Side to Park */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) || (STD_ACTIVE << PARKING_SIDE_BIT)){
 800060c:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <RTOS_Automatic_Parking+0x280>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f007 fe81 	bl	8008318 <osEventFlagsGet>
			  printf("Park Left Side\n");
 8000616:	484a      	ldr	r0, [pc, #296]	; (8000740 <RTOS_Automatic_Parking+0x2bc>)
 8000618:	f00a ffb8 	bl	800b58c <puts>
			  front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 800061c:	4b3e      	ldr	r3, [pc, #248]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	73bb      	strb	r3, [r7, #14]
			  ECU_Motor_MoveForward(&moving_motor);
 8000628:	4839      	ldr	r0, [pc, #228]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 800062a:	f001 fe47 	bl	80022bc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 800062e:	e002      	b.n	8000636 <RTOS_Automatic_Parking+0x1b2>
			  {
				  printf("Searching for Empty Slot\n");
 8000630:	483a      	ldr	r0, [pc, #232]	; (800071c <RTOS_Automatic_Parking+0x298>)
 8000632:	f00a ffab 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	320c      	adds	r2, #12
 800063e:	4293      	cmp	r3, r2
 8000640:	d3f6      	bcc.n	8000630 <RTOS_Automatic_Parking+0x1ac>
 8000642:	4b35      	ldr	r3, [pc, #212]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	7bba      	ldrb	r2, [r7, #14]
 8000648:	320c      	adds	r2, #12
 800064a:	4293      	cmp	r3, r2
 800064c:	d3f0      	bcc.n	8000630 <RTOS_Automatic_Parking+0x1ac>
			  }
			  printf("Found the Empty Slot\n");
 800064e:	4834      	ldr	r0, [pc, #208]	; (8000720 <RTOS_Automatic_Parking+0x29c>)
 8000650:	f00a ff9c 	bl	800b58c <puts>

			  /* Delay to let the car move Forward to half the car length */
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 8000654:	e002      	b.n	800065c <RTOS_Automatic_Parking+0x1d8>
			  {
				  printf("Center the car after Founding the Empty Slot\n");
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <RTOS_Automatic_Parking+0x2a0>)
 8000658:	f00a ff98 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 800065c:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	320c      	adds	r2, #12
 8000664:	4293      	cmp	r3, r2
 8000666:	d8f6      	bhi.n	8000656 <RTOS_Automatic_Parking+0x1d2>
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	7bba      	ldrb	r2, [r7, #14]
 800066e:	320c      	adds	r2, #12
 8000670:	4293      	cmp	r3, r2
 8000672:	d8f0      	bhi.n	8000656 <RTOS_Automatic_Parking+0x1d2>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 8000674:	4826      	ldr	r0, [pc, #152]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000676:	f001 fe51 	bl	800231c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f002 f9a0 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 8000680:	4823      	ldr	r0, [pc, #140]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000682:	f001 ff43 	bl	800250c <ECU_Motor_Stop>
			  //HAL_Delay(100);
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000686:	4928      	ldr	r1, [pc, #160]	; (8000728 <RTOS_Automatic_Parking+0x2a4>)
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 800068a:	f001 fd3b 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_MoveReverseLeft(&moving_motor);
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 8000690:	f001 ff0a 	bl	80024a8 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 8000694:	e002      	b.n	800069c <RTOS_Automatic_Parking+0x218>
			  {
				  printf("try to Park 1 Reverse Left\n");
 8000696:	482b      	ldr	r0, [pc, #172]	; (8000744 <RTOS_Automatic_Parking+0x2c0>)
 8000698:	f00a ff78 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2b0c      	cmp	r3, #12
 80006a2:	d903      	bls.n	80006ac <RTOS_Automatic_Parking+0x228>
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	d8f4      	bhi.n	8000696 <RTOS_Automatic_Parking+0x212>
			  }

			  ECU_Motor_MoveForward(&moving_motor);
 80006ac:	4818      	ldr	r0, [pc, #96]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006ae:	f001 fe05 	bl	80022bc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f002 f984 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80006b8:	4815      	ldr	r0, [pc, #84]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006ba:	f001 ff27 	bl	800250c <ECU_Motor_Stop>
			  //while(1){};
			  //HAL_Delay(100);
			  ECU_Motor_MoveReverseRight(&moving_motor);
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006c0:	f001 fec0 	bl	8002444 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80006c4:	e002      	b.n	80006cc <RTOS_Automatic_Parking+0x248>
			  {
				  printf("try to Park 2 Reverse Right\n");
 80006c6:	4820      	ldr	r0, [pc, #128]	; (8000748 <RTOS_Automatic_Parking+0x2c4>)
 80006c8:	f00a ff60 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d903      	bls.n	80006dc <RTOS_Automatic_Parking+0x258>
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <RTOS_Automatic_Parking+0x294>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d8f4      	bhi.n	80006c6 <RTOS_Automatic_Parking+0x242>
			  }
			  ECU_Motor_MoveForward(&moving_motor);
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006de:	f001 fded 	bl	80022bc <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80006e2:	2005      	movs	r0, #5
 80006e4:	f002 f96c 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 80006e8:	4908      	ldr	r1, [pc, #32]	; (800070c <RTOS_Automatic_Parking+0x288>)
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006ec:	f001 fd0a 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_Stop(&moving_motor);
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006f2:	f001 ff0b 	bl	800250c <ECU_Motor_Stop>
			  ECU_Motor_MoveForwardLeft(&moving_motor);
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <RTOS_Automatic_Parking+0x28c>)
 80006f8:	f001 fe72 	bl	80023e0 <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 80006fc:	e029      	b.n	8000752 <RTOS_Automatic_Parking+0x2ce>
 80006fe:	bf00      	nop
 8000700:	20000064 	.word	0x20000064
 8000704:	20000118 	.word	0x20000118
 8000708:	0800c474 	.word	0x0800c474
 800070c:	20000070 	.word	0x20000070
 8000710:	20000048 	.word	0x20000048
 8000714:	0800c4c0 	.word	0x0800c4c0
 8000718:	20000498 	.word	0x20000498
 800071c:	0800c4d0 	.word	0x0800c4d0
 8000720:	0800c4ec 	.word	0x0800c4ec
 8000724:	0800c504 	.word	0x0800c504
 8000728:	20000078 	.word	0x20000078
 800072c:	0800c534 	.word	0x0800c534
 8000730:	0800c550 	.word	0x0800c550
 8000734:	0800c56c 	.word	0x0800c56c
 8000738:	0800c588 	.word	0x0800c588
 800073c:	20000068 	.word	0x20000068
 8000740:	0800c5c4 	.word	0x0800c5c4
 8000744:	0800c5d4 	.word	0x0800c5d4
 8000748:	0800c5f0 	.word	0x0800c5f0
			  {
				  printf("try to Park 3 Forward Left\n");
 800074c:	4813      	ldr	r0, [pc, #76]	; (800079c <RTOS_Automatic_Parking+0x318>)
 800074e:	f00a ff1d 	bl	800b58c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <RTOS_Automatic_Parking+0x31c>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	2b04      	cmp	r3, #4
 8000758:	d8f8      	bhi.n	800074c <RTOS_Automatic_Parking+0x2c8>
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <RTOS_Automatic_Parking+0x31c>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d8f4      	bhi.n	800074c <RTOS_Automatic_Parking+0x2c8>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <RTOS_Automatic_Parking+0x320>)
 8000764:	f001 fdda 	bl	800231c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000768:	2005      	movs	r0, #5
 800076a:	f002 f929 	bl	80029c0 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <RTOS_Automatic_Parking+0x320>)
 8000770:	f001 fecc 	bl	800250c <ECU_Motor_Stop>

			  printf("Finally ... the car should be parked successfully by now\n");
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <RTOS_Automatic_Parking+0x324>)
 8000776:	f00a ff09 	bl	800b58c <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <RTOS_Automatic_Parking+0x328>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f007 fd85 	bl	8008290 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 8000786:	490a      	ldr	r1, [pc, #40]	; (80007b0 <RTOS_Automatic_Parking+0x32c>)
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <RTOS_Automatic_Parking+0x320>)
 800078a:	f001 fcbb 	bl	8002104 <ECU_Motor_ChangeSpeed>
			  Bluetooth_RX_Data = 'S';
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <RTOS_Automatic_Parking+0x330>)
 8000790:	2253      	movs	r2, #83	; 0x53
 8000792:	701a      	strb	r2, [r3, #0]
		  else{/* DO NOTHING */}


	  }
	  else{/* DO NOTHING */}
    osDelay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f007 fca3 	bl	80080e0 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 800079a:	e67b      	b.n	8000494 <RTOS_Automatic_Parking+0x10>
 800079c:	0800c60c 	.word	0x0800c60c
 80007a0:	20000498 	.word	0x20000498
 80007a4:	20000048 	.word	0x20000048
 80007a8:	0800c588 	.word	0x0800c588
 80007ac:	20000118 	.word	0x20000118
 80007b0:	20000068 	.word	0x20000068
 80007b4:	20000064 	.word	0x20000064

080007b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a40      	ldr	r2, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a3a      	ldr	r2, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x11c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <MX_GPIO_Init+0x11c>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f002 fbca 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 800083c:	2200      	movs	r2, #0
 800083e:	f643 4106 	movw	r1, #15366	; 0x3c06
 8000842:	4825      	ldr	r0, [pc, #148]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000844:	f002 fbc4 	bl	8002fd0 <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800084e:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_GPIO_Init+0x124>)
 8000850:	f002 fbbe 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_GPIO_Init+0x124>)
 800086c:	f002 fa26 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 8000870:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f002 fa16 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000890:	f643 4306 	movw	r3, #15366	; 0x3c06
 8000894:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0x120>)
 80008aa:	f002 fa07 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80008ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_GPIO_Init+0x124>)
 80008c8:	f002 f9f8 	bl	8002cbc <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80008e4:	f002 f836 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f81c 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff ff64 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008f0:	f000 fa96 	bl	8000e20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008f4:	f000 fb64 	bl	8000fc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f8:	f000 fbfc 	bl	80010f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008fc:	f000 fc96 	bl	800122c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000900:	f000 fd30 	bl	8001364 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000904:	f000 fdfe 	bl	8001504 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000908:	f000 fec4 	bl	8001694 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800090c:	f001 fa08 	bl	8001d20 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000910:	f001 f9d6 	bl	8001cc0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000914:	f007 fa78 	bl	8007e08 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000918:	f7ff fcb2 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800091c:	f007 faa8 	bl	8007e70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x40>
	...

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0a6      	sub	sp, #152	; 0x98
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800092e:	2228      	movs	r2, #40	; 0x28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f00a ff0a 	bl	800b74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2258      	movs	r2, #88	; 0x58
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f00a fefc 	bl	800b74c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fb47 	bl	8003000 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000978:	f000 f848 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000990:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fb86 	bl	80040a8 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009a2:	f000 f833 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <SystemClock_Config+0xc0>)
 80009a8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80009be:	2300      	movs	r3, #0
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fdd3 	bl	8004578 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009d8:	f000 f818 	bl	8000a0c <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3798      	adds	r7, #152	; 0x98
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	00f0300a 	.word	0x00f0300a

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f001 ffc1 	bl	8002980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	f06f 0001 	mvn.w	r0, #1
 8000a56:	f002 f88f 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_InitTick+0xe0>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <HAL_InitTick+0xe0>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	61d3      	str	r3, [r2, #28]
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_InitTick+0xe0>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a90:	f107 0210 	add.w	r2, r7, #16
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fd3a 	bl	8004514 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aaa:	f003 fcef 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8000aae:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab0:	e004      	b.n	8000abc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab2:	f003 fceb 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <HAL_InitTick+0xe4>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_InitTick+0xe8>)
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <HAL_InitTick+0xec>)
 8000ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xe8>)
 8000ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_InitTick+0xe8>)
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_InitTick+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_InitTick+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <HAL_InitTick+0xe8>)
 8000af2:	f003 ff5f 	bl	80049b4 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11b      	bne.n	8000b3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <HAL_InitTick+0xe8>)
 8000b06:	f003 ffad 	bl	8004a64 <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b18:	2036      	movs	r0, #54	; 0x36
 8000b1a:	f002 f849 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d808      	bhi.n	8000b36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2036      	movs	r0, #54	; 0x36
 8000b2a:	f002 f825 	bl	8002b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0xf0>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	20000120 	.word	0x20000120
 8000b54:	40001000 	.word	0x40001000
 8000b58:	20000080 	.word	0x20000080

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8000b8e:	2205      	movs	r2, #5
 8000b90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8000b94:	f004 fc4a 	bl	800542c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000b9a:	f004 fc47 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200004b0 	.word	0x200004b0
 8000ba8:	20000170 	.word	0x20000170
 8000bac:	200002ec 	.word	0x200002ec

08000bb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <TIM1_CC_IRQHandler+0x14>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <TIM1_CC_IRQHandler+0x18>)
 8000bbc:	f004 fc36 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200004b0 	.word	0x200004b0
 8000bc8:	20000170 	.word	0x20000170

08000bcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <TIM2_IRQHandler+0x14>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <TIM2_IRQHandler+0x18>)
 8000bd8:	f004 fc28 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200004b0 	.word	0x200004b0
 8000be4:	200001bc 	.word	0x200001bc

08000be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <TIM3_IRQHandler+0x14>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <TIM3_IRQHandler+0x18>)
 8000bf4:	f004 fc1a 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200004b0 	.word	0x200004b0
 8000c00:	20000208 	.word	0x20000208

08000c04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <TIM4_IRQHandler+0x14>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <TIM4_IRQHandler+0x18>)
 8000c10:	f004 fc0c 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200004b0 	.word	0x200004b0
 8000c1c:	20000254 	.word	0x20000254

08000c20 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <TIM8_CC_IRQHandler+0x14>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <TIM8_CC_IRQHandler+0x18>)
 8000c2c:	f004 fbfe 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200004b0 	.word	0x200004b0
 8000c38:	200002a0 	.word	0x200002a0

08000c3c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <UART4_IRQHandler+0x10>)
 8000c42:	f005 ff39 	bl	8006ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000384 	.word	0x20000384

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f004 fbe9 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000120 	.word	0x20000120

08000c64 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <Custom_ITM_sendChar_Ch0+0x48>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <Custom_ITM_sendChar_Ch0+0x48>)
 8000c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c78:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c86:	bf00      	nop
 8000c88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f8      	beq.n	8000c88 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000c96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000edfc 	.word	0xe000edfc
 8000cb0:	e0000e00 	.word	0xe0000e00

08000cb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
  }

  return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffab 	bl	8000c64 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf1      	blt.n	8000d00 <_write+0x12>
  }
  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_close>:

int _close(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f00a fd68 	bl	800b894 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20010000 	.word	0x20010000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	2000016c 	.word	0x2000016c
 8000df8:	20002840 	.word	0x20002840

08000dfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b09e      	sub	sp, #120	; 0x78
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	222c      	movs	r2, #44	; 0x2c
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00a fc6f 	bl	800b74c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6e:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e70:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <MX_TIM1_Init+0x19c>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000e74:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e76:	2207      	movs	r2, #7
 8000e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e80:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e9a:	4847      	ldr	r0, [pc, #284]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000e9c:	f003 fd8a 	bl	80049b4 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000ea6:	f7ff fdb1 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4840      	ldr	r0, [pc, #256]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000eb8:	f004 fd88 	bl	80059cc <HAL_TIM_ConfigClockSource>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ec2:	f7ff fda3 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ec6:	483c      	ldr	r0, [pc, #240]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000ec8:	f003 fe3c 	bl	8004b44 <HAL_TIM_PWM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ed2:	f7ff fd9b 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ed6:	4838      	ldr	r0, [pc, #224]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000ed8:	f004 f83e 	bl	8004f58 <HAL_TIM_IC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ee2:	f7ff fd93 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482f      	ldr	r0, [pc, #188]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000efa:	f005 fc1b 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000f04:	f7ff fd82 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000f0c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000f30:	f004 fc38 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000f3a:	f7ff fd67 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f42:	2301      	movs	r3, #1
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f52:	2204      	movs	r2, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000f58:	f004 fb87 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f62:	f7ff fd53 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000f9c:	f005 fc56 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000fa6:	f7ff fd31 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM1_Init+0x198>)
 8000fac:	f000 fd74 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 8000fb0:	bf00      	nop
 8000fb2:	3778      	adds	r7, #120	; 0x78
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	; 0x48
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <MX_TIM2_Init+0x130>)
 800100a:	2207      	movs	r2, #7
 800100c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <MX_TIM2_Init+0x130>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4831      	ldr	r0, [pc, #196]	; (80010f0 <MX_TIM2_Init+0x130>)
 800102a:	f003 fcc3 	bl	80049b4 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001034:	f7ff fcea 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001042:	4619      	mov	r1, r3
 8001044:	482a      	ldr	r0, [pc, #168]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001046:	f004 fcc1 	bl	80059cc <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001050:	f7ff fcdc 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001054:	4826      	ldr	r0, [pc, #152]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001056:	f003 fd75 	bl	8004b44 <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001060:	f7ff fcd4 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001066:	f003 ff77 	bl	8004f58 <HAL_TIM_IC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001070:	f7ff fccc 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	481b      	ldr	r0, [pc, #108]	; (80010f0 <MX_TIM2_Init+0x130>)
 8001084:	f005 fb56 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800108e:	f7ff fcbd 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001096:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800109a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_TIM2_Init+0x130>)
 80010ae:	f004 fb79 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80010b8:	f7ff fca8 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2204      	movs	r2, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM2_Init+0x130>)
 80010d4:	f004 fac9 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 80010de:	f7ff fc95 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM2_Init+0x130>)
 80010e4:	f000 fcd8 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 80010e8:	bf00      	nop
 80010ea:	3748      	adds	r7, #72	; 0x48
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001bc 	.word	0x200001bc

080010f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_TIM3_Init+0x130>)
 8001136:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <MX_TIM3_Init+0x134>)
 8001138:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_TIM3_Init+0x130>)
 800113c:	2207      	movs	r2, #7
 800113e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_TIM3_Init+0x130>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_TIM3_Init+0x130>)
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <MX_TIM3_Init+0x130>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_TIM3_Init+0x130>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800115a:	4832      	ldr	r0, [pc, #200]	; (8001224 <MX_TIM3_Init+0x130>)
 800115c:	f003 fc2a 	bl	80049b4 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001166:	f7ff fc51 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001174:	4619      	mov	r1, r3
 8001176:	482b      	ldr	r0, [pc, #172]	; (8001224 <MX_TIM3_Init+0x130>)
 8001178:	f004 fc28 	bl	80059cc <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001182:	f7ff fc43 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001186:	4827      	ldr	r0, [pc, #156]	; (8001224 <MX_TIM3_Init+0x130>)
 8001188:	f003 fcdc 	bl	8004b44 <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001192:	f7ff fc3b 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001196:	4823      	ldr	r0, [pc, #140]	; (8001224 <MX_TIM3_Init+0x130>)
 8001198:	f003 fede 	bl	8004f58 <HAL_TIM_IC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011a2:	f7ff fc33 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_TIM3_Init+0x130>)
 80011b6:	f005 fabd 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011c0:	f7ff fc24 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 80011c8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80011cc:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_TIM3_Init+0x130>)
 80011e0:	f004 fae0 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80011ea:	f7ff fc0f 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2204      	movs	r2, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM3_Init+0x130>)
 8001206:	f004 fa30 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001210:	f7ff fbfc 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM3_Init+0x130>)
 8001216:	f000 fc3f 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3748      	adds	r7, #72	; 0x48
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000208 	.word	0x20000208
 8001228:	40000400 	.word	0x40000400

0800122c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b092      	sub	sp, #72	; 0x48
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <MX_TIM4_Init+0x130>)
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <MX_TIM4_Init+0x134>)
 8001270:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <MX_TIM4_Init+0x130>)
 8001274:	2207      	movs	r2, #7
 8001276:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <MX_TIM4_Init+0x130>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <MX_TIM4_Init+0x130>)
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <MX_TIM4_Init+0x130>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <MX_TIM4_Init+0x130>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001292:	4832      	ldr	r0, [pc, #200]	; (800135c <MX_TIM4_Init+0x130>)
 8001294:	f003 fb8e 	bl	80049b4 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800129e:	f7ff fbb5 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ac:	4619      	mov	r1, r3
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_TIM4_Init+0x130>)
 80012b0:	f004 fb8c 	bl	80059cc <HAL_TIM_ConfigClockSource>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80012ba:	f7ff fba7 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <MX_TIM4_Init+0x130>)
 80012c0:	f003 fc40 	bl	8004b44 <HAL_TIM_PWM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80012ca:	f7ff fb9f 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_TIM4_Init+0x130>)
 80012d0:	f003 fe42 	bl	8004f58 <HAL_TIM_IC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012da:	f7ff fb97 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <MX_TIM4_Init+0x130>)
 80012ee:	f005 fa21 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80012f8:	f7ff fb88 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001300:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001304:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_TIM4_Init+0x130>)
 8001318:	f004 fa44 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8001322:	f7ff fb73 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800132a:	2301      	movs	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	2204      	movs	r2, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM4_Init+0x130>)
 800133e:	f004 f994 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8001348:	f7ff fb60 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM4_Init+0x130>)
 800134e:	f000 fba3 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3748      	adds	r7, #72	; 0x48
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000254 	.word	0x20000254
 8001360:	40000800 	.word	0x40000800

08001364 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09e      	sub	sp, #120	; 0x78
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	222c      	movs	r2, #44	; 0x2c
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00a f9cd 	bl	800b74c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013b2:	4b52      	ldr	r3, [pc, #328]	; (80014fc <MX_TIM8_Init+0x198>)
 80013b4:	4a52      	ldr	r2, [pc, #328]	; (8001500 <MX_TIM8_Init+0x19c>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <MX_TIM8_Init+0x198>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <MX_TIM8_Init+0x198>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013c4:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <MX_TIM8_Init+0x198>)
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <MX_TIM8_Init+0x198>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <MX_TIM8_Init+0x198>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b48      	ldr	r3, [pc, #288]	; (80014fc <MX_TIM8_Init+0x198>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013de:	4847      	ldr	r0, [pc, #284]	; (80014fc <MX_TIM8_Init+0x198>)
 80013e0:	f003 fae8 	bl	80049b4 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80013ea:	f7ff fb0f 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013f8:	4619      	mov	r1, r3
 80013fa:	4840      	ldr	r0, [pc, #256]	; (80014fc <MX_TIM8_Init+0x198>)
 80013fc:	f004 fae6 	bl	80059cc <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001406:	f7ff fb01 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800140a:	483c      	ldr	r0, [pc, #240]	; (80014fc <MX_TIM8_Init+0x198>)
 800140c:	f003 fb9a 	bl	8004b44 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001416:	f7ff faf9 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <MX_TIM8_Init+0x198>)
 800141c:	f003 fd9c 	bl	8004f58 <HAL_TIM_IC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001426:	f7ff faf1 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800143a:	4619      	mov	r1, r3
 800143c:	482f      	ldr	r0, [pc, #188]	; (80014fc <MX_TIM8_Init+0x198>)
 800143e:	f005 f979 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 8001448:	f7ff fae0 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001450:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4822      	ldr	r0, [pc, #136]	; (80014fc <MX_TIM8_Init+0x198>)
 8001474:	f004 f996 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800147e:	f7ff fac5 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001492:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001496:	2204      	movs	r2, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <MX_TIM8_Init+0x198>)
 800149c:	f004 f8e5 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80014a6:	f7ff fab1 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM8_Init+0x198>)
 80014e0:	f005 f9b4 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80014ea:	f7ff fa8f 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM8_Init+0x198>)
 80014f0:	f000 fad2 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3778      	adds	r7, #120	; 0x78
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002a0 	.word	0x200002a0
 8001500:	40013400 	.word	0x40013400

08001504 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09e      	sub	sp, #120	; 0x78
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	222c      	movs	r2, #44	; 0x2c
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f00a f8fd 	bl	800b74c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <MX_TIM15_Init+0x188>)
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <MX_TIM15_Init+0x18c>)
 8001556:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 8001558:	4b4c      	ldr	r3, [pc, #304]	; (800168c <MX_TIM15_Init+0x188>)
 800155a:	2207      	movs	r2, #7
 800155c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <MX_TIM15_Init+0x188>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <MX_TIM15_Init+0x188>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b47      	ldr	r3, [pc, #284]	; (800168c <MX_TIM15_Init+0x188>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <MX_TIM15_Init+0x188>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <MX_TIM15_Init+0x188>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800157e:	4843      	ldr	r0, [pc, #268]	; (800168c <MX_TIM15_Init+0x188>)
 8001580:	f003 fa18 	bl	80049b4 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800158a:	f7ff fa3f 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001598:	4619      	mov	r1, r3
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <MX_TIM15_Init+0x188>)
 800159c:	f004 fa16 	bl	80059cc <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80015a6:	f7ff fa31 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015aa:	4838      	ldr	r0, [pc, #224]	; (800168c <MX_TIM15_Init+0x188>)
 80015ac:	f003 faca 	bl	8004b44 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 80015b6:	f7ff fa29 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80015ba:	4834      	ldr	r0, [pc, #208]	; (800168c <MX_TIM15_Init+0x188>)
 80015bc:	f003 fccc 	bl	8004f58 <HAL_TIM_IC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80015c6:	f7ff fa21 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	; (800168c <MX_TIM15_Init+0x188>)
 80015da:	f005 f8ab 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 80015e4:	f7ff fa12 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	; 0x60
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80015ec:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	481f      	ldr	r0, [pc, #124]	; (800168c <MX_TIM15_Init+0x188>)
 8001610:	f004 f8c8 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800161a:	f7ff f9f7 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001622:	2301      	movs	r3, #1
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800162e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001632:	2204      	movs	r2, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_TIM15_Init+0x188>)
 8001638:	f004 f817 	bl	800566a <HAL_TIM_IC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 8001642:	f7ff f9e3 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_TIM15_Init+0x188>)
 800166e:	f005 f8ed 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 8001678:	f7ff f9c8 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_TIM15_Init+0x188>)
 800167e:	f000 fa0b 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 8001682:	bf00      	nop
 8001684:	3778      	adds	r7, #120	; 0x78
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002ec 	.word	0x200002ec
 8001690:	40014000 	.word	0x40014000

08001694 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b092      	sub	sp, #72	; 0x48
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ae:	463b      	mov	r3, r7
 80016b0:	222c      	movs	r2, #44	; 0x2c
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a f849 	bl	800b74c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <MX_TIM16_Init+0xec>)
 80016bc:	4a31      	ldr	r2, [pc, #196]	; (8001784 <MX_TIM16_Init+0xf0>)
 80016be:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <MX_TIM16_Init+0xec>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <MX_TIM16_Init+0xec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <MX_TIM16_Init+0xec>)
 80016ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <MX_TIM16_Init+0xec>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <MX_TIM16_Init+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <MX_TIM16_Init+0xec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016e6:	4826      	ldr	r0, [pc, #152]	; (8001780 <MX_TIM16_Init+0xec>)
 80016e8:	f003 f964 	bl	80049b4 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80016f2:	f7ff f98b 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80016f6:	4822      	ldr	r0, [pc, #136]	; (8001780 <MX_TIM16_Init+0xec>)
 80016f8:	f003 fa24 	bl	8004b44 <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001702:	f7ff f983 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800170a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM16_Init+0xec>)
 800172e:	f004 f839 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001738:	f7ff f968 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM16_Init+0xec>)
 8001764:	f005 f872 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800176e:	f7ff f94d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM16_Init+0xec>)
 8001774:	f000 f990 	bl	8001a98 <HAL_TIM_MspPostInit>

}
 8001778:	bf00      	nop
 800177a:	3748      	adds	r7, #72	; 0x48
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000338 	.word	0x20000338
 8001784:	40014400 	.word	0x40014400

08001788 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4aa7      	ldr	r2, [pc, #668]	; (8001a44 <HAL_TIM_Base_MspInit+0x2bc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d138      	bne.n	800181c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017aa:	4ba7      	ldr	r3, [pc, #668]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4aa6      	ldr	r2, [pc, #664]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4ba4      	ldr	r3, [pc, #656]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4aa0      	ldr	r2, [pc, #640]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017cc:	6153      	str	r3, [r2, #20]
 80017ce:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017da:	2302      	movs	r3, #2
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4895      	ldr	r0, [pc, #596]	; (8001a4c <HAL_TIM_Base_MspInit+0x2c4>)
 80017f6:	f001 fa61 	bl	8002cbc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	2018      	movs	r0, #24
 8001800:	f001 f9ba 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001804:	2018      	movs	r0, #24
 8001806:	f001 f9d3 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	201b      	movs	r0, #27
 8001810:	f001 f9b2 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001814:	201b      	movs	r0, #27
 8001816:	f001 f9cb 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800181a:	e134      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d131      	bne.n	800188a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a87      	ldr	r2, [pc, #540]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
 800183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	6153      	str	r3, [r2, #20]
 800184a:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001856:	2302      	movs	r3, #2
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001866:	2301      	movs	r3, #1
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f001 fa22 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2105      	movs	r1, #5
 800187c:	201c      	movs	r0, #28
 800187e:	f001 f97b 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001882:	201c      	movs	r0, #28
 8001884:	f001 f994 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 8001888:	e0fd      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a70      	ldr	r2, [pc, #448]	; (8001a50 <HAL_TIM_Base_MspInit+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d131      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a6b      	ldr	r2, [pc, #428]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	61d3      	str	r3, [r2, #28]
 80018a0:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80018b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b6:	6153      	str	r3, [r2, #20]
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c4:	2310      	movs	r3, #16
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f001 f9eb 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	201d      	movs	r0, #29
 80018ec:	f001 f944 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f0:	201d      	movs	r0, #29
 80018f2:	f001 f95d 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 80018f6:	e0c6      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_TIM_Base_MspInit+0x2cc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d132      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6153      	str	r3, [r2, #20]
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001944:	230a      	movs	r3, #10
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f001 f9b3 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2105      	movs	r1, #5
 800195a:	201e      	movs	r0, #30
 800195c:	f001 f90c 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001960:	201e      	movs	r0, #30
 8001962:	f001 f925 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 8001966:	e08e      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3a      	ldr	r2, [pc, #232]	; (8001a58 <HAL_TIM_Base_MspInit+0x2d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d130      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80019b2:	2304      	movs	r3, #4
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4823      	ldr	r0, [pc, #140]	; (8001a4c <HAL_TIM_Base_MspInit+0x2c4>)
 80019be:	f001 f97d 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2105      	movs	r1, #5
 80019c6:	202e      	movs	r0, #46	; 0x2e
 80019c8:	f001 f8d6 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80019cc:	202e      	movs	r0, #46	; 0x2e
 80019ce:	f001 f8ef 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 80019d2:	e058      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_TIM_Base_MspInit+0x2d4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d142      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001a20:	2301      	movs	r3, #1
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <HAL_TIM_Base_MspInit+0x2d8>)
 8001a2c:	f001 f946 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2105      	movs	r1, #5
 8001a34:	2018      	movs	r0, #24
 8001a36:	f001 f89f 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a3a:	2018      	movs	r0, #24
 8001a3c:	f001 f8b8 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 8001a40:	e021      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40013400 	.word	0x40013400
 8001a5c:	40014000 	.word	0x40014000
 8001a60:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x308>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10b      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_TIM_Base_MspInit+0x30c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_TIM_Base_MspInit+0x30c>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_TIM_Base_MspInit+0x30c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
}
 8001a86:	bf00      	nop
 8001a88:	3750      	adds	r7, #80	; 0x50
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40014400 	.word	0x40014400
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <HAL_TIM_MspPostInit+0x204>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d11c      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	4b79      	ldr	r3, [pc, #484]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a78      	ldr	r2, [pc, #480]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ada:	2302      	movs	r3, #2
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	486d      	ldr	r0, [pc, #436]	; (8001ca4 <HAL_TIM_MspPostInit+0x20c>)
 8001aee:	f001 f8e5 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001af2:	e0cf      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d11d      	bne.n	8001b3a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	6153      	str	r3, [r2, #20]
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b16:	2301      	movs	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b26:	2301      	movs	r3, #1
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f001 f8c2 	bl	8002cbc <HAL_GPIO_Init>
}
 8001b38:	e0ac      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_TIM_MspPostInit+0x210>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d11d      	bne.n	8001b80 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	4a55      	ldr	r2, [pc, #340]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6153      	str	r3, [r2, #20]
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b64:	2302      	movs	r3, #2
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7a:	f001 f89f 	bl	8002cbc <HAL_GPIO_Init>
}
 8001b7e:	e089      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_TIM_MspPostInit+0x214>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d11e      	bne.n	8001bc8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f001 f87b 	bl	8002cbc <HAL_GPIO_Init>
}
 8001bc6:	e065      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a38      	ldr	r2, [pc, #224]	; (8001cb0 <HAL_TIM_MspPostInit+0x218>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11c      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bea:	2340      	movs	r3, #64	; 0x40
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	4619      	mov	r1, r3
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <HAL_TIM_MspPostInit+0x20c>)
 8001c06:	f001 f859 	bl	8002cbc <HAL_GPIO_Init>
}
 8001c0a:	e043      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_TIM_MspPostInit+0x21c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d11d      	bne.n	8001c52 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6153      	str	r3, [r2, #20]
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001c40:	2301      	movs	r3, #1
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481b      	ldr	r0, [pc, #108]	; (8001cb8 <HAL_TIM_MspPostInit+0x220>)
 8001c4c:	f001 f836 	bl	8002cbc <HAL_GPIO_Init>
}
 8001c50:	e020      	b.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_TIM_MspPostInit+0x224>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c66:	6153      	str	r3, [r2, #20]
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_TIM_MspPostInit+0x208>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c74:	2310      	movs	r3, #16
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001c84:	2301      	movs	r3, #1
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <HAL_TIM_MspPostInit+0x220>)
 8001c90:	f001 f814 	bl	8002cbc <HAL_GPIO_Init>
}
 8001c94:	bf00      	nop
 8001c96:	3738      	adds	r7, #56	; 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40013400 	.word	0x40013400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	40014400 	.word	0x40014400

08001cc0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <MX_UART4_Init+0x5c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_UART4_Init+0x58>)
 8001ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_UART4_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_UART4_Init+0x58>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_UART4_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_UART4_Init+0x58>)
 8001d04:	f004 fe46 	bl	8006994 <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d0e:	f7fe fe7d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000384 	.word	0x20000384
 8001d1c:	40004c00 	.word	0x40004c00

08001d20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <MX_USART2_UART_Init+0x5c>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_USART2_UART_Init+0x58>)
 8001d64:	f004 fe16 	bl	8006994 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f7fe fe4d 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000040c 	.word	0x2000040c
 8001d7c:	40004400 	.word	0x40004400

08001d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_UART_MspInit+0xec>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d131      	bne.n	8001e06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a2c      	ldr	r2, [pc, #176]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001de4:	2305      	movs	r3, #5
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4821      	ldr	r0, [pc, #132]	; (8001e74 <HAL_UART_MspInit+0xf4>)
 8001df0:	f000 ff64 	bl	8002cbc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2105      	movs	r1, #5
 8001df8:	2034      	movs	r0, #52	; 0x34
 8001dfa:	f000 febd 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dfe:	2034      	movs	r0, #52	; 0x34
 8001e00:	f000 fed6 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e04:	e02d      	b.n	8001e62 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_UART_MspInit+0xf8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d128      	bne.n	8001e62 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1a:	61d3      	str	r3, [r2, #28]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e32:	6153      	str	r3, [r2, #20]
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0xf0>)
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e40:	230c      	movs	r3, #12
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e50:	2307      	movs	r3, #7
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f000 ff2d 	bl	8002cbc <HAL_GPIO_Init>
}
 8001e62:	bf00      	nop
 8001e64:	3730      	adds	r7, #48	; 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40004c00 	.word	0x40004c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000800 	.word	0x48000800
 8001e78:	40004400 	.word	0x40004400

08001e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e80:	f7fe ffbc 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <LoopForever+0xe>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <LoopForever+0x16>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f009 fcf9 	bl	800b8a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eae:	f7fe fd17 	bl	80008e0 <main>

08001eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001eb2:	e7fe      	b.n	8001eb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001ec0:	0800c83c 	.word	0x0800c83c
  ldr r2, =_sbss
 8001ec4:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001ec8:	2000283c 	.word	0x2000283c

08001ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_2_IRQHandler>
	...

08001ed0 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	printf("----------------------> is %c\n",temp);
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4827      	ldr	r0, [pc, #156]	; (8001f7c <HAL_UART_RxCpltCallback+0xac>)
 8001ee0:	f009 faee 	bl	800b4c0 <iprintf>
	if( BLUETOOTH_CONDITION(temp) ){
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b46      	cmp	r3, #70	; 0x46
 8001eea:	d037      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b42      	cmp	r3, #66	; 0x42
 8001ef2:	d033      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b47      	cmp	r3, #71	; 0x47
 8001efa:	d02f      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b49      	cmp	r3, #73	; 0x49
 8001f02:	d02b      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b48      	cmp	r3, #72	; 0x48
 8001f0a:	d027      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b4a      	cmp	r3, #74	; 0x4a
 8001f12:	d023      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b52      	cmp	r3, #82	; 0x52
 8001f1a:	d01f      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b4c      	cmp	r3, #76	; 0x4c
 8001f22:	d01b      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b53      	cmp	r3, #83	; 0x53
 8001f2a:	d017      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b23      	cmp	r3, #35	; 0x23
 8001f32:	d013      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d00f      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b21      	cmp	r3, #33	; 0x21
 8001f42:	d00b      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b57      	cmp	r3, #87	; 0x57
 8001f4a:	d007      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b55      	cmp	r3, #85	; 0x55
 8001f52:	d003      	beq.n	8001f5c <HAL_UART_RxCpltCallback+0x8c>
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b77      	cmp	r3, #119	; 0x77
 8001f5a:	d103      	bne.n	8001f64 <HAL_UART_RxCpltCallback+0x94>
		Bluetooth_RX_Data = temp;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_UART_RxCpltCallback+0xb0>)
 8001f62:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	4904      	ldr	r1, [pc, #16]	; (8001f78 <HAL_UART_RxCpltCallback+0xa8>)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f004 fd61 	bl	8006a30 <HAL_UART_Receive_IT>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000494 	.word	0x20000494
 8001f7c:	0800c628 	.word	0x0800c628
 8001f80:	20000064 	.word	0x20000064

08001f84 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e009      	b.n	8001faa <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	791b      	ldrb	r3, [r3, #4]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <ECU_Bluetooth_ReciveData+0x30>)
 8001fa4:	f004 fd44 	bl	8006a30 <HAL_UART_Receive_IT>

	return ECU_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000494 	.word	0x20000494

08001fb8 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07e      	b.n	80020cc <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <ECU_Motor_GeneratePWM+0x34>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e045      	b.n	8002078 <ECU_Motor_GeneratePWM+0xc0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d10a      	bne.n	800200a <ECU_Motor_GeneratePWM+0x52>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	e036      	b.n	8002078 <ECU_Motor_GeneratePWM+0xc0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b08      	cmp	r3, #8
 8002010:	d10a      	bne.n	8002028 <ECU_Motor_GeneratePWM+0x70>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e027      	b.n	8002078 <ECU_Motor_GeneratePWM+0xc0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d10a      	bne.n	8002046 <ECU_Motor_GeneratePWM+0x8e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	e018      	b.n	8002078 <ECU_Motor_GeneratePWM+0xc0>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d10a      	bne.n	8002064 <ECU_Motor_GeneratePWM+0xac>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e009      	b.n	8002078 <ECU_Motor_GeneratePWM+0xc0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e025      	b.n	80020cc <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <ECU_Motor_GeneratePWM+0x11c>)
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b4:	ee17 2a90 	vmov	r2, s15
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f002 fd9f 	bl	8004c08 <HAL_TIM_PWM_Start>

	return ECU_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	000f4240 	.word	0x000f4240

080020d8 <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e008      	b.n	80020fc <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f002 fe93 	bl	8004e20 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <ECU_Motor_ChangeSpeed+0x16>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffda 	bl	80020d8 <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff3f 	bl	8001fb8 <ECU_Motor_GeneratePWM>

	return ECU_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <ECU_Motor_NextStep+0x16>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0a3      	b.n	80022a6 <ECU_Motor_NextStep+0x162>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3b21      	subs	r3, #33	; 0x21
 8002164:	2b32      	cmp	r3, #50	; 0x32
 8002166:	f200 8099 	bhi.w	800229c <ECU_Motor_NextStep+0x158>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <ECU_Motor_NextStep+0x2c>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002295 	.word	0x08002295
 8002174:	0800229d 	.word	0x0800229d
 8002178:	08002285 	.word	0x08002285
 800217c:	0800229d 	.word	0x0800229d
 8002180:	0800229d 	.word	0x0800229d
 8002184:	0800229d 	.word	0x0800229d
 8002188:	0800229d 	.word	0x0800229d
 800218c:	0800229d 	.word	0x0800229d
 8002190:	0800229d 	.word	0x0800229d
 8002194:	0800229d 	.word	0x0800229d
 8002198:	0800229d 	.word	0x0800229d
 800219c:	0800229d 	.word	0x0800229d
 80021a0:	0800229d 	.word	0x0800229d
 80021a4:	0800229d 	.word	0x0800229d
 80021a8:	0800229d 	.word	0x0800229d
 80021ac:	0800229d 	.word	0x0800229d
 80021b0:	0800229d 	.word	0x0800229d
 80021b4:	0800229d 	.word	0x0800229d
 80021b8:	0800229d 	.word	0x0800229d
 80021bc:	0800229d 	.word	0x0800229d
 80021c0:	0800229d 	.word	0x0800229d
 80021c4:	0800229d 	.word	0x0800229d
 80021c8:	0800229d 	.word	0x0800229d
 80021cc:	0800229d 	.word	0x0800229d
 80021d0:	0800229d 	.word	0x0800229d
 80021d4:	0800229d 	.word	0x0800229d
 80021d8:	0800229d 	.word	0x0800229d
 80021dc:	0800229d 	.word	0x0800229d
 80021e0:	0800229d 	.word	0x0800229d
 80021e4:	0800229d 	.word	0x0800229d
 80021e8:	0800229d 	.word	0x0800229d
 80021ec:	0800228d 	.word	0x0800228d
 80021f0:	0800229d 	.word	0x0800229d
 80021f4:	08002245 	.word	0x08002245
 80021f8:	0800229d 	.word	0x0800229d
 80021fc:	0800229d 	.word	0x0800229d
 8002200:	0800229d 	.word	0x0800229d
 8002204:	0800223d 	.word	0x0800223d
 8002208:	0800224d 	.word	0x0800224d
 800220c:	0800225d 	.word	0x0800225d
 8002210:	08002255 	.word	0x08002255
 8002214:	08002265 	.word	0x08002265
 8002218:	0800229d 	.word	0x0800229d
 800221c:	08002275 	.word	0x08002275
 8002220:	0800229d 	.word	0x0800229d
 8002224:	0800229d 	.word	0x0800229d
 8002228:	0800229d 	.word	0x0800229d
 800222c:	0800229d 	.word	0x0800229d
 8002230:	0800229d 	.word	0x0800229d
 8002234:	0800226d 	.word	0x0800226d
 8002238:	0800227d 	.word	0x0800227d
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f83d 	bl	80022bc <ECU_Motor_MoveForward>
 8002242:	e02f      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f869 	bl	800231c <ECU_Motor_MoveReverse>
 800224a:	e02b      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8c7 	bl	80023e0 <ECU_Motor_MoveForwardLeft>
 8002252:	e027      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f891 	bl	800237c <ECU_Motor_MoveForwardRight>
 800225a:	e023      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f923 	bl	80024a8 <ECU_Motor_MoveReverseLeft>
 8002262:	e01f      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f8ed 	bl	8002444 <ECU_Motor_MoveReverseRight>
 800226a:	e01b      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f97f 	bl	8002570 <ECU_Motor_MoveRight>
 8002272:	e017      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9ab 	bl	80025d0 <ECU_Motor_MoveLeft>
 800227a:	e013      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f945 	bl	800250c <ECU_Motor_Stop>
 8002282:	e00f      	b.n	80022a4 <ECU_Motor_NextStep+0x160>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8002284:	490a      	ldr	r1, [pc, #40]	; (80022b0 <ECU_Motor_NextStep+0x16c>)
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff3c 	bl	8002104 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <ECU_Motor_NextStep+0x170>)
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff38 	bl	8002104 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 8002294:	4908      	ldr	r1, [pc, #32]	; (80022b8 <ECU_Motor_NextStep+0x174>)
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff34 	bl	8002104 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (motor_obj); break;
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f935 	bl	800250c <ECU_Motor_Stop>
 80022a2:	bf00      	nop
	}

	return ECU_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000068 	.word	0x20000068
 80022b4:	20000070 	.word	0x20000070
 80022b8:	20000078 	.word	0x20000078

080022bc <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01d      	b.n	800230a <ECU_Motor_MoveForward+0x4e>
	}

	printf("Motor_MoveForward\n");
 80022ce:	4811      	ldr	r0, [pc, #68]	; (8002314 <ECU_Motor_MoveForward+0x58>)
 80022d0:	f009 f95c 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022da:	480f      	ldr	r0, [pc, #60]	; (8002318 <ECU_Motor_MoveForward+0x5c>)
 80022dc:	f000 fe78 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <ECU_Motor_MoveForward+0x5c>)
 80022e8:	f000 fe72 	bl	8002fd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f6:	f000 fe6b 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f000 fe64 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	0800c648 	.word	0x0800c648
 8002318:	48000800 	.word	0x48000800

0800231c <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e01d      	b.n	800236a <ECU_Motor_MoveReverse+0x4e>
	}

	printf("MoveReverse\n");
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <ECU_Motor_MoveReverse+0x58>)
 8002330:	f009 f92c 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233a:	480f      	ldr	r0, [pc, #60]	; (8002378 <ECU_Motor_MoveReverse+0x5c>)
 800233c:	f000 fe48 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <ECU_Motor_MoveReverse+0x5c>)
 8002348:	f000 fe42 	bl	8002fd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f000 fe3b 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f000 fe34 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	0800c65c 	.word	0x0800c65c
 8002378:	48000800 	.word	0x48000800

0800237c <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e020      	b.n	80023d0 <ECU_Motor_MoveForwardRight+0x54>
	}

	printf("MoveForwardRight\n");
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <ECU_Motor_MoveForwardRight+0x5c>)
 8002390:	f009 f8fc 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239a:	4810      	ldr	r0, [pc, #64]	; (80023dc <ECU_Motor_MoveForwardRight+0x60>)
 800239c:	f000 fe18 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <ECU_Motor_MoveForwardRight+0x60>)
 80023a8:	f000 fe12 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f000 fb07 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f000 fe08 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ca:	f000 fe01 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	0800c668 	.word	0x0800c668
 80023dc:	48000800 	.word	0x48000800

080023e0 <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <ECU_Motor_MoveForwardLeft+0x54>
	}

	printf("MoveForwardLeft\n");
 80023f2:	4812      	ldr	r0, [pc, #72]	; (800243c <ECU_Motor_MoveForwardLeft+0x5c>)
 80023f4:	f009 f8ca 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fe:	4810      	ldr	r0, [pc, #64]	; (8002440 <ECU_Motor_MoveForwardLeft+0x60>)
 8002400:	f000 fde6 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <ECU_Motor_MoveForwardLeft+0x60>)
 800240c:	f000 fde0 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002410:	2064      	movs	r0, #100	; 0x64
 8002412:	f000 fad5 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800241c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002420:	f000 fdd6 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f000 fdcf 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0800c67c 	.word	0x0800c67c
 8002440:	48000800 	.word	0x48000800

08002444 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e020      	b.n	8002498 <ECU_Motor_MoveReverseRight+0x54>
	}

	printf("MoveReverseRight\n");
 8002456:	4812      	ldr	r0, [pc, #72]	; (80024a0 <ECU_Motor_MoveReverseRight+0x5c>)
 8002458:	f009 f898 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002462:	4810      	ldr	r0, [pc, #64]	; (80024a4 <ECU_Motor_MoveReverseRight+0x60>)
 8002464:	f000 fdb4 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <ECU_Motor_MoveReverseRight+0x60>)
 8002470:	f000 fdae 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	f000 faa3 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002484:	f000 fda4 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800248e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002492:	f000 fd9d 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0800c68c 	.word	0x0800c68c
 80024a4:	48000800 	.word	0x48000800

080024a8 <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e020      	b.n	80024fc <ECU_Motor_MoveReverseLeft+0x54>
	}

	printf("MoveReverseLeft\n");
 80024ba:	4812      	ldr	r0, [pc, #72]	; (8002504 <ECU_Motor_MoveReverseLeft+0x5c>)
 80024bc:	f009 f866 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <ECU_Motor_MoveReverseLeft+0x60>)
 80024c8:	f000 fd82 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <ECU_Motor_MoveReverseLeft+0x60>)
 80024d4:	f000 fd7c 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80024d8:	2064      	movs	r0, #100	; 0x64
 80024da:	f000 fa71 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f000 fd72 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f6:	f000 fd6b 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	0800c6a0 	.word	0x0800c6a0
 8002508:	48000800 	.word	0x48000800

0800250c <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e020      	b.n	8002560 <ECU_Motor_Stop+0x54>
	}

	printf("Stop\n");
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <ECU_Motor_Stop+0x5c>)
 8002520:	f009 f834 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252a:	4810      	ldr	r0, [pc, #64]	; (800256c <ECU_Motor_Stop+0x60>)
 800252c:	f000 fd50 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002536:	480d      	ldr	r0, [pc, #52]	; (800256c <ECU_Motor_Stop+0x60>)
 8002538:	f000 fd4a 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800253c:	2032      	movs	r0, #50	; 0x32
 800253e:	f000 fa3f 	bl	80029c0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254c:	f000 fd40 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f000 fd39 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0800c6b0 	.word	0x0800c6b0
 800256c:	48000800 	.word	0x48000800

08002570 <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e01d      	b.n	80025be <ECU_Motor_MoveRight+0x4e>
	}

	printf("MoveRight\n");
 8002582:	4811      	ldr	r0, [pc, #68]	; (80025c8 <ECU_Motor_MoveRight+0x58>)
 8002584:	f009 f802 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258e:	480f      	ldr	r0, [pc, #60]	; (80025cc <ECU_Motor_MoveRight+0x5c>)
 8002590:	f000 fd1e 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <ECU_Motor_MoveRight+0x5c>)
 800259c:	f000 fd18 	bl	8002fd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f000 fd11 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f000 fd0a 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0800c6b8 	.word	0x0800c6b8
 80025cc:	48000800 	.word	0x48000800

080025d0 <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01d      	b.n	800261e <ECU_Motor_MoveLeft+0x4e>
	}

	printf("MoveLeft\n");
 80025e2:	4811      	ldr	r0, [pc, #68]	; (8002628 <ECU_Motor_MoveLeft+0x58>)
 80025e4:	f008 ffd2 	bl	800b58c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ee:	480f      	ldr	r0, [pc, #60]	; (800262c <ECU_Motor_MoveLeft+0x5c>)
 80025f0:	f000 fcee 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025fa:	480c      	ldr	r0, [pc, #48]	; (800262c <ECU_Motor_MoveLeft+0x5c>)
 80025fc:	f000 fce8 	bl	8002fd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260a:	f000 fce1 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f000 fcda 	bl	8002fd0 <HAL_GPIO_WritePin>

	return ECU_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	0800c6c4 	.word	0x0800c6c4
 800262c:	48000800 	.word	0x48000800

08002630 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b085      	sub	sp, #20
 8002634:	af02      	add	r7, sp, #8
 8002636:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7f1b      	ldrb	r3, [r3, #28]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d145      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d114      	bne.n	800267a <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_TIM_IC_CaptureCallback+0xac>)
 800265a:	4413      	add	r3, r2
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	4611      	mov	r1, r2
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002666:	440a      	add	r2, r1
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8e4 	bl	8002838 <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002670:	2100      	movs	r1, #0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f002 fbd4 	bl	8004e20 <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 8002678:	e028      	b.n	80026cc <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d120      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_TIM_IC_CaptureCallback+0xac>)
 8002694:	1899      	adds	r1, r3, r2
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80026a0:	441a      	add	r2, r3
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	480e      	ldr	r0, [pc, #56]	; (80026e4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80026ac:	4418      	add	r0, r3
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461c      	mov	r4, r3
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80026b8:	4423      	add	r3, r4
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4603      	mov	r3, r0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8e4 	bl	800288c <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80026c4:	2104      	movs	r1, #4
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f002 fdf2 	bl	80052b0 <HAL_TIM_IC_Stop_IT>
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd90      	pop	{r4, r7, pc}
 80026d4:	200004b0 	.word	0x200004b0
 80026d8:	200004b4 	.word	0x200004b4
 80026dc:	200004bc 	.word	0x200004bc
 80026e0:	200004d4 	.word	0x200004d4
 80026e4:	200004ec 	.word	0x200004ec

080026e8 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80026fa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002724 <ECU_Ultrasonic_Read+0x3c>
 80026fe:	f242 7110 	movw	r1, #10000	; 0x2710
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f810 	bl	8002728 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f002 fc82 	bl	800501c <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	3a83126f 	.word	0x3a83126f

08002728 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e077      	b.n	8002830 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <ECU_Ultrasonic_GenerateTrigger+0x36>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e045      	b.n	80027ea <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d10a      	bne.n	800277c <ECU_Ultrasonic_GenerateTrigger+0x54>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e036      	b.n	80027ea <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d10a      	bne.n	800279a <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e027      	b.n	80027ea <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d10a      	bne.n	80027b8 <ECU_Ultrasonic_GenerateTrigger+0x90>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e018      	b.n	80027ea <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d10a      	bne.n	80027d6 <ECU_Ultrasonic_GenerateTrigger+0xae>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e009      	b.n	80027ea <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01e      	b.n	8002830 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	edd7 7a01 	vldr	s15, [r7, #4]
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002818:	ee17 2a90 	vmov	r2, s15
 800281c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f002 f9ed 	bl	8004c08 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002844:	2104      	movs	r1, #4
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f003 f98a 	bl	8005b60 <HAL_TIM_ReadCapturedValue>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002870:	621a      	str	r2, [r3, #32]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0220 	orr.w	r2, r2, #32
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800289a:	2104      	movs	r1, #4
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f003 f95f 	bl	8005b60 <HAL_TIM_ReadCapturedValue>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d307      	bcc.n	80028cc <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e011      	b.n	80028f0 <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80028da:	33ff      	adds	r3, #255	; 0xff
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <IC_second_Capture+0xb8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	4619      	mov	r1, r3
 80028ea:	4817      	ldr	r0, [pc, #92]	; (8002948 <IC_second_Capture+0xbc>)
 80028ec:	f008 fde8 	bl	800b4c0 <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800294c <IC_second_Capture+0xc0>
 8002900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <IC_second_Capture+0xb8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002910:	ee17 1a90 	vmov	r1, s15
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <IC_second_Capture+0xc4>)
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a1a      	ldr	r2, [r3, #32]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800292e:	621a      	str	r2, [r3, #32]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a12      	ldr	r2, [r2, #32]
 800293a:	621a      	str	r2, [r3, #32]
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200004b0 	.word	0x200004b0
 8002948:	0800c6d0 	.word	0x0800c6d0
 800294c:	42680000 	.word	0x42680000
 8002950:	20000498 	.word	0x20000498

08002954 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_Init+0x28>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_Init+0x28>)
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 f8fc 	bl	8002b62 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296a:	200f      	movs	r0, #15
 800296c:	f7fe f87c 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002970:	f7fe f852 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40022000 	.word	0x40022000

08002980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x20>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x24>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4413      	add	r3, r2
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_IncTick+0x24>)
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000084 	.word	0x20000084
 80029a4:	20000504 	.word	0x20000504

080029a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000504 	.word	0x20000504

080029c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff ffee 	bl	80029a8 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d005      	beq.n	80029e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_Delay+0x44>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029e6:	bf00      	nop
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8f7      	bhi.n	80029e8 <HAL_Delay+0x28>
  {
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000084 	.word	0x20000084

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff4c 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8a:	f7ff ff61 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7ff ffb1 	bl	8002afc <NVIC_EncodePriority>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff80 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff54 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d008      	beq.n	8002bf0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e020      	b.n	8002c32 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 020e 	bic.w	r2, r2, #14
 8002bfe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d005      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2204      	movs	r2, #4
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e027      	b.n	8002cb0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 020e 	bic.w	r2, r2, #14
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
    } 
  }
  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e160      	b.n	8002f8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8152 	beq.w	8002f88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d005      	beq.n	8002cfc <HAL_GPIO_Init+0x40>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d130      	bne.n	8002d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0201 	and.w	r2, r3, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d017      	beq.n	8002d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d123      	bne.n	8002dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	6939      	ldr	r1, [r7, #16]
 8002dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80ac 	beq.w	8002f88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_GPIO_Init+0x2f0>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <HAL_GPIO_Init+0x2f0>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6193      	str	r3, [r2, #24]
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_GPIO_Init+0x2f0>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e48:	4a59      	ldr	r2, [pc, #356]	; (8002fb0 <HAL_GPIO_Init+0x2f4>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e72:	d025      	beq.n	8002ec0 <HAL_GPIO_Init+0x204>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a4f      	ldr	r2, [pc, #316]	; (8002fb4 <HAL_GPIO_Init+0x2f8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01f      	beq.n	8002ebc <HAL_GPIO_Init+0x200>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <HAL_GPIO_Init+0x2fc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d019      	beq.n	8002eb8 <HAL_GPIO_Init+0x1fc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a4d      	ldr	r2, [pc, #308]	; (8002fbc <HAL_GPIO_Init+0x300>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <HAL_GPIO_Init+0x1f8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a4c      	ldr	r2, [pc, #304]	; (8002fc0 <HAL_GPIO_Init+0x304>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00d      	beq.n	8002eb0 <HAL_GPIO_Init+0x1f4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_GPIO_Init+0x308>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <HAL_GPIO_Init+0x1f0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a4a      	ldr	r2, [pc, #296]	; (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_GPIO_Init+0x1ec>
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	e00c      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	e00a      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002eac:	2305      	movs	r3, #5
 8002eae:	e008      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x206>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ed2:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_GPIO_Init+0x2f4>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f04:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_GPIO_Init+0x310>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f ae97 	bne.w	8002ccc <HAL_GPIO_Init+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	48000400 	.word	0x48000400
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	48000c00 	.word	0x48000c00
 8002fc0:	48001000 	.word	0x48001000
 8002fc4:	48001400 	.word	0x48001400
 8002fc8:	48001800 	.word	0x48001800
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003006:	af00      	add	r7, sp, #0
 8003008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f001 b83a 	b.w	800409a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 816f 	beq.w	800331a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800303c:	4bb5      	ldr	r3, [pc, #724]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00c      	beq.n	8003062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003048:	4bb2      	ldr	r3, [pc, #712]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d15c      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003054:	4baf      	ldr	r3, [pc, #700]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d155      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003066:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_OscConfig+0x94>
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e015      	b.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 8003094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80030a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030bc:	4b95      	ldr	r3, [pc, #596]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030c4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80030c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80030cc:	fa92 f2a2 	rbit	r2, r2
 80030d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80030d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8111 	beq.w	8003318 <HAL_RCC_OscConfig+0x318>
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8108 	bne.w	8003318 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f000 bfc6 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x12e>
 8003120:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e036      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 800312e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x158>
 800313e:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a74      	ldr	r2, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a71      	ldr	r2, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e021      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x184>
 800316a:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a66      	ldr	r2, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a62      	ldr	r2, [pc, #392]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5f      	ldr	r2, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800319c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d059      	beq.n	8003260 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fbfc 	bl	80029a8 <HAL_GetTick>
 80031b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b6:	f7ff fbf7 	bl	80029a8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d902      	bls.n	80031cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	f000 bf67 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 80031cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80031e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_OscConfig+0x1fe>
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x22a>
 80031fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003202:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003216:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800321a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800322e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003232:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003236:	fa92 f2a2 	rbit	r2, r2
 800323a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800323e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003242:	fab2 f282 	clz	r2, r2
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f042 0220 	orr.w	r2, r2, #32
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ab      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1b6>
 800325e:	e05c      	b.n	800331a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fba2 	bl	80029a8 <HAL_GetTick>
 8003264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326a:	f7ff fb9d 	bl	80029a8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d902      	bls.n	8003280 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	f000 bf0d 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 8003280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003284:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003294:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2b2>
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x2de>
 80032b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x314>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80032e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80032ea:	fa92 f2a2 	rbit	r2, r2
 80032ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80032f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ab      	bne.n	800326a <HAL_RCC_OscConfig+0x26a>
 8003312:	e002      	b.n	800331a <HAL_RCC_OscConfig+0x31a>
 8003314:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 817f 	beq.w	800362e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003330:	4ba7      	ldr	r3, [pc, #668]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800333c:	4ba4      	ldr	r3, [pc, #656]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d173      	bne.n	8003430 <HAL_RCC_OscConfig+0x430>
 8003348:	4ba1      	ldr	r3, [pc, #644]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003354:	d16c      	bne.n	8003430 <HAL_RCC_OscConfig+0x430>
 8003356:	2302      	movs	r3, #2
 8003358:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003368:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HAL_RCC_OscConfig+0x386>
 8003380:	4b93      	ldr	r3, [pc, #588]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	e013      	b.n	80033ae <HAL_RCC_OscConfig+0x3ae>
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800339e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033aa:	4b89      	ldr	r3, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2202      	movs	r2, #2
 80033b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80033b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80033c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	f002 021f 	and.w	r2, r2, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3f6>
 80033e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d002      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f000 be52 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003402:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	21f8      	movs	r1, #248	; 0xf8
 800340c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003414:	fa91 f1a1 	rbit	r1, r1
 8003418:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800341c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003420:	fab1 f181 	clz	r1, r1
 8003424:	b2c9      	uxtb	r1, r1
 8003426:	408b      	lsls	r3, r1
 8003428:	4969      	ldr	r1, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	e0fe      	b.n	800362e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003434:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8088 	beq.w	8003552 <HAL_RCC_OscConfig+0x552>
 8003442:	2301      	movs	r3, #1
 8003444:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800344c:	fa93 f3a3 	rbit	r3, r3
 8003450:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003454:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003462:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	461a      	mov	r2, r3
 800346a:	2301      	movs	r3, #1
 800346c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7ff fa9b 	bl	80029a8 <HAL_GetTick>
 8003472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003478:	f7ff fa96 	bl	80029a8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d902      	bls.n	800348e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	f000 be06 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 800348e:	2302      	movs	r3, #2
 8003490:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80034a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x4be>
 80034b8:	4b45      	ldr	r3, [pc, #276]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	e013      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e6>
 80034be:	2302      	movs	r3, #2
 80034c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80034d0:	2302      	movs	r3, #2
 80034d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2202      	movs	r2, #2
 80034e8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80034ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80034f0:	fa92 f2a2 	rbit	r2, r2
 80034f4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80034f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f042 0220 	orr.w	r2, r2, #32
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f002 021f 	and.w	r2, r2, #31
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0af      	beq.n	8003478 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	21f8      	movs	r1, #248	; 0xf8
 800352e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003536:	fa91 f1a1 	rbit	r1, r1
 800353a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800353e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003542:	fab1 f181 	clz	r1, r1
 8003546:	b2c9      	uxtb	r1, r1
 8003548:	408b      	lsls	r3, r1
 800354a:	4921      	ldr	r1, [pc, #132]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e06d      	b.n	800362e <HAL_RCC_OscConfig+0x62e>
 8003552:	2301      	movs	r3, #1
 8003554:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003572:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	461a      	mov	r2, r3
 800357a:	2300      	movs	r3, #0
 800357c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7ff fa13 	bl	80029a8 <HAL_GetTick>
 8003582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	e00a      	b.n	800359e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003588:	f7ff fa0e 	bl	80029a8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	f000 bd7e 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 800359e:	2302      	movs	r3, #2
 80035a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80035b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5d4>
 80035c8:	4b01      	ldr	r3, [pc, #4]	; (80035d0 <HAL_RCC_OscConfig+0x5d0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	e016      	b.n	80035fc <HAL_RCC_OscConfig+0x5fc>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	2302      	movs	r3, #2
 80035d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035f8:	4bbf      	ldr	r3, [pc, #764]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2202      	movs	r2, #2
 80035fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003602:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003606:	fa92 f2a2 	rbit	r2, r2
 800360a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800360e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f002 021f 	and.w	r2, r2, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ac      	bne.n	8003588 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8113 	beq.w	800386a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d07c      	beq.n	800374e <HAL_RCC_OscConfig+0x74e>
 8003654:	2301      	movs	r3, #1
 8003656:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	4ba2      	ldr	r3, [pc, #648]	; (80038fc <HAL_RCC_OscConfig+0x8fc>)
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	461a      	mov	r2, r3
 800367a:	2301      	movs	r3, #1
 800367c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7ff f993 	bl	80029a8 <HAL_GetTick>
 8003682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003688:	f7ff f98e 	bl	80029a8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d902      	bls.n	800369e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	f000 bcfe 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036e2:	2202      	movs	r2, #2
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b7e      	ldr	r3, [pc, #504]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 8003700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800370a:	2102      	movs	r1, #2
 800370c:	6019      	str	r1, [r3, #0]
 800370e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f1a3 	rbit	r1, r3
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003724:	6019      	str	r1, [r3, #0]
  return result;
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d09d      	beq.n	8003688 <HAL_RCC_OscConfig+0x688>
 800374c:	e08d      	b.n	800386a <HAL_RCC_OscConfig+0x86a>
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003770:	601a      	str	r2, [r3, #0]
  return result;
 8003772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003776:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800377a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_RCC_OscConfig+0x8fc>)
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7ff f90a 	bl	80029a8 <HAL_GetTick>
 8003794:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379a:	f7ff f905 	bl	80029a8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	f000 bc75 	b.w	800409a <HAL_RCC_OscConfig+0x109a>
 80037b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037b8:	2202      	movs	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037dc:	2202      	movs	r2, #2
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003800:	2202      	movs	r2, #2
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003816:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800381a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003824:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003828:	2102      	movs	r1, #2
 800382a:	6019      	str	r1, [r3, #0]
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f1a3 	rbit	r1, r3
 800383a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003842:	6019      	str	r1, [r3, #0]
  return result;
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d197      	bne.n	800379a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81a5 	beq.w	8003bca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	61d3      	str	r3, [r2, #28]
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_RCC_OscConfig+0x8f8>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_RCC_OscConfig+0x900>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d121      	bne.n	8003910 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_RCC_OscConfig+0x900>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x900>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7ff f866 	bl	80029a8 <HAL_GetTick>
 80038dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e010      	b.n	8003904 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7ff f861 	bl	80029a8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d908      	bls.n	8003904 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e3d1      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	10908120 	.word	0x10908120
 8003900:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_OscConfig+0xb3c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0e8      	beq.n	80038e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x92e>
 8003920:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4a86      	ldr	r2, [pc, #536]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	e035      	b.n	800399a <HAL_RCC_OscConfig+0x99a>
 800392e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x958>
 800393e:	4b80      	ldr	r3, [pc, #512]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a7f      	ldr	r2, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a7c      	ldr	r2, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	e020      	b.n	800399a <HAL_RCC_OscConfig+0x99a>
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d10c      	bne.n	8003982 <HAL_RCC_OscConfig+0x982>
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4a74      	ldr	r2, [pc, #464]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6213      	str	r3, [r2, #32]
 8003974:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6213      	str	r3, [r2, #32]
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0x99a>
 8003982:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4a6b      	ldr	r2, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8081 	beq.w	8003aae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fe fffc 	bl	80029a8 <HAL_GetTick>
 80039b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00b      	b.n	80039ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe fff7 	bl	80029a8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e365      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039d6:	2202      	movs	r2, #2
 80039d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a14:	601a      	str	r2, [r3, #0]
  return result;
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d102      	bne.n	8003a3a <HAL_RCC_OscConfig+0xa3a>
 8003a34:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	e013      	b.n	8003a62 <HAL_RCC_OscConfig+0xa62>
 8003a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a42:	2202      	movs	r2, #2
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a58:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	fa92 f1a2 	rbit	r1, r2
 8003a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a80:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003a84:	6011      	str	r1, [r2, #0]
  return result;
 8003a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a8a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	f002 021f 	and.w	r2, r2, #31
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d084      	beq.n	80039b6 <HAL_RCC_OscConfig+0x9b6>
 8003aac:	e083      	b.n	8003bb6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fe ff7b 	bl	80029a8 <HAL_GetTick>
 8003ab2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fe ff76 	bl	80029a8 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e2e4      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ad8:	2202      	movs	r2, #2
 8003ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fa93 f2a3 	rbit	r2, r3
 8003aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003afc:	2202      	movs	r2, #2
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b16:	601a      	str	r2, [r3, #0]
  return result;
 8003b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0xb44>
 8003b36:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <HAL_RCC_OscConfig+0xb40>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	e017      	b.n	8003b6c <HAL_RCC_OscConfig+0xb6c>
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4bb3      	ldr	r3, [pc, #716]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b74:	2102      	movs	r1, #2
 8003b76:	6011      	str	r1, [r2, #0]
 8003b78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	fa92 f1a2 	rbit	r1, r2
 8003b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b8a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003b8e:	6011      	str	r1, [r2, #0]
  return result;
 8003b90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b94:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	fab2 f282 	clz	r2, r2
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	f002 021f 	and.w	r2, r2, #31
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d180      	bne.n	8003ab8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bb6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b9e      	ldr	r3, [pc, #632]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a9d      	ldr	r2, [pc, #628]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 825e 	beq.w	8004098 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bdc:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	f000 821f 	beq.w	8004028 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	f040 8170 	bne.w	8003edc <HAL_RCC_OscConfig+0xedc>
 8003bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	fa93 f2a3 	rbit	r2, r3
 8003c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c20:	601a      	str	r2, [r3, #0]
  return result;
 8003c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe feb1 	bl	80029a8 <HAL_GetTick>
 8003c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4a:	e009      	b.n	8003c60 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe feac 	bl	80029a8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e21c      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 8003c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c84:	601a      	str	r2, [r3, #0]
  return result;
 8003c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_OscConfig+0xcaa>
 8003ca4:	4b64      	ldr	r3, [pc, #400]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	e027      	b.n	8003cfa <HAL_RCC_OscConfig+0xcfa>
 8003caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	fa93 f2a3 	rbit	r2, r3
 8003cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d06:	6011      	str	r1, [r2, #0]
 8003d08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	fa92 f1a2 	rbit	r1, r2
 8003d16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d1a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d1e:	6011      	str	r1, [r2, #0]
  return result;
 8003d20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d24:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f042 0220 	orr.w	r2, r2, #32
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f002 021f 	and.w	r2, r2, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d182      	bne.n	8003c4c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d46:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4937      	ldr	r1, [pc, #220]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a19      	ldr	r1, [r3, #32]
 8003d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	492d      	ldr	r1, [pc, #180]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
 8003d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dac:	601a      	str	r2, [r3, #0]
  return result;
 8003dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003db6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2301      	movs	r3, #1
 8003dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe fdeb 	bl	80029a8 <HAL_GetTick>
 8003dd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd6:	e009      	b.n	8003dec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe fde6 	bl	80029a8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e156      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 8003dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	fa93 f2a3 	rbit	r2, r3
 8003e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e10:	601a      	str	r2, [r3, #0]
  return result;
 8003e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCC_OscConfig+0xe3c>
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <HAL_RCC_OscConfig+0xe38>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e02a      	b.n	8003e8c <HAL_RCC_OscConfig+0xe8c>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	fa93 f2a3 	rbit	r2, r3
 8003e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e82:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <HAL_RCC_OscConfig+0x10a4>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e9e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	fa92 f1a2 	rbit	r1, r2
 8003ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003eb0:	6011      	str	r1, [r2, #0]
  return result;
 8003eb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eb6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	fab2 f282 	clz	r2, r2
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f042 0220 	orr.w	r2, r2, #32
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f002 021f 	and.w	r2, r2, #31
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f43f af7f 	beq.w	8003dd8 <HAL_RCC_OscConfig+0xdd8>
 8003eda:	e0dd      	b.n	8004098 <HAL_RCC_OscConfig+0x1098>
 8003edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f00:	601a      	str	r2, [r3, #0]
  return result;
 8003f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f0a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe fd41 	bl	80029a8 <HAL_GetTick>
 8003f26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2a:	e009      	b.n	8003f40 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe fd3c 	bl	80029a8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0ac      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
 8003f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f64:	601a      	str	r2, [r3, #0]
  return result;
 8003f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_RCC_OscConfig+0xf8a>
 8003f84:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_RCC_OscConfig+0x10a4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	e027      	b.n	8003fda <HAL_RCC_OscConfig+0xfda>
 8003f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fa93 f2a3 	rbit	r2, r3
 8003fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003faa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	fa93 f2a3 	rbit	r2, r3
 8003fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x10a4>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fe2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fe6:	6011      	str	r1, [r2, #0]
 8003fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	fa92 f1a2 	rbit	r1, r2
 8003ff6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ffa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003ffe:	6011      	str	r1, [r2, #0]
  return result;
 8004000:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004004:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	fab2 f282 	clz	r2, r2
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f002 021f 	and.w	r2, r2, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d182      	bne.n	8003f2c <HAL_RCC_OscConfig+0xf2c>
 8004026:	e037      	b.n	8004098 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e02e      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_RCC_OscConfig+0x10a4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_RCC_OscConfig+0x10a4>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800404c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004050:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d117      	bne.n	8004094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004064:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004068:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800406c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004078:	429a      	cmp	r2, r3
 800407a:	d10b      	bne.n	8004094 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800407c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b09e      	sub	sp, #120	; 0x78
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e162      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b90      	ldr	r3, [pc, #576]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d910      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b8d      	ldr	r3, [pc, #564]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	498b      	ldr	r1, [pc, #556]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b89      	ldr	r3, [pc, #548]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e14a      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b82      	ldr	r3, [pc, #520]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	497f      	ldr	r1, [pc, #508]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 800410a:	4313      	orrs	r3, r2
 800410c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80dc 	beq.w	80042d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d13c      	bne.n	800419e <HAL_RCC_ClockConfig+0xf6>
 8004124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <HAL_RCC_ClockConfig+0xa6>
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	e00f      	b.n	800416e <HAL_RCC_ClockConfig+0xc6>
 800414e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	667b      	str	r3, [r7, #100]	; 0x64
 800415c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004160:	663b      	str	r3, [r7, #96]	; 0x60
 8004162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416a:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004172:	65ba      	str	r2, [r7, #88]	; 0x58
 8004174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004176:	fa92 f2a2 	rbit	r2, r2
 800417a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800417c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800417e:	fab2 f282 	clz	r2, r2
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f002 021f 	and.w	r2, r2, #31
 800418e:	2101      	movs	r1, #1
 8004190:	fa01 f202 	lsl.w	r2, r1, r2
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d17b      	bne.n	8004292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0f3      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d13c      	bne.n	8004220 <HAL_RCC_ClockConfig+0x178>
 80041a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x128>
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e00f      	b.n	80041f0 <HAL_RCC_ClockConfig+0x148>
 80041d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
 80041de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80041f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f8:	fa92 f2a2 	rbit	r2, r2
 80041fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004200:	fab2 f282 	clz	r2, r2
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f002 021f 	and.w	r2, r2, #31
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f202 	lsl.w	r2, r1, r2
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d13a      	bne.n	8004292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b2      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
 8004220:	2302      	movs	r3, #2
 8004222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d102      	bne.n	8004248 <HAL_RCC_ClockConfig+0x1a0>
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e00d      	b.n	8004264 <HAL_RCC_ClockConfig+0x1bc>
 8004248:	2302      	movs	r3, #2
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	2302      	movs	r3, #2
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2202      	movs	r2, #2
 8004266:	61ba      	str	r2, [r7, #24]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	fa92 f2a2 	rbit	r2, r2
 800426e:	617a      	str	r2, [r7, #20]
  return result;
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	fab2 f282 	clz	r2, r2
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	f042 0220 	orr.w	r2, r2, #32
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f002 021f 	and.w	r2, r2, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f202 	lsl.w	r2, r1, r2
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e079      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	491a      	ldr	r1, [pc, #104]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fe fb80 	bl	80029a8 <HAL_GetTick>
 80042a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fe fb7c 	bl	80029a8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e061      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d214      	bcs.n	800430c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	4906      	ldr	r1, [pc, #24]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e040      	b.n	8004386 <HAL_RCC_ClockConfig+0x2de>
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCC_ClockConfig+0x2e8>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	491a      	ldr	r1, [pc, #104]	; (8004390 <HAL_RCC_ClockConfig+0x2e8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCC_ClockConfig+0x2e8>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4912      	ldr	r1, [pc, #72]	; (8004390 <HAL_RCC_ClockConfig+0x2e8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800434a:	f000 f829 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800434e:	4601      	mov	r1, r0
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <HAL_RCC_ClockConfig+0x2e8>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004358:	22f0      	movs	r2, #240	; 0xf0
 800435a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	fa92 f2a2 	rbit	r2, r2
 8004362:	60fa      	str	r2, [r7, #12]
  return result;
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	fab2 f282 	clz	r2, r2
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	40d3      	lsrs	r3, r2
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x2ec>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	fa21 f303 	lsr.w	r3, r1, r3
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <HAL_RCC_ClockConfig+0x2f0>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCC_ClockConfig+0x2f4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc fb72 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3778      	adds	r7, #120	; 0x78
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	0800c7c8 	.word	0x0800c7c8
 8004398:	20000060 	.word	0x20000060
 800439c:	20000080 	.word	0x20000080

080043a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b08b      	sub	sp, #44	; 0x2c
 80043a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ce:	e03f      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043d2:	623b      	str	r3, [r7, #32]
      break;
 80043d4:	e03f      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	fa92 f2a2 	rbit	r2, r2
 80043e8:	607a      	str	r2, [r7, #4]
  return result;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	fab2 f282 	clz	r2, r2
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	40d3      	lsrs	r3, r2
 80043f4:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_RCC_GetSysClockFreq+0xcc>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	220f      	movs	r2, #15
 8004404:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	fa92 f2a2 	rbit	r2, r2
 800440c:	60fa      	str	r2, [r7, #12]
  return result;
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	fab2 f282 	clz	r2, r2
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	40d3      	lsrs	r3, r2
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_RCC_GetSysClockFreq+0xd0>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004428:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	e007      	b.n	800444a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc8>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	623b      	str	r3, [r7, #32]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004452:	623b      	str	r3, [r7, #32]
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6a3b      	ldr	r3, [r7, #32]
}
 8004458:	4618      	mov	r0, r3
 800445a:	372c      	adds	r7, #44	; 0x2c
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40021000 	.word	0x40021000
 8004468:	007a1200 	.word	0x007a1200
 800446c:	0800c7e0 	.word	0x0800c7e0
 8004470:	0800c7f0 	.word	0x0800c7f0

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000060 	.word	0x20000060

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004492:	f7ff ffef 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004496:	4601      	mov	r1, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	fa92 f2a2 	rbit	r2, r2
 80044ac:	603a      	str	r2, [r7, #0]
  return result;
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	fab2 f282 	clz	r2, r2
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	40d3      	lsrs	r3, r2
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	0800c7d8 	.word	0x0800c7d8

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044d6:	f7ff ffcd 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044da:	4601      	mov	r1, r0
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	fa92 f2a2 	rbit	r2, r2
 80044f0:	603a      	str	r2, [r7, #0]
  return result;
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	40d3      	lsrs	r3, r2
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044fe:	5cd3      	ldrb	r3, [r2, r3]
 8004500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	0800c7d8 	.word	0x0800c7d8

08004514 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	220f      	movs	r2, #15
 8004522:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_GetClockConfig+0x5c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0203 	and.w	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_GetClockConfig+0x5c>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <HAL_RCC_GetClockConfig+0x60>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0207 	and.w	r2, r3, #7
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	40022000 	.word	0x40022000

08004578 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b092      	sub	sp, #72	; 0x48
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80d4 	beq.w	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459c:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	61d3      	str	r3, [r2, #28]
 80045b4:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b45      	ldr	r3, [pc, #276]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b42      	ldr	r3, [pc, #264]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a41      	ldr	r2, [pc, #260]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fe f9e3 	bl	80029a8 <HAL_GetTick>
 80045e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fe f9df 	bl	80029a8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b64      	cmp	r3, #100	; 0x64
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1d6      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b38      	ldr	r3, [pc, #224]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004604:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8084 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004620:	429a      	cmp	r2, r3
 8004622:	d07c      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	2301      	movs	r3, #1
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04b      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fe f98f 	bl	80029a8 <HAL_GetTick>
 800468a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f98b 	bl	80029a8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e180      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046a4:	2302      	movs	r3, #2
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
 80046b0:	2302      	movs	r3, #2
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	61fb      	str	r3, [r7, #28]
  return result;
 80046bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d108      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046d2:	4b01      	ldr	r3, [pc, #4]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	e00d      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	10908100 	.word	0x10908100
 80046e4:	2302      	movs	r3, #2
 80046e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	4b9a      	ldr	r3, [pc, #616]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2202      	movs	r2, #2
 80046f6:	613a      	str	r2, [r7, #16]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	fa92 f2a2 	rbit	r2, r2
 80046fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	fab2 f282 	clz	r2, r2
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f002 021f 	and.w	r2, r2, #31
 8004712:	2101      	movs	r1, #1
 8004714:	fa01 f202 	lsl.w	r2, r1, r2
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0b7      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800471e:	4b8f      	ldr	r3, [pc, #572]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	498c      	ldr	r1, [pc, #560]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004738:	4b88      	ldr	r3, [pc, #544]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4a87      	ldr	r2, [pc, #540]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004750:	4b82      	ldr	r3, [pc, #520]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f023 0203 	bic.w	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	497f      	ldr	r1, [pc, #508]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476e:	4b7b      	ldr	r3, [pc, #492]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4978      	ldr	r1, [pc, #480]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478c:	4b73      	ldr	r3, [pc, #460]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	4970      	ldr	r1, [pc, #448]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047aa:	4b6c      	ldr	r3, [pc, #432]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f023 0210 	bic.w	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4969      	ldr	r1, [pc, #420]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047c8:	4b64      	ldr	r3, [pc, #400]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	4961      	ldr	r1, [pc, #388]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f023 0220 	bic.w	r2, r3, #32
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	495a      	ldr	r1, [pc, #360]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	4952      	ldr	r1, [pc, #328]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004822:	4b4e      	ldr	r3, [pc, #312]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	494b      	ldr	r1, [pc, #300]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004840:	4b46      	ldr	r3, [pc, #280]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	4943      	ldr	r1, [pc, #268]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	493c      	ldr	r1, [pc, #240]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486c:	4313      	orrs	r3, r2
 800486e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800487c:	4b37      	ldr	r3, [pc, #220]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	4934      	ldr	r1, [pc, #208]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	492d      	ldr	r1, [pc, #180]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	4925      	ldr	r1, [pc, #148]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048d6:	4b21      	ldr	r3, [pc, #132]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	491e      	ldr	r1, [pc, #120]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	4916      	ldr	r1, [pc, #88]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	490f      	ldr	r1, [pc, #60]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493e:	4313      	orrs	r3, r2
 8004940:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800494e:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	e002      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	4913      	ldr	r1, [pc, #76]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004964:	4313      	orrs	r3, r2
 8004966:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004982:	4313      	orrs	r3, r2
 8004984:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	4904      	ldr	r1, [pc, #16]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3748      	adds	r7, #72	; 0x48
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e049      	b.n	8004a5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fed4 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f001 f916 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d001      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e04f      	b.n	8004b1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d018      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0x76>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d115      	bne.n	8004b06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d015      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0xb4>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d011      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	e008      	b.n	8004b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40013400 	.word	0x40013400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40015000 	.word	0x40015000
 8004b40:	00010007 	.word	0x00010007

08004b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e049      	b.n	8004bea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f841 	bl	8004bf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f001 f84e 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_TIM_PWM_Start+0x24>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e03c      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x9e>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d109      	bne.n	8004c46 <HAL_TIM_PWM_Start+0x3e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	e02f      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x9e>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d109      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x58>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e022      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x9e>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d109      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x72>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e015      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x9e>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d109      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x8c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x9e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e0a1      	b.n	8004df2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xb6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	e023      	b.n	8004d06 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xc6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	e01b      	b.n	8004d06 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xd6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cdc:	e013      	b.n	8004d06 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xe6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cec:	e00b      	b.n	8004d06 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xf6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfc:	e003      	b.n	8004d06 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fcea 	bl	80066e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a38      	ldr	r2, [pc, #224]	; (8004dfc <HAL_TIM_PWM_Start+0x1f4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x148>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a37      	ldr	r2, [pc, #220]	; (8004e00 <HAL_TIM_PWM_Start+0x1f8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x148>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a35      	ldr	r2, [pc, #212]	; (8004e04 <HAL_TIM_PWM_Start+0x1fc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x148>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <HAL_TIM_PWM_Start+0x200>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x148>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <HAL_TIM_PWM_Start+0x204>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x148>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a31      	ldr	r2, [pc, #196]	; (8004e10 <HAL_TIM_PWM_Start+0x208>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x14c>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_TIM_PWM_Start+0x14e>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a23      	ldr	r2, [pc, #140]	; (8004dfc <HAL_TIM_PWM_Start+0x1f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d018      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_TIM_PWM_Start+0x20c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <HAL_TIM_PWM_Start+0x210>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1a      	ldr	r2, [pc, #104]	; (8004e00 <HAL_TIM_PWM_Start+0x1f8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIM_PWM_Start+0x1fc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_PWM_Start+0x1a8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_TIM_PWM_Start+0x208>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d115      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_TIM_PWM_Start+0x214>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d015      	beq.n	8004dee <HAL_TIM_PWM_Start+0x1e6>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc8:	d011      	beq.n	8004dee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	e008      	b.n	8004dee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40015000 	.word	0x40015000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	00010007 	.word	0x00010007

08004e20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 fc58 	bl	80066e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <HAL_TIM_PWM_Stop+0x120>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_PWM_Stop+0x54>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_TIM_PWM_Stop+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_PWM_Stop+0x54>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <HAL_TIM_PWM_Stop+0x128>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_PWM_Stop+0x54>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3c      	ldr	r2, [pc, #240]	; (8004f4c <HAL_TIM_PWM_Stop+0x12c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_PWM_Stop+0x54>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <HAL_TIM_PWM_Stop+0x130>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_PWM_Stop+0x54>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_TIM_PWM_Stop+0x134>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_PWM_Stop+0x58>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_TIM_PWM_Stop+0x5a>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_TIM_PWM_Stop+0x8e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	f240 4344 	movw	r3, #1092	; 0x444
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <HAL_TIM_PWM_Stop+0x8e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_TIM_PWM_Stop+0xbe>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <HAL_TIM_PWM_Stop+0xbe>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Stop+0xce>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	e023      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x116>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Stop+0xde>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efc:	e01b      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x116>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_PWM_Stop+0xee>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	e013      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x116>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Stop+0xfe>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x116>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Stop+0x10e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2c:	e003      	b.n	8004f36 <HAL_TIM_PWM_Stop+0x116>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40015000 	.word	0x40015000

08004f58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e049      	b.n	8004ffe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f841 	bl	8005006 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fe44 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0x1e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e023      	b.n	8005082 <HAL_TIM_IC_Start_IT+0x66>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x2e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e01b      	b.n	8005082 <HAL_TIM_IC_Start_IT+0x66>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x3e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e013      	b.n	8005082 <HAL_TIM_IC_Start_IT+0x66>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x4e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e00b      	b.n	8005082 <HAL_TIM_IC_Start_IT+0x66>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b10      	cmp	r3, #16
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x5e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e003      	b.n	8005082 <HAL_TIM_IC_Start_IT+0x66>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005080:	b2db      	uxtb	r3, r3
 8005082:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_TIM_IC_Start_IT+0x78>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e013      	b.n	80050bc <HAL_TIM_IC_Start_IT+0xa0>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IC_Start_IT+0x88>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e00b      	b.n	80050bc <HAL_TIM_IC_Start_IT+0xa0>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x98>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e003      	b.n	80050bc <HAL_TIM_IC_Start_IT+0xa0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050be:	7bbb      	ldrb	r3, [r7, #14]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d102      	bne.n	80050ca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c4:	7b7b      	ldrb	r3, [r7, #13]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0dd      	b.n	800528a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0xc2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050dc:	e023      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x10a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0xd2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	e01b      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x10a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xe2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050fc:	e013      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x10a>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xf2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800510c:	e00b      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x10a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b10      	cmp	r3, #16
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0x102>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	e003      	b.n	8005126 <HAL_TIM_IC_Start_IT+0x10a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <HAL_TIM_IC_Start_IT+0x11a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	e013      	b.n	800515e <HAL_TIM_IC_Start_IT+0x142>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0x12a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	e00b      	b.n	800515e <HAL_TIM_IC_Start_IT+0x142>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x13a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005154:	e003      	b.n	800515e <HAL_TIM_IC_Start_IT+0x142>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d841      	bhi.n	80051e8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_TIM_IC_Start_IT+0x150>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051e9 	.word	0x080051e9
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051e9 	.word	0x080051e9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051d7 	.word	0x080051d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0202 	orr.w	r2, r2, #2
 80051ae:	60da      	str	r2, [r3, #12]
      break;
 80051b0:	e01d      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0204 	orr.w	r2, r2, #4
 80051c0:	60da      	str	r2, [r3, #12]
      break;
 80051c2:	e014      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	60da      	str	r2, [r3, #12]
      break;
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0210 	orr.w	r2, r2, #16
 80051e4:	60da      	str	r2, [r3, #12]
      break;
 80051e6:	e002      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d149      	bne.n	8005288 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fa73 	bl	80066e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <HAL_TIM_IC_Start_IT+0x278>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d018      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <HAL_TIM_IC_Start_IT+0x27c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1d      	ldr	r2, [pc, #116]	; (800529c <HAL_TIM_IC_Start_IT+0x280>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <HAL_TIM_IC_Start_IT+0x284>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <HAL_TIM_IC_Start_IT+0x288>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_IC_Start_IT+0x22c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d115      	bne.n	8005274 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <HAL_TIM_IC_Start_IT+0x290>)
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d015      	beq.n	8005286 <HAL_TIM_IC_Start_IT+0x26a>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d011      	beq.n	8005286 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	e008      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e000      	b.n	8005288 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40015000 	.word	0x40015000
 80052ac:	00010007 	.word	0x00010007

080052b0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d841      	bhi.n	8005348 <HAL_TIM_IC_Stop_IT+0x98>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_TIM_IC_Stop_IT+0x1c>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005349 	.word	0x08005349
 80052d4:	08005349 	.word	0x08005349
 80052d8:	08005349 	.word	0x08005349
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005349 	.word	0x08005349
 80052e4:	08005349 	.word	0x08005349
 80052e8:	08005349 	.word	0x08005349
 80052ec:	08005325 	.word	0x08005325
 80052f0:	08005349 	.word	0x08005349
 80052f4:	08005349 	.word	0x08005349
 80052f8:	08005349 	.word	0x08005349
 80052fc:	08005337 	.word	0x08005337
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0202 	bic.w	r2, r2, #2
 800530e:	60da      	str	r2, [r3, #12]
      break;
 8005310:	e01d      	b.n	800534e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0204 	bic.w	r2, r2, #4
 8005320:	60da      	str	r2, [r3, #12]
      break;
 8005322:	e014      	b.n	800534e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0208 	bic.w	r2, r2, #8
 8005332:	60da      	str	r2, [r3, #12]
      break;
 8005334:	e00b      	b.n	800534e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0210 	bic.w	r2, r2, #16
 8005344:	60da      	str	r2, [r3, #12]
      break;
 8005346:	e002      	b.n	800534e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      break;
 800534c:	bf00      	nop
  }

  if (status == HAL_OK)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d166      	bne.n	8005422 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f9c3 	bl	80066e8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	f241 1311 	movw	r3, #4369	; 0x1111
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <HAL_TIM_IC_Stop_IT+0xe2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	f240 4344 	movw	r3, #1092	; 0x444
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <HAL_TIM_IC_Stop_IT+0xe2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_IC_Stop_IT+0xf2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	e023      	b.n	80053ea <HAL_TIM_IC_Stop_IT+0x13a>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_IC_Stop_IT+0x102>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b0:	e01b      	b.n	80053ea <HAL_TIM_IC_Stop_IT+0x13a>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_IC_Stop_IT+0x112>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	e013      	b.n	80053ea <HAL_TIM_IC_Stop_IT+0x13a>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_IC_Stop_IT+0x122>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053d0:	e00b      	b.n	80053ea <HAL_TIM_IC_Stop_IT+0x13a>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_IC_Stop_IT+0x132>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e0:	e003      	b.n	80053ea <HAL_TIM_IC_Stop_IT+0x13a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_IC_Stop_IT+0x14a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f8:	e013      	b.n	8005422 <HAL_TIM_IC_Stop_IT+0x172>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Stop_IT+0x15a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005408:	e00b      	b.n	8005422 <HAL_TIM_IC_Stop_IT+0x172>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d104      	bne.n	800541a <HAL_TIM_IC_Stop_IT+0x16a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005418:	e003      	b.n	8005422 <HAL_TIM_IC_Stop_IT+0x172>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd f8de 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fbb6 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fbbd 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd f8b4 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb8c 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb93 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd f88a 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb62 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb69 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fd f860 	bl	8002630 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb38 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb3f 	bl	8005bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fa1c 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 f9c8 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 f9bb 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10e      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 faed 	bl	8005c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b20      	cmp	r3, #32
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0220 	mvn.w	r2, #32
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 f97b 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005684:	2302      	movs	r3, #2
 8005686:	e088      	b.n	800579a <HAL_TIM_IC_ConfigChannel+0x130>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11b      	bne.n	80056ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80056a6:	f000 fe61 	bl	800636c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 020c 	bic.w	r2, r2, #12
 80056b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6999      	ldr	r1, [r3, #24]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	619a      	str	r2, [r3, #24]
 80056cc:	e060      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d11c      	bne.n	800570e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056e4:	f000 fedf 	bl	80064a6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
 800570c:	e040      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005724:	f000 ff2c 	bl	8006580 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 020c 	bic.w	r2, r2, #12
 8005736:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69d9      	ldr	r1, [r3, #28]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	61da      	str	r2, [r3, #28]
 800574a:	e021      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d11c      	bne.n	800578c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005762:	f000 ff49 	bl	80065f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005774:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	61da      	str	r2, [r3, #28]
 800578a:	e001      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057be:	2302      	movs	r3, #2
 80057c0:	e0ff      	b.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b14      	cmp	r3, #20
 80057ce:	f200 80f0 	bhi.w	80059b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	080059b3 	.word	0x080059b3
 80057e0:	080059b3 	.word	0x080059b3
 80057e4:	080059b3 	.word	0x080059b3
 80057e8:	0800586d 	.word	0x0800586d
 80057ec:	080059b3 	.word	0x080059b3
 80057f0:	080059b3 	.word	0x080059b3
 80057f4:	080059b3 	.word	0x080059b3
 80057f8:	080058af 	.word	0x080058af
 80057fc:	080059b3 	.word	0x080059b3
 8005800:	080059b3 	.word	0x080059b3
 8005804:	080059b3 	.word	0x080059b3
 8005808:	080058ef 	.word	0x080058ef
 800580c:	080059b3 	.word	0x080059b3
 8005810:	080059b3 	.word	0x080059b3
 8005814:	080059b3 	.word	0x080059b3
 8005818:	08005931 	.word	0x08005931
 800581c:	080059b3 	.word	0x080059b3
 8005820:	080059b3 	.word	0x080059b3
 8005824:	080059b3 	.word	0x080059b3
 8005828:	08005971 	.word	0x08005971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fa94 	bl	8005d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0208 	orr.w	r2, r2, #8
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0204 	bic.w	r2, r2, #4
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	619a      	str	r2, [r3, #24]
      break;
 800586a:	e0a5      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fb0e 	bl	8005e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	619a      	str	r2, [r3, #24]
      break;
 80058ac:	e084      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fb81 	bl	8005fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0208 	orr.w	r2, r2, #8
 80058c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0204 	bic.w	r2, r2, #4
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	61da      	str	r2, [r3, #28]
      break;
 80058ec:	e064      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fbf3 	bl	80060e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	021a      	lsls	r2, r3, #8
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	61da      	str	r2, [r3, #28]
      break;
 800592e:	e043      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc42 	bl	80061c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0208 	orr.w	r2, r2, #8
 800594a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0204 	bic.w	r2, r2, #4
 800595a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800596e:	e023      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc8c 	bl	8006294 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059b0:	e002      	b.n	80059b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
      break;
 80059b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop

080059cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e0b6      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x18a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a24:	d03e      	beq.n	8005aa4 <HAL_TIM_ConfigClockSource+0xd8>
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2a:	f200 8087 	bhi.w	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	f000 8086 	beq.w	8005b42 <HAL_TIM_ConfigClockSource+0x176>
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d87f      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a3c:	2b70      	cmp	r3, #112	; 0x70
 8005a3e:	d01a      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0xaa>
 8005a40:	2b70      	cmp	r3, #112	; 0x70
 8005a42:	d87b      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a44:	2b60      	cmp	r3, #96	; 0x60
 8005a46:	d050      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x11e>
 8005a48:	2b60      	cmp	r3, #96	; 0x60
 8005a4a:	d877      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a4c:	2b50      	cmp	r3, #80	; 0x50
 8005a4e:	d03c      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0xfe>
 8005a50:	2b50      	cmp	r3, #80	; 0x50
 8005a52:	d873      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d058      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x13e>
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d86f      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d064      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15e>
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d86b      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d060      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15e>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d867      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15e>
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d05a      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15e>
 8005a74:	e062      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a86:	f000 fe0f 	bl	80066a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	609a      	str	r2, [r3, #8]
      break;
 8005aa2:	e04f      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab4:	f000 fdf8 	bl	80066a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac6:	609a      	str	r2, [r3, #8]
      break;
 8005ac8:	e03c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 fcb6 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2150      	movs	r1, #80	; 0x50
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fdc5 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e02c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 fd12 	bl	8006520 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2160      	movs	r1, #96	; 0x60
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fdb5 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b08:	e01c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 fc96 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2140      	movs	r1, #64	; 0x40
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fda5 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e00c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f000 fd9c 	bl	8006672 <TIM_ITRx_SetConfig>
      break;
 8005b3a:	e003      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d831      	bhi.n	8005bd8 <HAL_TIM_ReadCapturedValue+0x78>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005bb1 	.word	0x08005bb1
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bd9 	.word	0x08005bd9
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005bd9 	.word	0x08005bd9
 8005bac:	08005bcf 	.word	0x08005bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	60fb      	str	r3, [r7, #12]

      break;
 8005bb8:	e00f      	b.n	8005bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	60fb      	str	r3, [r7, #12]

      break;
 8005bc2:	e00a      	b.n	8005bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	60fb      	str	r3, [r7, #12]

      break;
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	60fb      	str	r3, [r7, #12]

      break;
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005bd8:	bf00      	nop
  }

  return tmpreg;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a42      	ldr	r2, [pc, #264]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3e      	ldr	r2, [pc, #248]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3d      	ldr	r2, [pc, #244]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3c      	ldr	r2, [pc, #240]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01f      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d01b      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2e      	ldr	r2, [pc, #184]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d017      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x9a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <TIM_Base_SetConfig+0x100>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_Base_SetConfig+0x100>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_Base_SetConfig+0x100>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_Base_SetConfig+0x100>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0x100>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d103      	bne.n	8005d2c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	615a      	str	r2, [r3, #20]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40015000 	.word	0x40015000
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0201 	bic.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0302 	bic.w	r3, r3, #2
 8005dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <TIM_OC1_SetConfig+0x11c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d013      	beq.n	8005de8 <TIM_OC1_SetConfig+0x88>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <TIM_OC1_SetConfig+0x120>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00f      	beq.n	8005de8 <TIM_OC1_SetConfig+0x88>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <TIM_OC1_SetConfig+0x124>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00b      	beq.n	8005de8 <TIM_OC1_SetConfig+0x88>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <TIM_OC1_SetConfig+0x128>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d007      	beq.n	8005de8 <TIM_OC1_SetConfig+0x88>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <TIM_OC1_SetConfig+0x12c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC1_SetConfig+0x88>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <TIM_OC1_SetConfig+0x130>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10c      	bne.n	8005e02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0308 	bic.w	r3, r3, #8
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <TIM_OC1_SetConfig+0x11c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <TIM_OC1_SetConfig+0xd2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <TIM_OC1_SetConfig+0x120>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00f      	beq.n	8005e32 <TIM_OC1_SetConfig+0xd2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <TIM_OC1_SetConfig+0x124>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <TIM_OC1_SetConfig+0xd2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <TIM_OC1_SetConfig+0x128>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <TIM_OC1_SetConfig+0xd2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <TIM_OC1_SetConfig+0x12c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_OC1_SetConfig+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <TIM_OC1_SetConfig+0x130>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d111      	bne.n	8005e56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800
 8005e90:	40015000 	.word	0x40015000

08005e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0210 	bic.w	r2, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <TIM_OC2_SetConfig+0x110>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC2_SetConfig+0x74>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2b      	ldr	r2, [pc, #172]	; (8005fa8 <TIM_OC2_SetConfig+0x114>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC2_SetConfig+0x74>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <TIM_OC2_SetConfig+0x118>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10d      	bne.n	8005f24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <TIM_OC2_SetConfig+0x110>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <TIM_OC2_SetConfig+0xc0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <TIM_OC2_SetConfig+0x114>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <TIM_OC2_SetConfig+0xc0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <TIM_OC2_SetConfig+0x11c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00b      	beq.n	8005f54 <TIM_OC2_SetConfig+0xc0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <TIM_OC2_SetConfig+0x120>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_OC2_SetConfig+0xc0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <TIM_OC2_SetConfig+0x124>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_OC2_SetConfig+0xc0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <TIM_OC2_SetConfig+0x118>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d113      	bne.n	8005f7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f5a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f62:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40013400 	.word	0x40013400
 8005fac:	40015000 	.word	0x40015000
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <TIM_OC3_SetConfig+0x10c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_OC3_SetConfig+0x72>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <TIM_OC3_SetConfig+0x110>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_OC3_SetConfig+0x72>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <TIM_OC3_SetConfig+0x114>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10d      	bne.n	800604a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006048:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <TIM_OC3_SetConfig+0x10c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_OC3_SetConfig+0xbe>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <TIM_OC3_SetConfig+0x110>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_OC3_SetConfig+0xbe>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <TIM_OC3_SetConfig+0x118>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_OC3_SetConfig+0xbe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <TIM_OC3_SetConfig+0x11c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_OC3_SetConfig+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <TIM_OC3_SetConfig+0x120>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_OC3_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <TIM_OC3_SetConfig+0x114>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d113      	bne.n	80060a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	621a      	str	r2, [r3, #32]
}
 80060bc:	bf00      	nop
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40015000 	.word	0x40015000
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800612e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	031b      	lsls	r3, r3, #12
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1a      	ldr	r2, [pc, #104]	; (80061a8 <TIM_OC4_SetConfig+0xc8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <TIM_OC4_SetConfig+0x8c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <TIM_OC4_SetConfig+0xcc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_OC4_SetConfig+0x8c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_OC4_SetConfig+0xd0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <TIM_OC4_SetConfig+0x8c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC4_SetConfig+0xd4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC4_SetConfig+0x8c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC4_SetConfig+0xd8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC4_SetConfig+0x8c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC4_SetConfig+0xdc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d109      	bne.n	8006180 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	019b      	lsls	r3, r3, #6
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800
 80061bc:	40015000 	.word	0x40015000

080061c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a19      	ldr	r2, [pc, #100]	; (800627c <TIM_OC5_SetConfig+0xbc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <TIM_OC5_SetConfig+0x82>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <TIM_OC5_SetConfig+0xc0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00f      	beq.n	8006242 <TIM_OC5_SetConfig+0x82>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a17      	ldr	r2, [pc, #92]	; (8006284 <TIM_OC5_SetConfig+0xc4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00b      	beq.n	8006242 <TIM_OC5_SetConfig+0x82>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <TIM_OC5_SetConfig+0xc8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d007      	beq.n	8006242 <TIM_OC5_SetConfig+0x82>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a15      	ldr	r2, [pc, #84]	; (800628c <TIM_OC5_SetConfig+0xcc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d003      	beq.n	8006242 <TIM_OC5_SetConfig+0x82>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <TIM_OC5_SetConfig+0xd0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d109      	bne.n	8006256 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800
 8006290:	40015000 	.word	0x40015000

08006294 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	051b      	lsls	r3, r3, #20
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <TIM_OC6_SetConfig+0xc0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <TIM_OC6_SetConfig+0x84>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a19      	ldr	r2, [pc, #100]	; (8006358 <TIM_OC6_SetConfig+0xc4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <TIM_OC6_SetConfig+0x84>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <TIM_OC6_SetConfig+0xc8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_OC6_SetConfig+0x84>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a17      	ldr	r2, [pc, #92]	; (8006360 <TIM_OC6_SetConfig+0xcc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC6_SetConfig+0x84>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a16      	ldr	r2, [pc, #88]	; (8006364 <TIM_OC6_SetConfig+0xd0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC6_SetConfig+0x84>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <TIM_OC6_SetConfig+0xd4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d109      	bne.n	800632c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800631e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	029b      	lsls	r3, r3, #10
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40013400 	.word	0x40013400
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800
 8006368:	40015000 	.word	0x40015000

0800636c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f023 0201 	bic.w	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <TIM_TI1_SetConfig+0xc4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a0:	d013      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a23      	ldr	r2, [pc, #140]	; (8006434 <TIM_TI1_SetConfig+0xc8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <TIM_TI1_SetConfig+0xcc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a21      	ldr	r2, [pc, #132]	; (800643c <TIM_TI1_SetConfig+0xd0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <TIM_TI1_SetConfig+0xd4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_TI1_SetConfig+0x5e>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <TIM_TI1_SetConfig+0xd8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d101      	bne.n	80063ce <TIM_TI1_SetConfig+0x62>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <TIM_TI1_SetConfig+0x64>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e003      	b.n	80063ee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f023 030a 	bic.w	r3, r3, #10
 8006408:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f003 030a 	and.w	r3, r3, #10
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40015000 	.word	0x40015000

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 030a 	bic.w	r3, r3, #10
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	031b      	lsls	r3, r3, #12
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	621a      	str	r2, [r3, #32]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f023 0210 	bic.w	r2, r3, #16
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800654a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	031b      	lsls	r3, r3, #12
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	031b      	lsls	r3, r3, #12
 800663c:	b29b      	uxth	r3, r3
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800664a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	f043 0307 	orr.w	r3, r3, #7
 8006694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	2201      	movs	r2, #1
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	43db      	mvns	r3, r3
 800670a:	401a      	ands	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	fa01 f303 	lsl.w	r3, r1, r3
 8006720:	431a      	orrs	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e06d      	b.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a30      	ldr	r2, [pc, #192]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2f      	ldr	r2, [pc, #188]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2d      	ldr	r2, [pc, #180]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d01d      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d018      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a11      	ldr	r2, [pc, #68]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10c      	bne.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4313      	orrs	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40015000 	.word	0x40015000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40014000 	.word	0x40014000

0800684c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006864:	2302      	movs	r3, #2
 8006866:	e06a      	b.n	800693e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d115      	bne.n	800692c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	051b      	lsls	r3, r3, #20
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40015000 	.word	0x40015000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e040      	b.n	8006a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb f9e2 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	; 0x24
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb76 	bl	80070c4 <UART_SetConfig>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e022      	b.n	8006a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fd3e 	bl	800746c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fdc5 	bl	80075b0 <UART_CheckIdleState>
 8006a26:	4603      	mov	r3, r0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d132      	bne.n	8006aae <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Receive_IT+0x24>
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e02b      	b.n	8006ab0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d018      	beq.n	8006a9e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	69f9      	ldr	r1, [r7, #28]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fe93 	bl	80077d0 <UART_Start_Receive_IT>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	e000      	b.n	8006ab0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b0ba      	sub	sp, #232	; 0xe8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ade:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ae2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d115      	bne.n	8006b20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00f      	beq.n	8006b20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 82ab 	beq.w	800706c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
      }
      return;
 8006b1e:	e2a5      	b.n	800706c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8117 	beq.w	8006d58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b3a:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <HAL_UART_IRQHandler+0x298>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 810a 	beq.w	8006d58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d011      	beq.n	8006b74 <HAL_UART_IRQHandler+0xbc>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d011      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xec>
 8006b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2202      	movs	r2, #2
 8006b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9a:	f043 0204 	orr.w	r2, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d011      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x11c>
 8006bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bca:	f043 0202 	orr.w	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c06:	f043 0208 	orr.w	r2, r3, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_UART_IRQHandler+0x18a>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8211 	beq.w	8007070 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d005      	beq.n	8006c9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d04f      	beq.n	8006d3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fe5e 	bl	800795c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d141      	bne.n	8006d32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1d9      	bne.n	8006cae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d013      	beq.n	8006d2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d06:	4a13      	ldr	r2, [pc, #76]	; (8006d54 <HAL_UART_IRQHandler+0x29c>)
 8006d08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb ff95 	bl	8002c3e <HAL_DMA_Abort_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d017      	beq.n	8006d4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e00f      	b.n	8006d4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9b4 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	e00b      	b.n	8006d4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9b0 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d38:	e007      	b.n	8006d4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9ac 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006d48:	e192      	b.n	8007070 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4a:	bf00      	nop
    return;
 8006d4c:	e190      	b.n	8007070 <HAL_UART_IRQHandler+0x5b8>
 8006d4e:	bf00      	nop
 8006d50:	04000120 	.word	0x04000120
 8006d54:	08007a25 	.word	0x08007a25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 814b 	bne.w	8006ff8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8144 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 813d 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2210      	movs	r2, #16
 8006d84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	f040 80b5 	bne.w	8006f00 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006da2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8164 	beq.w	8007074 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006db6:	429a      	cmp	r2, r3
 8006db8:	f080 815c 	bcs.w	8007074 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	f000 8086 	beq.w	8006ede <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1da      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e1      	bne.n	8006e1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e3      	bne.n	8006e58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e4      	bne.n	8006e9e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fb fe77 	bl	8002bcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8d7 	bl	80070ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006efe:	e0b9      	b.n	8007074 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80ab 	beq.w	8007078 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80a6 	beq.w	8007078 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e4      	bne.n	8006f2c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	623b      	str	r3, [r7, #32]
   return(result);
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f86:	633a      	str	r2, [r7, #48]	; 0x30
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e3      	bne.n	8006f62 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	69b9      	ldr	r1, [r7, #24]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f85b 	bl	80070ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ff6:	e03f      	b.n	8007078 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <HAL_UART_IRQHandler+0x56a>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 feea 	bl	8007df4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007020:	e02d      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800702e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01c      	beq.n	800707c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
    }
    return;
 800704a:	e017      	b.n	800707c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800704c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d012      	beq.n	800707e <HAL_UART_IRQHandler+0x5c6>
 8007058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fcf3 	bl	8007a50 <UART_EndTransmit_IT>
    return;
 800706a:	e008      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
      return;
 800706c:	bf00      	nop
 800706e:	e006      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007070:	bf00      	nop
 8007072:	e004      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007074:	bf00      	nop
 8007076:	e002      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007078:	bf00      	nop
 800707a:	e000      	b.n	800707e <HAL_UART_IRQHandler+0x5c6>
    return;
 800707c:	bf00      	nop
  }

}
 800707e:	37e8      	adds	r7, #232	; 0xe8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b92      	ldr	r3, [pc, #584]	; (8007338 <UART_SetConfig+0x274>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a80      	ldr	r2, [pc, #512]	; (800733c <UART_SetConfig+0x278>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d120      	bne.n	8007182 <UART_SetConfig+0xbe>
 8007140:	4b7f      	ldr	r3, [pc, #508]	; (8007340 <UART_SetConfig+0x27c>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	2b03      	cmp	r3, #3
 800714a:	d817      	bhi.n	800717c <UART_SetConfig+0xb8>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x90>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007165 	.word	0x08007165
 8007158:	08007171 	.word	0x08007171
 800715c:	08007177 	.word	0x08007177
 8007160:	0800716b 	.word	0x0800716b
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e0b5      	b.n	80072d6 <UART_SetConfig+0x212>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e0b2      	b.n	80072d6 <UART_SetConfig+0x212>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e0af      	b.n	80072d6 <UART_SetConfig+0x212>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e0ac      	b.n	80072d6 <UART_SetConfig+0x212>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e0a9      	b.n	80072d6 <UART_SetConfig+0x212>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6f      	ldr	r2, [pc, #444]	; (8007344 <UART_SetConfig+0x280>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d124      	bne.n	80071d6 <UART_SetConfig+0x112>
 800718c:	4b6c      	ldr	r3, [pc, #432]	; (8007340 <UART_SetConfig+0x27c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007198:	d011      	beq.n	80071be <UART_SetConfig+0xfa>
 800719a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800719e:	d817      	bhi.n	80071d0 <UART_SetConfig+0x10c>
 80071a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a4:	d011      	beq.n	80071ca <UART_SetConfig+0x106>
 80071a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071aa:	d811      	bhi.n	80071d0 <UART_SetConfig+0x10c>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <UART_SetConfig+0xf4>
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d006      	beq.n	80071c4 <UART_SetConfig+0x100>
 80071b6:	e00b      	b.n	80071d0 <UART_SetConfig+0x10c>
 80071b8:	2300      	movs	r3, #0
 80071ba:	77fb      	strb	r3, [r7, #31]
 80071bc:	e08b      	b.n	80072d6 <UART_SetConfig+0x212>
 80071be:	2302      	movs	r3, #2
 80071c0:	77fb      	strb	r3, [r7, #31]
 80071c2:	e088      	b.n	80072d6 <UART_SetConfig+0x212>
 80071c4:	2304      	movs	r3, #4
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e085      	b.n	80072d6 <UART_SetConfig+0x212>
 80071ca:	2308      	movs	r3, #8
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e082      	b.n	80072d6 <UART_SetConfig+0x212>
 80071d0:	2310      	movs	r3, #16
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e07f      	b.n	80072d6 <UART_SetConfig+0x212>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a5b      	ldr	r2, [pc, #364]	; (8007348 <UART_SetConfig+0x284>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d124      	bne.n	800722a <UART_SetConfig+0x166>
 80071e0:	4b57      	ldr	r3, [pc, #348]	; (8007340 <UART_SetConfig+0x27c>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80071e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071ec:	d011      	beq.n	8007212 <UART_SetConfig+0x14e>
 80071ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071f2:	d817      	bhi.n	8007224 <UART_SetConfig+0x160>
 80071f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071f8:	d011      	beq.n	800721e <UART_SetConfig+0x15a>
 80071fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071fe:	d811      	bhi.n	8007224 <UART_SetConfig+0x160>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <UART_SetConfig+0x148>
 8007204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007208:	d006      	beq.n	8007218 <UART_SetConfig+0x154>
 800720a:	e00b      	b.n	8007224 <UART_SetConfig+0x160>
 800720c:	2300      	movs	r3, #0
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e061      	b.n	80072d6 <UART_SetConfig+0x212>
 8007212:	2302      	movs	r3, #2
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e05e      	b.n	80072d6 <UART_SetConfig+0x212>
 8007218:	2304      	movs	r3, #4
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e05b      	b.n	80072d6 <UART_SetConfig+0x212>
 800721e:	2308      	movs	r3, #8
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e058      	b.n	80072d6 <UART_SetConfig+0x212>
 8007224:	2310      	movs	r3, #16
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e055      	b.n	80072d6 <UART_SetConfig+0x212>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a47      	ldr	r2, [pc, #284]	; (800734c <UART_SetConfig+0x288>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d124      	bne.n	800727e <UART_SetConfig+0x1ba>
 8007234:	4b42      	ldr	r3, [pc, #264]	; (8007340 <UART_SetConfig+0x27c>)
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800723c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007240:	d011      	beq.n	8007266 <UART_SetConfig+0x1a2>
 8007242:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007246:	d817      	bhi.n	8007278 <UART_SetConfig+0x1b4>
 8007248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724c:	d011      	beq.n	8007272 <UART_SetConfig+0x1ae>
 800724e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007252:	d811      	bhi.n	8007278 <UART_SetConfig+0x1b4>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <UART_SetConfig+0x19c>
 8007258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800725c:	d006      	beq.n	800726c <UART_SetConfig+0x1a8>
 800725e:	e00b      	b.n	8007278 <UART_SetConfig+0x1b4>
 8007260:	2300      	movs	r3, #0
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e037      	b.n	80072d6 <UART_SetConfig+0x212>
 8007266:	2302      	movs	r3, #2
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e034      	b.n	80072d6 <UART_SetConfig+0x212>
 800726c:	2304      	movs	r3, #4
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e031      	b.n	80072d6 <UART_SetConfig+0x212>
 8007272:	2308      	movs	r3, #8
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e02e      	b.n	80072d6 <UART_SetConfig+0x212>
 8007278:	2310      	movs	r3, #16
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e02b      	b.n	80072d6 <UART_SetConfig+0x212>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a33      	ldr	r2, [pc, #204]	; (8007350 <UART_SetConfig+0x28c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d124      	bne.n	80072d2 <UART_SetConfig+0x20e>
 8007288:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <UART_SetConfig+0x27c>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007294:	d011      	beq.n	80072ba <UART_SetConfig+0x1f6>
 8007296:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800729a:	d817      	bhi.n	80072cc <UART_SetConfig+0x208>
 800729c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a0:	d011      	beq.n	80072c6 <UART_SetConfig+0x202>
 80072a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a6:	d811      	bhi.n	80072cc <UART_SetConfig+0x208>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <UART_SetConfig+0x1f0>
 80072ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b0:	d006      	beq.n	80072c0 <UART_SetConfig+0x1fc>
 80072b2:	e00b      	b.n	80072cc <UART_SetConfig+0x208>
 80072b4:	2300      	movs	r3, #0
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e00d      	b.n	80072d6 <UART_SetConfig+0x212>
 80072ba:	2302      	movs	r3, #2
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e00a      	b.n	80072d6 <UART_SetConfig+0x212>
 80072c0:	2304      	movs	r3, #4
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e007      	b.n	80072d6 <UART_SetConfig+0x212>
 80072c6:	2308      	movs	r3, #8
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e004      	b.n	80072d6 <UART_SetConfig+0x212>
 80072cc:	2310      	movs	r3, #16
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e001      	b.n	80072d6 <UART_SetConfig+0x212>
 80072d2:	2310      	movs	r3, #16
 80072d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072de:	d16b      	bne.n	80073b8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d838      	bhi.n	8007358 <UART_SetConfig+0x294>
 80072e6:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <UART_SetConfig+0x228>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007321 	.word	0x08007321
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007327 	.word	0x08007327
 8007300:	08007359 	.word	0x08007359
 8007304:	08007359 	.word	0x08007359
 8007308:	08007359 	.word	0x08007359
 800730c:	0800732f 	.word	0x0800732f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007310:	f7fd f8bc 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8007314:	61b8      	str	r0, [r7, #24]
        break;
 8007316:	e024      	b.n	8007362 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fd f8da 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 800731c:	61b8      	str	r0, [r7, #24]
        break;
 800731e:	e020      	b.n	8007362 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007320:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <UART_SetConfig+0x290>)
 8007322:	61bb      	str	r3, [r7, #24]
        break;
 8007324:	e01d      	b.n	8007362 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007326:	f7fd f83b 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800732a:	61b8      	str	r0, [r7, #24]
        break;
 800732c:	e019      	b.n	8007362 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007332:	61bb      	str	r3, [r7, #24]
        break;
 8007334:	e015      	b.n	8007362 <UART_SetConfig+0x29e>
 8007336:	bf00      	nop
 8007338:	efff69f3 	.word	0xefff69f3
 800733c:	40013800 	.word	0x40013800
 8007340:	40021000 	.word	0x40021000
 8007344:	40004400 	.word	0x40004400
 8007348:	40004800 	.word	0x40004800
 800734c:	40004c00 	.word	0x40004c00
 8007350:	40005000 	.word	0x40005000
 8007354:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	77bb      	strb	r3, [r7, #30]
        break;
 8007360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d073      	beq.n	8007450 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	441a      	add	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d916      	bls.n	80073b2 <UART_SetConfig+0x2ee>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738a:	d212      	bcs.n	80073b2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f023 030f 	bic.w	r3, r3, #15
 8007394:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	89fb      	ldrh	r3, [r7, #14]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	89fa      	ldrh	r2, [r7, #14]
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e04e      	b.n	8007450 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	77bb      	strb	r3, [r7, #30]
 80073b6:	e04b      	b.n	8007450 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b8:	7ffb      	ldrb	r3, [r7, #31]
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d827      	bhi.n	800740e <UART_SetConfig+0x34a>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0x300>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	0800740f 	.word	0x0800740f
 80073d4:	080073ff 	.word	0x080073ff
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	0800740f 	.word	0x0800740f
 80073e0:	0800740f 	.word	0x0800740f
 80073e4:	08007407 	.word	0x08007407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e8:	f7fd f850 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 80073ec:	61b8      	str	r0, [r7, #24]
        break;
 80073ee:	e013      	b.n	8007418 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f0:	f7fd f86e 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 80073f4:	61b8      	str	r0, [r7, #24]
        break;
 80073f6:	e00f      	b.n	8007418 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f8:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <UART_SetConfig+0x3a4>)
 80073fa:	61bb      	str	r3, [r7, #24]
        break;
 80073fc:	e00c      	b.n	8007418 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fc ffcf 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8007402:	61b8      	str	r0, [r7, #24]
        break;
 8007404:	e008      	b.n	8007418 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740a:	61bb      	str	r3, [r7, #24]
        break;
 800740c:	e004      	b.n	8007418 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77bb      	strb	r3, [r7, #30]
        break;
 8007416:	bf00      	nop
    }

    if (pclk != 0U)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d018      	beq.n	8007450 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085a      	lsrs	r2, r3, #1
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	441a      	add	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d909      	bls.n	800744c <UART_SetConfig+0x388>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743e:	d205      	bcs.n	800744c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	b29a      	uxth	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e001      	b.n	8007450 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800745c:	7fbb      	ldrb	r3, [r7, #30]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	007a1200 	.word	0x007a1200

0800746c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756a:	d10a      	bne.n	8007582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	; 0x60
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c0:	f7fb f9f2 	bl	80029a8 <HAL_GetTick>
 80075c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d12e      	bne.n	8007632 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f88c 	bl	8007700 <UART_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d021      	beq.n	8007632 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007602:	653b      	str	r3, [r7, #80]	; 0x50
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760c:	647b      	str	r3, [r7, #68]	; 0x44
 800760e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800761a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e062      	b.n	80076f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b04      	cmp	r3, #4
 800763e:	d149      	bne.n	80076d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007648:	2200      	movs	r2, #0
 800764a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f856 	bl	8007700 <UART_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d03c      	beq.n	80076d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	623b      	str	r3, [r7, #32]
   return(result);
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800766e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007678:	633b      	str	r3, [r7, #48]	; 0x30
 800767a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800767e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e6      	bne.n	800765a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	60fb      	str	r3, [r7, #12]
   return(result);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ac:	61fa      	str	r2, [r7, #28]
 80076ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	69b9      	ldr	r1, [r7, #24]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e011      	b.n	80076f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3758      	adds	r7, #88	; 0x58
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007710:	e049      	b.n	80077a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d045      	beq.n	80077a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771a:	f7fb f945 	bl	80029a8 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	429a      	cmp	r2, r3
 8007728:	d302      	bcc.n	8007730 <UART_WaitOnFlagUntilTimeout+0x30>
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e048      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d031      	beq.n	80077a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b08      	cmp	r3, #8
 800774e:	d110      	bne.n	8007772 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2208      	movs	r2, #8
 8007756:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f8ff 	bl	800795c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2208      	movs	r2, #8
 8007762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e029      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800777c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007780:	d111      	bne.n	80077a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800778a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f8e5 	bl	800795c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e00f      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d0a6      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b097      	sub	sp, #92	; 0x5c
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	d10e      	bne.n	8007822 <UART_Start_Receive_IT+0x52>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <UART_Start_Receive_IT+0x48>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007816:	e02d      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007820:	e028      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <UART_Start_Receive_IT+0x76>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <UART_Start_Receive_IT+0x6c>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800783a:	e01b      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	227f      	movs	r2, #127	; 0x7f
 8007840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007844:	e016      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784e:	d10d      	bne.n	800786c <UART_Start_Receive_IT+0x9c>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <UART_Start_Receive_IT+0x92>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	227f      	movs	r2, #127	; 0x7f
 800785c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007860:	e008      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	223f      	movs	r2, #63	; 0x3f
 8007866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800786a:	e003      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2222      	movs	r2, #34	; 0x22
 8007880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	657b      	str	r3, [r7, #84]	; 0x54
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80078a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d107      	bne.n	80078d2 <UART_Start_Receive_IT+0x102>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a21      	ldr	r2, [pc, #132]	; (8007954 <UART_Start_Receive_IT+0x184>)
 80078ce:	669a      	str	r2, [r3, #104]	; 0x68
 80078d0:	e002      	b.n	80078d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4a20      	ldr	r2, [pc, #128]	; (8007958 <UART_Start_Receive_IT+0x188>)
 80078d6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d019      	beq.n	8007914 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80078f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_Start_Receive_IT+0x110>
 8007912:	e018      	b.n	8007946 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	613b      	str	r3, [r7, #16]
   return(result);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f043 0320 	orr.w	r3, r3, #32
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e6      	bne.n	8007914 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	375c      	adds	r7, #92	; 0x5c
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	08007c4d 	.word	0x08007c4d
 8007958:	08007aa5 	.word	0x08007aa5

0800795c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b095      	sub	sp, #84	; 0x54
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d118      	bne.n	8007a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f023 0310 	bic.w	r3, r3, #16
 80079e6:	647b      	str	r3, [r7, #68]	; 0x44
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6979      	ldr	r1, [r7, #20]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	613b      	str	r3, [r7, #16]
   return(result);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e6      	bne.n	80079d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a18:	bf00      	nop
 8007a1a:	3754      	adds	r7, #84	; 0x54
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fb28 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6c:	61fb      	str	r3, [r7, #28]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	613b      	str	r3, [r7, #16]
   return(result);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e6      	bne.n	8007a58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff faf4 	bl	8007084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9c:	bf00      	nop
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b09c      	sub	sp, #112	; 0x70
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ab2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abc:	2b22      	cmp	r3, #34	; 0x22
 8007abe:	f040 80b9 	bne.w	8007c34 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ac8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007acc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ad0:	b2d9      	uxtb	r1, r3
 8007ad2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007adc:	400a      	ands	r2, r1
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 809c 	bne.w	8007c44 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	667b      	str	r3, [r7, #100]	; 0x64
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007b60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e5      	bne.n	8007b3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d018      	beq.n	8007bc6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e6      	bne.n	8007b94 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d12e      	bne.n	8007c2c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f023 0310 	bic.w	r3, r3, #16
 8007be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	69b9      	ldr	r1, [r7, #24]
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d103      	bne.n	8007c1c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2210      	movs	r2, #16
 8007c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff fa41 	bl	80070ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c2a:	e00b      	b.n	8007c44 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fa f94f 	bl	8001ed0 <HAL_UART_RxCpltCallback>
}
 8007c32:	e007      	b.n	8007c44 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0208 	orr.w	r2, r2, #8
 8007c42:	619a      	str	r2, [r3, #24]
}
 8007c44:	bf00      	nop
 8007c46:	3770      	adds	r7, #112	; 0x70
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b09c      	sub	sp, #112	; 0x70
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	2b22      	cmp	r3, #34	; 0x22
 8007c66:	f040 80b9 	bne.w	8007ddc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007c82:	4013      	ands	r3, r2
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	1c9a      	adds	r2, r3, #2
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 809c 	bne.w	8007dec <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e6      	bne.n	8007cb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d06:	643a      	str	r2, [r7, #64]	; 0x40
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e5      	bne.n	8007ce6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d018      	beq.n	8007d6e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d12e      	bne.n	8007dd4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f023 0310 	bic.w	r3, r3, #16
 8007d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6979      	ldr	r1, [r7, #20]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	613b      	str	r3, [r7, #16]
   return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d103      	bne.n	8007dc4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff f96d 	bl	80070ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dd2:	e00b      	b.n	8007dec <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fa f87b 	bl	8001ed0 <HAL_UART_RxCpltCallback>
}
 8007dda:	e007      	b.n	8007dec <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0208 	orr.w	r2, r2, #8
 8007dea:	619a      	str	r2, [r3, #24]
}
 8007dec:	bf00      	nop
 8007dee:	3770      	adds	r7, #112	; 0x70
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
 8007e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e1e:	607b      	str	r3, [r7, #4]
  return(result);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <osKernelInitialize+0x32>
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <osKernelInitialize+0x64>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d109      	bne.n	8007e42 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e32:	603b      	str	r3, [r7, #0]
  return(result);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007e3a:	f06f 0305 	mvn.w	r3, #5
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e00c      	b.n	8007e5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <osKernelInitialize+0x64>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <osKernelInitialize+0x64>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000508 	.word	0x20000508

08007e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e76:	f3ef 8305 	mrs	r3, IPSR
 8007e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e82:	f3ef 8310 	mrs	r3, PRIMASK
 8007e86:	607b      	str	r3, [r7, #4]
  return(result);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <osKernelStart+0x32>
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <osKernelStart+0x64>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d109      	bne.n	8007eaa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e96:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <osKernelStart+0x3a>
    stat = osErrorISR;
 8007ea2:	f06f 0305 	mvn.w	r3, #5
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e00e      	b.n	8007ec8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <osKernelStart+0x64>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <osKernelStart+0x64>)
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007eb8:	f001 fd2c 	bl	8009914 <vTaskStartScheduler>
      stat = osOK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e002      	b.n	8007ec8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000508 	.word	0x20000508

08007ed8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b092      	sub	sp, #72	; 0x48
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee8:	f3ef 8305 	mrs	r3, IPSR
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 8094 	bne.w	800801e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8007efa:	623b      	str	r3, [r7, #32]
  return(result);
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f040 808d 	bne.w	800801e <osThreadNew+0x146>
 8007f04:	4b48      	ldr	r3, [pc, #288]	; (8008028 <osThreadNew+0x150>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d106      	bne.n	8007f1a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f10:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 8082 	bne.w	800801e <osThreadNew+0x146>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d07e      	beq.n	800801e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007f24:	2318      	movs	r3, #24
 8007f26:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007f28:	2300      	movs	r3, #0
 8007f2a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007f2c:	f107 031b 	add.w	r3, r7, #27
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d045      	beq.n	8007fca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <osThreadNew+0x74>
        name = attr->name;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <osThreadNew+0x9a>
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	2b38      	cmp	r3, #56	; 0x38
 8007f64:	d805      	bhi.n	8007f72 <osThreadNew+0x9a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <osThreadNew+0x9e>
        return (NULL);
 8007f72:	2300      	movs	r3, #0
 8007f74:	e054      	b.n	8008020 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	089b      	lsrs	r3, r3, #2
 8007f84:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <osThreadNew+0xd4>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2bab      	cmp	r3, #171	; 0xab
 8007f94:	d90a      	bls.n	8007fac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <osThreadNew+0xd4>
        mem = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007faa:	e010      	b.n	8007fce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10c      	bne.n	8007fce <osThreadNew+0xf6>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <osThreadNew+0xf6>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <osThreadNew+0xf6>
          mem = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc8:	e001      	b.n	8007fce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d110      	bne.n	8007ff6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fdc:	9202      	str	r2, [sp, #8]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f001 fa38 	bl	8009460 <xTaskCreateStatic>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e013      	b.n	800801e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d110      	bne.n	800801e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 fa82 	bl	8009518 <xTaskCreate>
 8008014:	4603      	mov	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d001      	beq.n	800801e <osThreadNew+0x146>
          hTask = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800801e:	697b      	ldr	r3, [r7, #20]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3738      	adds	r7, #56	; 0x38
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000508 	.word	0x20000508

0800802c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008032:	f3ef 8305 	mrs	r3, IPSR
 8008036:	60bb      	str	r3, [r7, #8]
  return(result);
 8008038:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10f      	bne.n	800805e <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	607b      	str	r3, [r7, #4]
  return(result);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <osThreadGetId+0x32>
 800804a:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <osThreadGetId+0x48>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d108      	bne.n	8008064 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008052:	f3ef 8311 	mrs	r3, BASEPRI
 8008056:	603b      	str	r3, [r7, #0]
  return(result);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <osThreadGetId+0x38>
    id = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e002      	b.n	800806a <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008064:	f002 f91e 	bl	800a2a4 <xTaskGetCurrentTaskHandle>
 8008068:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 800806a:	68fb      	ldr	r3, [r7, #12]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000508 	.word	0x20000508

08008078 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008084:	f3ef 8305 	mrs	r3, IPSR
 8008088:	617b      	str	r3, [r7, #20]
  return(result);
 800808a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10f      	bne.n	80080b0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008090:	f3ef 8310 	mrs	r3, PRIMASK
 8008094:	613b      	str	r3, [r7, #16]
  return(result);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <osThreadSuspend+0x38>
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <osThreadSuspend+0x64>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d109      	bne.n	80080b8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080a4:	f3ef 8311 	mrs	r3, BASEPRI
 80080a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80080b0:	f06f 0305 	mvn.w	r3, #5
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	e00b      	b.n	80080d0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80080be:	f06f 0303 	mvn.w	r3, #3
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	e004      	b.n	80080d0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80080ca:	69b8      	ldr	r0, [r7, #24]
 80080cc:	f001 fbac 	bl	8009828 <vTaskSuspend>
  }

  return (stat);
 80080d0:	69fb      	ldr	r3, [r7, #28]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000508 	.word	0x20000508

080080e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e8:	f3ef 8305 	mrs	r3, IPSR
 80080ec:	613b      	str	r3, [r7, #16]
  return(result);
 80080ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10f      	bne.n	8008114 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f4:	f3ef 8310 	mrs	r3, PRIMASK
 80080f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <osDelay+0x34>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <osDelay+0x58>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d109      	bne.n	800811c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008108:	f3ef 8311 	mrs	r3, BASEPRI
 800810c:	60bb      	str	r3, [r7, #8]
  return(result);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <osDelay+0x3c>
    stat = osErrorISR;
 8008114:	f06f 0305 	mvn.w	r3, #5
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e007      	b.n	800812c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fb4a 	bl	80097c0 <vTaskDelay>
    }
  }

  return (stat);
 800812c:	697b      	ldr	r3, [r7, #20]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000508 	.word	0x20000508

0800813c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008148:	f3ef 8305 	mrs	r3, IPSR
 800814c:	617b      	str	r3, [r7, #20]
  return(result);
 800814e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008150:	2b00      	cmp	r3, #0
 8008152:	d13d      	bne.n	80081d0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008154:	f3ef 8310 	mrs	r3, PRIMASK
 8008158:	613b      	str	r3, [r7, #16]
  return(result);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d137      	bne.n	80081d0 <osEventFlagsNew+0x94>
 8008160:	4b1e      	ldr	r3, [pc, #120]	; (80081dc <osEventFlagsNew+0xa0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d105      	bne.n	8008174 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008168:	f3ef 8311 	mrs	r3, BASEPRI
 800816c:	60fb      	str	r3, [r7, #12]
  return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d12d      	bne.n	80081d0 <osEventFlagsNew+0x94>
    mem = -1;
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d015      	beq.n	80081ac <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <osEventFlagsNew+0x5a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b1f      	cmp	r3, #31
 800818e:	d902      	bls.n	8008196 <osEventFlagsNew+0x5a>
        mem = 1;
 8008190:	2301      	movs	r3, #1
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	e00c      	b.n	80081b0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d108      	bne.n	80081b0 <osEventFlagsNew+0x74>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <osEventFlagsNew+0x74>
          mem = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e001      	b.n	80081b0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d106      	bne.n	80081c4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f9ae 	bl	800851c <xEventGroupCreateStatic>
 80081c0:	61f8      	str	r0, [r7, #28]
 80081c2:	e005      	b.n	80081d0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80081ca:	f000 f9de 	bl	800858a <xEventGroupCreate>
 80081ce:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80081d0:	69fb      	ldr	r3, [r7, #28]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20000508 	.word	0x20000508

080081e0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <osEventFlagsSet+0x1e>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80081fe:	f06f 0303 	mvn.w	r3, #3
 8008202:	61fb      	str	r3, [r7, #28]
 8008204:	e03a      	b.n	800827c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008206:	f3ef 8305 	mrs	r3, IPSR
 800820a:	617b      	str	r3, [r7, #20]
  return(result);
 800820c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10f      	bne.n	8008232 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008212:	f3ef 8310 	mrs	r3, PRIMASK
 8008216:	613b      	str	r3, [r7, #16]
  return(result);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <osEventFlagsSet+0x52>
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <osEventFlagsSet+0xa8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d123      	bne.n	800826e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008226:	f3ef 8311 	mrs	r3, BASEPRI
 800822a:	60fb      	str	r3, [r7, #12]
  return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01d      	beq.n	800826e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	461a      	mov	r2, r3
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	69b8      	ldr	r0, [r7, #24]
 8008240:	f000 fad4 	bl	80087ec <xEventGroupSetBitsFromISR>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800824a:	f06f 0302 	mvn.w	r3, #2
 800824e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008250:	e013      	b.n	800827a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <osEventFlagsSet+0x9a>
 800825c:	4b0b      	ldr	r3, [pc, #44]	; (800828c <osEventFlagsSet+0xac>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800826c:	e005      	b.n	800827a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	69b8      	ldr	r0, [r7, #24]
 8008272:	f000 fa15 	bl	80086a0 <xEventGroupSetBits>
 8008276:	61f8      	str	r0, [r7, #28]
 8008278:	e000      	b.n	800827c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800827a:	bf00      	nop
  }

  return (rflags);
 800827c:	69fb      	ldr	r3, [r7, #28]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000508 	.word	0x20000508
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <osEventFlagsClear+0x1e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80082ae:	f06f 0303 	mvn.w	r3, #3
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	e029      	b.n	800830a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b6:	f3ef 8305 	mrs	r3, IPSR
 80082ba:	617b      	str	r3, [r7, #20]
  return(result);
 80082bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10f      	bne.n	80082e2 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c2:	f3ef 8310 	mrs	r3, PRIMASK
 80082c6:	613b      	str	r3, [r7, #16]
  return(result);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <osEventFlagsClear+0x52>
 80082ce:	4b11      	ldr	r3, [pc, #68]	; (8008314 <osEventFlagsClear+0x84>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d114      	bne.n	8008300 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082d6:	f3ef 8311 	mrs	r3, BASEPRI
 80082da:	60fb      	str	r3, [r7, #12]
  return(result);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00e      	beq.n	8008300 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80082e2:	69b8      	ldr	r0, [r7, #24]
 80082e4:	f000 f9b8 	bl	8008658 <xEventGroupGetBitsFromISR>
 80082e8:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	69b8      	ldr	r0, [r7, #24]
 80082ee:	f000 f99f 	bl	8008630 <xEventGroupClearBitsFromISR>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80082f8:	f06f 0302 	mvn.w	r3, #2
 80082fc:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80082fe:	e004      	b.n	800830a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	69b8      	ldr	r0, [r7, #24]
 8008304:	f000 f95b 	bl	80085be <xEventGroupClearBits>
 8008308:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800830a:	69fb      	ldr	r3, [r7, #28]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000508 	.word	0x20000508

08008318 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <osEventFlagsGet+0x18>
    rflags = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	e01f      	b.n	8008370 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008330:	f3ef 8305 	mrs	r3, IPSR
 8008334:	617b      	str	r3, [r7, #20]
  return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10f      	bne.n	800835c <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833c:	f3ef 8310 	mrs	r3, PRIMASK
 8008340:	613b      	str	r3, [r7, #16]
  return(result);
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <osEventFlagsGet+0x44>
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <osEventFlagsGet+0x64>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d10a      	bne.n	8008366 <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008350:	f3ef 8311 	mrs	r3, BASEPRI
 8008354:	60fb      	str	r3, [r7, #12]
  return(result);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d004      	beq.n	8008366 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800835c:	69b8      	ldr	r0, [r7, #24]
 800835e:	f000 f97b 	bl	8008658 <xEventGroupGetBitsFromISR>
 8008362:	61f8      	str	r0, [r7, #28]
 8008364:	e004      	b.n	8008370 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8008366:	2100      	movs	r1, #0
 8008368:	69b8      	ldr	r0, [r7, #24]
 800836a:	f000 f928 	bl	80085be <xEventGroupClearBits>
 800836e:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008370:	69fb      	ldr	r3, [r7, #28]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000508 	.word	0x20000508

08008380 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838c:	f3ef 8305 	mrs	r3, IPSR
 8008390:	613b      	str	r3, [r7, #16]
  return(result);
 8008392:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 8085 	bne.w	80084a4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839a:	f3ef 8310 	mrs	r3, PRIMASK
 800839e:	60fb      	str	r3, [r7, #12]
  return(result);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d17e      	bne.n	80084a4 <osMutexNew+0x124>
 80083a6:	4b42      	ldr	r3, [pc, #264]	; (80084b0 <osMutexNew+0x130>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d105      	bne.n	80083ba <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083ae:	f3ef 8311 	mrs	r3, BASEPRI
 80083b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d174      	bne.n	80084a4 <osMutexNew+0x124>
    if (attr != NULL) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	623b      	str	r3, [r7, #32]
 80083c6:	e001      	b.n	80083cc <osMutexNew+0x4c>
    } else {
      type = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <osMutexNew+0x5c>
      rmtx = 1U;
 80083d6:	2301      	movs	r3, #1
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e001      	b.n	80083e0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d15c      	bne.n	80084a4 <osMutexNew+0x124>
      mem = -1;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295
 80083ee:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d015      	beq.n	8008422 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d006      	beq.n	800840c <osMutexNew+0x8c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b4f      	cmp	r3, #79	; 0x4f
 8008404:	d902      	bls.n	800840c <osMutexNew+0x8c>
          mem = 1;
 8008406:	2301      	movs	r3, #1
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	e00c      	b.n	8008426 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d108      	bne.n	8008426 <osMutexNew+0xa6>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <osMutexNew+0xa6>
            mem = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e001      	b.n	8008426 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d112      	bne.n	8008452 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	4619      	mov	r1, r3
 8008438:	2004      	movs	r0, #4
 800843a:	f000 fc11 	bl	8008c60 <xQueueCreateMutexStatic>
 800843e:	6278      	str	r0, [r7, #36]	; 0x24
 8008440:	e016      	b.n	8008470 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	4619      	mov	r1, r3
 8008448:	2001      	movs	r0, #1
 800844a:	f000 fc09 	bl	8008c60 <xQueueCreateMutexStatic>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24
 8008450:	e00e      	b.n	8008470 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10b      	bne.n	8008470 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800845e:	2004      	movs	r0, #4
 8008460:	f000 fbe6 	bl	8008c30 <xQueueCreateMutex>
 8008464:	6278      	str	r0, [r7, #36]	; 0x24
 8008466:	e003      	b.n	8008470 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008468:	2001      	movs	r0, #1
 800846a:	f000 fbe1 	bl	8008c30 <xQueueCreateMutex>
 800846e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00c      	beq.n	8008490 <osMutexNew+0x110>
        if (attr != NULL) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <osMutexNew+0x104>
          name = attr->name;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e001      	b.n	8008488 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008488:	6979      	ldr	r1, [r7, #20]
 800848a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800848c:	f000 ff8a 	bl	80093a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d006      	beq.n	80084a4 <osMutexNew+0x124>
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3728      	adds	r7, #40	; 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000508 	.word	0x20000508

080084b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80084c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <vApplicationGetIdleTaskMemory+0x30>)
 80084ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2280      	movs	r2, #128	; 0x80
 80084d0:	601a      	str	r2, [r3, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	2000050c 	.word	0x2000050c
 80084e4:	200005b8 	.word	0x200005b8

080084e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4a07      	ldr	r2, [pc, #28]	; (8008514 <vApplicationGetTimerTaskMemory+0x2c>)
 80084f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a06      	ldr	r2, [pc, #24]	; (8008518 <vApplicationGetTimerTaskMemory+0x30>)
 80084fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008506:	601a      	str	r2, [r3, #0]
}
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	200007b8 	.word	0x200007b8
 8008518:	20000864 	.word	0x20000864

0800851c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008540:	2320      	movs	r3, #32
 8008542:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b20      	cmp	r3, #32
 8008548:	d00a      	beq.n	8008560 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60fb      	str	r3, [r7, #12]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	3304      	adds	r3, #4
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f94d 	bl	8008814 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2201      	movs	r2, #1
 800857e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008580:	697b      	ldr	r3, [r7, #20]
	}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008590:	2020      	movs	r0, #32
 8008592:	f002 fcf9 	bl	800af88 <pvPortMalloc>
 8008596:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f933 	bl	8008814 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80085b4:	687b      	ldr	r3, [r7, #4]
	}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b086      	sub	sp, #24
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <xEventGroupClearBits+0x2a>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60fb      	str	r3, [r7, #12]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <xEventGroupClearBits+0x4a>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60bb      	str	r3, [r7, #8]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008608:	f002 fb9c 	bl	800ad44 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	43db      	mvns	r3, r3
 800861a:	401a      	ands	r2, r3
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008620:	f002 fbc0 	bl	800ada4 <vPortExitCritical>

	return uxReturn;
 8008624:	693b      	ldr	r3, [r7, #16]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800863a:	2300      	movs	r3, #0
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4804      	ldr	r0, [pc, #16]	; (8008654 <xEventGroupClearBitsFromISR+0x24>)
 8008642:	f002 fa31 	bl	800aaa8 <xTimerPendFunctionCallFromISR>
 8008646:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008648:	68fb      	ldr	r3, [r7, #12]
	}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	080087d1 	.word	0x080087d1

08008658 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008658:	b480      	push	{r7}
 800865a:	b089      	sub	sp, #36	; 0x24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008664:	f3ef 8211 	mrs	r2, BASEPRI
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60fa      	str	r2, [r7, #12]
 800867a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800867c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800867e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008690:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008692:	697b      	ldr	r3, [r7, #20]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3724      	adds	r7, #36	; 0x24
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80086aa:	2300      	movs	r3, #0
 80086ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	613b      	str	r3, [r7, #16]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	3304      	adds	r3, #4
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	3308      	adds	r3, #8
 80086fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80086fe:	f001 f979 	bl	80099f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	431a      	orrs	r2, r3
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008714:	e03c      	b.n	8008790 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008722:	2300      	movs	r3, #0
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800872c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008734:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008750:	e008      	b.n	8008764 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4013      	ands	r3, r2
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d101      	bne.n	8008764 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d010      	beq.n	800878c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4313      	orrs	r3, r2
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008784:	4619      	mov	r1, r3
 8008786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008788:	f001 fbc6 	bl	8009f18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	429a      	cmp	r2, r3
 8008796:	d1be      	bne.n	8008716 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	43db      	mvns	r3, r3
 80087a0:	401a      	ands	r2, r3
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80087a6:	f001 f933 	bl	8009a10 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	681b      	ldr	r3, [r3, #0]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3738      	adds	r7, #56	; 0x38
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff ff6c 	bl	80086a0 <xEventGroupSetBits>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff feee 	bl	80085be <xEventGroupClearBits>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	4804      	ldr	r0, [pc, #16]	; (8008810 <xEventGroupSetBitsFromISR+0x24>)
 8008800:	f002 f952 	bl	800aaa8 <xTimerPendFunctionCallFromISR>
 8008804:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008806:	697b      	ldr	r3, [r7, #20]
	}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	080087b7 	.word	0x080087b7

08008814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 0208 	add.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f103 0208 	add.w	r2, r3, #8
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f103 0208 	add.w	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]
}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d103      	bne.n	80088d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e00c      	b.n	80088f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3308      	adds	r3, #8
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e002      	b.n	80088e4 <vListInsert+0x2e>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d2f6      	bcs.n	80088de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
}
 800891c:	bf00      	nop
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6892      	ldr	r2, [r2, #8]
 800893e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6852      	ldr	r2, [r2, #4]
 8008948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d103      	bne.n	800895c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60bb      	str	r3, [r7, #8]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089a6:	f002 f9cd 	bl	800ad44 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	68f9      	ldr	r1, [r7, #12]
 80089b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	3b01      	subs	r3, #1
 80089d8:	68f9      	ldr	r1, [r7, #12]
 80089da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	441a      	add	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	22ff      	movs	r2, #255	; 0xff
 80089ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d114      	bne.n	8008a26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01a      	beq.n	8008a3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3310      	adds	r3, #16
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fa21 	bl	8009e50 <xTaskRemoveFromEventList>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d012      	beq.n	8008a3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a14:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <xQueueGenericReset+0xcc>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	e009      	b.n	8008a3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3310      	adds	r3, #16
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fef2 	bl	8008814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3324      	adds	r3, #36	; 0x24
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff feed 	bl	8008814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a3a:	f002 f9b3 	bl	800ada4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a3e:	2301      	movs	r3, #1
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08e      	sub	sp, #56	; 0x38
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <xQueueGenericCreateStatic+0x52>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <xQueueGenericCreateStatic+0x56>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <xQueueGenericCreateStatic+0x58>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	623b      	str	r3, [r7, #32]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <xQueueGenericCreateStatic+0x7e>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <xQueueGenericCreateStatic+0x82>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <xQueueGenericCreateStatic+0x84>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	61fb      	str	r3, [r7, #28]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aea:	2350      	movs	r3, #80	; 0x50
 8008aec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b50      	cmp	r3, #80	; 0x50
 8008af2:	d00a      	beq.n	8008b0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	61bb      	str	r3, [r7, #24]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00d      	beq.n	8008b30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f843 	bl	8008bb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3730      	adds	r7, #48	; 0x30
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b08a      	sub	sp, #40	; 0x28
 8008b3e:	af02      	add	r7, sp, #8
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	613b      	str	r3, [r7, #16]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e004      	b.n	8008b7a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	fb02 f303 	mul.w	r3, r2, r3
 8008b78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3350      	adds	r3, #80	; 0x50
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f002 fa02 	bl	800af88 <pvPortMalloc>
 8008b84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00f      	beq.n	8008bac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	3350      	adds	r3, #80	; 0x50
 8008b90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b9a:	79fa      	ldrb	r2, [r7, #7]
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 f805 	bl	8008bb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008bac:	69bb      	ldr	r3, [r7, #24]
	}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	e002      	b.n	8008bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be4:	2101      	movs	r1, #1
 8008be6:	69b8      	ldr	r0, [r7, #24]
 8008be8:	f7ff fec8 	bl	800897c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2100      	movs	r1, #0
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f838 	bl	8008c98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6939      	ldr	r1, [r7, #16]
 8008c48:	6978      	ldr	r0, [r7, #20]
 8008c4a:	f7ff ff76 	bl	8008b3a <xQueueGenericCreate>
 8008c4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff ffd3 	bl	8008bfc <prvInitialiseMutex>

		return pxNewQueue;
 8008c56:	68fb      	ldr	r3, [r7, #12]
	}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	6939      	ldr	r1, [r7, #16]
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff fee4 	bl	8008a4c <xQueueGenericCreateStatic>
 8008c84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff ffb8 	bl	8008bfc <prvInitialiseMutex>

		return pxNewQueue;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08e      	sub	sp, #56	; 0x38
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xQueueGenericSend+0x32>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <xQueueGenericSend+0x40>
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <xQueueGenericSend+0x44>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <xQueueGenericSend+0x46>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d103      	bne.n	8008d06 <xQueueGenericSend+0x6e>
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <xQueueGenericSend+0x72>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueGenericSend+0x74>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	623b      	str	r3, [r7, #32]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d26:	f001 facd 	bl	800a2c4 <xTaskGetSchedulerState>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <xQueueGenericSend+0x9e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <xQueueGenericSend+0xa2>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <xQueueGenericSend+0xa4>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	61fb      	str	r3, [r7, #28]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d56:	f001 fff5 	bl	800ad44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d302      	bcc.n	8008d6c <xQueueGenericSend+0xd4>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d129      	bne.n	8008dc0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d72:	f000 fa07 	bl	8009184 <prvCopyDataToQueue>
 8008d76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d010      	beq.n	8008da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	3324      	adds	r3, #36	; 0x24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 f863 	bl	8009e50 <xTaskRemoveFromEventList>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d013      	beq.n	8008db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d90:	4b3f      	ldr	r3, [pc, #252]	; (8008e90 <xQueueGenericSend+0x1f8>)
 8008d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	e00a      	b.n	8008db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008da8:	4b39      	ldr	r3, [pc, #228]	; (8008e90 <xQueueGenericSend+0x1f8>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008db8:	f001 fff4 	bl	800ada4 <vPortExitCritical>
				return pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e063      	b.n	8008e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dc6:	f001 ffed 	bl	800ada4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e05c      	b.n	8008e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd4:	f107 0314 	add.w	r3, r7, #20
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f8ff 	bl	8009fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008de2:	f001 ffdf 	bl	800ada4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de6:	f000 fe05 	bl	80099f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dea:	f001 ffab 	bl	800ad44 <vPortEnterCritical>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df4:	b25b      	sxtb	r3, r3
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d103      	bne.n	8008e04 <xQueueGenericSend+0x16c>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d103      	bne.n	8008e1a <xQueueGenericSend+0x182>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1a:	f001 ffc3 	bl	800ada4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1e:	1d3a      	adds	r2, r7, #4
 8008e20:	f107 0314 	add.w	r3, r7, #20
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f8ee 	bl	800a008 <xTaskCheckForTimeOut>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d124      	bne.n	8008e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e34:	f000 fa9e 	bl	8009374 <prvIsQueueFull>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d018      	beq.n	8008e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	3310      	adds	r3, #16
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ffb2 	bl	8009db0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e4e:	f000 fa29 	bl	80092a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e52:	f000 fddd 	bl	8009a10 <xTaskResumeAll>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f47f af7c 	bne.w	8008d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <xQueueGenericSend+0x1f8>)
 8008e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	e772      	b.n	8008d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e72:	f000 fa17 	bl	80092a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e76:	f000 fdcb 	bl	8009a10 <xTaskResumeAll>
 8008e7a:	e76c      	b.n	8008d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7e:	f000 fa11 	bl	80092a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e82:	f000 fdc5 	bl	8009a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e86:	2300      	movs	r3, #0
		}
	}
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3738      	adds	r7, #56	; 0x38
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <xQueueGenericSendFromISR+0x3c>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <xQueueGenericSendFromISR+0x40>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <xQueueGenericSendFromISR+0x42>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	623b      	str	r3, [r7, #32]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSendFromISR+0x6a>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <xQueueGenericSendFromISR+0x6e>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericSendFromISR+0x70>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	61fb      	str	r3, [r7, #28]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f1e:	f001 fff3 	bl	800af08 <vPortValidateInterruptPriority>
	__asm volatile
 8008f22:	f3ef 8211 	mrs	r2, BASEPRI
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	61ba      	str	r2, [r7, #24]
 8008f38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <xQueueGenericSendFromISR+0xbc>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d12c      	bne.n	8008faa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f60:	f000 f910 	bl	8009184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d112      	bne.n	8008f94 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d016      	beq.n	8008fa4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	3324      	adds	r3, #36	; 0x24
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 ff68 	bl	8009e50 <xTaskRemoveFromEventList>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00e      	beq.n	8008fa4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e007      	b.n	8008fa4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f98:	3301      	adds	r3, #1
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	b25a      	sxtb	r2, r3
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008fa8:	e001      	b.n	8008fae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f383 8811 	msr	BASEPRI, r3
}
 8008fb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3738      	adds	r7, #56	; 0x38
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	; 0x30
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10a      	bne.n	8008ff4 <xQueueReceive+0x30>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	623b      	str	r3, [r7, #32]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <xQueueReceive+0x3e>
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <xQueueReceive+0x42>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xQueueReceive+0x44>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xQueueReceive+0x5e>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	61fb      	str	r3, [r7, #28]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009022:	f001 f94f 	bl	800a2c4 <xTaskGetSchedulerState>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <xQueueReceive+0x6e>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <xQueueReceive+0x72>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <xQueueReceive+0x74>
 8009036:	2300      	movs	r3, #0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xQueueReceive+0x8e>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	61bb      	str	r3, [r7, #24]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009052:	f001 fe77 	bl	800ad44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d01f      	beq.n	80090a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009066:	f000 f8f7 	bl	8009258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	1e5a      	subs	r2, r3, #1
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00f      	beq.n	800909a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	3310      	adds	r3, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fee6 	bl	8009e50 <xTaskRemoveFromEventList>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800908a:	4b3d      	ldr	r3, [pc, #244]	; (8009180 <xQueueReceive+0x1bc>)
 800908c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800909a:	f001 fe83 	bl	800ada4 <vPortExitCritical>
				return pdPASS;
 800909e:	2301      	movs	r3, #1
 80090a0:	e069      	b.n	8009176 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090a8:	f001 fe7c 	bl	800ada4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090ac:	2300      	movs	r3, #0
 80090ae:	e062      	b.n	8009176 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090b6:	f107 0310 	add.w	r3, r7, #16
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 ff8e 	bl	8009fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090c4:	f001 fe6e 	bl	800ada4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090c8:	f000 fc94 	bl	80099f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090cc:	f001 fe3a 	bl	800ad44 <vPortEnterCritical>
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d103      	bne.n	80090e6 <xQueueReceive+0x122>
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d103      	bne.n	80090fc <xQueueReceive+0x138>
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090fc:	f001 fe52 	bl	800ada4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009100:	1d3a      	adds	r2, r7, #4
 8009102:	f107 0310 	add.w	r3, r7, #16
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f000 ff7d 	bl	800a008 <xTaskCheckForTimeOut>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d123      	bne.n	800915c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009116:	f000 f917 	bl	8009348 <prvIsQueueEmpty>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d017      	beq.n	8009150 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fe41 	bl	8009db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800912e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009130:	f000 f8b8 	bl	80092a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009134:	f000 fc6c 	bl	8009a10 <xTaskResumeAll>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d189      	bne.n	8009052 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <xQueueReceive+0x1bc>)
 8009140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	e780      	b.n	8009052 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009152:	f000 f8a7 	bl	80092a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009156:	f000 fc5b 	bl	8009a10 <xTaskResumeAll>
 800915a:	e77a      	b.n	8009052 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800915c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915e:	f000 f8a1 	bl	80092a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009162:	f000 fc55 	bl	8009a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009168:	f000 f8ee 	bl	8009348 <prvIsQueueEmpty>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	f43f af6f 	beq.w	8009052 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009176:	4618      	mov	r0, r3
 8009178:	3730      	adds	r7, #48	; 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10d      	bne.n	80091be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d14d      	bne.n	8009246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 f8a6 	bl	800a300 <xTaskPriorityDisinherit>
 80091b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	605a      	str	r2, [r3, #4]
 80091bc:	e043      	b.n	8009246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d119      	bne.n	80091f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6898      	ldr	r0, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091cc:	461a      	mov	r2, r3
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	f002 fb8d 	bl	800b8ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091dc:	441a      	add	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d32b      	bcc.n	8009246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	609a      	str	r2, [r3, #8]
 80091f6:	e026      	b.n	8009246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68d8      	ldr	r0, [r3, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009200:	461a      	mov	r2, r3
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	f002 fb73 	bl	800b8ee <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	425b      	negs	r3, r3
 8009212:	441a      	add	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d207      	bcs.n	8009234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922c:	425b      	negs	r3, r3
 800922e:	441a      	add	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d105      	bne.n	8009246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3b01      	subs	r3, #1
 8009244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800924e:	697b      	ldr	r3, [r7, #20]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	d018      	beq.n	800929c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68da      	ldr	r2, [r3, #12]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	441a      	add	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d303      	bcc.n	800928c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68d9      	ldr	r1, [r3, #12]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	461a      	mov	r2, r3
 8009296:	6838      	ldr	r0, [r7, #0]
 8009298:	f002 fb29 	bl	800b8ee <memcpy>
	}
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092ac:	f001 fd4a 	bl	800ad44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092b8:	e011      	b.n	80092de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d012      	beq.n	80092e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3324      	adds	r3, #36	; 0x24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fdc2 	bl	8009e50 <xTaskRemoveFromEventList>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092d2:	f000 fefb 	bl	800a0cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	3b01      	subs	r3, #1
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dce9      	bgt.n	80092ba <prvUnlockQueue+0x16>
 80092e6:	e000      	b.n	80092ea <prvUnlockQueue+0x46>
					break;
 80092e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092f2:	f001 fd57 	bl	800ada4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092f6:	f001 fd25 	bl	800ad44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009302:	e011      	b.n	8009328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d012      	beq.n	8009332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3310      	adds	r3, #16
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fd9d 	bl	8009e50 <xTaskRemoveFromEventList>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800931c:	f000 fed6 	bl	800a0cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	3b01      	subs	r3, #1
 8009324:	b2db      	uxtb	r3, r3
 8009326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dce9      	bgt.n	8009304 <prvUnlockQueue+0x60>
 8009330:	e000      	b.n	8009334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	22ff      	movs	r2, #255	; 0xff
 8009338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800933c:	f001 fd32 	bl	800ada4 <vPortExitCritical>
}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009350:	f001 fcf8 	bl	800ad44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800935c:	2301      	movs	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e001      	b.n	8009366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009366:	f001 fd1d 	bl	800ada4 <vPortExitCritical>

	return xReturn;
 800936a:	68fb      	ldr	r3, [r7, #12]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800937c:	f001 fce2 	bl	800ad44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009388:	429a      	cmp	r2, r3
 800938a:	d102      	bne.n	8009392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	e001      	b.n	8009396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009396:	f001 fd05 	bl	800ada4 <vPortExitCritical>

	return xReturn;
 800939a:	68fb      	ldr	r3, [r7, #12]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e014      	b.n	80093de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093b4:	4a0f      	ldr	r2, [pc, #60]	; (80093f4 <vQueueAddToRegistry+0x50>)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093c0:	490c      	ldr	r1, [pc, #48]	; (80093f4 <vQueueAddToRegistry+0x50>)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093ca:	4a0a      	ldr	r2, [pc, #40]	; (80093f4 <vQueueAddToRegistry+0x50>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093d6:	e006      	b.n	80093e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	d9e7      	bls.n	80093b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000c64 	.word	0x20000c64

080093f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009408:	f001 fc9c 	bl	800ad44 <vPortEnterCritical>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009412:	b25b      	sxtb	r3, r3
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d103      	bne.n	8009422 <vQueueWaitForMessageRestricted+0x2a>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009428:	b25b      	sxtb	r3, r3
 800942a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942e:	d103      	bne.n	8009438 <vQueueWaitForMessageRestricted+0x40>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009438:	f001 fcb4 	bl	800ada4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	3324      	adds	r3, #36	; 0x24
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fcd3 	bl	8009df8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009452:	6978      	ldr	r0, [r7, #20]
 8009454:	f7ff ff26 	bl	80092a4 <prvUnlockQueue>
	}
 8009458:	bf00      	nop
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	; 0x38
 8009464:	af04      	add	r7, sp, #16
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	623b      	str	r3, [r7, #32]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	61fb      	str	r3, [r7, #28]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094a6:	23ac      	movs	r3, #172	; 0xac
 80094a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2bac      	cmp	r3, #172	; 0xac
 80094ae:	d00a      	beq.n	80094c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	61bb      	str	r3, [r7, #24]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01e      	beq.n	800950a <xTaskCreateStatic+0xaa>
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01b      	beq.n	800950a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094e4:	2300      	movs	r3, #0
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f851 	bl	80095a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009504:	f000 f8ec 	bl	80096e0 <prvAddNewTaskToReadyList>
 8009508:	e001      	b.n	800950e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800950e:	697b      	ldr	r3, [r7, #20]
	}
 8009510:	4618      	mov	r0, r3
 8009512:	3728      	adds	r7, #40	; 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08c      	sub	sp, #48	; 0x30
 800951c:	af04      	add	r7, sp, #16
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009528:	88fb      	ldrh	r3, [r7, #6]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fd2b 	bl	800af88 <pvPortMalloc>
 8009532:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800953a:	20ac      	movs	r0, #172	; 0xac
 800953c:	f001 fd24 	bl	800af88 <pvPortMalloc>
 8009540:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
 800954e:	e005      	b.n	800955c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009550:	6978      	ldr	r0, [r7, #20]
 8009552:	f001 fddd 	bl	800b110 <vPortFree>
 8009556:	e001      	b.n	800955c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009558:	2300      	movs	r3, #0
 800955a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d017      	beq.n	8009592 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800956a:	88fa      	ldrh	r2, [r7, #6]
 800956c:	2300      	movs	r3, #0
 800956e:	9303      	str	r3, [sp, #12]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f80f 	bl	80095a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009586:	69f8      	ldr	r0, [r7, #28]
 8009588:	f000 f8aa 	bl	80096e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800958c:	2301      	movs	r3, #1
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	e002      	b.n	8009598 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009592:	f04f 33ff 	mov.w	r3, #4294967295
 8009596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009598:	69bb      	ldr	r3, [r7, #24]
	}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	461a      	mov	r2, r3
 80095bc:	21a5      	movs	r1, #165	; 0xa5
 80095be:	f002 f8c5 	bl	800b74c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095cc:	3b01      	subs	r3, #1
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	617b      	str	r3, [r7, #20]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095fc:	2300      	movs	r3, #0
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	e012      	b.n	8009628 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	4413      	add	r3, r2
 8009608:	7819      	ldrb	r1, [r3, #0]
 800960a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	4413      	add	r3, r2
 8009610:	3334      	adds	r3, #52	; 0x34
 8009612:	460a      	mov	r2, r1
 8009614:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	3301      	adds	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b13      	cmp	r3, #19
 800962c:	d9e9      	bls.n	8009602 <prvInitialiseNewTask+0x5e>
 800962e:	e000      	b.n	8009632 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009630:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	2b37      	cmp	r3, #55	; 0x37
 800963e:	d901      	bls.n	8009644 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009640:	2337      	movs	r3, #55	; 0x37
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009648:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800964e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	2200      	movs	r2, #0
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	3304      	adds	r3, #4
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff f8fa 	bl	8008854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	3318      	adds	r3, #24
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff f8f5 	bl	8008854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	2200      	movs	r2, #0
 800968c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	3358      	adds	r3, #88	; 0x58
 8009694:	224c      	movs	r2, #76	; 0x4c
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f002 f857 	bl	800b74c <memset>
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	4a0c      	ldr	r2, [pc, #48]	; (80096d4 <prvInitialiseNewTask+0x130>)
 80096a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <prvInitialiseNewTask+0x134>)
 80096a8:	661a      	str	r2, [r3, #96]	; 0x60
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	4a0b      	ldr	r2, [pc, #44]	; (80096dc <prvInitialiseNewTask+0x138>)
 80096ae:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	69b8      	ldr	r0, [r7, #24]
 80096b6:	f001 fa17 	bl	800aae8 <pxPortInitialiseStack>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096cc:	bf00      	nop
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200026f0 	.word	0x200026f0
 80096d8:	20002758 	.word	0x20002758
 80096dc:	200027c0 	.word	0x200027c0

080096e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096e8:	f001 fb2c 	bl	800ad44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096ec:	4b2d      	ldr	r3, [pc, #180]	; (80097a4 <prvAddNewTaskToReadyList+0xc4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3301      	adds	r3, #1
 80096f2:	4a2c      	ldr	r2, [pc, #176]	; (80097a4 <prvAddNewTaskToReadyList+0xc4>)
 80096f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096f6:	4b2c      	ldr	r3, [pc, #176]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096fe:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <prvAddNewTaskToReadyList+0xc4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d110      	bne.n	800972e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800970c:	f000 fd02 	bl	800a114 <prvInitialiseTaskLists>
 8009710:	e00d      	b.n	800972e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009712:	4b26      	ldr	r3, [pc, #152]	; (80097ac <prvAddNewTaskToReadyList+0xcc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800971a:	4b23      	ldr	r3, [pc, #140]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	429a      	cmp	r2, r3
 8009726:	d802      	bhi.n	800972e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009728:	4a1f      	ldr	r2, [pc, #124]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <prvAddNewTaskToReadyList+0xd0>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3301      	adds	r3, #1
 8009734:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <prvAddNewTaskToReadyList+0xd0>)
 8009736:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <prvAddNewTaskToReadyList+0xd0>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <prvAddNewTaskToReadyList+0xd4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d903      	bls.n	8009754 <prvAddNewTaskToReadyList+0x74>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	4a18      	ldr	r2, [pc, #96]	; (80097b4 <prvAddNewTaskToReadyList+0xd4>)
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4a15      	ldr	r2, [pc, #84]	; (80097b8 <prvAddNewTaskToReadyList+0xd8>)
 8009762:	441a      	add	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3304      	adds	r3, #4
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7ff f87f 	bl	800886e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009770:	f001 fb18 	bl	800ada4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <prvAddNewTaskToReadyList+0xcc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00e      	beq.n	800979a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009786:	429a      	cmp	r2, r3
 8009788:	d207      	bcs.n	800979a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800978a:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <prvAddNewTaskToReadyList+0xdc>)
 800978c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20001178 	.word	0x20001178
 80097a8:	20000ca4 	.word	0x20000ca4
 80097ac:	20001184 	.word	0x20001184
 80097b0:	20001194 	.word	0x20001194
 80097b4:	20001180 	.word	0x20001180
 80097b8:	20000ca8 	.word	0x20000ca8
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d017      	beq.n	8009802 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <vTaskDelay+0x60>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <vTaskDelay+0x30>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	60bb      	str	r3, [r7, #8]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097f0:	f000 f900 	bl	80099f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097f4:	2100      	movs	r1, #0
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fdf0 	bl	800a3dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097fc:	f000 f908 	bl	8009a10 <xTaskResumeAll>
 8009800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d107      	bne.n	8009818 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <vTaskDelay+0x64>)
 800980a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	200011a0 	.word	0x200011a0
 8009824:	e000ed04 	.word	0xe000ed04

08009828 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009830:	f001 fa88 	bl	800ad44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <vTaskSuspend+0x18>
 800983a:	4b30      	ldr	r3, [pc, #192]	; (80098fc <vTaskSuspend+0xd4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	e000      	b.n	8009842 <vTaskSuspend+0x1a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3304      	adds	r3, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff f86d 	bl	8008928 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3318      	adds	r3, #24
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff f864 	bl	8008928 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3304      	adds	r3, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4826      	ldr	r0, [pc, #152]	; (8009900 <vTaskSuspend+0xd8>)
 8009868:	f7ff f801 	bl	800886e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	d103      	bne.n	8009880 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009880:	f001 fa90 	bl	800ada4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009884:	4b1f      	ldr	r3, [pc, #124]	; (8009904 <vTaskSuspend+0xdc>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800988c:	f001 fa5a 	bl	800ad44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009890:	f000 fce2 	bl	800a258 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009894:	f001 fa86 	bl	800ada4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009898:	4b18      	ldr	r3, [pc, #96]	; (80098fc <vTaskSuspend+0xd4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d127      	bne.n	80098f2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80098a2:	4b18      	ldr	r3, [pc, #96]	; (8009904 <vTaskSuspend+0xdc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d017      	beq.n	80098da <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80098aa:	4b17      	ldr	r3, [pc, #92]	; (8009908 <vTaskSuspend+0xe0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <vTaskSuspend+0xa0>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	60bb      	str	r3, [r7, #8]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80098c8:	4b10      	ldr	r3, [pc, #64]	; (800990c <vTaskSuspend+0xe4>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098d8:	e00b      	b.n	80098f2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <vTaskSuspend+0xd8>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <vTaskSuspend+0xe8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d103      	bne.n	80098ee <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <vTaskSuspend+0xd4>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
	}
 80098ec:	e001      	b.n	80098f2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80098ee:	f000 f9fb 	bl	8009ce8 <vTaskSwitchContext>
	}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000ca4 	.word	0x20000ca4
 8009900:	20001164 	.word	0x20001164
 8009904:	20001184 	.word	0x20001184
 8009908:	200011a0 	.word	0x200011a0
 800990c:	e000ed04 	.word	0xe000ed04
 8009910:	20001178 	.word	0x20001178

08009914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800991a:	2300      	movs	r3, #0
 800991c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009922:	463a      	mov	r2, r7
 8009924:	1d39      	adds	r1, r7, #4
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fdc2 	bl	80084b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	9202      	str	r2, [sp, #8]
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	2300      	movs	r3, #0
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	2300      	movs	r3, #0
 8009940:	460a      	mov	r2, r1
 8009942:	4924      	ldr	r1, [pc, #144]	; (80099d4 <vTaskStartScheduler+0xc0>)
 8009944:	4824      	ldr	r0, [pc, #144]	; (80099d8 <vTaskStartScheduler+0xc4>)
 8009946:	f7ff fd8b 	bl	8009460 <xTaskCreateStatic>
 800994a:	4603      	mov	r3, r0
 800994c:	4a23      	ldr	r2, [pc, #140]	; (80099dc <vTaskStartScheduler+0xc8>)
 800994e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009950:	4b22      	ldr	r3, [pc, #136]	; (80099dc <vTaskStartScheduler+0xc8>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009958:	2301      	movs	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e001      	b.n	8009962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d102      	bne.n	800996e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009968:	f000 fd8c 	bl	800a484 <xTimerCreateTimerTask>
 800996c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11b      	bne.n	80099ac <vTaskStartScheduler+0x98>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	613b      	str	r3, [r7, #16]
}
 8009986:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009988:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <vTaskStartScheduler+0xcc>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3358      	adds	r3, #88	; 0x58
 800998e:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <vTaskStartScheduler+0xd0>)
 8009990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <vTaskStartScheduler+0xd4>)
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800999a:	4b14      	ldr	r3, [pc, #80]	; (80099ec <vTaskStartScheduler+0xd8>)
 800999c:	2201      	movs	r2, #1
 800999e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80099a0:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <vTaskStartScheduler+0xdc>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099a6:	f001 f92b 	bl	800ac00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099aa:	e00e      	b.n	80099ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b2:	d10a      	bne.n	80099ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <vTaskStartScheduler+0xb4>
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	0800c6f0 	.word	0x0800c6f0
 80099d8:	0800a0e5 	.word	0x0800a0e5
 80099dc:	2000119c 	.word	0x2000119c
 80099e0:	20000ca4 	.word	0x20000ca4
 80099e4:	200000e4 	.word	0x200000e4
 80099e8:	20001198 	.word	0x20001198
 80099ec:	20001184 	.word	0x20001184
 80099f0:	2000117c 	.word	0x2000117c

080099f4 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <vTaskSuspendAll+0x18>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	4a03      	ldr	r2, [pc, #12]	; (8009a0c <vTaskSuspendAll+0x18>)
 8009a00:	6013      	str	r3, [r2, #0]
}
 8009a02:	bf00      	nop
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	200011a0 	.word	0x200011a0

08009a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a1e:	4b42      	ldr	r3, [pc, #264]	; (8009b28 <xTaskResumeAll+0x118>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	603b      	str	r3, [r7, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a3c:	f001 f982 	bl	800ad44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a40:	4b39      	ldr	r3, [pc, #228]	; (8009b28 <xTaskResumeAll+0x118>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	4a38      	ldr	r2, [pc, #224]	; (8009b28 <xTaskResumeAll+0x118>)
 8009a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a4a:	4b37      	ldr	r3, [pc, #220]	; (8009b28 <xTaskResumeAll+0x118>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d162      	bne.n	8009b18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a52:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <xTaskResumeAll+0x11c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d05e      	beq.n	8009b18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a5a:	e02f      	b.n	8009abc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009a5c:	4b34      	ldr	r3, [pc, #208]	; (8009b30 <xTaskResumeAll+0x120>)
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	3318      	adds	r3, #24
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe ff5d 	bl	8008928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe ff58 	bl	8008928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4b2d      	ldr	r3, [pc, #180]	; (8009b34 <xTaskResumeAll+0x124>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d903      	bls.n	8009a8c <xTaskResumeAll+0x7c>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	4a2a      	ldr	r2, [pc, #168]	; (8009b34 <xTaskResumeAll+0x124>)
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4a27      	ldr	r2, [pc, #156]	; (8009b38 <xTaskResumeAll+0x128>)
 8009a9a:	441a      	add	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f7fe fee3 	bl	800886e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aac:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <xTaskResumeAll+0x12c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d302      	bcc.n	8009abc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ab6:	4b22      	ldr	r3, [pc, #136]	; (8009b40 <xTaskResumeAll+0x130>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009abc:	4b1c      	ldr	r3, [pc, #112]	; (8009b30 <xTaskResumeAll+0x120>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1cb      	bne.n	8009a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009aca:	f000 fbc5 	bl	800a258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009ace:	4b1d      	ldr	r3, [pc, #116]	; (8009b44 <xTaskResumeAll+0x134>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d010      	beq.n	8009afc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ada:	f000 f847 	bl	8009b6c <xTaskIncrementTick>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ae4:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <xTaskResumeAll+0x130>)
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f1      	bne.n	8009ada <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009af6:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <xTaskResumeAll+0x134>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xTaskResumeAll+0x130>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d009      	beq.n	8009b18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b08:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <xTaskResumeAll+0x138>)
 8009b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b18:	f001 f944 	bl	800ada4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200011a0 	.word	0x200011a0
 8009b2c:	20001178 	.word	0x20001178
 8009b30:	20001138 	.word	0x20001138
 8009b34:	20001180 	.word	0x20001180
 8009b38:	20000ca8 	.word	0x20000ca8
 8009b3c:	20000ca4 	.word	0x20000ca4
 8009b40:	2000118c 	.word	0x2000118c
 8009b44:	20001188 	.word	0x20001188
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <xTaskGetTickCount+0x1c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b58:	687b      	ldr	r3, [r7, #4]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	2000117c 	.word	0x2000117c

08009b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b76:	4b51      	ldr	r3, [pc, #324]	; (8009cbc <xTaskIncrementTick+0x150>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 808e 	bne.w	8009c9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b80:	4b4f      	ldr	r3, [pc, #316]	; (8009cc0 <xTaskIncrementTick+0x154>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b88:	4a4d      	ldr	r2, [pc, #308]	; (8009cc0 <xTaskIncrementTick+0x154>)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d120      	bne.n	8009bd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b94:	4b4b      	ldr	r3, [pc, #300]	; (8009cc4 <xTaskIncrementTick+0x158>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <xTaskIncrementTick+0x46>
 8009bb4:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <xTaskIncrementTick+0x158>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	4b43      	ldr	r3, [pc, #268]	; (8009cc8 <xTaskIncrementTick+0x15c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a41      	ldr	r2, [pc, #260]	; (8009cc4 <xTaskIncrementTick+0x158>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	4a41      	ldr	r2, [pc, #260]	; (8009cc8 <xTaskIncrementTick+0x15c>)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4b40      	ldr	r3, [pc, #256]	; (8009ccc <xTaskIncrementTick+0x160>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	4a3f      	ldr	r2, [pc, #252]	; (8009ccc <xTaskIncrementTick+0x160>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	f000 fb41 	bl	800a258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bd6:	4b3e      	ldr	r3, [pc, #248]	; (8009cd0 <xTaskIncrementTick+0x164>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d34e      	bcc.n	8009c7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be0:	4b38      	ldr	r3, [pc, #224]	; (8009cc4 <xTaskIncrementTick+0x158>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <xTaskIncrementTick+0x82>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <xTaskIncrementTick+0x84>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf4:	4b36      	ldr	r3, [pc, #216]	; (8009cd0 <xTaskIncrementTick+0x164>)
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	601a      	str	r2, [r3, #0]
					break;
 8009bfc:	e03f      	b.n	8009c7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <xTaskIncrementTick+0x158>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d203      	bcs.n	8009c1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c16:	4a2e      	ldr	r2, [pc, #184]	; (8009cd0 <xTaskIncrementTick+0x164>)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6013      	str	r3, [r2, #0]
						break;
 8009c1c:	e02f      	b.n	8009c7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	3304      	adds	r3, #4
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fe80 	bl	8008928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3318      	adds	r3, #24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fe77 	bl	8008928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	4b25      	ldr	r3, [pc, #148]	; (8009cd4 <xTaskIncrementTick+0x168>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d903      	bls.n	8009c4e <xTaskIncrementTick+0xe2>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4a22      	ldr	r2, [pc, #136]	; (8009cd4 <xTaskIncrementTick+0x168>)
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4a1f      	ldr	r2, [pc, #124]	; (8009cd8 <xTaskIncrementTick+0x16c>)
 8009c5c:	441a      	add	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fe fe02 	bl	800886e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6e:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <xTaskIncrementTick+0x170>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d3b3      	bcc.n	8009be0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c7c:	e7b0      	b.n	8009be0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c7e:	4b17      	ldr	r3, [pc, #92]	; (8009cdc <xTaskIncrementTick+0x170>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	4914      	ldr	r1, [pc, #80]	; (8009cd8 <xTaskIncrementTick+0x16c>)
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d907      	bls.n	8009ca6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e004      	b.n	8009ca6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c9c:	4b10      	ldr	r3, [pc, #64]	; (8009ce0 <xTaskIncrementTick+0x174>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	4a0f      	ldr	r2, [pc, #60]	; (8009ce0 <xTaskIncrementTick+0x174>)
 8009ca4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <xTaskIncrementTick+0x178>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009cb2:	697b      	ldr	r3, [r7, #20]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	200011a0 	.word	0x200011a0
 8009cc0:	2000117c 	.word	0x2000117c
 8009cc4:	20001130 	.word	0x20001130
 8009cc8:	20001134 	.word	0x20001134
 8009ccc:	20001190 	.word	0x20001190
 8009cd0:	20001198 	.word	0x20001198
 8009cd4:	20001180 	.word	0x20001180
 8009cd8:	20000ca8 	.word	0x20000ca8
 8009cdc:	20000ca4 	.word	0x20000ca4
 8009ce0:	20001188 	.word	0x20001188
 8009ce4:	2000118c 	.word	0x2000118c

08009ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cee:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <vTaskSwitchContext+0xb0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cf6:	4b29      	ldr	r3, [pc, #164]	; (8009d9c <vTaskSwitchContext+0xb4>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cfc:	e046      	b.n	8009d8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009cfe:	4b27      	ldr	r3, [pc, #156]	; (8009d9c <vTaskSwitchContext+0xb4>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009d04:	4b26      	ldr	r3, [pc, #152]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e010      	b.n	8009d2e <vTaskSwitchContext+0x46>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	607b      	str	r3, [r7, #4]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <vTaskSwitchContext+0x3e>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	491d      	ldr	r1, [pc, #116]	; (8009da4 <vTaskSwitchContext+0xbc>)
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0e4      	beq.n	8009d0c <vTaskSwitchContext+0x24>
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a15      	ldr	r2, [pc, #84]	; (8009da4 <vTaskSwitchContext+0xbc>)
 8009d4e:	4413      	add	r3, r2
 8009d50:	60bb      	str	r3, [r7, #8]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	605a      	str	r2, [r3, #4]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	3308      	adds	r3, #8
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d104      	bne.n	8009d72 <vTaskSwitchContext+0x8a>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	4a0b      	ldr	r2, [pc, #44]	; (8009da8 <vTaskSwitchContext+0xc0>)
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	4a08      	ldr	r2, [pc, #32]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <vTaskSwitchContext+0xc0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3358      	adds	r3, #88	; 0x58
 8009d88:	4a08      	ldr	r2, [pc, #32]	; (8009dac <vTaskSwitchContext+0xc4>)
 8009d8a:	6013      	str	r3, [r2, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	200011a0 	.word	0x200011a0
 8009d9c:	2000118c 	.word	0x2000118c
 8009da0:	20001180 	.word	0x20001180
 8009da4:	20000ca8 	.word	0x20000ca8
 8009da8:	20000ca4 	.word	0x20000ca4
 8009dac:	200000e4 	.word	0x200000e4

08009db0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60fb      	str	r3, [r7, #12]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dd6:	4b07      	ldr	r3, [pc, #28]	; (8009df4 <vTaskPlaceOnEventList+0x44>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3318      	adds	r3, #24
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fe fd69 	bl	80088b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009de4:	2101      	movs	r1, #1
 8009de6:	6838      	ldr	r0, [r7, #0]
 8009de8:	f000 faf8 	bl	800a3dc <prvAddCurrentTaskToDelayedList>
}
 8009dec:	bf00      	nop
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000ca4 	.word	0x20000ca4

08009df8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	617b      	str	r3, [r7, #20]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e20:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <vTaskPlaceOnEventListRestricted+0x54>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3318      	adds	r3, #24
 8009e26:	4619      	mov	r1, r3
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7fe fd20 	bl	800886e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e34:	f04f 33ff 	mov.w	r3, #4294967295
 8009e38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	68b8      	ldr	r0, [r7, #8]
 8009e3e:	f000 facd 	bl	800a3dc <prvAddCurrentTaskToDelayedList>
	}
 8009e42:	bf00      	nop
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000ca4 	.word	0x20000ca4

08009e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60fb      	str	r3, [r7, #12]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe fd51 	bl	8008928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e86:	4b1e      	ldr	r3, [pc, #120]	; (8009f00 <xTaskRemoveFromEventList+0xb0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d11d      	bne.n	8009eca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe fd48 	bl	8008928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	4b19      	ldr	r3, [pc, #100]	; (8009f04 <xTaskRemoveFromEventList+0xb4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d903      	bls.n	8009eac <xTaskRemoveFromEventList+0x5c>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a16      	ldr	r2, [pc, #88]	; (8009f04 <xTaskRemoveFromEventList+0xb4>)
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4a13      	ldr	r2, [pc, #76]	; (8009f08 <xTaskRemoveFromEventList+0xb8>)
 8009eba:	441a      	add	r2, r3
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f7fe fcd3 	bl	800886e <vListInsertEnd>
 8009ec8:	e005      	b.n	8009ed6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	3318      	adds	r3, #24
 8009ece:	4619      	mov	r1, r3
 8009ed0:	480e      	ldr	r0, [pc, #56]	; (8009f0c <xTaskRemoveFromEventList+0xbc>)
 8009ed2:	f7fe fccc 	bl	800886e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eda:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <xTaskRemoveFromEventList+0xc0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d905      	bls.n	8009ef0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <xTaskRemoveFromEventList+0xc4>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e001      	b.n	8009ef4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009ef4:	697b      	ldr	r3, [r7, #20]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200011a0 	.word	0x200011a0
 8009f04:	20001180 	.word	0x20001180
 8009f08:	20000ca8 	.word	0x20000ca8
 8009f0c:	20001138 	.word	0x20001138
 8009f10:	20000ca4 	.word	0x20000ca4
 8009f14:	2000118c 	.word	0x2000118c

08009f18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009f22:	4b29      	ldr	r3, [pc, #164]	; (8009fc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	613b      	str	r3, [r7, #16]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10a      	bne.n	8009f6c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60fb      	str	r3, [r7, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7fe fcdb 	bl	8008928 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fcd6 	bl	8008928 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d903      	bls.n	8009f90 <vTaskRemoveFromUnorderedEventList+0x78>
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a0f      	ldr	r2, [pc, #60]	; (8009fcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009f9e:	441a      	add	r2, r3
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fc61 	bl	800886e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d902      	bls.n	8009fc0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]
	}
}
 8009fc0:	bf00      	nop
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200011a0 	.word	0x200011a0
 8009fcc:	20001180 	.word	0x20001180
 8009fd0:	20000ca8 	.word	0x20000ca8
 8009fd4:	20000ca4 	.word	0x20000ca4
 8009fd8:	2000118c 	.word	0x2000118c

08009fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fe4:	4b06      	ldr	r3, [pc, #24]	; (800a000 <vTaskInternalSetTimeOutState+0x24>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <vTaskInternalSetTimeOutState+0x28>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	605a      	str	r2, [r3, #4]
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	20001190 	.word	0x20001190
 800a004:	2000117c 	.word	0x2000117c

0800a008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	613b      	str	r3, [r7, #16]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a04a:	f000 fe7b 	bl	800ad44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a04e:	4b1d      	ldr	r3, [pc, #116]	; (800a0c4 <xTaskCheckForTimeOut+0xbc>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a066:	d102      	bne.n	800a06e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]
 800a06c:	e023      	b.n	800a0b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <xTaskCheckForTimeOut+0xc0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d007      	beq.n	800a08a <xTaskCheckForTimeOut+0x82>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d302      	bcc.n	800a08a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	61fb      	str	r3, [r7, #28]
 800a088:	e015      	b.n	800a0b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	429a      	cmp	r2, r3
 800a092:	d20b      	bcs.n	800a0ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff ff9b 	bl	8009fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	61fb      	str	r3, [r7, #28]
 800a0aa:	e004      	b.n	800a0b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0b6:	f000 fe75 	bl	800ada4 <vPortExitCritical>

	return xReturn;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	2000117c 	.word	0x2000117c
 800a0c8:	20001190 	.word	0x20001190

0800a0cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0d0:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <vTaskMissedYield+0x14>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	2000118c 	.word	0x2000118c

0800a0e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0ec:	f000 f852 	bl	800a194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0f0:	4b06      	ldr	r3, [pc, #24]	; (800a10c <prvIdleTask+0x28>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d9f9      	bls.n	800a0ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <prvIdleTask+0x2c>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a108:	e7f0      	b.n	800a0ec <prvIdleTask+0x8>
 800a10a:	bf00      	nop
 800a10c:	20000ca8 	.word	0x20000ca8
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a11a:	2300      	movs	r3, #0
 800a11c:	607b      	str	r3, [r7, #4]
 800a11e:	e00c      	b.n	800a13a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4a12      	ldr	r2, [pc, #72]	; (800a174 <prvInitialiseTaskLists+0x60>)
 800a12c:	4413      	add	r3, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fb70 	bl	8008814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3301      	adds	r3, #1
 800a138:	607b      	str	r3, [r7, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b37      	cmp	r3, #55	; 0x37
 800a13e:	d9ef      	bls.n	800a120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a140:	480d      	ldr	r0, [pc, #52]	; (800a178 <prvInitialiseTaskLists+0x64>)
 800a142:	f7fe fb67 	bl	8008814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a146:	480d      	ldr	r0, [pc, #52]	; (800a17c <prvInitialiseTaskLists+0x68>)
 800a148:	f7fe fb64 	bl	8008814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a14c:	480c      	ldr	r0, [pc, #48]	; (800a180 <prvInitialiseTaskLists+0x6c>)
 800a14e:	f7fe fb61 	bl	8008814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a152:	480c      	ldr	r0, [pc, #48]	; (800a184 <prvInitialiseTaskLists+0x70>)
 800a154:	f7fe fb5e 	bl	8008814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a158:	480b      	ldr	r0, [pc, #44]	; (800a188 <prvInitialiseTaskLists+0x74>)
 800a15a:	f7fe fb5b 	bl	8008814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a15e:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <prvInitialiseTaskLists+0x78>)
 800a160:	4a05      	ldr	r2, [pc, #20]	; (800a178 <prvInitialiseTaskLists+0x64>)
 800a162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a164:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <prvInitialiseTaskLists+0x7c>)
 800a166:	4a05      	ldr	r2, [pc, #20]	; (800a17c <prvInitialiseTaskLists+0x68>)
 800a168:	601a      	str	r2, [r3, #0]
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000ca8 	.word	0x20000ca8
 800a178:	20001108 	.word	0x20001108
 800a17c:	2000111c 	.word	0x2000111c
 800a180:	20001138 	.word	0x20001138
 800a184:	2000114c 	.word	0x2000114c
 800a188:	20001164 	.word	0x20001164
 800a18c:	20001130 	.word	0x20001130
 800a190:	20001134 	.word	0x20001134

0800a194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a19a:	e019      	b.n	800a1d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a19c:	f000 fdd2 	bl	800ad44 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a1a0:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <prvCheckTasksWaitingTermination+0x50>)
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fbbb 	bl	8008928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <prvCheckTasksWaitingTermination+0x54>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	4a0b      	ldr	r2, [pc, #44]	; (800a1e8 <prvCheckTasksWaitingTermination+0x54>)
 800a1ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <prvCheckTasksWaitingTermination+0x58>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <prvCheckTasksWaitingTermination+0x58>)
 800a1c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1c6:	f000 fded 	bl	800ada4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f810 	bl	800a1f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <prvCheckTasksWaitingTermination+0x58>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e1      	bne.n	800a19c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2000114c 	.word	0x2000114c
 800a1e8:	20001178 	.word	0x20001178
 800a1ec:	20001160 	.word	0x20001160

0800a1f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3358      	adds	r3, #88	; 0x58
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 fabd 	bl	800b77c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d108      	bne.n	800a21e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	4618      	mov	r0, r3
 800a212:	f000 ff7d 	bl	800b110 <vPortFree>
				vPortFree( pxTCB );
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 ff7a 	bl	800b110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a21c:	e018      	b.n	800a250 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a224:	2b01      	cmp	r3, #1
 800a226:	d103      	bne.n	800a230 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 ff71 	bl	800b110 <vPortFree>
	}
 800a22e:	e00f      	b.n	800a250 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a236:	2b02      	cmp	r3, #2
 800a238:	d00a      	beq.n	800a250 <prvDeleteTCB+0x60>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	60fb      	str	r3, [r7, #12]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <prvDeleteTCB+0x5e>
	}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <prvResetNextTaskUnblockTime+0x44>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <prvResetNextTaskUnblockTime+0x14>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <prvResetNextTaskUnblockTime+0x16>
 800a26c:	2300      	movs	r3, #0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d004      	beq.n	800a27c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <prvResetNextTaskUnblockTime+0x48>)
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a27a:	e008      	b.n	800a28e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a27c:	4b07      	ldr	r3, [pc, #28]	; (800a29c <prvResetNextTaskUnblockTime+0x44>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	4a05      	ldr	r2, [pc, #20]	; (800a2a0 <prvResetNextTaskUnblockTime+0x48>)
 800a28c:	6013      	str	r3, [r2, #0]
}
 800a28e:	bf00      	nop
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20001130 	.word	0x20001130
 800a2a0:	20001198 	.word	0x20001198

0800a2a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <xTaskGetCurrentTaskHandle+0x1c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a2b0:	687b      	ldr	r3, [r7, #4]
	}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20000ca4 	.word	0x20000ca4

0800a2c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <xTaskGetSchedulerState+0x34>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	607b      	str	r3, [r7, #4]
 800a2d6:	e008      	b.n	800a2ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d8:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <xTaskGetSchedulerState+0x38>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	607b      	str	r3, [r7, #4]
 800a2e4:	e001      	b.n	800a2ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2ea:	687b      	ldr	r3, [r7, #4]
	}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20001184 	.word	0x20001184
 800a2fc:	200011a0 	.word	0x200011a0

0800a300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d056      	beq.n	800a3c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a316:	4b2e      	ldr	r3, [pc, #184]	; (800a3d0 <xTaskPriorityDisinherit+0xd0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d00a      	beq.n	800a336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60bb      	str	r3, [r7, #8]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a358:	1e5a      	subs	r2, r3, #1
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a366:	429a      	cmp	r2, r3
 800a368:	d02c      	beq.n	800a3c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d128      	bne.n	800a3c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	3304      	adds	r3, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fad6 	bl	8008928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <xTaskPriorityDisinherit+0xd4>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d903      	bls.n	800a3a4 <xTaskPriorityDisinherit+0xa4>
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	; (800a3d4 <xTaskPriorityDisinherit+0xd4>)
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4a09      	ldr	r2, [pc, #36]	; (800a3d8 <xTaskPriorityDisinherit+0xd8>)
 800a3b2:	441a      	add	r2, r3
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7fe fa57 	bl	800886e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3c4:	697b      	ldr	r3, [r7, #20]
	}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000ca4 	.word	0x20000ca4
 800a3d4:	20001180 	.word	0x20001180
 800a3d8:	20000ca8 	.word	0x20000ca8

0800a3dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3e6:	4b21      	ldr	r3, [pc, #132]	; (800a46c <prvAddCurrentTaskToDelayedList+0x90>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3ec:	4b20      	ldr	r3, [pc, #128]	; (800a470 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fa98 	bl	8008928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d10a      	bne.n	800a416 <prvAddCurrentTaskToDelayedList+0x3a>
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <prvAddCurrentTaskToDelayedList+0x94>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4819      	ldr	r0, [pc, #100]	; (800a474 <prvAddCurrentTaskToDelayedList+0x98>)
 800a410:	f7fe fa2d 	bl	800886e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a414:	e026      	b.n	800a464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4413      	add	r3, r2
 800a41c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a41e:	4b14      	ldr	r3, [pc, #80]	; (800a470 <prvAddCurrentTaskToDelayedList+0x94>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d209      	bcs.n	800a442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a42e:	4b12      	ldr	r3, [pc, #72]	; (800a478 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <prvAddCurrentTaskToDelayedList+0x94>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3304      	adds	r3, #4
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	f7fe fa3b 	bl	80088b6 <vListInsert>
}
 800a440:	e010      	b.n	800a464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <prvAddCurrentTaskToDelayedList+0x94>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe fa31 	bl	80088b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a454:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d202      	bcs.n	800a464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a45e:	4a08      	ldr	r2, [pc, #32]	; (800a480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6013      	str	r3, [r2, #0]
}
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	2000117c 	.word	0x2000117c
 800a470:	20000ca4 	.word	0x20000ca4
 800a474:	20001164 	.word	0x20001164
 800a478:	20001134 	.word	0x20001134
 800a47c:	20001130 	.word	0x20001130
 800a480:	20001198 	.word	0x20001198

0800a484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08a      	sub	sp, #40	; 0x28
 800a488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a48e:	f000 facb 	bl	800aa28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a492:	4b1c      	ldr	r3, [pc, #112]	; (800a504 <xTimerCreateTimerTask+0x80>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d021      	beq.n	800a4de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4a2:	1d3a      	adds	r2, r7, #4
 800a4a4:	f107 0108 	add.w	r1, r7, #8
 800a4a8:	f107 030c 	add.w	r3, r7, #12
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe f81b 	bl	80084e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	9202      	str	r2, [sp, #8]
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	2302      	movs	r3, #2
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	460a      	mov	r2, r1
 800a4c4:	4910      	ldr	r1, [pc, #64]	; (800a508 <xTimerCreateTimerTask+0x84>)
 800a4c6:	4811      	ldr	r0, [pc, #68]	; (800a50c <xTimerCreateTimerTask+0x88>)
 800a4c8:	f7fe ffca 	bl	8009460 <xTaskCreateStatic>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	4a10      	ldr	r2, [pc, #64]	; (800a510 <xTimerCreateTimerTask+0x8c>)
 800a4d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <xTimerCreateTimerTask+0x8c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	613b      	str	r3, [r7, #16]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a4fa:	697b      	ldr	r3, [r7, #20]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	200011d4 	.word	0x200011d4
 800a508:	0800c6f8 	.word	0x0800c6f8
 800a50c:	0800a631 	.word	0x0800a631
 800a510:	200011d8 	.word	0x200011d8

0800a514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	; 0x28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a522:	2300      	movs	r3, #0
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	623b      	str	r3, [r7, #32]
}
 800a53e:	bf00      	nop
 800a540:	e7fe      	b.n	800a540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a542:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <xTimerGenericCommand+0x98>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d02a      	beq.n	800a5a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b05      	cmp	r3, #5
 800a55a:	dc18      	bgt.n	800a58e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a55c:	f7ff feb2 	bl	800a2c4 <xTaskGetSchedulerState>
 800a560:	4603      	mov	r3, r0
 800a562:	2b02      	cmp	r3, #2
 800a564:	d109      	bne.n	800a57a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a566:	4b11      	ldr	r3, [pc, #68]	; (800a5ac <xTimerGenericCommand+0x98>)
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f107 0110 	add.w	r1, r7, #16
 800a56e:	2300      	movs	r3, #0
 800a570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a572:	f7fe fb91 	bl	8008c98 <xQueueGenericSend>
 800a576:	6278      	str	r0, [r7, #36]	; 0x24
 800a578:	e012      	b.n	800a5a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a57a:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <xTimerGenericCommand+0x98>)
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	f107 0110 	add.w	r1, r7, #16
 800a582:	2300      	movs	r3, #0
 800a584:	2200      	movs	r2, #0
 800a586:	f7fe fb87 	bl	8008c98 <xQueueGenericSend>
 800a58a:	6278      	str	r0, [r7, #36]	; 0x24
 800a58c:	e008      	b.n	800a5a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a58e:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <xTimerGenericCommand+0x98>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f107 0110 	add.w	r1, r7, #16
 800a596:	2300      	movs	r3, #0
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	f7fe fc7b 	bl	8008e94 <xQueueGenericSendFromISR>
 800a59e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3728      	adds	r7, #40	; 0x28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200011d4 	.word	0x200011d4

0800a5b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5ba:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <prvProcessExpiredTimer+0x7c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe f9ad 	bl	8008928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d122      	bne.n	800a61c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	699a      	ldr	r2, [r3, #24]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	18d1      	adds	r1, r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	6978      	ldr	r0, [r7, #20]
 800a5e4:	f000 f8c8 	bl	800a778 <prvInsertTimerInActiveList>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d016      	beq.n	800a61c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	f7ff ff8b 	bl	800a514 <xTimerGenericCommand>
 800a5fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10a      	bne.n	800a61c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60fb      	str	r3, [r7, #12]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	4798      	blx	r3
}
 800a624:	bf00      	nop
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	200011cc 	.word	0x200011cc

0800a630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f857 	bl	800a6f0 <prvGetNextExpireTime>
 800a642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f803 	bl	800a654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a64e:	f000 f8d5 	bl	800a7fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a652:	e7f1      	b.n	800a638 <prvTimerTask+0x8>

0800a654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a65e:	f7ff f9c9 	bl	80099f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a662:	f107 0308 	add.w	r3, r7, #8
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f866 	bl	800a738 <prvSampleTimeNow>
 800a66c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d130      	bne.n	800a6d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <prvProcessTimerOrBlockTask+0x3c>
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d806      	bhi.n	800a690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a682:	f7ff f9c5 	bl	8009a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff ff91 	bl	800a5b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a68e:	e024      	b.n	800a6da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a696:	4b13      	ldr	r3, [pc, #76]	; (800a6e4 <prvProcessTimerOrBlockTask+0x90>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bf0c      	ite	eq
 800a6a0:	2301      	moveq	r3, #1
 800a6a2:	2300      	movne	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <prvProcessTimerOrBlockTask+0x94>)
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f7fe fe9f 	bl	80093f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6ba:	f7ff f9a9 	bl	8009a10 <xTaskResumeAll>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6c4:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <prvProcessTimerOrBlockTask+0x98>)
 800a6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	f3bf 8f6f 	isb	sy
}
 800a6d4:	e001      	b.n	800a6da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6d6:	f7ff f99b 	bl	8009a10 <xTaskResumeAll>
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200011d0 	.word	0x200011d0
 800a6e8:	200011d4 	.word	0x200011d4
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6f8:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <prvGetNextExpireTime+0x44>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a716:	4b07      	ldr	r3, [pc, #28]	; (800a734 <prvGetNextExpireTime+0x44>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	e001      	b.n	800a726 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a726:	68fb      	ldr	r3, [r7, #12]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	200011cc 	.word	0x200011cc

0800a738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a740:	f7ff fa04 	bl	8009b4c <xTaskGetTickCount>
 800a744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <prvSampleTimeNow+0x3c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d205      	bcs.n	800a75c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a750:	f000 f908 	bl	800a964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	e002      	b.n	800a762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a762:	4a04      	ldr	r2, [pc, #16]	; (800a774 <prvSampleTimeNow+0x3c>)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200011dc 	.word	0x200011dc

0800a778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d812      	bhi.n	800a7c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d302      	bcc.n	800a7b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e01b      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7b2:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <prvInsertTimerInActiveList+0x7c>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7fe f87a 	bl	80088b6 <vListInsert>
 800a7c2:	e012      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d206      	bcs.n	800a7da <prvInsertTimerInActiveList+0x62>
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d302      	bcc.n	800a7da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e007      	b.n	800a7ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7da:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <prvInsertTimerInActiveList+0x80>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f7fe f866 	bl	80088b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	200011d0 	.word	0x200011d0
 800a7f8:	200011cc 	.word	0x200011cc

0800a7fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08e      	sub	sp, #56	; 0x38
 800a800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a802:	e09d      	b.n	800a940 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	da18      	bge.n	800a83c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a80a:	1d3b      	adds	r3, r7, #4
 800a80c:	3304      	adds	r3, #4
 800a80e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61fb      	str	r3, [r7, #28]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	6850      	ldr	r0, [r2, #4]
 800a834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a836:	6892      	ldr	r2, [r2, #8]
 800a838:	4611      	mov	r1, r2
 800a83a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	db7e      	blt.n	800a940 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	3304      	adds	r3, #4
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe f868 	bl	8008928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a858:	463b      	mov	r3, r7
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff ff6c 	bl	800a738 <prvSampleTimeNow>
 800a860:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b09      	cmp	r3, #9
 800a866:	d86a      	bhi.n	800a93e <prvProcessReceivedCommands+0x142>
 800a868:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <prvProcessReceivedCommands+0x74>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a899 	.word	0x0800a899
 800a87c:	0800a941 	.word	0x0800a941
 800a880:	0800a8f5 	.word	0x0800a8f5
 800a884:	0800a92d 	.word	0x0800a92d
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a899 	.word	0x0800a899
 800a890:	0800a941 	.word	0x0800a941
 800a894:	0800a8f5 	.word	0x0800a8f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	18d1      	adds	r1, r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a6:	f7ff ff67 	bl	800a778 <prvInsertTimerInActiveList>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d047      	beq.n	800a940 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d13f      	bne.n	800a940 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	441a      	add	r2, r3
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d2:	f7ff fe1f 	bl	800a514 <xTimerGenericCommand>
 800a8d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d130      	bne.n	800a940 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	61bb      	str	r3, [r7, #24]
}
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	617b      	str	r3, [r7, #20]
}
 800a914:	bf00      	nop
 800a916:	e7fe      	b.n	800a916 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	699a      	ldr	r2, [r3, #24]
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	18d1      	adds	r1, r2, r3
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a926:	f7ff ff27 	bl	800a778 <prvInsertTimerInActiveList>
					break;
 800a92a:	e009      	b.n	800a940 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d104      	bne.n	800a940 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a938:	f000 fbea 	bl	800b110 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a93c:	e000      	b.n	800a940 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a93e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a940:	4b07      	ldr	r3, [pc, #28]	; (800a960 <prvProcessReceivedCommands+0x164>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	1d39      	adds	r1, r7, #4
 800a946:	2200      	movs	r2, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fb3b 	bl	8008fc4 <xQueueReceive>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	f47f af57 	bne.w	800a804 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	3730      	adds	r7, #48	; 0x30
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	200011d4 	.word	0x200011d4

0800a964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a96a:	e045      	b.n	800a9f8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a96c:	4b2c      	ldr	r3, [pc, #176]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a976:	4b2a      	ldr	r3, [pc, #168]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3304      	adds	r3, #4
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd ffcf 	bl	8008928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d12e      	bne.n	800a9f8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d90e      	bls.n	800a9ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9b8:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fd ff77 	bl	80088b6 <vListInsert>
 800a9c8:	e016      	b.n	800a9f8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f7ff fd9d 	bl	800a514 <xTimerGenericCommand>
 800a9da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	603b      	str	r3, [r7, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	e7fe      	b.n	800a9f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1b4      	bne.n	800a96c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa02:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa08:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <prvSwitchTimerLists+0xc0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a04      	ldr	r2, [pc, #16]	; (800aa20 <prvSwitchTimerLists+0xbc>)
 800aa0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa10:	4a04      	ldr	r2, [pc, #16]	; (800aa24 <prvSwitchTimerLists+0xc0>)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	6013      	str	r3, [r2, #0]
}
 800aa16:	bf00      	nop
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200011cc 	.word	0x200011cc
 800aa24:	200011d0 	.word	0x200011d0

0800aa28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa2e:	f000 f989 	bl	800ad44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa32:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <prvCheckForValidListAndQueue+0x60>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d120      	bne.n	800aa7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa3a:	4814      	ldr	r0, [pc, #80]	; (800aa8c <prvCheckForValidListAndQueue+0x64>)
 800aa3c:	f7fd feea 	bl	8008814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa40:	4813      	ldr	r0, [pc, #76]	; (800aa90 <prvCheckForValidListAndQueue+0x68>)
 800aa42:	f7fd fee7 	bl	8008814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa46:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <prvCheckForValidListAndQueue+0x6c>)
 800aa48:	4a10      	ldr	r2, [pc, #64]	; (800aa8c <prvCheckForValidListAndQueue+0x64>)
 800aa4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa4c:	4b12      	ldr	r3, [pc, #72]	; (800aa98 <prvCheckForValidListAndQueue+0x70>)
 800aa4e:	4a10      	ldr	r2, [pc, #64]	; (800aa90 <prvCheckForValidListAndQueue+0x68>)
 800aa50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa52:	2300      	movs	r3, #0
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	4b11      	ldr	r3, [pc, #68]	; (800aa9c <prvCheckForValidListAndQueue+0x74>)
 800aa58:	4a11      	ldr	r2, [pc, #68]	; (800aaa0 <prvCheckForValidListAndQueue+0x78>)
 800aa5a:	2110      	movs	r1, #16
 800aa5c:	200a      	movs	r0, #10
 800aa5e:	f7fd fff5 	bl	8008a4c <xQueueGenericCreateStatic>
 800aa62:	4603      	mov	r3, r0
 800aa64:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <prvCheckForValidListAndQueue+0x60>)
 800aa66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa68:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <prvCheckForValidListAndQueue+0x60>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <prvCheckForValidListAndQueue+0x60>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	490b      	ldr	r1, [pc, #44]	; (800aaa4 <prvCheckForValidListAndQueue+0x7c>)
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fc94 	bl	80093a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa7c:	f000 f992 	bl	800ada4 <vPortExitCritical>
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	200011d4 	.word	0x200011d4
 800aa8c:	200011a4 	.word	0x200011a4
 800aa90:	200011b8 	.word	0x200011b8
 800aa94:	200011cc 	.word	0x200011cc
 800aa98:	200011d0 	.word	0x200011d0
 800aa9c:	20001280 	.word	0x20001280
 800aaa0:	200011e0 	.word	0x200011e0
 800aaa4:	0800c700 	.word	0x0800c700

0800aaa8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	; 0x28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800aab6:	f06f 0301 	mvn.w	r3, #1
 800aaba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aac8:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <xTimerPendFunctionCallFromISR+0x3c>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	f107 0114 	add.w	r1, r7, #20
 800aad0:	2300      	movs	r3, #0
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	f7fe f9de 	bl	8008e94 <xQueueGenericSendFromISR>
 800aad8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aadc:	4618      	mov	r0, r3
 800aade:	3728      	adds	r7, #40	; 0x28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	200011d4 	.word	0x200011d4

0800aae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3b04      	subs	r3, #4
 800aaf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3b04      	subs	r3, #4
 800ab06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f023 0201 	bic.w	r2, r3, #1
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b04      	subs	r3, #4
 800ab16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab18:	4a0c      	ldr	r2, [pc, #48]	; (800ab4c <pxPortInitialiseStack+0x64>)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3b14      	subs	r3, #20
 800ab22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3b04      	subs	r3, #4
 800ab2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f06f 0202 	mvn.w	r2, #2
 800ab36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	3b20      	subs	r3, #32
 800ab3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	0800ab51 	.word	0x0800ab51

0800ab50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab5a:	4b12      	ldr	r3, [pc, #72]	; (800aba4 <prvTaskExitError+0x54>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d00a      	beq.n	800ab7a <prvTaskExitError+0x2a>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	60fb      	str	r3, [r7, #12]
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <prvTaskExitError+0x28>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60bb      	str	r3, [r7, #8]
}
 800ab8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab8e:	bf00      	nop
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0fc      	beq.n	800ab90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20000088 	.word	0x20000088
	...

0800abb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <pxCurrentTCBConst2>)
 800abb2:	6819      	ldr	r1, [r3, #0]
 800abb4:	6808      	ldr	r0, [r1, #0]
 800abb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abba:	f380 8809 	msr	PSP, r0
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8811 	msr	BASEPRI, r0
 800abca:	4770      	bx	lr
 800abcc:	f3af 8000 	nop.w

0800abd0 <pxCurrentTCBConst2>:
 800abd0:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abd8:	4808      	ldr	r0, [pc, #32]	; (800abfc <prvPortStartFirstTask+0x24>)
 800abda:	6800      	ldr	r0, [r0, #0]
 800abdc:	6800      	ldr	r0, [r0, #0]
 800abde:	f380 8808 	msr	MSP, r0
 800abe2:	f04f 0000 	mov.w	r0, #0
 800abe6:	f380 8814 	msr	CONTROL, r0
 800abea:	b662      	cpsie	i
 800abec:	b661      	cpsie	f
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	df00      	svc	0
 800abf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abfa:	bf00      	nop
 800abfc:	e000ed08 	.word	0xe000ed08

0800ac00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac06:	4b46      	ldr	r3, [pc, #280]	; (800ad20 <xPortStartScheduler+0x120>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a46      	ldr	r2, [pc, #280]	; (800ad24 <xPortStartScheduler+0x124>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d10a      	bne.n	800ac26 <xPortStartScheduler+0x26>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	613b      	str	r3, [r7, #16]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac26:	4b3e      	ldr	r3, [pc, #248]	; (800ad20 <xPortStartScheduler+0x120>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a3f      	ldr	r2, [pc, #252]	; (800ad28 <xPortStartScheduler+0x128>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d10a      	bne.n	800ac46 <xPortStartScheduler+0x46>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	60fb      	str	r3, [r7, #12]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac46:	4b39      	ldr	r3, [pc, #228]	; (800ad2c <xPortStartScheduler+0x12c>)
 800ac48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	22ff      	movs	r2, #255	; 0xff
 800ac56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	4b31      	ldr	r3, [pc, #196]	; (800ad30 <xPortStartScheduler+0x130>)
 800ac6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac6e:	4b31      	ldr	r3, [pc, #196]	; (800ad34 <xPortStartScheduler+0x134>)
 800ac70:	2207      	movs	r2, #7
 800ac72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac74:	e009      	b.n	800ac8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac76:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <xPortStartScheduler+0x134>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	4a2d      	ldr	r2, [pc, #180]	; (800ad34 <xPortStartScheduler+0x134>)
 800ac7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac92:	2b80      	cmp	r3, #128	; 0x80
 800ac94:	d0ef      	beq.n	800ac76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac96:	4b27      	ldr	r3, [pc, #156]	; (800ad34 <xPortStartScheduler+0x134>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f1c3 0307 	rsb	r3, r3, #7
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d00a      	beq.n	800acb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	60bb      	str	r3, [r7, #8]
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800acb8:	4b1e      	ldr	r3, [pc, #120]	; (800ad34 <xPortStartScheduler+0x134>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <xPortStartScheduler+0x134>)
 800acc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800acc2:	4b1c      	ldr	r3, [pc, #112]	; (800ad34 <xPortStartScheduler+0x134>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acca:	4a1a      	ldr	r2, [pc, #104]	; (800ad34 <xPortStartScheduler+0x134>)
 800accc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acd6:	4b18      	ldr	r3, [pc, #96]	; (800ad38 <xPortStartScheduler+0x138>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <xPortStartScheduler+0x138>)
 800acdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ace0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <xPortStartScheduler+0x138>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a14      	ldr	r2, [pc, #80]	; (800ad38 <xPortStartScheduler+0x138>)
 800ace8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acee:	f000 f8dd 	bl	800aeac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <xPortStartScheduler+0x13c>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acf8:	f000 f8fc 	bl	800aef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acfc:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <xPortStartScheduler+0x140>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a0f      	ldr	r2, [pc, #60]	; (800ad40 <xPortStartScheduler+0x140>)
 800ad02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad08:	f7ff ff66 	bl	800abd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad0c:	f7fe ffec 	bl	8009ce8 <vTaskSwitchContext>
	prvTaskExitError();
 800ad10:	f7ff ff1e 	bl	800ab50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	e000ed00 	.word	0xe000ed00
 800ad24:	410fc271 	.word	0x410fc271
 800ad28:	410fc270 	.word	0x410fc270
 800ad2c:	e000e400 	.word	0xe000e400
 800ad30:	200012d0 	.word	0x200012d0
 800ad34:	200012d4 	.word	0x200012d4
 800ad38:	e000ed20 	.word	0xe000ed20
 800ad3c:	20000088 	.word	0x20000088
 800ad40:	e000ef34 	.word	0xe000ef34

0800ad44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	607b      	str	r3, [r7, #4]
}
 800ad5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad5e:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <vPortEnterCritical+0x58>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a0d      	ldr	r2, [pc, #52]	; (800ad9c <vPortEnterCritical+0x58>)
 800ad66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad68:	4b0c      	ldr	r3, [pc, #48]	; (800ad9c <vPortEnterCritical+0x58>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d10f      	bne.n	800ad90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad70:	4b0b      	ldr	r3, [pc, #44]	; (800ada0 <vPortEnterCritical+0x5c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	603b      	str	r3, [r7, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <vPortEnterCritical+0x4a>
	}
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20000088 	.word	0x20000088
 800ada0:	e000ed04 	.word	0xe000ed04

0800ada4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adaa:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <vPortExitCritical+0x50>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <vPortExitCritical+0x24>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	607b      	str	r3, [r7, #4]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <vPortExitCritical+0x50>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3b01      	subs	r3, #1
 800adce:	4a09      	ldr	r2, [pc, #36]	; (800adf4 <vPortExitCritical+0x50>)
 800add0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800add2:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <vPortExitCritical+0x50>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d105      	bne.n	800ade6 <vPortExitCritical+0x42>
 800adda:	2300      	movs	r3, #0
 800addc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	f383 8811 	msr	BASEPRI, r3
}
 800ade4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000088 	.word	0x20000088
	...

0800ae00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae00:	f3ef 8009 	mrs	r0, PSP
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	4b15      	ldr	r3, [pc, #84]	; (800ae60 <pxCurrentTCBConst>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	f01e 0f10 	tst.w	lr, #16
 800ae10:	bf08      	it	eq
 800ae12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1a:	6010      	str	r0, [r2, #0]
 800ae1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae24:	f380 8811 	msr	BASEPRI, r0
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f7fe ff5a 	bl	8009ce8 <vTaskSwitchContext>
 800ae34:	f04f 0000 	mov.w	r0, #0
 800ae38:	f380 8811 	msr	BASEPRI, r0
 800ae3c:	bc09      	pop	{r0, r3}
 800ae3e:	6819      	ldr	r1, [r3, #0]
 800ae40:	6808      	ldr	r0, [r1, #0]
 800ae42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae46:	f01e 0f10 	tst.w	lr, #16
 800ae4a:	bf08      	it	eq
 800ae4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae50:	f380 8809 	msr	PSP, r0
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	f3af 8000 	nop.w

0800ae60 <pxCurrentTCBConst>:
 800ae60:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop

0800ae68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	607b      	str	r3, [r7, #4]
}
 800ae80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae82:	f7fe fe73 	bl	8009b6c <xTaskIncrementTick>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <SysTick_Handler+0x40>)
 800ae8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	2300      	movs	r3, #0
 800ae96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	f383 8811 	msr	BASEPRI, r3
}
 800ae9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <vPortSetupTimerInterrupt+0x34>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aeb6:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <vPortSetupTimerInterrupt+0x38>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aebc:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <vPortSetupTimerInterrupt+0x3c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <vPortSetupTimerInterrupt+0x40>)
 800aec2:	fba2 2303 	umull	r2, r3, r2, r3
 800aec6:	099b      	lsrs	r3, r3, #6
 800aec8:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <vPortSetupTimerInterrupt+0x44>)
 800aeca:	3b01      	subs	r3, #1
 800aecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aece:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <vPortSetupTimerInterrupt+0x34>)
 800aed0:	2207      	movs	r2, #7
 800aed2:	601a      	str	r2, [r3, #0]
}
 800aed4:	bf00      	nop
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	e000e010 	.word	0xe000e010
 800aee4:	e000e018 	.word	0xe000e018
 800aee8:	20000060 	.word	0x20000060
 800aeec:	10624dd3 	.word	0x10624dd3
 800aef0:	e000e014 	.word	0xe000e014

0800aef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af04 <vPortEnableVFP+0x10>
 800aef8:	6801      	ldr	r1, [r0, #0]
 800aefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aefe:	6001      	str	r1, [r0, #0]
 800af00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af02:	bf00      	nop
 800af04:	e000ed88 	.word	0xe000ed88

0800af08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af0e:	f3ef 8305 	mrs	r3, IPSR
 800af12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b0f      	cmp	r3, #15
 800af18:	d914      	bls.n	800af44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af1a:	4a17      	ldr	r2, [pc, #92]	; (800af78 <vPortValidateInterruptPriority+0x70>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af24:	4b15      	ldr	r3, [pc, #84]	; (800af7c <vPortValidateInterruptPriority+0x74>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	7afa      	ldrb	r2, [r7, #11]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d20a      	bcs.n	800af44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	607b      	str	r3, [r7, #4]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af44:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <vPortValidateInterruptPriority+0x78>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <vPortValidateInterruptPriority+0x7c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d90a      	bls.n	800af6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	603b      	str	r3, [r7, #0]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <vPortValidateInterruptPriority+0x60>
	}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	e000e3f0 	.word	0xe000e3f0
 800af7c:	200012d0 	.word	0x200012d0
 800af80:	e000ed0c 	.word	0xe000ed0c
 800af84:	200012d4 	.word	0x200012d4

0800af88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af90:	2300      	movs	r3, #0
 800af92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af94:	f7fe fd2e 	bl	80099f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <pvPortMalloc+0x174>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afa0:	f000 f910 	bl	800b1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afa4:	4b56      	ldr	r3, [pc, #344]	; (800b100 <pvPortMalloc+0x178>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	f040 808e 	bne.w	800b0ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01d      	beq.n	800aff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800afb8:	2208      	movs	r2, #8
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d014      	beq.n	800aff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <pvPortMalloc+0x6c>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	617b      	str	r3, [r7, #20]
}
 800aff0:	bf00      	nop
 800aff2:	e7fe      	b.n	800aff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d069      	beq.n	800b0ce <pvPortMalloc+0x146>
 800affa:	4b42      	ldr	r3, [pc, #264]	; (800b104 <pvPortMalloc+0x17c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d864      	bhi.n	800b0ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b004:	4b40      	ldr	r3, [pc, #256]	; (800b108 <pvPortMalloc+0x180>)
 800b006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b008:	4b3f      	ldr	r3, [pc, #252]	; (800b108 <pvPortMalloc+0x180>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b00e:	e004      	b.n	800b01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	429a      	cmp	r2, r3
 800b022:	d903      	bls.n	800b02c <pvPortMalloc+0xa4>
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1f1      	bne.n	800b010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b02c:	4b33      	ldr	r3, [pc, #204]	; (800b0fc <pvPortMalloc+0x174>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b032:	429a      	cmp	r2, r3
 800b034:	d04b      	beq.n	800b0ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2208      	movs	r2, #8
 800b03c:	4413      	add	r3, r2
 800b03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	2308      	movs	r3, #8
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	429a      	cmp	r2, r3
 800b056:	d91f      	bls.n	800b098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	f003 0307 	and.w	r3, r3, #7
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <pvPortMalloc+0xf8>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	613b      	str	r3, [r7, #16]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b092:	69b8      	ldr	r0, [r7, #24]
 800b094:	f000 f8f8 	bl	800b288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b098:	4b1a      	ldr	r3, [pc, #104]	; (800b104 <pvPortMalloc+0x17c>)
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	4a18      	ldr	r2, [pc, #96]	; (800b104 <pvPortMalloc+0x17c>)
 800b0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0a6:	4b17      	ldr	r3, [pc, #92]	; (800b104 <pvPortMalloc+0x17c>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b18      	ldr	r3, [pc, #96]	; (800b10c <pvPortMalloc+0x184>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d203      	bcs.n	800b0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0b2:	4b14      	ldr	r3, [pc, #80]	; (800b104 <pvPortMalloc+0x17c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a15      	ldr	r2, [pc, #84]	; (800b10c <pvPortMalloc+0x184>)
 800b0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	4b10      	ldr	r3, [pc, #64]	; (800b100 <pvPortMalloc+0x178>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0ce:	f7fe fc9f 	bl	8009a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <pvPortMalloc+0x16a>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	60fb      	str	r3, [r7, #12]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <pvPortMalloc+0x168>
	return pvReturn;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	; 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200026e0 	.word	0x200026e0
 800b100:	200026ec 	.word	0x200026ec
 800b104:	200026e4 	.word	0x200026e4
 800b108:	200026d8 	.word	0x200026d8
 800b10c:	200026e8 	.word	0x200026e8

0800b110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d048      	beq.n	800b1b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b122:	2308      	movs	r3, #8
 800b124:	425b      	negs	r3, r3
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4413      	add	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	4b21      	ldr	r3, [pc, #132]	; (800b1bc <vPortFree+0xac>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4013      	ands	r3, r2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10a      	bne.n	800b154 <vPortFree+0x44>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	60fb      	str	r3, [r7, #12]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <vPortFree+0x62>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	60bb      	str	r3, [r7, #8]
}
 800b16e:	bf00      	nop
 800b170:	e7fe      	b.n	800b170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <vPortFree+0xac>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4013      	ands	r3, r2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d019      	beq.n	800b1b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d115      	bne.n	800b1b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <vPortFree+0xac>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	43db      	mvns	r3, r3
 800b192:	401a      	ands	r2, r3
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b198:	f7fe fc2c 	bl	80099f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <vPortFree+0xb0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4a06      	ldr	r2, [pc, #24]	; (800b1c0 <vPortFree+0xb0>)
 800b1a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1aa:	6938      	ldr	r0, [r7, #16]
 800b1ac:	f000 f86c 	bl	800b288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b1b0:	f7fe fc2e 	bl	8009a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1b4:	bf00      	nop
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200026ec 	.word	0x200026ec
 800b1c0:	200026e4 	.word	0x200026e4

0800b1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1d0:	4b27      	ldr	r3, [pc, #156]	; (800b270 <prvHeapInit+0xac>)
 800b1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00c      	beq.n	800b1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0307 	bic.w	r3, r3, #7
 800b1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <prvHeapInit+0xac>)
 800b1f4:	4413      	add	r3, r2
 800b1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1fc:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <prvHeapInit+0xb0>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b202:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <prvHeapInit+0xb0>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	4413      	add	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b210:	2208      	movs	r2, #8
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a15      	ldr	r2, [pc, #84]	; (800b278 <prvHeapInit+0xb4>)
 800b224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <prvHeapInit+0xb4>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <prvHeapInit+0xb4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b244:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <prvHeapInit+0xb4>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <prvHeapInit+0xb8>)
 800b252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <prvHeapInit+0xbc>)
 800b25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <prvHeapInit+0xc0>)
 800b25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	200012d8 	.word	0x200012d8
 800b274:	200026d8 	.word	0x200026d8
 800b278:	200026e0 	.word	0x200026e0
 800b27c:	200026e8 	.word	0x200026e8
 800b280:	200026e4 	.word	0x200026e4
 800b284:	200026ec 	.word	0x200026ec

0800b288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b290:	4b28      	ldr	r3, [pc, #160]	; (800b334 <prvInsertBlockIntoFreeList+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e002      	b.n	800b29c <prvInsertBlockIntoFreeList+0x14>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d8f7      	bhi.n	800b296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d108      	bne.n	800b2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	441a      	add	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d118      	bne.n	800b310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d00d      	beq.n	800b306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	e008      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b306:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e003      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d002      	beq.n	800b326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b326:	bf00      	nop
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	200026d8 	.word	0x200026d8
 800b338:	200026e0 	.word	0x200026e0

0800b33c <std>:
 800b33c:	2300      	movs	r3, #0
 800b33e:	b510      	push	{r4, lr}
 800b340:	4604      	mov	r4, r0
 800b342:	e9c0 3300 	strd	r3, r3, [r0]
 800b346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b34a:	6083      	str	r3, [r0, #8]
 800b34c:	8181      	strh	r1, [r0, #12]
 800b34e:	6643      	str	r3, [r0, #100]	; 0x64
 800b350:	81c2      	strh	r2, [r0, #14]
 800b352:	6183      	str	r3, [r0, #24]
 800b354:	4619      	mov	r1, r3
 800b356:	2208      	movs	r2, #8
 800b358:	305c      	adds	r0, #92	; 0x5c
 800b35a:	f000 f9f7 	bl	800b74c <memset>
 800b35e:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <std+0x58>)
 800b360:	6263      	str	r3, [r4, #36]	; 0x24
 800b362:	4b0d      	ldr	r3, [pc, #52]	; (800b398 <std+0x5c>)
 800b364:	62a3      	str	r3, [r4, #40]	; 0x28
 800b366:	4b0d      	ldr	r3, [pc, #52]	; (800b39c <std+0x60>)
 800b368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b36a:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <std+0x64>)
 800b36c:	6323      	str	r3, [r4, #48]	; 0x30
 800b36e:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <std+0x68>)
 800b370:	6224      	str	r4, [r4, #32]
 800b372:	429c      	cmp	r4, r3
 800b374:	d006      	beq.n	800b384 <std+0x48>
 800b376:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b37a:	4294      	cmp	r4, r2
 800b37c:	d002      	beq.n	800b384 <std+0x48>
 800b37e:	33d0      	adds	r3, #208	; 0xd0
 800b380:	429c      	cmp	r4, r3
 800b382:	d105      	bne.n	800b390 <std+0x54>
 800b384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b38c:	f000 baac 	b.w	800b8e8 <__retarget_lock_init_recursive>
 800b390:	bd10      	pop	{r4, pc}
 800b392:	bf00      	nop
 800b394:	0800b59d 	.word	0x0800b59d
 800b398:	0800b5bf 	.word	0x0800b5bf
 800b39c:	0800b5f7 	.word	0x0800b5f7
 800b3a0:	0800b61b 	.word	0x0800b61b
 800b3a4:	200026f0 	.word	0x200026f0

0800b3a8 <stdio_exit_handler>:
 800b3a8:	4a02      	ldr	r2, [pc, #8]	; (800b3b4 <stdio_exit_handler+0xc>)
 800b3aa:	4903      	ldr	r1, [pc, #12]	; (800b3b8 <stdio_exit_handler+0x10>)
 800b3ac:	4803      	ldr	r0, [pc, #12]	; (800b3bc <stdio_exit_handler+0x14>)
 800b3ae:	f000 b869 	b.w	800b484 <_fwalk_sglue>
 800b3b2:	bf00      	nop
 800b3b4:	2000008c 	.word	0x2000008c
 800b3b8:	0800c1b1 	.word	0x0800c1b1
 800b3bc:	20000098 	.word	0x20000098

0800b3c0 <cleanup_stdio>:
 800b3c0:	6841      	ldr	r1, [r0, #4]
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <cleanup_stdio+0x34>)
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	d001      	beq.n	800b3d0 <cleanup_stdio+0x10>
 800b3cc:	f000 fef0 	bl	800c1b0 <_fflush_r>
 800b3d0:	68a1      	ldr	r1, [r4, #8]
 800b3d2:	4b09      	ldr	r3, [pc, #36]	; (800b3f8 <cleanup_stdio+0x38>)
 800b3d4:	4299      	cmp	r1, r3
 800b3d6:	d002      	beq.n	800b3de <cleanup_stdio+0x1e>
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fee9 	bl	800c1b0 <_fflush_r>
 800b3de:	68e1      	ldr	r1, [r4, #12]
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <cleanup_stdio+0x3c>)
 800b3e2:	4299      	cmp	r1, r3
 800b3e4:	d004      	beq.n	800b3f0 <cleanup_stdio+0x30>
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ec:	f000 bee0 	b.w	800c1b0 <_fflush_r>
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200026f0 	.word	0x200026f0
 800b3f8:	20002758 	.word	0x20002758
 800b3fc:	200027c0 	.word	0x200027c0

0800b400 <global_stdio_init.part.0>:
 800b400:	b510      	push	{r4, lr}
 800b402:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <global_stdio_init.part.0+0x30>)
 800b404:	4c0b      	ldr	r4, [pc, #44]	; (800b434 <global_stdio_init.part.0+0x34>)
 800b406:	4a0c      	ldr	r2, [pc, #48]	; (800b438 <global_stdio_init.part.0+0x38>)
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	4620      	mov	r0, r4
 800b40c:	2200      	movs	r2, #0
 800b40e:	2104      	movs	r1, #4
 800b410:	f7ff ff94 	bl	800b33c <std>
 800b414:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b418:	2201      	movs	r2, #1
 800b41a:	2109      	movs	r1, #9
 800b41c:	f7ff ff8e 	bl	800b33c <std>
 800b420:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b424:	2202      	movs	r2, #2
 800b426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42a:	2112      	movs	r1, #18
 800b42c:	f7ff bf86 	b.w	800b33c <std>
 800b430:	20002828 	.word	0x20002828
 800b434:	200026f0 	.word	0x200026f0
 800b438:	0800b3a9 	.word	0x0800b3a9

0800b43c <__sfp_lock_acquire>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__sfp_lock_acquire+0x8>)
 800b43e:	f000 ba54 	b.w	800b8ea <__retarget_lock_acquire_recursive>
 800b442:	bf00      	nop
 800b444:	20002831 	.word	0x20002831

0800b448 <__sfp_lock_release>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__sfp_lock_release+0x8>)
 800b44a:	f000 ba4f 	b.w	800b8ec <__retarget_lock_release_recursive>
 800b44e:	bf00      	nop
 800b450:	20002831 	.word	0x20002831

0800b454 <__sinit>:
 800b454:	b510      	push	{r4, lr}
 800b456:	4604      	mov	r4, r0
 800b458:	f7ff fff0 	bl	800b43c <__sfp_lock_acquire>
 800b45c:	6a23      	ldr	r3, [r4, #32]
 800b45e:	b11b      	cbz	r3, 800b468 <__sinit+0x14>
 800b460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b464:	f7ff bff0 	b.w	800b448 <__sfp_lock_release>
 800b468:	4b04      	ldr	r3, [pc, #16]	; (800b47c <__sinit+0x28>)
 800b46a:	6223      	str	r3, [r4, #32]
 800b46c:	4b04      	ldr	r3, [pc, #16]	; (800b480 <__sinit+0x2c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f5      	bne.n	800b460 <__sinit+0xc>
 800b474:	f7ff ffc4 	bl	800b400 <global_stdio_init.part.0>
 800b478:	e7f2      	b.n	800b460 <__sinit+0xc>
 800b47a:	bf00      	nop
 800b47c:	0800b3c1 	.word	0x0800b3c1
 800b480:	20002828 	.word	0x20002828

0800b484 <_fwalk_sglue>:
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b488:	4607      	mov	r7, r0
 800b48a:	4688      	mov	r8, r1
 800b48c:	4614      	mov	r4, r2
 800b48e:	2600      	movs	r6, #0
 800b490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b494:	f1b9 0901 	subs.w	r9, r9, #1
 800b498:	d505      	bpl.n	800b4a6 <_fwalk_sglue+0x22>
 800b49a:	6824      	ldr	r4, [r4, #0]
 800b49c:	2c00      	cmp	r4, #0
 800b49e:	d1f7      	bne.n	800b490 <_fwalk_sglue+0xc>
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a6:	89ab      	ldrh	r3, [r5, #12]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d907      	bls.n	800b4bc <_fwalk_sglue+0x38>
 800b4ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	d003      	beq.n	800b4bc <_fwalk_sglue+0x38>
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	47c0      	blx	r8
 800b4ba:	4306      	orrs	r6, r0
 800b4bc:	3568      	adds	r5, #104	; 0x68
 800b4be:	e7e9      	b.n	800b494 <_fwalk_sglue+0x10>

0800b4c0 <iprintf>:
 800b4c0:	b40f      	push	{r0, r1, r2, r3}
 800b4c2:	b507      	push	{r0, r1, r2, lr}
 800b4c4:	4906      	ldr	r1, [pc, #24]	; (800b4e0 <iprintf+0x20>)
 800b4c6:	ab04      	add	r3, sp, #16
 800b4c8:	6808      	ldr	r0, [r1, #0]
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	6881      	ldr	r1, [r0, #8]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f000 fb3d 	bl	800bb50 <_vfiprintf_r>
 800b4d6:	b003      	add	sp, #12
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b004      	add	sp, #16
 800b4de:	4770      	bx	lr
 800b4e0:	200000e4 	.word	0x200000e4

0800b4e4 <_puts_r>:
 800b4e4:	6a03      	ldr	r3, [r0, #32]
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	6884      	ldr	r4, [r0, #8]
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	460e      	mov	r6, r1
 800b4ee:	b90b      	cbnz	r3, 800b4f4 <_puts_r+0x10>
 800b4f0:	f7ff ffb0 	bl	800b454 <__sinit>
 800b4f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4f6:	07db      	lsls	r3, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_puts_r+0x22>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	0598      	lsls	r0, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_puts_r+0x22>
 800b500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b502:	f000 f9f2 	bl	800b8ea <__retarget_lock_acquire_recursive>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	0719      	lsls	r1, r3, #28
 800b50a:	d513      	bpl.n	800b534 <_puts_r+0x50>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	b18b      	cbz	r3, 800b534 <_puts_r+0x50>
 800b510:	3e01      	subs	r6, #1
 800b512:	68a3      	ldr	r3, [r4, #8]
 800b514:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b518:	3b01      	subs	r3, #1
 800b51a:	60a3      	str	r3, [r4, #8]
 800b51c:	b9e9      	cbnz	r1, 800b55a <_puts_r+0x76>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	da2e      	bge.n	800b580 <_puts_r+0x9c>
 800b522:	4622      	mov	r2, r4
 800b524:	210a      	movs	r1, #10
 800b526:	4628      	mov	r0, r5
 800b528:	f000 f87b 	bl	800b622 <__swbuf_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	d007      	beq.n	800b540 <_puts_r+0x5c>
 800b530:	250a      	movs	r5, #10
 800b532:	e007      	b.n	800b544 <_puts_r+0x60>
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	f000 f8b0 	bl	800b69c <__swsetup_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d0e7      	beq.n	800b510 <_puts_r+0x2c>
 800b540:	f04f 35ff 	mov.w	r5, #4294967295
 800b544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b546:	07da      	lsls	r2, r3, #31
 800b548:	d405      	bmi.n	800b556 <_puts_r+0x72>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	059b      	lsls	r3, r3, #22
 800b54e:	d402      	bmi.n	800b556 <_puts_r+0x72>
 800b550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b552:	f000 f9cb 	bl	800b8ec <__retarget_lock_release_recursive>
 800b556:	4628      	mov	r0, r5
 800b558:	bd70      	pop	{r4, r5, r6, pc}
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	da04      	bge.n	800b568 <_puts_r+0x84>
 800b55e:	69a2      	ldr	r2, [r4, #24]
 800b560:	429a      	cmp	r2, r3
 800b562:	dc06      	bgt.n	800b572 <_puts_r+0x8e>
 800b564:	290a      	cmp	r1, #10
 800b566:	d004      	beq.n	800b572 <_puts_r+0x8e>
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	6022      	str	r2, [r4, #0]
 800b56e:	7019      	strb	r1, [r3, #0]
 800b570:	e7cf      	b.n	800b512 <_puts_r+0x2e>
 800b572:	4622      	mov	r2, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 f854 	bl	800b622 <__swbuf_r>
 800b57a:	3001      	adds	r0, #1
 800b57c:	d1c9      	bne.n	800b512 <_puts_r+0x2e>
 800b57e:	e7df      	b.n	800b540 <_puts_r+0x5c>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	250a      	movs	r5, #10
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	6022      	str	r2, [r4, #0]
 800b588:	701d      	strb	r5, [r3, #0]
 800b58a:	e7db      	b.n	800b544 <_puts_r+0x60>

0800b58c <puts>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	; (800b598 <puts+0xc>)
 800b58e:	4601      	mov	r1, r0
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f7ff bfa7 	b.w	800b4e4 <_puts_r>
 800b596:	bf00      	nop
 800b598:	200000e4 	.word	0x200000e4

0800b59c <__sread>:
 800b59c:	b510      	push	{r4, lr}
 800b59e:	460c      	mov	r4, r1
 800b5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a4:	f000 f952 	bl	800b84c <_read_r>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	bfab      	itete	ge
 800b5ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b0:	181b      	addge	r3, r3, r0
 800b5b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5b6:	bfac      	ite	ge
 800b5b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5ba:	81a3      	strhlt	r3, [r4, #12]
 800b5bc:	bd10      	pop	{r4, pc}

0800b5be <__swrite>:
 800b5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	05db      	lsls	r3, r3, #23
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	d505      	bpl.n	800b5dc <__swrite+0x1e>
 800b5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f000 f926 	bl	800b828 <_lseek_r>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	f000 b93d 	b.w	800b870 <_write_r>

0800b5f6 <__sseek>:
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fe:	f000 f913 	bl	800b828 <_lseek_r>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	bf15      	itete	ne
 800b608:	6560      	strne	r0, [r4, #84]	; 0x54
 800b60a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b60e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b612:	81a3      	strheq	r3, [r4, #12]
 800b614:	bf18      	it	ne
 800b616:	81a3      	strhne	r3, [r4, #12]
 800b618:	bd10      	pop	{r4, pc}

0800b61a <__sclose>:
 800b61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61e:	f000 b89d 	b.w	800b75c <_close_r>

0800b622 <__swbuf_r>:
 800b622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b624:	460e      	mov	r6, r1
 800b626:	4614      	mov	r4, r2
 800b628:	4605      	mov	r5, r0
 800b62a:	b118      	cbz	r0, 800b634 <__swbuf_r+0x12>
 800b62c:	6a03      	ldr	r3, [r0, #32]
 800b62e:	b90b      	cbnz	r3, 800b634 <__swbuf_r+0x12>
 800b630:	f7ff ff10 	bl	800b454 <__sinit>
 800b634:	69a3      	ldr	r3, [r4, #24]
 800b636:	60a3      	str	r3, [r4, #8]
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	071a      	lsls	r2, r3, #28
 800b63c:	d525      	bpl.n	800b68a <__swbuf_r+0x68>
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	b31b      	cbz	r3, 800b68a <__swbuf_r+0x68>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	6922      	ldr	r2, [r4, #16]
 800b646:	1a98      	subs	r0, r3, r2
 800b648:	6963      	ldr	r3, [r4, #20]
 800b64a:	b2f6      	uxtb	r6, r6
 800b64c:	4283      	cmp	r3, r0
 800b64e:	4637      	mov	r7, r6
 800b650:	dc04      	bgt.n	800b65c <__swbuf_r+0x3a>
 800b652:	4621      	mov	r1, r4
 800b654:	4628      	mov	r0, r5
 800b656:	f000 fdab 	bl	800c1b0 <_fflush_r>
 800b65a:	b9e0      	cbnz	r0, 800b696 <__swbuf_r+0x74>
 800b65c:	68a3      	ldr	r3, [r4, #8]
 800b65e:	3b01      	subs	r3, #1
 800b660:	60a3      	str	r3, [r4, #8]
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	1c5a      	adds	r2, r3, #1
 800b666:	6022      	str	r2, [r4, #0]
 800b668:	701e      	strb	r6, [r3, #0]
 800b66a:	6962      	ldr	r2, [r4, #20]
 800b66c:	1c43      	adds	r3, r0, #1
 800b66e:	429a      	cmp	r2, r3
 800b670:	d004      	beq.n	800b67c <__swbuf_r+0x5a>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	07db      	lsls	r3, r3, #31
 800b676:	d506      	bpl.n	800b686 <__swbuf_r+0x64>
 800b678:	2e0a      	cmp	r6, #10
 800b67a:	d104      	bne.n	800b686 <__swbuf_r+0x64>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 fd96 	bl	800c1b0 <_fflush_r>
 800b684:	b938      	cbnz	r0, 800b696 <__swbuf_r+0x74>
 800b686:	4638      	mov	r0, r7
 800b688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b68a:	4621      	mov	r1, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	f000 f805 	bl	800b69c <__swsetup_r>
 800b692:	2800      	cmp	r0, #0
 800b694:	d0d5      	beq.n	800b642 <__swbuf_r+0x20>
 800b696:	f04f 37ff 	mov.w	r7, #4294967295
 800b69a:	e7f4      	b.n	800b686 <__swbuf_r+0x64>

0800b69c <__swsetup_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4b2a      	ldr	r3, [pc, #168]	; (800b748 <__swsetup_r+0xac>)
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	b118      	cbz	r0, 800b6b0 <__swsetup_r+0x14>
 800b6a8:	6a03      	ldr	r3, [r0, #32]
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <__swsetup_r+0x14>
 800b6ac:	f7ff fed2 	bl	800b454 <__sinit>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6b6:	0718      	lsls	r0, r3, #28
 800b6b8:	d422      	bmi.n	800b700 <__swsetup_r+0x64>
 800b6ba:	06d9      	lsls	r1, r3, #27
 800b6bc:	d407      	bmi.n	800b6ce <__swsetup_r+0x32>
 800b6be:	2309      	movs	r3, #9
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	e034      	b.n	800b738 <__swsetup_r+0x9c>
 800b6ce:	0758      	lsls	r0, r3, #29
 800b6d0:	d512      	bpl.n	800b6f8 <__swsetup_r+0x5c>
 800b6d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d4:	b141      	cbz	r1, 800b6e8 <__swsetup_r+0x4c>
 800b6d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6da:	4299      	cmp	r1, r3
 800b6dc:	d002      	beq.n	800b6e4 <__swsetup_r+0x48>
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 f914 	bl	800b90c <_free_r>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	6063      	str	r3, [r4, #4]
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f043 0308 	orr.w	r3, r3, #8
 800b6fe:	81a3      	strh	r3, [r4, #12]
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	b94b      	cbnz	r3, 800b718 <__swsetup_r+0x7c>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b70a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b70e:	d003      	beq.n	800b718 <__swsetup_r+0x7c>
 800b710:	4621      	mov	r1, r4
 800b712:	4628      	mov	r0, r5
 800b714:	f000 fd9a 	bl	800c24c <__smakebuf_r>
 800b718:	89a0      	ldrh	r0, [r4, #12]
 800b71a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b71e:	f010 0301 	ands.w	r3, r0, #1
 800b722:	d00a      	beq.n	800b73a <__swsetup_r+0x9e>
 800b724:	2300      	movs	r3, #0
 800b726:	60a3      	str	r3, [r4, #8]
 800b728:	6963      	ldr	r3, [r4, #20]
 800b72a:	425b      	negs	r3, r3
 800b72c:	61a3      	str	r3, [r4, #24]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	b943      	cbnz	r3, 800b744 <__swsetup_r+0xa8>
 800b732:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b736:	d1c4      	bne.n	800b6c2 <__swsetup_r+0x26>
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	0781      	lsls	r1, r0, #30
 800b73c:	bf58      	it	pl
 800b73e:	6963      	ldrpl	r3, [r4, #20]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	e7f4      	b.n	800b72e <__swsetup_r+0x92>
 800b744:	2000      	movs	r0, #0
 800b746:	e7f7      	b.n	800b738 <__swsetup_r+0x9c>
 800b748:	200000e4 	.word	0x200000e4

0800b74c <memset>:
 800b74c:	4402      	add	r2, r0
 800b74e:	4603      	mov	r3, r0
 800b750:	4293      	cmp	r3, r2
 800b752:	d100      	bne.n	800b756 <memset+0xa>
 800b754:	4770      	bx	lr
 800b756:	f803 1b01 	strb.w	r1, [r3], #1
 800b75a:	e7f9      	b.n	800b750 <memset+0x4>

0800b75c <_close_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d06      	ldr	r5, [pc, #24]	; (800b778 <_close_r+0x1c>)
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	4608      	mov	r0, r1
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	f7f5 fadd 	bl	8000d26 <_close>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_close_r+0x1a>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_close_r+0x1a>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	2000282c 	.word	0x2000282c

0800b77c <_reclaim_reent>:
 800b77c:	4b29      	ldr	r3, [pc, #164]	; (800b824 <_reclaim_reent+0xa8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4283      	cmp	r3, r0
 800b782:	b570      	push	{r4, r5, r6, lr}
 800b784:	4604      	mov	r4, r0
 800b786:	d04b      	beq.n	800b820 <_reclaim_reent+0xa4>
 800b788:	69c3      	ldr	r3, [r0, #28]
 800b78a:	b143      	cbz	r3, 800b79e <_reclaim_reent+0x22>
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d144      	bne.n	800b81c <_reclaim_reent+0xa0>
 800b792:	69e3      	ldr	r3, [r4, #28]
 800b794:	6819      	ldr	r1, [r3, #0]
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x22>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f8b7 	bl	800b90c <_free_r>
 800b79e:	6961      	ldr	r1, [r4, #20]
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x2c>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f8b2 	bl	800b90c <_free_r>
 800b7a8:	69e1      	ldr	r1, [r4, #28]
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x36>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 f8ad 	bl	800b90c <_free_r>
 800b7b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x40>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f8a8 	bl	800b90c <_free_r>
 800b7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x4a>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 f8a3 	bl	800b90c <_free_r>
 800b7c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7c8:	b111      	cbz	r1, 800b7d0 <_reclaim_reent+0x54>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 f89e 	bl	800b90c <_free_r>
 800b7d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7d2:	b111      	cbz	r1, 800b7da <_reclaim_reent+0x5e>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 f899 	bl	800b90c <_free_r>
 800b7da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b7dc:	b111      	cbz	r1, 800b7e4 <_reclaim_reent+0x68>
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 f894 	bl	800b90c <_free_r>
 800b7e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b7e6:	b111      	cbz	r1, 800b7ee <_reclaim_reent+0x72>
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 f88f 	bl	800b90c <_free_r>
 800b7ee:	6a23      	ldr	r3, [r4, #32]
 800b7f0:	b1b3      	cbz	r3, 800b820 <_reclaim_reent+0xa4>
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7f8:	4718      	bx	r3
 800b7fa:	5949      	ldr	r1, [r1, r5]
 800b7fc:	b941      	cbnz	r1, 800b810 <_reclaim_reent+0x94>
 800b7fe:	3504      	adds	r5, #4
 800b800:	69e3      	ldr	r3, [r4, #28]
 800b802:	2d80      	cmp	r5, #128	; 0x80
 800b804:	68d9      	ldr	r1, [r3, #12]
 800b806:	d1f8      	bne.n	800b7fa <_reclaim_reent+0x7e>
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 f87f 	bl	800b90c <_free_r>
 800b80e:	e7c0      	b.n	800b792 <_reclaim_reent+0x16>
 800b810:	680e      	ldr	r6, [r1, #0]
 800b812:	4620      	mov	r0, r4
 800b814:	f000 f87a 	bl	800b90c <_free_r>
 800b818:	4631      	mov	r1, r6
 800b81a:	e7ef      	b.n	800b7fc <_reclaim_reent+0x80>
 800b81c:	2500      	movs	r5, #0
 800b81e:	e7ef      	b.n	800b800 <_reclaim_reent+0x84>
 800b820:	bd70      	pop	{r4, r5, r6, pc}
 800b822:	bf00      	nop
 800b824:	200000e4 	.word	0x200000e4

0800b828 <_lseek_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d07      	ldr	r5, [pc, #28]	; (800b848 <_lseek_r+0x20>)
 800b82c:	4604      	mov	r4, r0
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	2200      	movs	r2, #0
 800b834:	602a      	str	r2, [r5, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	f7f5 fa9c 	bl	8000d74 <_lseek>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d102      	bne.n	800b846 <_lseek_r+0x1e>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	b103      	cbz	r3, 800b846 <_lseek_r+0x1e>
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	2000282c 	.word	0x2000282c

0800b84c <_read_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	; (800b86c <_read_r+0x20>)
 800b850:	4604      	mov	r4, r0
 800b852:	4608      	mov	r0, r1
 800b854:	4611      	mov	r1, r2
 800b856:	2200      	movs	r2, #0
 800b858:	602a      	str	r2, [r5, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f7f5 fa2a 	bl	8000cb4 <_read>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_read_r+0x1e>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_read_r+0x1e>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	2000282c 	.word	0x2000282c

0800b870 <_write_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d07      	ldr	r5, [pc, #28]	; (800b890 <_write_r+0x20>)
 800b874:	4604      	mov	r4, r0
 800b876:	4608      	mov	r0, r1
 800b878:	4611      	mov	r1, r2
 800b87a:	2200      	movs	r2, #0
 800b87c:	602a      	str	r2, [r5, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	f7f5 fa35 	bl	8000cee <_write>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_write_r+0x1e>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_write_r+0x1e>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	2000282c 	.word	0x2000282c

0800b894 <__errno>:
 800b894:	4b01      	ldr	r3, [pc, #4]	; (800b89c <__errno+0x8>)
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	200000e4 	.word	0x200000e4

0800b8a0 <__libc_init_array>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	4d0d      	ldr	r5, [pc, #52]	; (800b8d8 <__libc_init_array+0x38>)
 800b8a4:	4c0d      	ldr	r4, [pc, #52]	; (800b8dc <__libc_init_array+0x3c>)
 800b8a6:	1b64      	subs	r4, r4, r5
 800b8a8:	10a4      	asrs	r4, r4, #2
 800b8aa:	2600      	movs	r6, #0
 800b8ac:	42a6      	cmp	r6, r4
 800b8ae:	d109      	bne.n	800b8c4 <__libc_init_array+0x24>
 800b8b0:	4d0b      	ldr	r5, [pc, #44]	; (800b8e0 <__libc_init_array+0x40>)
 800b8b2:	4c0c      	ldr	r4, [pc, #48]	; (800b8e4 <__libc_init_array+0x44>)
 800b8b4:	f000 fd38 	bl	800c328 <_init>
 800b8b8:	1b64      	subs	r4, r4, r5
 800b8ba:	10a4      	asrs	r4, r4, #2
 800b8bc:	2600      	movs	r6, #0
 800b8be:	42a6      	cmp	r6, r4
 800b8c0:	d105      	bne.n	800b8ce <__libc_init_array+0x2e>
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c8:	4798      	blx	r3
 800b8ca:	3601      	adds	r6, #1
 800b8cc:	e7ee      	b.n	800b8ac <__libc_init_array+0xc>
 800b8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d2:	4798      	blx	r3
 800b8d4:	3601      	adds	r6, #1
 800b8d6:	e7f2      	b.n	800b8be <__libc_init_array+0x1e>
 800b8d8:	0800c834 	.word	0x0800c834
 800b8dc:	0800c834 	.word	0x0800c834
 800b8e0:	0800c834 	.word	0x0800c834
 800b8e4:	0800c838 	.word	0x0800c838

0800b8e8 <__retarget_lock_init_recursive>:
 800b8e8:	4770      	bx	lr

0800b8ea <__retarget_lock_acquire_recursive>:
 800b8ea:	4770      	bx	lr

0800b8ec <__retarget_lock_release_recursive>:
 800b8ec:	4770      	bx	lr

0800b8ee <memcpy>:
 800b8ee:	440a      	add	r2, r1
 800b8f0:	4291      	cmp	r1, r2
 800b8f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8f6:	d100      	bne.n	800b8fa <memcpy+0xc>
 800b8f8:	4770      	bx	lr
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b900:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b904:	4291      	cmp	r1, r2
 800b906:	d1f9      	bne.n	800b8fc <memcpy+0xe>
 800b908:	bd10      	pop	{r4, pc}
	...

0800b90c <_free_r>:
 800b90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b90e:	2900      	cmp	r1, #0
 800b910:	d044      	beq.n	800b99c <_free_r+0x90>
 800b912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b916:	9001      	str	r0, [sp, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f1a1 0404 	sub.w	r4, r1, #4
 800b91e:	bfb8      	it	lt
 800b920:	18e4      	addlt	r4, r4, r3
 800b922:	f000 f8df 	bl	800bae4 <__malloc_lock>
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <_free_r+0x94>)
 800b928:	9801      	ldr	r0, [sp, #4]
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	b933      	cbnz	r3, 800b93c <_free_r+0x30>
 800b92e:	6063      	str	r3, [r4, #4]
 800b930:	6014      	str	r4, [r2, #0]
 800b932:	b003      	add	sp, #12
 800b934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b938:	f000 b8da 	b.w	800baf0 <__malloc_unlock>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d908      	bls.n	800b952 <_free_r+0x46>
 800b940:	6825      	ldr	r5, [r4, #0]
 800b942:	1961      	adds	r1, r4, r5
 800b944:	428b      	cmp	r3, r1
 800b946:	bf01      	itttt	eq
 800b948:	6819      	ldreq	r1, [r3, #0]
 800b94a:	685b      	ldreq	r3, [r3, #4]
 800b94c:	1949      	addeq	r1, r1, r5
 800b94e:	6021      	streq	r1, [r4, #0]
 800b950:	e7ed      	b.n	800b92e <_free_r+0x22>
 800b952:	461a      	mov	r2, r3
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b10b      	cbz	r3, 800b95c <_free_r+0x50>
 800b958:	42a3      	cmp	r3, r4
 800b95a:	d9fa      	bls.n	800b952 <_free_r+0x46>
 800b95c:	6811      	ldr	r1, [r2, #0]
 800b95e:	1855      	adds	r5, r2, r1
 800b960:	42a5      	cmp	r5, r4
 800b962:	d10b      	bne.n	800b97c <_free_r+0x70>
 800b964:	6824      	ldr	r4, [r4, #0]
 800b966:	4421      	add	r1, r4
 800b968:	1854      	adds	r4, r2, r1
 800b96a:	42a3      	cmp	r3, r4
 800b96c:	6011      	str	r1, [r2, #0]
 800b96e:	d1e0      	bne.n	800b932 <_free_r+0x26>
 800b970:	681c      	ldr	r4, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	6053      	str	r3, [r2, #4]
 800b976:	440c      	add	r4, r1
 800b978:	6014      	str	r4, [r2, #0]
 800b97a:	e7da      	b.n	800b932 <_free_r+0x26>
 800b97c:	d902      	bls.n	800b984 <_free_r+0x78>
 800b97e:	230c      	movs	r3, #12
 800b980:	6003      	str	r3, [r0, #0]
 800b982:	e7d6      	b.n	800b932 <_free_r+0x26>
 800b984:	6825      	ldr	r5, [r4, #0]
 800b986:	1961      	adds	r1, r4, r5
 800b988:	428b      	cmp	r3, r1
 800b98a:	bf04      	itt	eq
 800b98c:	6819      	ldreq	r1, [r3, #0]
 800b98e:	685b      	ldreq	r3, [r3, #4]
 800b990:	6063      	str	r3, [r4, #4]
 800b992:	bf04      	itt	eq
 800b994:	1949      	addeq	r1, r1, r5
 800b996:	6021      	streq	r1, [r4, #0]
 800b998:	6054      	str	r4, [r2, #4]
 800b99a:	e7ca      	b.n	800b932 <_free_r+0x26>
 800b99c:	b003      	add	sp, #12
 800b99e:	bd30      	pop	{r4, r5, pc}
 800b9a0:	20002834 	.word	0x20002834

0800b9a4 <sbrk_aligned>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	4e0e      	ldr	r6, [pc, #56]	; (800b9e0 <sbrk_aligned+0x3c>)
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	6831      	ldr	r1, [r6, #0]
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	b911      	cbnz	r1, 800b9b6 <sbrk_aligned+0x12>
 800b9b0:	f000 fcaa 	bl	800c308 <_sbrk_r>
 800b9b4:	6030      	str	r0, [r6, #0]
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f000 fca5 	bl	800c308 <_sbrk_r>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	d00a      	beq.n	800b9d8 <sbrk_aligned+0x34>
 800b9c2:	1cc4      	adds	r4, r0, #3
 800b9c4:	f024 0403 	bic.w	r4, r4, #3
 800b9c8:	42a0      	cmp	r0, r4
 800b9ca:	d007      	beq.n	800b9dc <sbrk_aligned+0x38>
 800b9cc:	1a21      	subs	r1, r4, r0
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 fc9a 	bl	800c308 <_sbrk_r>
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d101      	bne.n	800b9dc <sbrk_aligned+0x38>
 800b9d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b9dc:	4620      	mov	r0, r4
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
 800b9e0:	20002838 	.word	0x20002838

0800b9e4 <_malloc_r>:
 800b9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e8:	1ccd      	adds	r5, r1, #3
 800b9ea:	f025 0503 	bic.w	r5, r5, #3
 800b9ee:	3508      	adds	r5, #8
 800b9f0:	2d0c      	cmp	r5, #12
 800b9f2:	bf38      	it	cc
 800b9f4:	250c      	movcc	r5, #12
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	db01      	blt.n	800ba00 <_malloc_r+0x1c>
 800b9fc:	42a9      	cmp	r1, r5
 800b9fe:	d905      	bls.n	800ba0c <_malloc_r+0x28>
 800ba00:	230c      	movs	r3, #12
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	2600      	movs	r6, #0
 800ba06:	4630      	mov	r0, r6
 800ba08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bae0 <_malloc_r+0xfc>
 800ba10:	f000 f868 	bl	800bae4 <__malloc_lock>
 800ba14:	f8d8 3000 	ldr.w	r3, [r8]
 800ba18:	461c      	mov	r4, r3
 800ba1a:	bb5c      	cbnz	r4, 800ba74 <_malloc_r+0x90>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4638      	mov	r0, r7
 800ba20:	f7ff ffc0 	bl	800b9a4 <sbrk_aligned>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	4604      	mov	r4, r0
 800ba28:	d155      	bne.n	800bad6 <_malloc_r+0xf2>
 800ba2a:	f8d8 4000 	ldr.w	r4, [r8]
 800ba2e:	4626      	mov	r6, r4
 800ba30:	2e00      	cmp	r6, #0
 800ba32:	d145      	bne.n	800bac0 <_malloc_r+0xdc>
 800ba34:	2c00      	cmp	r4, #0
 800ba36:	d048      	beq.n	800baca <_malloc_r+0xe6>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	eb04 0903 	add.w	r9, r4, r3
 800ba42:	f000 fc61 	bl	800c308 <_sbrk_r>
 800ba46:	4581      	cmp	r9, r0
 800ba48:	d13f      	bne.n	800baca <_malloc_r+0xe6>
 800ba4a:	6821      	ldr	r1, [r4, #0]
 800ba4c:	1a6d      	subs	r5, r5, r1
 800ba4e:	4629      	mov	r1, r5
 800ba50:	4638      	mov	r0, r7
 800ba52:	f7ff ffa7 	bl	800b9a4 <sbrk_aligned>
 800ba56:	3001      	adds	r0, #1
 800ba58:	d037      	beq.n	800baca <_malloc_r+0xe6>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	442b      	add	r3, r5
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	f8d8 3000 	ldr.w	r3, [r8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d038      	beq.n	800bada <_malloc_r+0xf6>
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	42a2      	cmp	r2, r4
 800ba6c:	d12b      	bne.n	800bac6 <_malloc_r+0xe2>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	605a      	str	r2, [r3, #4]
 800ba72:	e00f      	b.n	800ba94 <_malloc_r+0xb0>
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	1b52      	subs	r2, r2, r5
 800ba78:	d41f      	bmi.n	800baba <_malloc_r+0xd6>
 800ba7a:	2a0b      	cmp	r2, #11
 800ba7c:	d917      	bls.n	800baae <_malloc_r+0xca>
 800ba7e:	1961      	adds	r1, r4, r5
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	6025      	str	r5, [r4, #0]
 800ba84:	bf18      	it	ne
 800ba86:	6059      	strne	r1, [r3, #4]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	bf08      	it	eq
 800ba8c:	f8c8 1000 	streq.w	r1, [r8]
 800ba90:	5162      	str	r2, [r4, r5]
 800ba92:	604b      	str	r3, [r1, #4]
 800ba94:	4638      	mov	r0, r7
 800ba96:	f104 060b 	add.w	r6, r4, #11
 800ba9a:	f000 f829 	bl	800baf0 <__malloc_unlock>
 800ba9e:	f026 0607 	bic.w	r6, r6, #7
 800baa2:	1d23      	adds	r3, r4, #4
 800baa4:	1af2      	subs	r2, r6, r3
 800baa6:	d0ae      	beq.n	800ba06 <_malloc_r+0x22>
 800baa8:	1b9b      	subs	r3, r3, r6
 800baaa:	50a3      	str	r3, [r4, r2]
 800baac:	e7ab      	b.n	800ba06 <_malloc_r+0x22>
 800baae:	42a3      	cmp	r3, r4
 800bab0:	6862      	ldr	r2, [r4, #4]
 800bab2:	d1dd      	bne.n	800ba70 <_malloc_r+0x8c>
 800bab4:	f8c8 2000 	str.w	r2, [r8]
 800bab8:	e7ec      	b.n	800ba94 <_malloc_r+0xb0>
 800baba:	4623      	mov	r3, r4
 800babc:	6864      	ldr	r4, [r4, #4]
 800babe:	e7ac      	b.n	800ba1a <_malloc_r+0x36>
 800bac0:	4634      	mov	r4, r6
 800bac2:	6876      	ldr	r6, [r6, #4]
 800bac4:	e7b4      	b.n	800ba30 <_malloc_r+0x4c>
 800bac6:	4613      	mov	r3, r2
 800bac8:	e7cc      	b.n	800ba64 <_malloc_r+0x80>
 800baca:	230c      	movs	r3, #12
 800bacc:	603b      	str	r3, [r7, #0]
 800bace:	4638      	mov	r0, r7
 800bad0:	f000 f80e 	bl	800baf0 <__malloc_unlock>
 800bad4:	e797      	b.n	800ba06 <_malloc_r+0x22>
 800bad6:	6025      	str	r5, [r4, #0]
 800bad8:	e7dc      	b.n	800ba94 <_malloc_r+0xb0>
 800bada:	605b      	str	r3, [r3, #4]
 800badc:	deff      	udf	#255	; 0xff
 800bade:	bf00      	nop
 800bae0:	20002834 	.word	0x20002834

0800bae4 <__malloc_lock>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__malloc_lock+0x8>)
 800bae6:	f7ff bf00 	b.w	800b8ea <__retarget_lock_acquire_recursive>
 800baea:	bf00      	nop
 800baec:	20002830 	.word	0x20002830

0800baf0 <__malloc_unlock>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__malloc_unlock+0x8>)
 800baf2:	f7ff befb 	b.w	800b8ec <__retarget_lock_release_recursive>
 800baf6:	bf00      	nop
 800baf8:	20002830 	.word	0x20002830

0800bafc <__sfputc_r>:
 800bafc:	6893      	ldr	r3, [r2, #8]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	b410      	push	{r4}
 800bb04:	6093      	str	r3, [r2, #8]
 800bb06:	da08      	bge.n	800bb1a <__sfputc_r+0x1e>
 800bb08:	6994      	ldr	r4, [r2, #24]
 800bb0a:	42a3      	cmp	r3, r4
 800bb0c:	db01      	blt.n	800bb12 <__sfputc_r+0x16>
 800bb0e:	290a      	cmp	r1, #10
 800bb10:	d103      	bne.n	800bb1a <__sfputc_r+0x1e>
 800bb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb16:	f7ff bd84 	b.w	800b622 <__swbuf_r>
 800bb1a:	6813      	ldr	r3, [r2, #0]
 800bb1c:	1c58      	adds	r0, r3, #1
 800bb1e:	6010      	str	r0, [r2, #0]
 800bb20:	7019      	strb	r1, [r3, #0]
 800bb22:	4608      	mov	r0, r1
 800bb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <__sfputs_r>:
 800bb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460f      	mov	r7, r1
 800bb30:	4614      	mov	r4, r2
 800bb32:	18d5      	adds	r5, r2, r3
 800bb34:	42ac      	cmp	r4, r5
 800bb36:	d101      	bne.n	800bb3c <__sfputs_r+0x12>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	e007      	b.n	800bb4c <__sfputs_r+0x22>
 800bb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb40:	463a      	mov	r2, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff ffda 	bl	800bafc <__sfputc_r>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d1f3      	bne.n	800bb34 <__sfputs_r+0xa>
 800bb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb50 <_vfiprintf_r>:
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	460d      	mov	r5, r1
 800bb56:	b09d      	sub	sp, #116	; 0x74
 800bb58:	4614      	mov	r4, r2
 800bb5a:	4698      	mov	r8, r3
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	b118      	cbz	r0, 800bb68 <_vfiprintf_r+0x18>
 800bb60:	6a03      	ldr	r3, [r0, #32]
 800bb62:	b90b      	cbnz	r3, 800bb68 <_vfiprintf_r+0x18>
 800bb64:	f7ff fc76 	bl	800b454 <__sinit>
 800bb68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb6a:	07d9      	lsls	r1, r3, #31
 800bb6c:	d405      	bmi.n	800bb7a <_vfiprintf_r+0x2a>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	059a      	lsls	r2, r3, #22
 800bb72:	d402      	bmi.n	800bb7a <_vfiprintf_r+0x2a>
 800bb74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb76:	f7ff feb8 	bl	800b8ea <__retarget_lock_acquire_recursive>
 800bb7a:	89ab      	ldrh	r3, [r5, #12]
 800bb7c:	071b      	lsls	r3, r3, #28
 800bb7e:	d501      	bpl.n	800bb84 <_vfiprintf_r+0x34>
 800bb80:	692b      	ldr	r3, [r5, #16]
 800bb82:	b99b      	cbnz	r3, 800bbac <_vfiprintf_r+0x5c>
 800bb84:	4629      	mov	r1, r5
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7ff fd88 	bl	800b69c <__swsetup_r>
 800bb8c:	b170      	cbz	r0, 800bbac <_vfiprintf_r+0x5c>
 800bb8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb90:	07dc      	lsls	r4, r3, #31
 800bb92:	d504      	bpl.n	800bb9e <_vfiprintf_r+0x4e>
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	b01d      	add	sp, #116	; 0x74
 800bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9e:	89ab      	ldrh	r3, [r5, #12]
 800bba0:	0598      	lsls	r0, r3, #22
 800bba2:	d4f7      	bmi.n	800bb94 <_vfiprintf_r+0x44>
 800bba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba6:	f7ff fea1 	bl	800b8ec <__retarget_lock_release_recursive>
 800bbaa:	e7f3      	b.n	800bb94 <_vfiprintf_r+0x44>
 800bbac:	2300      	movs	r3, #0
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	2320      	movs	r3, #32
 800bbb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbba:	2330      	movs	r3, #48	; 0x30
 800bbbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd70 <_vfiprintf_r+0x220>
 800bbc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbc4:	f04f 0901 	mov.w	r9, #1
 800bbc8:	4623      	mov	r3, r4
 800bbca:	469a      	mov	sl, r3
 800bbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd0:	b10a      	cbz	r2, 800bbd6 <_vfiprintf_r+0x86>
 800bbd2:	2a25      	cmp	r2, #37	; 0x25
 800bbd4:	d1f9      	bne.n	800bbca <_vfiprintf_r+0x7a>
 800bbd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbda:	d00b      	beq.n	800bbf4 <_vfiprintf_r+0xa4>
 800bbdc:	465b      	mov	r3, fp
 800bbde:	4622      	mov	r2, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ffa1 	bl	800bb2a <__sfputs_r>
 800bbe8:	3001      	adds	r0, #1
 800bbea:	f000 80a9 	beq.w	800bd40 <_vfiprintf_r+0x1f0>
 800bbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf0:	445a      	add	r2, fp
 800bbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800bbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 80a1 	beq.w	800bd40 <_vfiprintf_r+0x1f0>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f04f 32ff 	mov.w	r2, #4294967295
 800bc04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc08:	f10a 0a01 	add.w	sl, sl, #1
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	9307      	str	r3, [sp, #28]
 800bc10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc14:	931a      	str	r3, [sp, #104]	; 0x68
 800bc16:	4654      	mov	r4, sl
 800bc18:	2205      	movs	r2, #5
 800bc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1e:	4854      	ldr	r0, [pc, #336]	; (800bd70 <_vfiprintf_r+0x220>)
 800bc20:	f7f4 fade 	bl	80001e0 <memchr>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	b9d8      	cbnz	r0, 800bc60 <_vfiprintf_r+0x110>
 800bc28:	06d1      	lsls	r1, r2, #27
 800bc2a:	bf44      	itt	mi
 800bc2c:	2320      	movmi	r3, #32
 800bc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc32:	0713      	lsls	r3, r2, #28
 800bc34:	bf44      	itt	mi
 800bc36:	232b      	movmi	r3, #43	; 0x2b
 800bc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc40:	2b2a      	cmp	r3, #42	; 0x2a
 800bc42:	d015      	beq.n	800bc70 <_vfiprintf_r+0x120>
 800bc44:	9a07      	ldr	r2, [sp, #28]
 800bc46:	4654      	mov	r4, sl
 800bc48:	2000      	movs	r0, #0
 800bc4a:	f04f 0c0a 	mov.w	ip, #10
 800bc4e:	4621      	mov	r1, r4
 800bc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc54:	3b30      	subs	r3, #48	; 0x30
 800bc56:	2b09      	cmp	r3, #9
 800bc58:	d94d      	bls.n	800bcf6 <_vfiprintf_r+0x1a6>
 800bc5a:	b1b0      	cbz	r0, 800bc8a <_vfiprintf_r+0x13a>
 800bc5c:	9207      	str	r2, [sp, #28]
 800bc5e:	e014      	b.n	800bc8a <_vfiprintf_r+0x13a>
 800bc60:	eba0 0308 	sub.w	r3, r0, r8
 800bc64:	fa09 f303 	lsl.w	r3, r9, r3
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	46a2      	mov	sl, r4
 800bc6e:	e7d2      	b.n	800bc16 <_vfiprintf_r+0xc6>
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	1d19      	adds	r1, r3, #4
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	9103      	str	r1, [sp, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfbb      	ittet	lt
 800bc7c:	425b      	neglt	r3, r3
 800bc7e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc82:	9307      	strge	r3, [sp, #28]
 800bc84:	9307      	strlt	r3, [sp, #28]
 800bc86:	bfb8      	it	lt
 800bc88:	9204      	strlt	r2, [sp, #16]
 800bc8a:	7823      	ldrb	r3, [r4, #0]
 800bc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc8e:	d10c      	bne.n	800bcaa <_vfiprintf_r+0x15a>
 800bc90:	7863      	ldrb	r3, [r4, #1]
 800bc92:	2b2a      	cmp	r3, #42	; 0x2a
 800bc94:	d134      	bne.n	800bd00 <_vfiprintf_r+0x1b0>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	1d1a      	adds	r2, r3, #4
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	9203      	str	r2, [sp, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bfb8      	it	lt
 800bca2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bca6:	3402      	adds	r4, #2
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd80 <_vfiprintf_r+0x230>
 800bcae:	7821      	ldrb	r1, [r4, #0]
 800bcb0:	2203      	movs	r2, #3
 800bcb2:	4650      	mov	r0, sl
 800bcb4:	f7f4 fa94 	bl	80001e0 <memchr>
 800bcb8:	b138      	cbz	r0, 800bcca <_vfiprintf_r+0x17a>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	eba0 000a 	sub.w	r0, r0, sl
 800bcc0:	2240      	movs	r2, #64	; 0x40
 800bcc2:	4082      	lsls	r2, r0
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcce:	4829      	ldr	r0, [pc, #164]	; (800bd74 <_vfiprintf_r+0x224>)
 800bcd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcd4:	2206      	movs	r2, #6
 800bcd6:	f7f4 fa83 	bl	80001e0 <memchr>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d03f      	beq.n	800bd5e <_vfiprintf_r+0x20e>
 800bcde:	4b26      	ldr	r3, [pc, #152]	; (800bd78 <_vfiprintf_r+0x228>)
 800bce0:	bb1b      	cbnz	r3, 800bd2a <_vfiprintf_r+0x1da>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	3307      	adds	r3, #7
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	3308      	adds	r3, #8
 800bcec:	9303      	str	r3, [sp, #12]
 800bcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf0:	443b      	add	r3, r7
 800bcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf4:	e768      	b.n	800bbc8 <_vfiprintf_r+0x78>
 800bcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	2001      	movs	r0, #1
 800bcfe:	e7a6      	b.n	800bc4e <_vfiprintf_r+0xfe>
 800bd00:	2300      	movs	r3, #0
 800bd02:	3401      	adds	r4, #1
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	4619      	mov	r1, r3
 800bd08:	f04f 0c0a 	mov.w	ip, #10
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd12:	3a30      	subs	r2, #48	; 0x30
 800bd14:	2a09      	cmp	r2, #9
 800bd16:	d903      	bls.n	800bd20 <_vfiprintf_r+0x1d0>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0c6      	beq.n	800bcaa <_vfiprintf_r+0x15a>
 800bd1c:	9105      	str	r1, [sp, #20]
 800bd1e:	e7c4      	b.n	800bcaa <_vfiprintf_r+0x15a>
 800bd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd24:	4604      	mov	r4, r0
 800bd26:	2301      	movs	r3, #1
 800bd28:	e7f0      	b.n	800bd0c <_vfiprintf_r+0x1bc>
 800bd2a:	ab03      	add	r3, sp, #12
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	462a      	mov	r2, r5
 800bd30:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <_vfiprintf_r+0x22c>)
 800bd32:	a904      	add	r1, sp, #16
 800bd34:	4630      	mov	r0, r6
 800bd36:	f3af 8000 	nop.w
 800bd3a:	4607      	mov	r7, r0
 800bd3c:	1c78      	adds	r0, r7, #1
 800bd3e:	d1d6      	bne.n	800bcee <_vfiprintf_r+0x19e>
 800bd40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd42:	07d9      	lsls	r1, r3, #31
 800bd44:	d405      	bmi.n	800bd52 <_vfiprintf_r+0x202>
 800bd46:	89ab      	ldrh	r3, [r5, #12]
 800bd48:	059a      	lsls	r2, r3, #22
 800bd4a:	d402      	bmi.n	800bd52 <_vfiprintf_r+0x202>
 800bd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd4e:	f7ff fdcd 	bl	800b8ec <__retarget_lock_release_recursive>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	065b      	lsls	r3, r3, #25
 800bd56:	f53f af1d 	bmi.w	800bb94 <_vfiprintf_r+0x44>
 800bd5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd5c:	e71c      	b.n	800bb98 <_vfiprintf_r+0x48>
 800bd5e:	ab03      	add	r3, sp, #12
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	462a      	mov	r2, r5
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <_vfiprintf_r+0x22c>)
 800bd66:	a904      	add	r1, sp, #16
 800bd68:	4630      	mov	r0, r6
 800bd6a:	f000 f879 	bl	800be60 <_printf_i>
 800bd6e:	e7e4      	b.n	800bd3a <_vfiprintf_r+0x1ea>
 800bd70:	0800c800 	.word	0x0800c800
 800bd74:	0800c80a 	.word	0x0800c80a
 800bd78:	00000000 	.word	0x00000000
 800bd7c:	0800bb2b 	.word	0x0800bb2b
 800bd80:	0800c806 	.word	0x0800c806

0800bd84 <_printf_common>:
 800bd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd88:	4616      	mov	r6, r2
 800bd8a:	4699      	mov	r9, r3
 800bd8c:	688a      	ldr	r2, [r1, #8]
 800bd8e:	690b      	ldr	r3, [r1, #16]
 800bd90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	bfb8      	it	lt
 800bd98:	4613      	movlt	r3, r2
 800bd9a:	6033      	str	r3, [r6, #0]
 800bd9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bda0:	4607      	mov	r7, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	b10a      	cbz	r2, 800bdaa <_printf_common+0x26>
 800bda6:	3301      	adds	r3, #1
 800bda8:	6033      	str	r3, [r6, #0]
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	0699      	lsls	r1, r3, #26
 800bdae:	bf42      	ittt	mi
 800bdb0:	6833      	ldrmi	r3, [r6, #0]
 800bdb2:	3302      	addmi	r3, #2
 800bdb4:	6033      	strmi	r3, [r6, #0]
 800bdb6:	6825      	ldr	r5, [r4, #0]
 800bdb8:	f015 0506 	ands.w	r5, r5, #6
 800bdbc:	d106      	bne.n	800bdcc <_printf_common+0x48>
 800bdbe:	f104 0a19 	add.w	sl, r4, #25
 800bdc2:	68e3      	ldr	r3, [r4, #12]
 800bdc4:	6832      	ldr	r2, [r6, #0]
 800bdc6:	1a9b      	subs	r3, r3, r2
 800bdc8:	42ab      	cmp	r3, r5
 800bdca:	dc26      	bgt.n	800be1a <_printf_common+0x96>
 800bdcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdd0:	1e13      	subs	r3, r2, #0
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	bf18      	it	ne
 800bdd6:	2301      	movne	r3, #1
 800bdd8:	0692      	lsls	r2, r2, #26
 800bdda:	d42b      	bmi.n	800be34 <_printf_common+0xb0>
 800bddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bde0:	4649      	mov	r1, r9
 800bde2:	4638      	mov	r0, r7
 800bde4:	47c0      	blx	r8
 800bde6:	3001      	adds	r0, #1
 800bde8:	d01e      	beq.n	800be28 <_printf_common+0xa4>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	6922      	ldr	r2, [r4, #16]
 800bdee:	f003 0306 	and.w	r3, r3, #6
 800bdf2:	2b04      	cmp	r3, #4
 800bdf4:	bf02      	ittt	eq
 800bdf6:	68e5      	ldreq	r5, [r4, #12]
 800bdf8:	6833      	ldreq	r3, [r6, #0]
 800bdfa:	1aed      	subeq	r5, r5, r3
 800bdfc:	68a3      	ldr	r3, [r4, #8]
 800bdfe:	bf0c      	ite	eq
 800be00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be04:	2500      	movne	r5, #0
 800be06:	4293      	cmp	r3, r2
 800be08:	bfc4      	itt	gt
 800be0a:	1a9b      	subgt	r3, r3, r2
 800be0c:	18ed      	addgt	r5, r5, r3
 800be0e:	2600      	movs	r6, #0
 800be10:	341a      	adds	r4, #26
 800be12:	42b5      	cmp	r5, r6
 800be14:	d11a      	bne.n	800be4c <_printf_common+0xc8>
 800be16:	2000      	movs	r0, #0
 800be18:	e008      	b.n	800be2c <_printf_common+0xa8>
 800be1a:	2301      	movs	r3, #1
 800be1c:	4652      	mov	r2, sl
 800be1e:	4649      	mov	r1, r9
 800be20:	4638      	mov	r0, r7
 800be22:	47c0      	blx	r8
 800be24:	3001      	adds	r0, #1
 800be26:	d103      	bne.n	800be30 <_printf_common+0xac>
 800be28:	f04f 30ff 	mov.w	r0, #4294967295
 800be2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be30:	3501      	adds	r5, #1
 800be32:	e7c6      	b.n	800bdc2 <_printf_common+0x3e>
 800be34:	18e1      	adds	r1, r4, r3
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	2030      	movs	r0, #48	; 0x30
 800be3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be3e:	4422      	add	r2, r4
 800be40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be48:	3302      	adds	r3, #2
 800be4a:	e7c7      	b.n	800bddc <_printf_common+0x58>
 800be4c:	2301      	movs	r3, #1
 800be4e:	4622      	mov	r2, r4
 800be50:	4649      	mov	r1, r9
 800be52:	4638      	mov	r0, r7
 800be54:	47c0      	blx	r8
 800be56:	3001      	adds	r0, #1
 800be58:	d0e6      	beq.n	800be28 <_printf_common+0xa4>
 800be5a:	3601      	adds	r6, #1
 800be5c:	e7d9      	b.n	800be12 <_printf_common+0x8e>
	...

0800be60 <_printf_i>:
 800be60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be64:	7e0f      	ldrb	r7, [r1, #24]
 800be66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be68:	2f78      	cmp	r7, #120	; 0x78
 800be6a:	4691      	mov	r9, r2
 800be6c:	4680      	mov	r8, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	469a      	mov	sl, r3
 800be72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be76:	d807      	bhi.n	800be88 <_printf_i+0x28>
 800be78:	2f62      	cmp	r7, #98	; 0x62
 800be7a:	d80a      	bhi.n	800be92 <_printf_i+0x32>
 800be7c:	2f00      	cmp	r7, #0
 800be7e:	f000 80d4 	beq.w	800c02a <_printf_i+0x1ca>
 800be82:	2f58      	cmp	r7, #88	; 0x58
 800be84:	f000 80c0 	beq.w	800c008 <_printf_i+0x1a8>
 800be88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be90:	e03a      	b.n	800bf08 <_printf_i+0xa8>
 800be92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be96:	2b15      	cmp	r3, #21
 800be98:	d8f6      	bhi.n	800be88 <_printf_i+0x28>
 800be9a:	a101      	add	r1, pc, #4	; (adr r1, 800bea0 <_printf_i+0x40>)
 800be9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bea0:	0800bef9 	.word	0x0800bef9
 800bea4:	0800bf0d 	.word	0x0800bf0d
 800bea8:	0800be89 	.word	0x0800be89
 800beac:	0800be89 	.word	0x0800be89
 800beb0:	0800be89 	.word	0x0800be89
 800beb4:	0800be89 	.word	0x0800be89
 800beb8:	0800bf0d 	.word	0x0800bf0d
 800bebc:	0800be89 	.word	0x0800be89
 800bec0:	0800be89 	.word	0x0800be89
 800bec4:	0800be89 	.word	0x0800be89
 800bec8:	0800be89 	.word	0x0800be89
 800becc:	0800c011 	.word	0x0800c011
 800bed0:	0800bf39 	.word	0x0800bf39
 800bed4:	0800bfcb 	.word	0x0800bfcb
 800bed8:	0800be89 	.word	0x0800be89
 800bedc:	0800be89 	.word	0x0800be89
 800bee0:	0800c033 	.word	0x0800c033
 800bee4:	0800be89 	.word	0x0800be89
 800bee8:	0800bf39 	.word	0x0800bf39
 800beec:	0800be89 	.word	0x0800be89
 800bef0:	0800be89 	.word	0x0800be89
 800bef4:	0800bfd3 	.word	0x0800bfd3
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	1d1a      	adds	r2, r3, #4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	602a      	str	r2, [r5, #0]
 800bf00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e09f      	b.n	800c04c <_printf_i+0x1ec>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	682b      	ldr	r3, [r5, #0]
 800bf10:	0607      	lsls	r7, r0, #24
 800bf12:	f103 0104 	add.w	r1, r3, #4
 800bf16:	6029      	str	r1, [r5, #0]
 800bf18:	d501      	bpl.n	800bf1e <_printf_i+0xbe>
 800bf1a:	681e      	ldr	r6, [r3, #0]
 800bf1c:	e003      	b.n	800bf26 <_printf_i+0xc6>
 800bf1e:	0646      	lsls	r6, r0, #25
 800bf20:	d5fb      	bpl.n	800bf1a <_printf_i+0xba>
 800bf22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	da03      	bge.n	800bf32 <_printf_i+0xd2>
 800bf2a:	232d      	movs	r3, #45	; 0x2d
 800bf2c:	4276      	negs	r6, r6
 800bf2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf32:	485a      	ldr	r0, [pc, #360]	; (800c09c <_printf_i+0x23c>)
 800bf34:	230a      	movs	r3, #10
 800bf36:	e012      	b.n	800bf5e <_printf_i+0xfe>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	6820      	ldr	r0, [r4, #0]
 800bf3c:	1d19      	adds	r1, r3, #4
 800bf3e:	6029      	str	r1, [r5, #0]
 800bf40:	0605      	lsls	r5, r0, #24
 800bf42:	d501      	bpl.n	800bf48 <_printf_i+0xe8>
 800bf44:	681e      	ldr	r6, [r3, #0]
 800bf46:	e002      	b.n	800bf4e <_printf_i+0xee>
 800bf48:	0641      	lsls	r1, r0, #25
 800bf4a:	d5fb      	bpl.n	800bf44 <_printf_i+0xe4>
 800bf4c:	881e      	ldrh	r6, [r3, #0]
 800bf4e:	4853      	ldr	r0, [pc, #332]	; (800c09c <_printf_i+0x23c>)
 800bf50:	2f6f      	cmp	r7, #111	; 0x6f
 800bf52:	bf0c      	ite	eq
 800bf54:	2308      	moveq	r3, #8
 800bf56:	230a      	movne	r3, #10
 800bf58:	2100      	movs	r1, #0
 800bf5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf5e:	6865      	ldr	r5, [r4, #4]
 800bf60:	60a5      	str	r5, [r4, #8]
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	bfa2      	ittt	ge
 800bf66:	6821      	ldrge	r1, [r4, #0]
 800bf68:	f021 0104 	bicge.w	r1, r1, #4
 800bf6c:	6021      	strge	r1, [r4, #0]
 800bf6e:	b90e      	cbnz	r6, 800bf74 <_printf_i+0x114>
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	d04b      	beq.n	800c00c <_printf_i+0x1ac>
 800bf74:	4615      	mov	r5, r2
 800bf76:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf7a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf7e:	5dc7      	ldrb	r7, [r0, r7]
 800bf80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf84:	4637      	mov	r7, r6
 800bf86:	42bb      	cmp	r3, r7
 800bf88:	460e      	mov	r6, r1
 800bf8a:	d9f4      	bls.n	800bf76 <_printf_i+0x116>
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d10b      	bne.n	800bfa8 <_printf_i+0x148>
 800bf90:	6823      	ldr	r3, [r4, #0]
 800bf92:	07de      	lsls	r6, r3, #31
 800bf94:	d508      	bpl.n	800bfa8 <_printf_i+0x148>
 800bf96:	6923      	ldr	r3, [r4, #16]
 800bf98:	6861      	ldr	r1, [r4, #4]
 800bf9a:	4299      	cmp	r1, r3
 800bf9c:	bfde      	ittt	le
 800bf9e:	2330      	movle	r3, #48	; 0x30
 800bfa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfa8:	1b52      	subs	r2, r2, r5
 800bfaa:	6122      	str	r2, [r4, #16]
 800bfac:	f8cd a000 	str.w	sl, [sp]
 800bfb0:	464b      	mov	r3, r9
 800bfb2:	aa03      	add	r2, sp, #12
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	f7ff fee4 	bl	800bd84 <_printf_common>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d14a      	bne.n	800c056 <_printf_i+0x1f6>
 800bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc4:	b004      	add	sp, #16
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	f043 0320 	orr.w	r3, r3, #32
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	4833      	ldr	r0, [pc, #204]	; (800c0a0 <_printf_i+0x240>)
 800bfd4:	2778      	movs	r7, #120	; 0x78
 800bfd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	6829      	ldr	r1, [r5, #0]
 800bfde:	061f      	lsls	r7, r3, #24
 800bfe0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfe4:	d402      	bmi.n	800bfec <_printf_i+0x18c>
 800bfe6:	065f      	lsls	r7, r3, #25
 800bfe8:	bf48      	it	mi
 800bfea:	b2b6      	uxthmi	r6, r6
 800bfec:	07df      	lsls	r7, r3, #31
 800bfee:	bf48      	it	mi
 800bff0:	f043 0320 	orrmi.w	r3, r3, #32
 800bff4:	6029      	str	r1, [r5, #0]
 800bff6:	bf48      	it	mi
 800bff8:	6023      	strmi	r3, [r4, #0]
 800bffa:	b91e      	cbnz	r6, 800c004 <_printf_i+0x1a4>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	f023 0320 	bic.w	r3, r3, #32
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	2310      	movs	r3, #16
 800c006:	e7a7      	b.n	800bf58 <_printf_i+0xf8>
 800c008:	4824      	ldr	r0, [pc, #144]	; (800c09c <_printf_i+0x23c>)
 800c00a:	e7e4      	b.n	800bfd6 <_printf_i+0x176>
 800c00c:	4615      	mov	r5, r2
 800c00e:	e7bd      	b.n	800bf8c <_printf_i+0x12c>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	6826      	ldr	r6, [r4, #0]
 800c014:	6961      	ldr	r1, [r4, #20]
 800c016:	1d18      	adds	r0, r3, #4
 800c018:	6028      	str	r0, [r5, #0]
 800c01a:	0635      	lsls	r5, r6, #24
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	d501      	bpl.n	800c024 <_printf_i+0x1c4>
 800c020:	6019      	str	r1, [r3, #0]
 800c022:	e002      	b.n	800c02a <_printf_i+0x1ca>
 800c024:	0670      	lsls	r0, r6, #25
 800c026:	d5fb      	bpl.n	800c020 <_printf_i+0x1c0>
 800c028:	8019      	strh	r1, [r3, #0]
 800c02a:	2300      	movs	r3, #0
 800c02c:	6123      	str	r3, [r4, #16]
 800c02e:	4615      	mov	r5, r2
 800c030:	e7bc      	b.n	800bfac <_printf_i+0x14c>
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	1d1a      	adds	r2, r3, #4
 800c036:	602a      	str	r2, [r5, #0]
 800c038:	681d      	ldr	r5, [r3, #0]
 800c03a:	6862      	ldr	r2, [r4, #4]
 800c03c:	2100      	movs	r1, #0
 800c03e:	4628      	mov	r0, r5
 800c040:	f7f4 f8ce 	bl	80001e0 <memchr>
 800c044:	b108      	cbz	r0, 800c04a <_printf_i+0x1ea>
 800c046:	1b40      	subs	r0, r0, r5
 800c048:	6060      	str	r0, [r4, #4]
 800c04a:	6863      	ldr	r3, [r4, #4]
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	2300      	movs	r3, #0
 800c050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c054:	e7aa      	b.n	800bfac <_printf_i+0x14c>
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	462a      	mov	r2, r5
 800c05a:	4649      	mov	r1, r9
 800c05c:	4640      	mov	r0, r8
 800c05e:	47d0      	blx	sl
 800c060:	3001      	adds	r0, #1
 800c062:	d0ad      	beq.n	800bfc0 <_printf_i+0x160>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	079b      	lsls	r3, r3, #30
 800c068:	d413      	bmi.n	800c092 <_printf_i+0x232>
 800c06a:	68e0      	ldr	r0, [r4, #12]
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	4298      	cmp	r0, r3
 800c070:	bfb8      	it	lt
 800c072:	4618      	movlt	r0, r3
 800c074:	e7a6      	b.n	800bfc4 <_printf_i+0x164>
 800c076:	2301      	movs	r3, #1
 800c078:	4632      	mov	r2, r6
 800c07a:	4649      	mov	r1, r9
 800c07c:	4640      	mov	r0, r8
 800c07e:	47d0      	blx	sl
 800c080:	3001      	adds	r0, #1
 800c082:	d09d      	beq.n	800bfc0 <_printf_i+0x160>
 800c084:	3501      	adds	r5, #1
 800c086:	68e3      	ldr	r3, [r4, #12]
 800c088:	9903      	ldr	r1, [sp, #12]
 800c08a:	1a5b      	subs	r3, r3, r1
 800c08c:	42ab      	cmp	r3, r5
 800c08e:	dcf2      	bgt.n	800c076 <_printf_i+0x216>
 800c090:	e7eb      	b.n	800c06a <_printf_i+0x20a>
 800c092:	2500      	movs	r5, #0
 800c094:	f104 0619 	add.w	r6, r4, #25
 800c098:	e7f5      	b.n	800c086 <_printf_i+0x226>
 800c09a:	bf00      	nop
 800c09c:	0800c811 	.word	0x0800c811
 800c0a0:	0800c822 	.word	0x0800c822

0800c0a4 <__sflush_r>:
 800c0a4:	898a      	ldrh	r2, [r1, #12]
 800c0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	0710      	lsls	r0, r2, #28
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	d458      	bmi.n	800c164 <__sflush_r+0xc0>
 800c0b2:	684b      	ldr	r3, [r1, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dc05      	bgt.n	800c0c4 <__sflush_r+0x20>
 800c0b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	dc02      	bgt.n	800c0c4 <__sflush_r+0x20>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	d0f9      	beq.n	800c0be <__sflush_r+0x1a>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0d0:	682f      	ldr	r7, [r5, #0]
 800c0d2:	6a21      	ldr	r1, [r4, #32]
 800c0d4:	602b      	str	r3, [r5, #0]
 800c0d6:	d032      	beq.n	800c13e <__sflush_r+0x9a>
 800c0d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	075a      	lsls	r2, r3, #29
 800c0de:	d505      	bpl.n	800c0ec <__sflush_r+0x48>
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	1ac0      	subs	r0, r0, r3
 800c0e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0e6:	b10b      	cbz	r3, 800c0ec <__sflush_r+0x48>
 800c0e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0ea:	1ac0      	subs	r0, r0, r3
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0f2:	6a21      	ldr	r1, [r4, #32]
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b0      	blx	r6
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	d106      	bne.n	800c10c <__sflush_r+0x68>
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	291d      	cmp	r1, #29
 800c102:	d82b      	bhi.n	800c15c <__sflush_r+0xb8>
 800c104:	4a29      	ldr	r2, [pc, #164]	; (800c1ac <__sflush_r+0x108>)
 800c106:	410a      	asrs	r2, r1
 800c108:	07d6      	lsls	r6, r2, #31
 800c10a:	d427      	bmi.n	800c15c <__sflush_r+0xb8>
 800c10c:	2200      	movs	r2, #0
 800c10e:	6062      	str	r2, [r4, #4]
 800c110:	04d9      	lsls	r1, r3, #19
 800c112:	6922      	ldr	r2, [r4, #16]
 800c114:	6022      	str	r2, [r4, #0]
 800c116:	d504      	bpl.n	800c122 <__sflush_r+0x7e>
 800c118:	1c42      	adds	r2, r0, #1
 800c11a:	d101      	bne.n	800c120 <__sflush_r+0x7c>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b903      	cbnz	r3, 800c122 <__sflush_r+0x7e>
 800c120:	6560      	str	r0, [r4, #84]	; 0x54
 800c122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c124:	602f      	str	r7, [r5, #0]
 800c126:	2900      	cmp	r1, #0
 800c128:	d0c9      	beq.n	800c0be <__sflush_r+0x1a>
 800c12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c12e:	4299      	cmp	r1, r3
 800c130:	d002      	beq.n	800c138 <__sflush_r+0x94>
 800c132:	4628      	mov	r0, r5
 800c134:	f7ff fbea 	bl	800b90c <_free_r>
 800c138:	2000      	movs	r0, #0
 800c13a:	6360      	str	r0, [r4, #52]	; 0x34
 800c13c:	e7c0      	b.n	800c0c0 <__sflush_r+0x1c>
 800c13e:	2301      	movs	r3, #1
 800c140:	4628      	mov	r0, r5
 800c142:	47b0      	blx	r6
 800c144:	1c41      	adds	r1, r0, #1
 800c146:	d1c8      	bne.n	800c0da <__sflush_r+0x36>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0c5      	beq.n	800c0da <__sflush_r+0x36>
 800c14e:	2b1d      	cmp	r3, #29
 800c150:	d001      	beq.n	800c156 <__sflush_r+0xb2>
 800c152:	2b16      	cmp	r3, #22
 800c154:	d101      	bne.n	800c15a <__sflush_r+0xb6>
 800c156:	602f      	str	r7, [r5, #0]
 800c158:	e7b1      	b.n	800c0be <__sflush_r+0x1a>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	e7ad      	b.n	800c0c0 <__sflush_r+0x1c>
 800c164:	690f      	ldr	r7, [r1, #16]
 800c166:	2f00      	cmp	r7, #0
 800c168:	d0a9      	beq.n	800c0be <__sflush_r+0x1a>
 800c16a:	0793      	lsls	r3, r2, #30
 800c16c:	680e      	ldr	r6, [r1, #0]
 800c16e:	bf08      	it	eq
 800c170:	694b      	ldreq	r3, [r1, #20]
 800c172:	600f      	str	r7, [r1, #0]
 800c174:	bf18      	it	ne
 800c176:	2300      	movne	r3, #0
 800c178:	eba6 0807 	sub.w	r8, r6, r7
 800c17c:	608b      	str	r3, [r1, #8]
 800c17e:	f1b8 0f00 	cmp.w	r8, #0
 800c182:	dd9c      	ble.n	800c0be <__sflush_r+0x1a>
 800c184:	6a21      	ldr	r1, [r4, #32]
 800c186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c188:	4643      	mov	r3, r8
 800c18a:	463a      	mov	r2, r7
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b0      	blx	r6
 800c190:	2800      	cmp	r0, #0
 800c192:	dc06      	bgt.n	800c1a2 <__sflush_r+0xfe>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	e78e      	b.n	800c0c0 <__sflush_r+0x1c>
 800c1a2:	4407      	add	r7, r0
 800c1a4:	eba8 0800 	sub.w	r8, r8, r0
 800c1a8:	e7e9      	b.n	800c17e <__sflush_r+0xda>
 800c1aa:	bf00      	nop
 800c1ac:	dfbffffe 	.word	0xdfbffffe

0800c1b0 <_fflush_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	690b      	ldr	r3, [r1, #16]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b913      	cbnz	r3, 800c1c0 <_fflush_r+0x10>
 800c1ba:	2500      	movs	r5, #0
 800c1bc:	4628      	mov	r0, r5
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	b118      	cbz	r0, 800c1ca <_fflush_r+0x1a>
 800c1c2:	6a03      	ldr	r3, [r0, #32]
 800c1c4:	b90b      	cbnz	r3, 800c1ca <_fflush_r+0x1a>
 800c1c6:	f7ff f945 	bl	800b454 <__sinit>
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0f3      	beq.n	800c1ba <_fflush_r+0xa>
 800c1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1d4:	07d0      	lsls	r0, r2, #31
 800c1d6:	d404      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1d8:	0599      	lsls	r1, r3, #22
 800c1da:	d402      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1de:	f7ff fb84 	bl	800b8ea <__retarget_lock_acquire_recursive>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f7ff ff5d 	bl	800c0a4 <__sflush_r>
 800c1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ec:	07da      	lsls	r2, r3, #31
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	d4e4      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	059b      	lsls	r3, r3, #22
 800c1f6:	d4e1      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1fa:	f7ff fb77 	bl	800b8ec <__retarget_lock_release_recursive>
 800c1fe:	e7dd      	b.n	800c1bc <_fflush_r+0xc>

0800c200 <__swhatbuf_r>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2900      	cmp	r1, #0
 800c20a:	b096      	sub	sp, #88	; 0x58
 800c20c:	4615      	mov	r5, r2
 800c20e:	461e      	mov	r6, r3
 800c210:	da0d      	bge.n	800c22e <__swhatbuf_r+0x2e>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c218:	f04f 0100 	mov.w	r1, #0
 800c21c:	bf0c      	ite	eq
 800c21e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c222:	2340      	movne	r3, #64	; 0x40
 800c224:	2000      	movs	r0, #0
 800c226:	6031      	str	r1, [r6, #0]
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	b016      	add	sp, #88	; 0x58
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	466a      	mov	r2, sp
 800c230:	f000 f848 	bl	800c2c4 <_fstat_r>
 800c234:	2800      	cmp	r0, #0
 800c236:	dbec      	blt.n	800c212 <__swhatbuf_r+0x12>
 800c238:	9901      	ldr	r1, [sp, #4]
 800c23a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c23e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c242:	4259      	negs	r1, r3
 800c244:	4159      	adcs	r1, r3
 800c246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c24a:	e7eb      	b.n	800c224 <__swhatbuf_r+0x24>

0800c24c <__smakebuf_r>:
 800c24c:	898b      	ldrh	r3, [r1, #12]
 800c24e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c250:	079d      	lsls	r5, r3, #30
 800c252:	4606      	mov	r6, r0
 800c254:	460c      	mov	r4, r1
 800c256:	d507      	bpl.n	800c268 <__smakebuf_r+0x1c>
 800c258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	6123      	str	r3, [r4, #16]
 800c260:	2301      	movs	r3, #1
 800c262:	6163      	str	r3, [r4, #20]
 800c264:	b002      	add	sp, #8
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	ab01      	add	r3, sp, #4
 800c26a:	466a      	mov	r2, sp
 800c26c:	f7ff ffc8 	bl	800c200 <__swhatbuf_r>
 800c270:	9900      	ldr	r1, [sp, #0]
 800c272:	4605      	mov	r5, r0
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff fbb5 	bl	800b9e4 <_malloc_r>
 800c27a:	b948      	cbnz	r0, 800c290 <__smakebuf_r+0x44>
 800c27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d4ef      	bmi.n	800c264 <__smakebuf_r+0x18>
 800c284:	f023 0303 	bic.w	r3, r3, #3
 800c288:	f043 0302 	orr.w	r3, r3, #2
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	e7e3      	b.n	800c258 <__smakebuf_r+0xc>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	6163      	str	r3, [r4, #20]
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	6120      	str	r0, [r4, #16]
 800c2a2:	b15b      	cbz	r3, 800c2bc <__smakebuf_r+0x70>
 800c2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f81d 	bl	800c2e8 <_isatty_r>
 800c2ae:	b128      	cbz	r0, 800c2bc <__smakebuf_r+0x70>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	431d      	orrs	r5, r3
 800c2c0:	81a5      	strh	r5, [r4, #12]
 800c2c2:	e7cf      	b.n	800c264 <__smakebuf_r+0x18>

0800c2c4 <_fstat_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	; (800c2e4 <_fstat_r+0x20>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	f7f4 fd34 	bl	8000d3e <_fstat>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d102      	bne.n	800c2e0 <_fstat_r+0x1c>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	b103      	cbz	r3, 800c2e0 <_fstat_r+0x1c>
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
 800c2e2:	bf00      	nop
 800c2e4:	2000282c 	.word	0x2000282c

0800c2e8 <_isatty_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_isatty_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f4 fd33 	bl	8000d5e <_isatty>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_isatty_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_isatty_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	2000282c 	.word	0x2000282c

0800c308 <_sbrk_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4d06      	ldr	r5, [pc, #24]	; (800c324 <_sbrk_r+0x1c>)
 800c30c:	2300      	movs	r3, #0
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	f7f4 fd3c 	bl	8000d90 <_sbrk>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_sbrk_r+0x1a>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_sbrk_r+0x1a>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	2000282c 	.word	0x2000282c

0800c328 <_init>:
 800c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32a:	bf00      	nop
 800c32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c32e:	bc08      	pop	{r3}
 800c330:	469e      	mov	lr, r3
 800c332:	4770      	bx	lr

0800c334 <_fini>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	bf00      	nop
 800c338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33a:	bc08      	pop	{r3}
 800c33c:	469e      	mov	lr, r3
 800c33e:	4770      	bx	lr
