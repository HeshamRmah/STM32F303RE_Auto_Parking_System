
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08007c0c  08007c0c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c0c  08007c0c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          0000054c  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005fc  200005fc  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001258e  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b1f  00000000  00000000  000326b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ed0  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b7c  00000000  00000000  000360a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000229ff  00000000  00000000  00036c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001506c  00000000  00000000  0005961b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccf6f  00000000  00000000  0006e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000043a0  00000000  00000000  0013b5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0013f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ac0 	.word	0x08007ac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08007ac0 	.word	0x08007ac0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b41      	ldr	r3, [pc, #260]	; (800039c <MX_GPIO_Init+0x11c>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a40      	ldr	r2, [pc, #256]	; (800039c <MX_GPIO_Init+0x11c>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b3e      	ldr	r3, [pc, #248]	; (800039c <MX_GPIO_Init+0x11c>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b3b      	ldr	r3, [pc, #236]	; (800039c <MX_GPIO_Init+0x11c>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a3a      	ldr	r2, [pc, #232]	; (800039c <MX_GPIO_Init+0x11c>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b38      	ldr	r3, [pc, #224]	; (800039c <MX_GPIO_Init+0x11c>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b35      	ldr	r3, [pc, #212]	; (800039c <MX_GPIO_Init+0x11c>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a34      	ldr	r2, [pc, #208]	; (800039c <MX_GPIO_Init+0x11c>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <MX_GPIO_Init+0x11c>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2f      	ldr	r3, [pc, #188]	; (800039c <MX_GPIO_Init+0x11c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a2e      	ldr	r2, [pc, #184]	; (800039c <MX_GPIO_Init+0x11c>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b2c      	ldr	r3, [pc, #176]	; (800039c <MX_GPIO_Init+0x11c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f002 f852 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000304:	2200      	movs	r2, #0
 8000306:	f643 4106 	movw	r1, #15366	; 0x3c06
 800030a:	4825      	ldr	r0, [pc, #148]	; (80003a0 <MX_GPIO_Init+0x120>)
 800030c:	f002 f84c 	bl	80023a8 <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000316:	4823      	ldr	r0, [pc, #140]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000318:	f002 f846 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000322:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4619      	mov	r1, r3
 8000332:	481c      	ldr	r0, [pc, #112]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000334:	f001 feae 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 8000338:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f001 fe9e 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000358:	f643 4306 	movw	r3, #15366	; 0x3c06
 800035c:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4619      	mov	r1, r3
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000372:	f001 fe8f 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 8000376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4619      	mov	r1, r3
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000390:	f001 fe80 	bl	8002094 <HAL_GPIO_Init>

}
 8000394:	bf00      	nop
 8000396:	3728      	adds	r7, #40	; 0x28
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	48000400 	.word	0x48000400
 80003a4:	48000800 	.word	0x48000800

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f001 fce2 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f866 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff64 	bl	8000280 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003b8:	f000 faf2 	bl	80009a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003bc:	f000 fbc0 	bl	8000b40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c0:	f000 fc58 	bl	8000c74 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003c4:	f000 fcf2 	bl	8000dac <MX_TIM4_Init>
  MX_TIM8_Init();
 80003c8:	f000 fd8c 	bl	8000ee4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80003cc:	f000 fe5a 	bl	8001084 <MX_TIM15_Init>
  MX_TIM16_Init();
 80003d0:	f000 ff20 	bl	8001214 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80003d4:	f001 fa64 	bl	80018a0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80003d8:	f001 fa32 	bl	8001840 <MX_UART4_Init>
//	  HAL_Delay(500);
//
//	  ECU_Motor_MoveLeft(&steering_motor);
//	  HAL_Delay(5000);

	  ECU_Ultrasonic_Read(&ultrasonic_1);
 80003dc:	481b      	ldr	r0, [pc, #108]	; (800044c <main+0xa4>)
 80003de:	f001 fb93 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 1 value is %lu\n",ultrasonic_Distance_Values[0]);
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <main+0xa8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	481a      	ldr	r0, [pc, #104]	; (8000454 <main+0xac>)
 80003ea:	f006 fcf7 	bl	8006ddc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_2);
 80003ee:	481a      	ldr	r0, [pc, #104]	; (8000458 <main+0xb0>)
 80003f0:	f001 fb8a 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 2 value is %lu\n",ultrasonic_Distance_Values[1]);
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <main+0xa8>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4619      	mov	r1, r3
 80003fa:	4818      	ldr	r0, [pc, #96]	; (800045c <main+0xb4>)
 80003fc:	f006 fcee 	bl	8006ddc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_3);
 8000400:	4817      	ldr	r0, [pc, #92]	; (8000460 <main+0xb8>)
 8000402:	f001 fb81 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 3 value is %lu\n",ultrasonic_Distance_Values[2]);
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <main+0xa8>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4619      	mov	r1, r3
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <main+0xbc>)
 800040e:	f006 fce5 	bl	8006ddc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_4);
 8000412:	4815      	ldr	r0, [pc, #84]	; (8000468 <main+0xc0>)
 8000414:	f001 fb78 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 4 value is %lu\n",ultrasonic_Distance_Values[3]);
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <main+0xa8>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4619      	mov	r1, r3
 800041e:	4813      	ldr	r0, [pc, #76]	; (800046c <main+0xc4>)
 8000420:	f006 fcdc 	bl	8006ddc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_5);
 8000424:	4812      	ldr	r0, [pc, #72]	; (8000470 <main+0xc8>)
 8000426:	f001 fb6f 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 5 value is %lu\n",ultrasonic_Distance_Values[4]);
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <main+0xa8>)
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	4619      	mov	r1, r3
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <main+0xcc>)
 8000432:	f006 fcd3 	bl	8006ddc <iprintf>
	  //HAL_Delay(10);

	  ECU_Ultrasonic_Read(&ultrasonic_6);
 8000436:	4810      	ldr	r0, [pc, #64]	; (8000478 <main+0xd0>)
 8000438:	f001 fb66 	bl	8001b08 <ECU_Ultrasonic_Read>
	  printf("ultrasonic 6 value is %lu\n",ultrasonic_Distance_Values[5]);
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <main+0xa8>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4619      	mov	r1, r3
 8000442:	480e      	ldr	r0, [pc, #56]	; (800047c <main+0xd4>)
 8000444:	f006 fcca 	bl	8006ddc <iprintf>
	  ECU_Ultrasonic_Read(&ultrasonic_1);
 8000448:	e7c8      	b.n	80003dc <main+0x34>
 800044a:	bf00      	nop
 800044c:	20000000 	.word	0x20000000
 8000450:	20000440 	.word	0x20000440
 8000454:	08007ad8 	.word	0x08007ad8
 8000458:	2000000c 	.word	0x2000000c
 800045c:	08007af4 	.word	0x08007af4
 8000460:	20000018 	.word	0x20000018
 8000464:	08007b10 	.word	0x08007b10
 8000468:	20000024 	.word	0x20000024
 800046c:	08007b2c 	.word	0x08007b2c
 8000470:	20000030 	.word	0x20000030
 8000474:	08007b48 	.word	0x08007b48
 8000478:	2000003c 	.word	0x2000003c
 800047c:	08007b64 	.word	0x08007b64

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b0a6      	sub	sp, #152	; 0x98
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800048a:	2228      	movs	r2, #40	; 0x28
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f006 fd8e 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2258      	movs	r2, #88	; 0x58
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f006 fd80 	bl	8006fb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b0:	2302      	movs	r3, #2
 80004b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	2301      	movs	r3, #1
 80004b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b8:	2310      	movs	r3, #16
 80004ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004be:	2300      	movs	r3, #0
 80004c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 ff85 	bl	80023d8 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004d4:	f000 f848 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	230f      	movs	r3, #15
 80004da:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004dc:	2300      	movs	r3, #0
 80004de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ffc4 	bl	8003480 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004fe:	f000 f833 	bl	8000568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <SystemClock_Config+0xc0>)
 8000504:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800050e:	2300      	movs	r3, #0
 8000510:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000512:	2300      	movs	r3, #0
 8000514:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000516:	2300      	movs	r3, #0
 8000518:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800051a:	2300      	movs	r3, #0
 800051c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800051e:	2300      	movs	r3, #0
 8000520:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000522:	2300      	movs	r3, #0
 8000524:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4618      	mov	r0, r3
 800052a:	f003 fa11 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000534:	f000 f818 	bl	8000568 <Error_Handler>
  }
}
 8000538:	bf00      	nop
 800053a:	3798      	adds	r7, #152	; 0x98
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	00f0300a 	.word	0x00f0300a

08000544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000556:	f001 fc23 	bl	8001da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40001000 	.word	0x40001000

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005aa:	2007      	movs	r0, #7
 80005ac:	f001 fcc5 	bl	8001f3a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <HAL_InitTick+0xe0>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	4a32      	ldr	r2, [pc, #200]	; (800069c <HAL_InitTick+0xe0>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	61d3      	str	r3, [r2, #28]
 80005d8:	4b30      	ldr	r3, [pc, #192]	; (800069c <HAL_InitTick+0xe0>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e4:	f107 0210 	add.w	r2, r7, #16
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f97c 	bl	80038ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005fe:	f003 f931 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8000602:	6378      	str	r0, [r7, #52]	; 0x34
 8000604:	e004      	b.n	8000610 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000606:	f003 f92d 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 800060a:	4603      	mov	r3, r0
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <HAL_InitTick+0xe4>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	0c9b      	lsrs	r3, r3, #18
 800061a:	3b01      	subs	r3, #1
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <HAL_InitTick+0xe8>)
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <HAL_InitTick+0xec>)
 8000622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <HAL_InitTick+0xe8>)
 8000626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800062a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800062c:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <HAL_InitTick+0xe8>)
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <HAL_InitTick+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <HAL_InitTick+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <HAL_InitTick+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <HAL_InitTick+0xe8>)
 8000646:	f003 fba1 	bl	8003d8c <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11b      	bne.n	8000690 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <HAL_InitTick+0xe8>)
 800065a:	f003 fbef 	bl	8003e3c <HAL_TIM_Base_Start_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000668:	2b00      	cmp	r3, #0
 800066a:	d111      	bne.n	8000690 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800066c:	2036      	movs	r0, #54	; 0x36
 800066e:	f001 fc8b 	bl	8001f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d808      	bhi.n	800068a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2036      	movs	r0, #54	; 0x36
 800067e:	f001 fc67 	bl	8001f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <HAL_InitTick+0xf0>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	e002      	b.n	8000690 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000694:	4618      	mov	r0, r3
 8000696:	3738      	adds	r7, #56	; 0x38
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	431bde83 	.word	0x431bde83
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	40001000 	.word	0x40001000
 80006ac:	2000004c 	.word	0x2000004c

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler+0x4>

080006ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800070e:	2205      	movs	r2, #5
 8000710:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8000714:	f004 f876 	bl	8004804 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800071a:	f004 f873 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000458 	.word	0x20000458
 8000728:	2000011c 	.word	0x2000011c
 800072c:	20000298 	.word	0x20000298

08000730 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <TIM1_CC_IRQHandler+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <TIM1_CC_IRQHandler+0x18>)
 800073c:	f004 f862 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000458 	.word	0x20000458
 8000748:	2000011c 	.word	0x2000011c

0800074c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <TIM2_IRQHandler+0x14>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <TIM2_IRQHandler+0x18>)
 8000758:	f004 f854 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000458 	.word	0x20000458
 8000764:	20000168 	.word	0x20000168

08000768 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <TIM3_IRQHandler+0x14>)
 800076e:	2202      	movs	r2, #2
 8000770:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <TIM3_IRQHandler+0x18>)
 8000774:	f004 f846 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000458 	.word	0x20000458
 8000780:	200001b4 	.word	0x200001b4

08000784 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <TIM4_IRQHandler+0x14>)
 800078a:	2203      	movs	r2, #3
 800078c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <TIM4_IRQHandler+0x18>)
 8000790:	f004 f838 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000458 	.word	0x20000458
 800079c:	20000200 	.word	0x20000200

080007a0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <TIM8_CC_IRQHandler+0x14>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <TIM8_CC_IRQHandler+0x18>)
 80007ac:	f004 f82a 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000458 	.word	0x20000458
 80007b8:	2000024c 	.word	0x2000024c

080007bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <UART4_IRQHandler+0x10>)
 80007c2:	f005 fb21 	bl	8005e08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000330 	.word	0x20000330

080007d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <TIM6_DAC_IRQHandler+0x10>)
 80007d6:	f004 f815 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000cc 	.word	0x200000cc

080007e4 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <Custom_ITM_sendChar_Ch0+0x48>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <Custom_ITM_sendChar_Ch0+0x48>)
 80007f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f8:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <Custom_ITM_sendChar_Ch0+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000806:	bf00      	nop
 8000808:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f8      	beq.n	8000808 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000816:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	6013      	str	r3, [r2, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000edfc 	.word	0xe000edfc
 8000830:	e0000e00 	.word	0xe0000e00

08000834 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000846:	f3af 8000 	nop.w
 800084a:	4601      	mov	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
  }

  return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e009      	b.n	8000894 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ffab 	bl	80007e4 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf1      	blt.n	8000880 <_write+0x12>
  }
  return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_close>:

int _close(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	605a      	str	r2, [r3, #4]
  return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_isatty>:

int _isatty(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f006 fb84 	bl	800704c <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20010000 	.word	0x20010000
 8000970:	00000400 	.word	0x00000400
 8000974:	20000118 	.word	0x20000118
 8000978:	20000600 	.word	0x20000600

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09e      	sub	sp, #120	; 0x78
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	222c      	movs	r2, #44	; 0x2c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f006 fae1 	bl	8006fb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ee:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <MX_TIM1_Init+0x198>)
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <MX_TIM1_Init+0x19c>)
 80009f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80009f4:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <MX_TIM1_Init+0x198>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <MX_TIM1_Init+0x198>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a00:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1a:	4847      	ldr	r0, [pc, #284]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a1c:	f003 f9b6 	bl	8003d8c <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a26:	f7ff fd9f 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a34:	4619      	mov	r1, r3
 8000a36:	4840      	ldr	r0, [pc, #256]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a38:	f004 f9b4 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a42:	f7ff fd91 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a46:	483c      	ldr	r0, [pc, #240]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a48:	f003 fa68 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a52:	f7ff fd89 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a58:	f003 fc6a 	bl	8004330 <HAL_TIM_IC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a62:	f7ff fd81 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a76:	4619      	mov	r1, r3
 8000a78:	482f      	ldr	r0, [pc, #188]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000a7a:	f005 f847 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000a84:	f7ff fd70 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000a8c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4822      	ldr	r0, [pc, #136]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000ab0:	f004 f864 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000aba:	f7ff fd55 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000ad8:	f003 ffb3 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ae2:	f7ff fd41 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000b1c:	f005 f882 	bl	8005c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000b26:	f7ff fd1f 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM1_Init+0x198>)
 8000b2c:	f000 fd74 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3778      	adds	r7, #120	; 0x78
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b092      	sub	sp, #72	; 0x48
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b80:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba8:	4831      	ldr	r0, [pc, #196]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000baa:	f003 f8ef 	bl	8003d8c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000bb4:	f7ff fcd8 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482a      	ldr	r0, [pc, #168]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000bc6:	f004 f8ed 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bd0:	f7ff fcca 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000bd6:	f003 f9a1 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000be0:	f7ff fcc2 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000be6:	f003 fba3 	bl	8004330 <HAL_TIM_IC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bf0:	f7ff fcba 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	481b      	ldr	r0, [pc, #108]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000c04:	f004 ff82 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000c0e:	f7ff fcab 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	; 0x60
 8000c14:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000c16:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000c1a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000c2e:	f003 ffa5 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000c38:	f7ff fc96 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000c54:	f003 fef5 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000c5e:	f7ff fc83 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM2_Init+0x130>)
 8000c64:	f000 fcd8 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3748      	adds	r7, #72	; 0x48
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000168 	.word	0x20000168

08000c74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b092      	sub	sp, #72	; 0x48
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cb6:	4a3c      	ldr	r2, [pc, #240]	; (8000da8 <MX_TIM3_Init+0x134>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ccc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cda:	4832      	ldr	r0, [pc, #200]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cdc:	f003 f856 	bl	8003d8c <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ce6:	f7ff fc3f 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	482b      	ldr	r0, [pc, #172]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000cf8:	f004 f854 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d02:	f7ff fc31 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d08:	f003 f908 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000d12:	f7ff fc29 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d16:	4823      	ldr	r0, [pc, #140]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d18:	f003 fb0a 	bl	8004330 <HAL_TIM_IC_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d22:	f7ff fc21 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d36:	f004 fee9 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000d40:	f7ff fc12 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	; 0x60
 8000d46:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000d48:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000d4c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d60:	f003 ff0c 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000d6a:	f7ff fbfd 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2204      	movs	r2, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d86:	f003 fe5c 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000d90:	f7ff fbea 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM3_Init+0x130>)
 8000d96:	f000 fc3f 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8000d9a:	bf00      	nop
 8000d9c:	3748      	adds	r7, #72	; 0x48
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001b4 	.word	0x200001b4
 8000da8:	40000400 	.word	0x40000400

08000dac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b092      	sub	sp, #72	; 0x48
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <MX_TIM4_Init+0x130>)
 8000dee:	4a3c      	ldr	r2, [pc, #240]	; (8000ee0 <MX_TIM4_Init+0x134>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_TIM4_Init+0x130>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <MX_TIM4_Init+0x130>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e12:	4832      	ldr	r0, [pc, #200]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e14:	f002 ffba 	bl	8003d8c <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e1e:	f7ff fba3 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482b      	ldr	r0, [pc, #172]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e30:	f003 ffb8 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e3a:	f7ff fb95 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e3e:	4827      	ldr	r0, [pc, #156]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e40:	f003 f86c 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000e4a:	f7ff fb8d 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000e4e:	4823      	ldr	r0, [pc, #140]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e50:	f003 fa6e 	bl	8004330 <HAL_TIM_IC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e5a:	f7ff fb85 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481b      	ldr	r0, [pc, #108]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e6e:	f004 fe4d 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000e78:	f7ff fb76 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000e80:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000e84:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM4_Init+0x130>)
 8000e98:	f003 fe70 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000ea2:	f7ff fb61 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM4_Init+0x130>)
 8000ebe:	f003 fdc0 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8000ec8:	f7ff fb4e 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM4_Init+0x130>)
 8000ece:	f000 fba3 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	; 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000200 	.word	0x20000200
 8000ee0:	40000800 	.word	0x40000800

08000ee4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09e      	sub	sp, #120	; 0x78
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	222c      	movs	r2, #44	; 0x2c
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 f83f 	bl	8006fb0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f32:	4b52      	ldr	r3, [pc, #328]	; (800107c <MX_TIM8_Init+0x198>)
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <MX_TIM8_Init+0x19c>)
 8000f36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000f38:	4b50      	ldr	r3, [pc, #320]	; (800107c <MX_TIM8_Init+0x198>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <MX_TIM8_Init+0x198>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f44:	4b4d      	ldr	r3, [pc, #308]	; (800107c <MX_TIM8_Init+0x198>)
 8000f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <MX_TIM8_Init+0x198>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <MX_TIM8_Init+0x198>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b48      	ldr	r3, [pc, #288]	; (800107c <MX_TIM8_Init+0x198>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f5e:	4847      	ldr	r0, [pc, #284]	; (800107c <MX_TIM8_Init+0x198>)
 8000f60:	f002 ff14 	bl	8003d8c <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000f6a:	f7ff fafd 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4840      	ldr	r0, [pc, #256]	; (800107c <MX_TIM8_Init+0x198>)
 8000f7c:	f003 ff12 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f86:	f7ff faef 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f8a:	483c      	ldr	r0, [pc, #240]	; (800107c <MX_TIM8_Init+0x198>)
 8000f8c:	f002 ffc6 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000f96:	f7ff fae7 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000f9a:	4838      	ldr	r0, [pc, #224]	; (800107c <MX_TIM8_Init+0x198>)
 8000f9c:	f003 f9c8 	bl	8004330 <HAL_TIM_IC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000fa6:	f7ff fadf 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482f      	ldr	r0, [pc, #188]	; (800107c <MX_TIM8_Init+0x198>)
 8000fbe:	f004 fda5 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 8000fc8:	f7ff face 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	; 0x60
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000fd0:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <MX_TIM8_Init+0x198>)
 8000ff4:	f003 fdc2 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8000ffe:	f7ff fab3 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001006:	2301      	movs	r3, #1
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001016:	2204      	movs	r2, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <MX_TIM8_Init+0x198>)
 800101c:	f003 fd11 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001026:	f7ff fa9f 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800104c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <MX_TIM8_Init+0x198>)
 8001060:	f004 fde0 	bl	8005c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800106a:	f7ff fa7d 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <MX_TIM8_Init+0x198>)
 8001070:	f000 fad2 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8001074:	bf00      	nop
 8001076:	3778      	adds	r7, #120	; 0x78
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000024c 	.word	0x2000024c
 8001080:	40013400 	.word	0x40013400

08001084 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09e      	sub	sp, #120	; 0x78
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	222c      	movs	r2, #44	; 0x2c
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 ff6f 	bl	8006fb0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010d2:	4b4e      	ldr	r3, [pc, #312]	; (800120c <MX_TIM15_Init+0x188>)
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <MX_TIM15_Init+0x18c>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <MX_TIM15_Init+0x188>)
 80010da:	2207      	movs	r2, #7
 80010dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_TIM15_Init+0x188>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <MX_TIM15_Init+0x188>)
 80010e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <MX_TIM15_Init+0x188>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <MX_TIM15_Init+0x188>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <MX_TIM15_Init+0x188>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80010fe:	4843      	ldr	r0, [pc, #268]	; (800120c <MX_TIM15_Init+0x188>)
 8001100:	f002 fe44 	bl	8003d8c <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800110a:	f7ff fa2d 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001118:	4619      	mov	r1, r3
 800111a:	483c      	ldr	r0, [pc, #240]	; (800120c <MX_TIM15_Init+0x188>)
 800111c:	f003 fe42 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8001126:	f7ff fa1f 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800112a:	4838      	ldr	r0, [pc, #224]	; (800120c <MX_TIM15_Init+0x188>)
 800112c:	f002 fef6 	bl	8003f1c <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8001136:	f7ff fa17 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <MX_TIM15_Init+0x188>)
 800113c:	f003 f8f8 	bl	8004330 <HAL_TIM_IC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001146:	f7ff fa0f 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001152:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <MX_TIM15_Init+0x188>)
 800115a:	f004 fcd7 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8001164:	f7ff fa00 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 800116c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	481f      	ldr	r0, [pc, #124]	; (800120c <MX_TIM15_Init+0x188>)
 8001190:	f003 fcf4 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800119a:	f7ff f9e5 	bl	8000568 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a2:	2301      	movs	r3, #1
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b2:	2204      	movs	r2, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4815      	ldr	r0, [pc, #84]	; (800120c <MX_TIM15_Init+0x188>)
 80011b8:	f003 fc43 	bl	8004a42 <HAL_TIM_IC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80011c2:	f7ff f9d1 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM15_Init+0x188>)
 80011ee:	f004 fd19 	bl	8005c24 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 80011f8:	f7ff f9b6 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM15_Init+0x188>)
 80011fe:	f000 fa0b 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3778      	adds	r7, #120	; 0x78
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000298 	.word	0x20000298
 8001210:	40014000 	.word	0x40014000

08001214 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b092      	sub	sp, #72	; 0x48
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	222c      	movs	r2, #44	; 0x2c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f005 febb 	bl	8006fb0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM16_Init+0xec>)
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <MX_TIM16_Init+0xf0>)
 800123e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM16_Init+0xec>)
 8001242:	2207      	movs	r2, #7
 8001244:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_TIM16_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_TIM16_Init+0xec>)
 800124e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001252:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM16_Init+0xec>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_TIM16_Init+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_TIM16_Init+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001266:	4826      	ldr	r0, [pc, #152]	; (8001300 <MX_TIM16_Init+0xec>)
 8001268:	f002 fd90 	bl	8003d8c <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001272:	f7ff f979 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_TIM16_Init+0xec>)
 8001278:	f002 fe50 	bl	8003f1c <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001282:	f7ff f971 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800128a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM16_Init+0xec>)
 80012ae:	f003 fc65 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80012b8:	f7ff f956 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM16_Init+0xec>)
 80012e4:	f004 fc9e 	bl	8005c24 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80012ee:	f7ff f93b 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM16_Init+0xec>)
 80012f4:	f000 f990 	bl	8001618 <HAL_TIM_MspPostInit>

}
 80012f8:	bf00      	nop
 80012fa:	3748      	adds	r7, #72	; 0x48
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002e4 	.word	0x200002e4
 8001304:	40014400 	.word	0x40014400

08001308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4aa7      	ldr	r2, [pc, #668]	; (80015c4 <HAL_TIM_Base_MspInit+0x2bc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d138      	bne.n	800139c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	4ba7      	ldr	r3, [pc, #668]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4aa6      	ldr	r2, [pc, #664]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4ba4      	ldr	r3, [pc, #656]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001340:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4ba1      	ldr	r3, [pc, #644]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4aa0      	ldr	r2, [pc, #640]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b9e      	ldr	r3, [pc, #632]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
 8001358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135a:	2302      	movs	r3, #2
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800136a:	2302      	movs	r3, #2
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001372:	4619      	mov	r1, r3
 8001374:	4895      	ldr	r0, [pc, #596]	; (80015cc <HAL_TIM_Base_MspInit+0x2c4>)
 8001376:	f000 fe8d 	bl	8002094 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2018      	movs	r0, #24
 8001380:	f000 fde6 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001384:	2018      	movs	r0, #24
 8001386:	f000 fdff 	bl	8001f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	201b      	movs	r0, #27
 8001390:	f000 fdde 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001394:	201b      	movs	r0, #27
 8001396:	f000 fdf7 	bl	8001f88 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800139a:	e134      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	d131      	bne.n	800140a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a87      	ldr	r2, [pc, #540]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a81      	ldr	r2, [pc, #516]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	6153      	str	r3, [r2, #20]
 80013ca:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e6:	2301      	movs	r3, #1
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 fe4e 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	201c      	movs	r0, #28
 80013fe:	f000 fda7 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001402:	201c      	movs	r0, #28
 8001404:	f000 fdc0 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 8001408:	e0fd      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a70      	ldr	r2, [pc, #448]	; (80015d0 <HAL_TIM_Base_MspInit+0x2c8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d131      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a6b      	ldr	r2, [pc, #428]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
 800142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	4a65      	ldr	r2, [pc, #404]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001436:	6153      	str	r3, [r2, #20]
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001444:	2310      	movs	r3, #16
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001454:	2302      	movs	r3, #2
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f000 fe17 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201d      	movs	r0, #29
 800146c:	f000 fd70 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001470:	201d      	movs	r0, #29
 8001472:	f000 fd89 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 8001476:	e0c6      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a55      	ldr	r2, [pc, #340]	; (80015d4 <HAL_TIM_Base_MspInit+0x2cc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d132      	bne.n	80014e8 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80014c4:	230a      	movs	r3, #10
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f000 fddf 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201e      	movs	r0, #30
 80014dc:	f000 fd38 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014e0:	201e      	movs	r0, #30
 80014e2:	f000 fd51 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 80014e6:	e08e      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <HAL_TIM_Base_MspInit+0x2d0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d130      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a34      	ldr	r2, [pc, #208]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 80014f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001514:	6153      	str	r3, [r2, #20]
 8001516:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001532:	2304      	movs	r3, #4
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800153a:	4619      	mov	r1, r3
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <HAL_TIM_Base_MspInit+0x2c4>)
 800153e:	f000 fda9 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	202e      	movs	r0, #46	; 0x2e
 8001548:	f000 fd02 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800154c:	202e      	movs	r0, #46	; 0x2e
 800154e:	f000 fd1b 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 8001552:	e058      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_TIM_Base_MspInit+0x2d4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d142      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800158e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80015a0:	2301      	movs	r3, #1
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <HAL_TIM_Base_MspInit+0x2d8>)
 80015ac:	f000 fd72 	bl	8002094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2018      	movs	r0, #24
 80015b6:	f000 fccb 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015ba:	2018      	movs	r0, #24
 80015bc:	f000 fce4 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 80015c0:	e021      	b.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
 80015c2:	bf00      	nop
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000800 	.word	0x48000800
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40000800 	.word	0x40000800
 80015d8:	40013400 	.word	0x40013400
 80015dc:	40014000 	.word	0x40014000
 80015e0:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_TIM_Base_MspInit+0x308>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10b      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_Base_MspInit+0x30c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_TIM_Base_MspInit+0x30c>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_TIM_Base_MspInit+0x30c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40014400 	.word	0x40014400
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a79      	ldr	r2, [pc, #484]	; (800181c <HAL_TIM_MspPostInit+0x204>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d11c      	bne.n	8001674 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a78      	ldr	r2, [pc, #480]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	623b      	str	r3, [r7, #32]
 8001650:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001652:	2301      	movs	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800165a:	2302      	movs	r3, #2
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001662:	2302      	movs	r3, #2
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	486d      	ldr	r0, [pc, #436]	; (8001824 <HAL_TIM_MspPostInit+0x20c>)
 800166e:	f000 fd11 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001672:	e0cf      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d11d      	bne.n	80016ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001696:	2301      	movs	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169e:	2302      	movs	r3, #2
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016a6:	2301      	movs	r3, #1
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f000 fcee 	bl	8002094 <HAL_GPIO_Init>
}
 80016b8:	e0ac      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5a      	ldr	r2, [pc, #360]	; (8001828 <HAL_TIM_MspPostInit+0x210>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11d      	bne.n	8001700 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a55      	ldr	r2, [pc, #340]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ce:	6153      	str	r3, [r2, #20]
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016dc:	2340      	movs	r3, #64	; 0x40
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ec:	2302      	movs	r3, #2
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f000 fccb 	bl	8002094 <HAL_GPIO_Init>
}
 80016fe:	e089      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a49      	ldr	r2, [pc, #292]	; (800182c <HAL_TIM_MspPostInit+0x214>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b45      	ldr	r3, [pc, #276]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a44      	ldr	r2, [pc, #272]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	6153      	str	r3, [r2, #20]
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172c:	2302      	movs	r3, #2
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001734:	230a      	movs	r3, #10
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f000 fca7 	bl	8002094 <HAL_GPIO_Init>
}
 8001746:	e065      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_TIM_MspPostInit+0x218>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11c      	bne.n	800178c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001772:	2302      	movs	r3, #2
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800177a:	2304      	movs	r3, #4
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4827      	ldr	r0, [pc, #156]	; (8001824 <HAL_TIM_MspPostInit+0x20c>)
 8001786:	f000 fc85 	bl	8002094 <HAL_GPIO_Init>
}
 800178a:	e043      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_TIM_MspPostInit+0x21c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d11d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80017c0:	2301      	movs	r3, #1
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <HAL_TIM_MspPostInit+0x220>)
 80017cc:	f000 fc62 	bl	8002094 <HAL_GPIO_Init>
}
 80017d0:	e020      	b.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_TIM_MspPostInit+0x224>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d11b      	bne.n	8001814 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80017e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e6:	6153      	str	r3, [r2, #20]
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_TIM_MspPostInit+0x208>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f4:	2310      	movs	r3, #16
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001804:	2301      	movs	r3, #1
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <HAL_TIM_MspPostInit+0x220>)
 8001810:	f000 fc40 	bl	8002094 <HAL_GPIO_Init>
}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	; 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40012c00 	.word	0x40012c00
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800
 8001830:	40013400 	.word	0x40013400
 8001834:	40014000 	.word	0x40014000
 8001838:	48000400 	.word	0x48000400
 800183c:	40014400 	.word	0x40014400

08001840 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_UART4_Init+0x58>)
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <MX_UART4_Init+0x5c>)
 8001848:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_UART4_Init+0x58>)
 800184c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001850:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_UART4_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_UART4_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_UART4_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_UART4_Init+0x58>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_UART4_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_UART4_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_UART4_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_UART4_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_UART4_Init+0x58>)
 8001884:	f004 fa72 	bl	8005d6c <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800188e:	f7fe fe6b 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000330 	.word	0x20000330
 800189c:	40004c00 	.word	0x40004c00

080018a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <MX_USART2_UART_Init+0x5c>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018e4:	f004 fa42 	bl	8005d6c <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ee:	f7fe fe3b 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003b8 	.word	0x200003b8
 80018fc:	40004400 	.word	0x40004400

08001900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a33      	ldr	r2, [pc, #204]	; (80019ec <HAL_UART_MspInit+0xec>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d131      	bne.n	8001986 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001944:	6153      	str	r3, [r2, #20]
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001964:	2305      	movs	r3, #5
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4821      	ldr	r0, [pc, #132]	; (80019f4 <HAL_UART_MspInit+0xf4>)
 8001970:	f000 fb90 	bl	8002094 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2034      	movs	r0, #52	; 0x34
 800197a:	f000 fae9 	bl	8001f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800197e:	2034      	movs	r0, #52	; 0x34
 8001980:	f000 fb02 	bl	8001f88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001984:	e02d      	b.n	80019e2 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_UART_MspInit+0xf8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d128      	bne.n	80019e2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	61d3      	str	r3, [r2, #28]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 80019ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b2:	6153      	str	r3, [r2, #20]
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_UART_MspInit+0xf0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019c0:	230c      	movs	r3, #12
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d0:	2307      	movs	r3, #7
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f000 fb59 	bl	8002094 <HAL_GPIO_Init>
}
 80019e2:	bf00      	nop
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40004c00 	.word	0x40004c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000800 	.word	0x48000800
 80019f8:	40004400 	.word	0x40004400

080019fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7fe ffbc 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f005 fb15 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2e:	f7fe fcbb 	bl	80003a8 <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001a40:	08007c14 	.word	0x08007c14
  ldr r2, =_sbss
 8001a44:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001a48:	200005fc 	.word	0x200005fc

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7f1b      	ldrb	r3, [r3, #28]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d145      	bne.n	8001aec <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d114      	bne.n	8001a9a <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4a20      	ldr	r2, [pc, #128]	; (8001afc <HAL_TIM_IC_CaptureCallback+0xac>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4611      	mov	r1, r2
 8001a84:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001a86:	440a      	add	r2, r1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8e4 	bl	8001c58 <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8001a90:	2100      	movs	r1, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f002 fbb0 	bl	80041f8 <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 8001a98:	e028      	b.n	8001aec <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001aa4:	5c9b      	ldrb	r3, [r3, r2]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d120      	bne.n	8001aec <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ab4:	1899      	adds	r1, r3, r2
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001acc:	4418      	add	r0, r3
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001ad8:	4423      	add	r3, r4
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8e4 	bl	8001cac <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f002 fdce 	bl	8004688 <HAL_TIM_IC_Stop_IT>
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	20000458 	.word	0x20000458
 8001af8:	2000045c 	.word	0x2000045c
 8001afc:	20000464 	.word	0x20000464
 8001b00:	2000047c 	.word	0x2000047c
 8001b04:	20000494 	.word	0x20000494

08001b08 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 8001b1a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001b44 <ECU_Ultrasonic_Read+0x3c>
 8001b1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f810 	bl	8001b48 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f002 fc5e 	bl	80043f4 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	3a83126f 	.word	0x3a83126f

08001b48 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e077      	b.n	8001c50 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <ECU_Ultrasonic_GenerateTrigger+0x36>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	e045      	b.n	8001c0a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d10a      	bne.n	8001b9c <ECU_Ultrasonic_GenerateTrigger+0x54>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e036      	b.n	8001c0a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d10a      	bne.n	8001bba <ECU_Ultrasonic_GenerateTrigger+0x72>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	e027      	b.n	8001c0a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d10a      	bne.n	8001bd8 <ECU_Ultrasonic_GenerateTrigger+0x90>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e018      	b.n	8001c0a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d10a      	bne.n	8001bf6 <ECU_Ultrasonic_GenerateTrigger+0xae>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	e009      	b.n	8001c0a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e01e      	b.n	8001c50 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c38:	ee17 2a90 	vmov	r2, s15
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f002 f9c9 	bl	8003fe0 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c64:	2104      	movs	r1, #4
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f003 f966 	bl	8004f38 <HAL_TIM_ReadCapturedValue>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c90:	621a      	str	r2, [r3, #32]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0220 	orr.w	r2, r2, #32
 8001ca0:	621a      	str	r2, [r3, #32]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001cba:	2104      	movs	r1, #4
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f003 f93b 	bl	8004f38 <HAL_TIM_ReadCapturedValue>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d307      	bcc.n	8001cec <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1ad2      	subs	r2, r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e011      	b.n	8001d10 <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001cfa:	33ff      	adds	r3, #255	; 0xff
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <IC_second_Capture+0xb8>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4817      	ldr	r0, [pc, #92]	; (8001d68 <IC_second_Capture+0xbc>)
 8001d0c:	f005 f866 	bl	8006ddc <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d1c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001d6c <IC_second_Capture+0xc0>
 8001d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <IC_second_Capture+0xb8>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d30:	ee17 1a90 	vmov	r1, s15
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <IC_second_Capture+0xc4>)
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d4e:	621a      	str	r2, [r3, #32]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a12      	ldr	r2, [r2, #32]
 8001d5a:	621a      	str	r2, [r3, #32]
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000458 	.word	0x20000458
 8001d68:	08007b80 	.word	0x08007b80
 8001d6c:	42680000 	.word	0x42680000
 8001d70:	20000440 	.word	0x20000440

08001d74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_Init+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_Init+0x28>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f8d8 	bl	8001f3a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7fe fc16 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7fe fbf0 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000050 	.word	0x20000050
 8001dc4:	200004ac 	.word	0x200004ac

08001dc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200004ac 	.word	0x200004ac

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff4c 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f62:	f7ff ff61 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f7ff ffb1 	bl	8001ed4 <NVIC_EncodePriority>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff80 	bl	8001e80 <__NVIC_SetPriority>
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff54 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d008      	beq.n	8001fc8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e020      	b.n	800200a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 020e 	bic.w	r2, r2, #14
 8001fd6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002028:	2b02      	cmp	r3, #2
 800202a:	d005      	beq.n	8002038 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2204      	movs	r2, #4
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e027      	b.n	8002088 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 020e 	bic.w	r2, r2, #14
 8002046:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    } 
  }
  return status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e160      	b.n	8002366 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8152 	beq.w	8002360 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x40>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 0201 	and.w	r2, r3, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0203 	and.w	r2, r3, #3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80ac 	beq.w	8002360 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002208:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002220:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800224a:	d025      	beq.n	8002298 <HAL_GPIO_Init+0x204>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x2f8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d01f      	beq.n	8002294 <HAL_GPIO_Init+0x200>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_GPIO_Init+0x2fc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d019      	beq.n	8002290 <HAL_GPIO_Init+0x1fc>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_GPIO_Init+0x300>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_GPIO_Init+0x1f8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00d      	beq.n	8002288 <HAL_GPIO_Init+0x1f4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_GPIO_Init+0x308>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x1f0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_GPIO_Init+0x30c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_GPIO_Init+0x1ec>
 800227c:	2306      	movs	r3, #6
 800227e:	e00c      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002280:	2307      	movs	r3, #7
 8002282:	e00a      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002284:	2305      	movs	r3, #5
 8002286:	e008      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002288:	2304      	movs	r3, #4
 800228a:	e006      	b.n	800229a <HAL_GPIO_Init+0x206>
 800228c:	2303      	movs	r3, #3
 800228e:	e004      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002290:	2302      	movs	r3, #2
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_GPIO_Init+0x206>
 8002298:	2300      	movs	r3, #0
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	4093      	lsls	r3, r2
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_GPIO_Init+0x310>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <HAL_GPIO_Init+0x310>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_GPIO_Init+0x310>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002306:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_GPIO_Init+0x310>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_GPIO_Init+0x310>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_GPIO_Init+0x310>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_GPIO_Init+0x310>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_GPIO_Init+0x310>)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f ae97 	bne.w	80020a4 <HAL_GPIO_Init+0x10>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	48000400 	.word	0x48000400
 8002390:	48000800 	.word	0x48000800
 8002394:	48000c00 	.word	0x48000c00
 8002398:	48001000 	.word	0x48001000
 800239c:	48001400 	.word	0x48001400
 80023a0:	48001800 	.word	0x48001800
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f001 b83a 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 816f 	beq.w	80026f2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002414:	4bb5      	ldr	r3, [pc, #724]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4bb2      	ldr	r3, [pc, #712]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d15c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x10e>
 800242c:	4baf      	ldr	r3, [pc, #700]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d155      	bne.n	80024e6 <HAL_RCC_OscConfig+0x10e>
 800243a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800244e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <HAL_RCC_OscConfig+0x94>
 8002466:	4ba1      	ldr	r3, [pc, #644]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	e015      	b.n	8002498 <HAL_RCC_OscConfig+0xc0>
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002484:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002488:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002494:	4b95      	ldr	r3, [pc, #596]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800249c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80024a0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80024a4:	fa92 f2a2 	rbit	r2, r2
 80024a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80024ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	f042 0220 	orr.w	r2, r2, #32
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f002 021f 	and.w	r2, r2, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8111 	beq.w	80026f0 <HAL_RCC_OscConfig+0x318>
 80024ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8108 	bne.w	80026f0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f000 bfc6 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x12e>
 80024f8:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7b      	ldr	r2, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e036      	b.n	8002574 <HAL_RCC_OscConfig+0x19c>
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x158>
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a74      	ldr	r2, [pc, #464]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b72      	ldr	r3, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a71      	ldr	r2, [pc, #452]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e021      	b.n	8002574 <HAL_RCC_OscConfig+0x19c>
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x184>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0x19c>
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a62      	ldr	r2, [pc, #392]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b60      	ldr	r3, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5f      	ldr	r2, [pc, #380]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002572:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d059      	beq.n	8002638 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fc20 	bl	8001dc8 <HAL_GetTick>
 8002588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258e:	f7ff fc1b 	bl	8001dc8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d902      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	f000 bf67 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 80025a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80025b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1fe>
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x22a>
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80025ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002606:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800260a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800260e:	fa92 f2a2 	rbit	r2, r2
 8002612:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002616:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ab      	beq.n	800258e <HAL_RCC_OscConfig+0x1b6>
 8002636:	e05c      	b.n	80026f2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff fbc6 	bl	8001dc8 <HAL_GetTick>
 800263c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002642:	f7ff fbc1 	bl	8001dc8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d902      	bls.n	8002658 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	f000 bf0d 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 8002658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800266c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0x2b2>
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x2de>
 800268a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800269e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_RCC_OscConfig+0x314>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80026be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80026c2:	fa92 f2a2 	rbit	r2, r2
 80026c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80026ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ab      	bne.n	8002642 <HAL_RCC_OscConfig+0x26a>
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_OscConfig+0x31a>
 80026ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 817f 	beq.w	8002a06 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002708:	4ba7      	ldr	r3, [pc, #668]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002714:	4ba4      	ldr	r3, [pc, #656]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d173      	bne.n	8002808 <HAL_RCC_OscConfig+0x430>
 8002720:	4ba1      	ldr	r3, [pc, #644]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272c:	d16c      	bne.n	8002808 <HAL_RCC_OscConfig+0x430>
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002740:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0x386>
 8002758:	4b93      	ldr	r3, [pc, #588]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e013      	b.n	8002786 <HAL_RCC_OscConfig+0x3ae>
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002776:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2202      	movs	r2, #2
 8002788:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800278c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002798:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f042 0220 	orr.w	r2, r2, #32
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f002 021f 	and.w	r2, r2, #31
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCC_OscConfig+0x3f6>
 80027b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f000 be52 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	21f8      	movs	r1, #248	; 0xf8
 80027e4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80027ec:	fa91 f1a1 	rbit	r1, r1
 80027f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80027f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027f8:	fab1 f181 	clz	r1, r1
 80027fc:	b2c9      	uxtb	r1, r1
 80027fe:	408b      	lsls	r3, r1
 8002800:	4969      	ldr	r1, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e0fe      	b.n	8002a06 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8088 	beq.w	800292a <HAL_RCC_OscConfig+0x552>
 800281a:	2301      	movs	r3, #1
 800281c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800282c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7ff fabf 	bl	8001dc8 <HAL_GetTick>
 800284a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002850:	f7ff faba 	bl	8001dc8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	f000 be06 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 8002866:	2302      	movs	r3, #2
 8002868:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002878:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d102      	bne.n	8002896 <HAL_RCC_OscConfig+0x4be>
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e013      	b.n	80028be <HAL_RCC_OscConfig+0x4e6>
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2202      	movs	r2, #2
 80028c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80028d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0af      	beq.n	8002850 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	21f8      	movs	r1, #248	; 0xf8
 8002906:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800290e:	fa91 f1a1 	rbit	r1, r1
 8002912:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002916:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800291a:	fab1 f181 	clz	r1, r1
 800291e:	b2c9      	uxtb	r1, r1
 8002920:	408b      	lsls	r3, r1
 8002922:	4921      	ldr	r1, [pc, #132]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e06d      	b.n	8002a06 <HAL_RCC_OscConfig+0x62e>
 800292a:	2301      	movs	r3, #1
 800292c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800293c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800294a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	461a      	mov	r2, r3
 8002952:	2300      	movs	r3, #0
 8002954:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff fa37 	bl	8001dc8 <HAL_GetTick>
 800295a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7ff fa32 	bl	8001dc8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d902      	bls.n	8002976 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f000 bd7e 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002988:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x5d4>
 80029a0:	4b01      	ldr	r3, [pc, #4]	; (80029a8 <HAL_RCC_OscConfig+0x5d0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e016      	b.n	80029d4 <HAL_RCC_OscConfig+0x5fc>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029be:	2302      	movs	r3, #2
 80029c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029d0:	4bbf      	ldr	r3, [pc, #764]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2202      	movs	r2, #2
 80029d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80029e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f042 0220 	orr.w	r2, r2, #32
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ac      	bne.n	8002960 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8113 	beq.w	8002c42 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d07c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x74e>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4ba2      	ldr	r3, [pc, #648]	; (8002cd4 <HAL_RCC_OscConfig+0x8fc>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7ff f9b7 	bl	8001dc8 <HAL_GetTick>
 8002a5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff f9b2 	bl	8001dc8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	f000 bcfe 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 8002a76:	2302      	movs	r3, #2
 8002a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ad4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	6019      	str	r1, [r3, #0]
 8002ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	fa93 f1a3 	rbit	r1, r3
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002afc:	6019      	str	r1, [r3, #0]
  return result;
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d09d      	beq.n	8002a60 <HAL_RCC_OscConfig+0x688>
 8002b24:	e08d      	b.n	8002c42 <HAL_RCC_OscConfig+0x86a>
 8002b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b48:	601a      	str	r2, [r3, #0]
  return result;
 8002b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_RCC_OscConfig+0x8fc>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b68:	f7ff f92e 	bl	8001dc8 <HAL_GetTick>
 8002b6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b72:	f7ff f929 	bl	8001dc8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	f000 bc75 	b.w	8003472 <HAL_RCC_OscConfig+0x109a>
 8002b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bf2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c00:	2102      	movs	r1, #2
 8002c02:	6019      	str	r1, [r3, #0]
 8002c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f1a3 	rbit	r1, r3
 8002c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c16:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c1a:	6019      	str	r1, [r3, #0]
  return result;
 8002c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d197      	bne.n	8002b72 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 81a5 	beq.w	8002fa2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_RCC_OscConfig+0x8f8>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCC_OscConfig+0x900>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCC_OscConfig+0x900>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <HAL_RCC_OscConfig+0x900>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f88a 	bl	8001dc8 <HAL_GetTick>
 8002cb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e010      	b.n	8002cdc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7ff f885 	bl	8001dc8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e3d1      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	10908120 	.word	0x10908120
 8002cd8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b8d      	ldr	r3, [pc, #564]	; (8002f14 <HAL_RCC_OscConfig+0xb3c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0e8      	beq.n	8002cba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x92e>
 8002cf8:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a86      	ldr	r2, [pc, #536]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e035      	b.n	8002d72 <HAL_RCC_OscConfig+0x99a>
 8002d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x958>
 8002d16:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a7c      	ldr	r2, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	e020      	b.n	8002d72 <HAL_RCC_OscConfig+0x99a>
 8002d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x982>
 8002d40:	4b75      	ldr	r3, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a74      	ldr	r2, [pc, #464]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x99a>
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a6b      	ldr	r2, [pc, #428]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8081 	beq.w	8002e86 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7ff f820 	bl	8001dc8 <HAL_GetTick>
 8002d88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00b      	b.n	8002da6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7ff f81b 	bl	8001dc8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e365      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 8002da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002daa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dae:	2202      	movs	r2, #2
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dec:	601a      	str	r2, [r3, #0]
  return result;
 8002dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002df6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0xa3a>
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	e013      	b.n	8002e3a <HAL_RCC_OscConfig+0xa62>
 8002e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e30:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e3e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e42:	2102      	movs	r1, #2
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fa92 f1a2 	rbit	r1, r2
 8002e54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e58:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e5c:	6011      	str	r1, [r2, #0]
  return result;
 8002e5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e62:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d084      	beq.n	8002d8e <HAL_RCC_OscConfig+0x9b6>
 8002e84:	e083      	b.n	8002f8e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe ff9f 	bl	8001dc8 <HAL_GetTick>
 8002e8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe ff9a 	bl	8001dc8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e2e4      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002edc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eee:	601a      	str	r2, [r3, #0]
  return result;
 8002ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ef8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0xb44>
 8002f0e:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <HAL_RCC_OscConfig+0xb40>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	e017      	b.n	8002f44 <HAL_RCC_OscConfig+0xb6c>
 8002f14:	40007000 	.word	0x40007000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f24:	2202      	movs	r2, #2
 8002f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	4bb3      	ldr	r3, [pc, #716]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	6011      	str	r1, [r2, #0]
 8002f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	fa92 f1a2 	rbit	r1, r2
 8002f5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f62:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002f66:	6011      	str	r1, [r2, #0]
  return result;
 8002f68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f6c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d180      	bne.n	8002e90 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a9d      	ldr	r2, [pc, #628]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 825e 	beq.w	8003470 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f000 821f 	beq.w	8003400 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 8170 	bne.w	80032b4 <HAL_RCC_OscConfig+0xedc>
 8002fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ff8:	601a      	str	r2, [r3, #0]
  return result;
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003002:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800300e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	461a      	mov	r2, r3
 8003016:	2300      	movs	r3, #0
 8003018:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fed5 	bl	8001dc8 <HAL_GetTick>
 800301e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e009      	b.n	8003038 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fed0 	bl	8001dc8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e21c      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 8003038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800303c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003058:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800305c:	601a      	str	r2, [r3, #0]
  return result;
 800305e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003062:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003066:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <HAL_RCC_OscConfig+0xcaa>
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	e027      	b.n	80030d2 <HAL_RCC_OscConfig+0xcfa>
 8003082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003086:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800308a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003094:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	fa92 f1a2 	rbit	r1, r2
 80030ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80030f6:	6011      	str	r1, [r2, #0]
  return result;
 80030f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f042 0220 	orr.w	r2, r2, #32
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f002 021f 	and.w	r2, r2, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d182      	bne.n	8003024 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311e:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 8003134:	4313      	orrs	r3, r2
 8003136:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a19      	ldr	r1, [r3, #32]
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	430b      	orrs	r3, r1
 800315a:	492d      	ldr	r1, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003164:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800316c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003172:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003180:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003184:	601a      	str	r2, [r3, #0]
  return result;
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800318e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800319a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	461a      	mov	r2, r3
 80031a2:	2301      	movs	r3, #1
 80031a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fe0f 	bl	8001dc8 <HAL_GetTick>
 80031aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ae:	e009      	b.n	80031c4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fe0a 	bl	8001dc8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e156      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 80031c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031e8:	601a      	str	r2, [r3, #0]
  return result;
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0xe3c>
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <HAL_RCC_OscConfig+0xe38>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e02a      	b.n	8003264 <HAL_RCC_OscConfig+0xe8c>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003218:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800321c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003226:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003234:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	4b86      	ldr	r3, [pc, #536]	; (800347c <HAL_RCC_OscConfig+0x10a4>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003268:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800326c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003276:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	fa92 f1a2 	rbit	r1, r2
 8003280:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003284:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003288:	6011      	str	r1, [r2, #0]
  return result;
 800328a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800328e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f43f af7f 	beq.w	80031b0 <HAL_RCC_OscConfig+0xdd8>
 80032b2:	e0dd      	b.n	8003470 <HAL_RCC_OscConfig+0x1098>
 80032b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032d8:	601a      	str	r2, [r3, #0]
  return result;
 80032da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032e2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	461a      	mov	r2, r3
 80032f6:	2300      	movs	r3, #0
 80032f8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe fd65 	bl	8001dc8 <HAL_GetTick>
 80032fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	e009      	b.n	8003318 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fd60 	bl	8001dc8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0ac      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
 8003318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003338:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003342:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003346:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0xf8a>
 800335c:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_OscConfig+0x10a4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	e027      	b.n	80033b2 <HAL_RCC_OscConfig+0xfda>
 8003362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003366:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003382:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b33      	ldr	r3, [pc, #204]	; (800347c <HAL_RCC_OscConfig+0x10a4>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033be:	6011      	str	r1, [r2, #0]
 80033c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	fa92 f1a2 	rbit	r1, r2
 80033ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033d2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80033d6:	6011      	str	r1, [r2, #0]
  return result;
 80033d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033dc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	fab2 f282 	clz	r2, r2
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f002 021f 	and.w	r2, r2, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d182      	bne.n	8003304 <HAL_RCC_OscConfig+0xf2c>
 80033fe:	e037      	b.n	8003470 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003404:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e02e      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_OscConfig+0x10a4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_RCC_OscConfig+0x10a4>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003424:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003428:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800342c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003430:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	429a      	cmp	r2, r3
 800343a:	d117      	bne.n	800346c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800343c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003440:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003448:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003450:	429a      	cmp	r2, r3
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003460:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b09e      	sub	sp, #120	; 0x78
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e162      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b90      	ldr	r3, [pc, #576]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b8d      	ldr	r3, [pc, #564]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	498b      	ldr	r1, [pc, #556]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e14a      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	497f      	ldr	r1, [pc, #508]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80dc 	beq.w	80036ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13c      	bne.n	8003576 <HAL_RCC_ClockConfig+0xf6>
 80034fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003500:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_ClockConfig+0xa6>
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e00f      	b.n	8003546 <HAL_RCC_ClockConfig+0xc6>
 8003526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	667b      	str	r3, [r7, #100]	; 0x64
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	663b      	str	r3, [r7, #96]	; 0x60
 800353a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800354a:	65ba      	str	r2, [r7, #88]	; 0x58
 800354c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354e:	fa92 f2a2 	rbit	r2, r2
 8003552:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003556:	fab2 f282 	clz	r2, r2
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f042 0220 	orr.w	r2, r2, #32
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f002 021f 	and.w	r2, r2, #31
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d17b      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0f3      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d13c      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x178>
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x128>
 80035a2:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_ClockConfig+0x148>
 80035a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80035ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d0:	fa92 f2a2 	rbit	r2, r2
 80035d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d13a      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b2      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
 80035f8:	2302      	movs	r3, #2
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1a0>
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e00d      	b.n	800363c <HAL_RCC_ClockConfig+0x1bc>
 8003620:	2302      	movs	r3, #2
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	2202      	movs	r2, #2
 800363e:	61ba      	str	r2, [r7, #24]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	fa92 f2a2 	rbit	r2, r2
 8003646:	617a      	str	r2, [r7, #20]
  return result;
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e079      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fe fba4 	bl	8001dc8 <HAL_GetTick>
 8003680:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fe fba0 	bl	8001dc8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e061      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d214      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4906      	ldr	r1, [pc, #24]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCC_ClockConfig+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e040      	b.n	800375e <HAL_RCC_ClockConfig+0x2de>
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	491a      	ldr	r1, [pc, #104]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4912      	ldr	r1, [pc, #72]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003722:	f000 f829 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	22f0      	movs	r2, #240	; 0xf0
 8003732:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	60fa      	str	r2, [r7, #12]
  return result;
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	40d3      	lsrs	r3, r2
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x2ec>)
 8003748:	5cd3      	ldrb	r3, [r2, r3]
 800374a:	fa21 f303 	lsr.w	r3, r1, r3
 800374e:	4a08      	ldr	r2, [pc, #32]	; (8003770 <HAL_RCC_ClockConfig+0x2f0>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCC_ClockConfig+0x2f4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc ff30 	bl	80005bc <HAL_InitTick>
  
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3778      	adds	r7, #120	; 0x78
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	08007ba0 	.word	0x08007ba0
 8003770:	20000048 	.word	0x20000048
 8003774:	2000004c 	.word	0x2000004c

08003778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b08b      	sub	sp, #44	; 0x2c
 800377c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x30>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x36>
 80037a6:	e03f      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037aa:	623b      	str	r3, [r7, #32]
      break;
 80037ac:	e03f      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	607a      	str	r2, [r7, #4]
  return result;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	40d3      	lsrs	r3, r2
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037d2:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RCC_GetSysClockFreq+0xc4>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	220f      	movs	r2, #15
 80037dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	fa92 f2a2 	rbit	r2, r2
 80037e4:	60fa      	str	r2, [r7, #12]
  return result;
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	40d3      	lsrs	r3, r2
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003800:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	fbb2 f2f3 	udiv	r2, r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e007      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fbb2 f2f3 	udiv	r2, r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	623b      	str	r3, [r7, #32]
      break;
 8003826:	e002      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetSysClockFreq+0xc8>)
 800382a:	623b      	str	r3, [r7, #32]
      break;
 800382c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382e:	6a3b      	ldr	r3, [r7, #32]
}
 8003830:	4618      	mov	r0, r3
 8003832:	372c      	adds	r7, #44	; 0x2c
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000
 8003840:	007a1200 	.word	0x007a1200
 8003844:	08007bb8 	.word	0x08007bb8
 8003848:	08007bc8 	.word	0x08007bc8

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000048 	.word	0x20000048

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800386a:	f7ff ffef 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386e:	4601      	mov	r1, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003878:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800387c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	fa92 f2a2 	rbit	r2, r2
 8003884:	603a      	str	r2, [r7, #0]
  return result;
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	40d3      	lsrs	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08007bb0 	.word	0x08007bb0

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038ae:	f7ff ffcd 	bl	800384c <HAL_RCC_GetHCLKFreq>
 80038b2:	4601      	mov	r1, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	fa92 f2a2 	rbit	r2, r2
 80038c8:	603a      	str	r2, [r7, #0]
  return result;
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	fab2 f282 	clz	r2, r2
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	40d3      	lsrs	r3, r2
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08007bb0 	.word	0x08007bb0

080038ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	220f      	movs	r2, #15
 80038fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCC_GetClockConfig+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40022000 	.word	0x40022000

08003950 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b092      	sub	sp, #72	; 0x48
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80d4 	beq.w	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10e      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003980:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398a:	61d3      	str	r3, [r2, #28]
 800398c:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d118      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a41      	ldr	r2, [pc, #260]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fa07 	bl	8001dc8 <HAL_GetTick>
 80039ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	e008      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039be:	f7fe fa03 	bl	8001dc8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	; 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1d6      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8084 	beq.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d07c      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	461a      	mov	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04b      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe f9b3 	bl	8001dc8 <HAL_GetTick>
 8003a62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe f9af 	bl	8001dc8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e180      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	2302      	movs	r3, #2
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	61fb      	str	r3, [r7, #28]
  return result;
 8003a94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d108      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003aaa:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	e00d      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	10908100 	.word	0x10908100
 8003abc:	2302      	movs	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	4b9a      	ldr	r3, [pc, #616]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	2202      	movs	r2, #2
 8003ace:	613a      	str	r2, [r7, #16]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	fa92 f2a2 	rbit	r2, r2
 8003ad6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	fab2 f282 	clz	r2, r2
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f002 021f 	and.w	r2, r2, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0b7      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003af6:	4b8f      	ldr	r3, [pc, #572]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	498c      	ldr	r1, [pc, #560]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b28:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	497f      	ldr	r1, [pc, #508]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b46:	4b7b      	ldr	r3, [pc, #492]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4978      	ldr	r1, [pc, #480]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b64:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	4970      	ldr	r1, [pc, #448]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f023 0210 	bic.w	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4969      	ldr	r1, [pc, #420]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	4961      	ldr	r1, [pc, #388]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f023 0220 	bic.w	r2, r3, #32
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	495a      	ldr	r1, [pc, #360]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	4952      	ldr	r1, [pc, #328]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bfa:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	494b      	ldr	r1, [pc, #300]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4943      	ldr	r1, [pc, #268]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c36:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	493c      	ldr	r1, [pc, #240]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	4934      	ldr	r1, [pc, #208]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	492d      	ldr	r1, [pc, #180]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	4925      	ldr	r1, [pc, #148]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	491e      	ldr	r1, [pc, #120]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	4916      	ldr	r1, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	490f      	ldr	r1, [pc, #60]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d26:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	e002      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	4913      	ldr	r1, [pc, #76]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	490b      	ldr	r1, [pc, #44]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3748      	adds	r7, #72	; 0x48
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e049      	b.n	8003e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd faa8 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f001 f916 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d001      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04f      	b.n	8003ef4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d018      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d115      	bne.n	8003ede <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d015      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d011      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e008      	b.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e000      	b.n	8003ef2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40015000 	.word	0x40015000
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f841 	bl	8003fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f001 f84e 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_TIM_PWM_Start+0x24>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e03c      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d109      	bne.n	800401e <HAL_TIM_PWM_Start+0x3e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e02f      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d109      	bne.n	8004038 <HAL_TIM_PWM_Start+0x58>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e022      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d109      	bne.n	8004052 <HAL_TIM_PWM_Start+0x72>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e015      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b10      	cmp	r3, #16
 8004056:	d109      	bne.n	800406c <HAL_TIM_PWM_Start+0x8c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e008      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0a1      	b.n	80041ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xb6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	e023      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xc6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	e01b      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xd6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	e013      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xe6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c4:	e00b      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xf6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	e003      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fcea 	bl	8005ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a38      	ldr	r2, [pc, #224]	; (80041d4 <HAL_TIM_PWM_Start+0x1f4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_PWM_Start+0x148>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a37      	ldr	r2, [pc, #220]	; (80041d8 <HAL_TIM_PWM_Start+0x1f8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_PWM_Start+0x148>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a35      	ldr	r2, [pc, #212]	; (80041dc <HAL_TIM_PWM_Start+0x1fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_PWM_Start+0x148>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_TIM_PWM_Start+0x200>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_PWM_Start+0x148>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a32      	ldr	r2, [pc, #200]	; (80041e4 <HAL_TIM_PWM_Start+0x204>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_PWM_Start+0x148>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a31      	ldr	r2, [pc, #196]	; (80041e8 <HAL_TIM_PWM_Start+0x208>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_TIM_PWM_Start+0x14c>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_TIM_PWM_Start+0x14e>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <HAL_TIM_PWM_Start+0x1f4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d018      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a24      	ldr	r2, [pc, #144]	; (80041ec <HAL_TIM_PWM_Start+0x20c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <HAL_TIM_PWM_Start+0x210>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_TIM_PWM_Start+0x1f8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_TIM_PWM_Start+0x1fc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIM_PWM_Start+0x1a8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_TIM_PWM_Start+0x208>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d115      	bne.n	80041b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_TIM_PWM_Start+0x214>)
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b06      	cmp	r3, #6
 8004198:	d015      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x1e6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d011      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	e008      	b.n	80041c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	40015000 	.word	0x40015000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	00010007 	.word	0x00010007

080041f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fc58 	bl	8005ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a40      	ldr	r2, [pc, #256]	; (8004318 <HAL_TIM_PWM_Stop+0x120>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_TIM_PWM_Stop+0x54>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a3f      	ldr	r2, [pc, #252]	; (800431c <HAL_TIM_PWM_Stop+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_TIM_PWM_Stop+0x54>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <HAL_TIM_PWM_Stop+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_TIM_PWM_Stop+0x54>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3c      	ldr	r2, [pc, #240]	; (8004324 <HAL_TIM_PWM_Stop+0x12c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_TIM_PWM_Stop+0x54>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_TIM_PWM_Stop+0x130>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_PWM_Stop+0x54>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a39      	ldr	r2, [pc, #228]	; (800432c <HAL_TIM_PWM_Stop+0x134>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_TIM_PWM_Stop+0x58>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_TIM_PWM_Stop+0x5a>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d017      	beq.n	8004286 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_TIM_PWM_Stop+0x8e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	f240 4344 	movw	r3, #1092	; 0x444
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_TIM_PWM_Stop+0x8e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_TIM_PWM_Stop+0xbe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	f240 4344 	movw	r3, #1092	; 0x444
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_PWM_Stop+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Stop+0xce>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	e023      	b.n	800430e <HAL_TIM_PWM_Stop+0x116>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Stop+0xde>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d4:	e01b      	b.n	800430e <HAL_TIM_PWM_Stop+0x116>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Stop+0xee>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	e013      	b.n	800430e <HAL_TIM_PWM_Stop+0x116>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0xfe>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f4:	e00b      	b.n	800430e <HAL_TIM_PWM_Stop+0x116>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Stop+0x10e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004304:	e003      	b.n	800430e <HAL_TIM_PWM_Stop+0x116>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40015000 	.word	0x40015000

08004330 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e049      	b.n	80043d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f841 	bl	80043de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fe44 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_TIM_IC_Start_IT+0x1e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e023      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d104      	bne.n	8004422 <HAL_TIM_IC_Start_IT+0x2e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e01b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d104      	bne.n	8004432 <HAL_TIM_IC_Start_IT+0x3e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e013      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d104      	bne.n	8004442 <HAL_TIM_IC_Start_IT+0x4e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e00b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b10      	cmp	r3, #16
 8004446:	d104      	bne.n	8004452 <HAL_TIM_IC_Start_IT+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e003      	b.n	800445a <HAL_TIM_IC_Start_IT+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004458:	b2db      	uxtb	r3, r3
 800445a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_TIM_IC_Start_IT+0x78>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e013      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d104      	bne.n	800447c <HAL_TIM_IC_Start_IT+0x88>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e00b      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d104      	bne.n	800448c <HAL_TIM_IC_Start_IT+0x98>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_TIM_IC_Start_IT+0xa0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004492:	b2db      	uxtb	r3, r3
 8004494:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004496:	7bbb      	ldrb	r3, [r7, #14]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0dd      	b.n	8004662 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0xc2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	e023      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_IC_Start_IT+0xd2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_IC_Start_IT+0xe2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	e013      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_IC_Start_IT+0xf2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_IC_Start_IT+0x102>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f4:	e003      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x10a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x11a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	e013      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x12a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800451c:	e00b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x13a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800452c:	e003      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x142>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d841      	bhi.n	80045c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_TIM_IC_Start_IT+0x150>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004579 	.word	0x08004579
 8004548:	080045c1 	.word	0x080045c1
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045c1 	.word	0x080045c1
 8004554:	0800458b 	.word	0x0800458b
 8004558:	080045c1 	.word	0x080045c1
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	0800459d 	.word	0x0800459d
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045c1 	.word	0x080045c1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045af 	.word	0x080045af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0202 	orr.w	r2, r2, #2
 8004586:	60da      	str	r2, [r3, #12]
      break;
 8004588:	e01d      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0204 	orr.w	r2, r2, #4
 8004598:	60da      	str	r2, [r3, #12]
      break;
 800459a:	e014      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	60da      	str	r2, [r3, #12]
      break;
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0210 	orr.w	r2, r2, #16
 80045bc:	60da      	str	r2, [r3, #12]
      break;
 80045be:	e002      	b.n	80045c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      break;
 80045c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d149      	bne.n	8004660 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fa73 	bl	8005ac0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_TIM_IC_Start_IT+0x278>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d01d      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d018      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_TIM_IC_Start_IT+0x27c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_TIM_IC_Start_IT+0x280>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_TIM_IC_Start_IT+0x284>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1a      	ldr	r2, [pc, #104]	; (800467c <HAL_TIM_IC_Start_IT+0x288>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_IC_Start_IT+0x22c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_TIM_IC_Start_IT+0x28c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d115      	bne.n	800464c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_TIM_IC_Start_IT+0x290>)
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b06      	cmp	r3, #6
 8004630:	d015      	beq.n	800465e <HAL_TIM_IC_Start_IT+0x26a>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d011      	beq.n	800465e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	e008      	b.n	800465e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e000      	b.n	8004660 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40015000 	.word	0x40015000
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d841      	bhi.n	8004720 <HAL_TIM_IC_Stop_IT+0x98>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <HAL_TIM_IC_Stop_IT+0x1c>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004721 	.word	0x08004721
 80046b0:	08004721 	.word	0x08004721
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	08004721 	.word	0x08004721
 80046bc:	08004721 	.word	0x08004721
 80046c0:	08004721 	.word	0x08004721
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004721 	.word	0x08004721
 80046d0:	08004721 	.word	0x08004721
 80046d4:	0800470f 	.word	0x0800470f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0202 	bic.w	r2, r2, #2
 80046e6:	60da      	str	r2, [r3, #12]
      break;
 80046e8:	e01d      	b.n	8004726 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	60da      	str	r2, [r3, #12]
      break;
 80046fa:	e014      	b.n	8004726 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0208 	bic.w	r2, r2, #8
 800470a:	60da      	str	r2, [r3, #12]
      break;
 800470c:	e00b      	b.n	8004726 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0210 	bic.w	r2, r2, #16
 800471c:	60da      	str	r2, [r3, #12]
      break;
 800471e:	e002      	b.n	8004726 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	bf00      	nop
  }

  if (status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d166      	bne.n	80047fa <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f9c3 	bl	8005ac0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	f241 1311 	movw	r3, #4369	; 0x1111
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_TIM_IC_Stop_IT+0xe2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	f240 4344 	movw	r3, #1092	; 0x444
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_TIM_IC_Stop_IT+0xe2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_TIM_IC_Stop_IT+0xf2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	e023      	b.n	80047c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d104      	bne.n	800478a <HAL_TIM_IC_Stop_IT+0x102>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	e01b      	b.n	80047c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d104      	bne.n	800479a <HAL_TIM_IC_Stop_IT+0x112>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	e013      	b.n	80047c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d104      	bne.n	80047aa <HAL_TIM_IC_Stop_IT+0x122>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a8:	e00b      	b.n	80047c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_IC_Stop_IT+0x132>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	e003      	b.n	80047c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_IC_Stop_IT+0x14a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	e013      	b.n	80047fa <HAL_TIM_IC_Stop_IT+0x172>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_IC_Stop_IT+0x15a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_IC_Stop_IT+0x172>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_IC_Stop_IT+0x16a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f0:	e003      	b.n	80047fa <HAL_TIM_IC_Stop_IT+0x172>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0202 	mvn.w	r2, #2
 8004830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd f902 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fbb6 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fbbd 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f8d8 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb8c 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fb93 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0208 	mvn.w	r2, #8
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f8ae 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fb62 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb69 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b10      	cmp	r3, #16
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd f884 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb38 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fb3f 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0201 	mvn.w	r2, #1
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fb fdde 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 f9c8 	bl	8005d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f001 f9bb 	bl	8005d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 faed 	bl	8004fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d10e      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0220 	mvn.w	r2, #32
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f001 f97b 	bl	8005d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e088      	b.n	8004b72 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a7e:	f000 fe61 	bl	8005744 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 020c 	bic.w	r2, r2, #12
 8004a90:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6999      	ldr	r1, [r3, #24]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	e060      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11c      	bne.n	8004ae6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004abc:	f000 fedf 	bl	800587e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ace:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
 8004ae4:	e040      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004afc:	f000 ff2c 	bl	8005958 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 020c 	bic.w	r2, r2, #12
 8004b0e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69d9      	ldr	r1, [r3, #28]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e021      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d11c      	bne.n	8004b64 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b3a:	f000 ff49 	bl	80059d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	021a      	lsls	r2, r3, #8
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e001      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ff      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b14      	cmp	r3, #20
 8004ba6:	f200 80f0 	bhi.w	8004d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004d8b 	.word	0x08004d8b
 8004bb8:	08004d8b 	.word	0x08004d8b
 8004bbc:	08004d8b 	.word	0x08004d8b
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004d8b 	.word	0x08004d8b
 8004bc8:	08004d8b 	.word	0x08004d8b
 8004bcc:	08004d8b 	.word	0x08004d8b
 8004bd0:	08004c87 	.word	0x08004c87
 8004bd4:	08004d8b 	.word	0x08004d8b
 8004bd8:	08004d8b 	.word	0x08004d8b
 8004bdc:	08004d8b 	.word	0x08004d8b
 8004be0:	08004cc7 	.word	0x08004cc7
 8004be4:	08004d8b 	.word	0x08004d8b
 8004be8:	08004d8b 	.word	0x08004d8b
 8004bec:	08004d8b 	.word	0x08004d8b
 8004bf0:	08004d09 	.word	0x08004d09
 8004bf4:	08004d8b 	.word	0x08004d8b
 8004bf8:	08004d8b 	.word	0x08004d8b
 8004bfc:	08004d8b 	.word	0x08004d8b
 8004c00:	08004d49 	.word	0x08004d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fa94 	bl	8005138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	619a      	str	r2, [r3, #24]
      break;
 8004c42:	e0a5      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fb0e 	bl	800526c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	619a      	str	r2, [r3, #24]
      break;
 8004c84:	e084      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fb81 	bl	8005394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0208 	orr.w	r2, r2, #8
 8004ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0204 	bic.w	r2, r2, #4
 8004cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	61da      	str	r2, [r3, #28]
      break;
 8004cc4:	e064      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fbf3 	bl	80054b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	61da      	str	r2, [r3, #28]
      break;
 8004d06:	e043      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fc42 	bl	8005598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d46:	e023      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fc8c 	bl	800566c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop

08004da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0b6      	b.n	8004f2e <HAL_TIM_ConfigClockSource+0x18a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfc:	d03e      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0xd8>
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	f200 8087 	bhi.w	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	f000 8086 	beq.w	8004f1a <HAL_TIM_ConfigClockSource+0x176>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	d87f      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b70      	cmp	r3, #112	; 0x70
 8004e16:	d01a      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xaa>
 8004e18:	2b70      	cmp	r3, #112	; 0x70
 8004e1a:	d87b      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b60      	cmp	r3, #96	; 0x60
 8004e1e:	d050      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x11e>
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d877      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b50      	cmp	r3, #80	; 0x50
 8004e26:	d03c      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xfe>
 8004e28:	2b50      	cmp	r3, #80	; 0x50
 8004e2a:	d873      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d058      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x13e>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d86f      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e34:	2b30      	cmp	r3, #48	; 0x30
 8004e36:	d064      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d86b      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d060      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d867      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d05c      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d05a      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4c:	e062      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	f000 fe0f 	bl	8005a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	609a      	str	r2, [r3, #8]
      break;
 8004e7a:	e04f      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	f000 fdf8 	bl	8005a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e9e:	609a      	str	r2, [r3, #8]
      break;
 8004ea0:	e03c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fcb6 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2150      	movs	r1, #80	; 0x50
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fdc5 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e02c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fd12 	bl	80058f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2160      	movs	r1, #96	; 0x60
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fdb5 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e01c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f000 fc96 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2140      	movs	r1, #64	; 0x40
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fda5 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8004f00:	e00c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f000 fd9c 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8004f12:	e003      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e000      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d831      	bhi.n	8004fb0 <HAL_TIM_ReadCapturedValue+0x78>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004f93 	.word	0x08004f93
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fb1 	.word	0x08004fb1
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08004fb1 	.word	0x08004fb1
 8004f84:	08004fa7 	.word	0x08004fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8e:	60fb      	str	r3, [r7, #12]

      break;
 8004f90:	e00f      	b.n	8004fb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	60fb      	str	r3, [r7, #12]

      break;
 8004f9a:	e00a      	b.n	8004fb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	60fb      	str	r3, [r7, #12]

      break;
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	60fb      	str	r3, [r7, #12]

      break;
 8004fae:	e000      	b.n	8004fb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004fb0:	bf00      	nop
  }

  return tmpreg;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a42      	ldr	r2, [pc, #264]	; (8005118 <TIM_Base_SetConfig+0x11c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3f      	ldr	r2, [pc, #252]	; (800511c <TIM_Base_SetConfig+0x120>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3e      	ldr	r2, [pc, #248]	; (8005120 <TIM_Base_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3d      	ldr	r2, [pc, #244]	; (8005124 <TIM_Base_SetConfig+0x128>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3c      	ldr	r2, [pc, #240]	; (8005128 <TIM_Base_SetConfig+0x12c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a31      	ldr	r2, [pc, #196]	; (8005118 <TIM_Base_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2e      	ldr	r2, [pc, #184]	; (800511c <TIM_Base_SetConfig+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <TIM_Base_SetConfig+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <TIM_Base_SetConfig+0x128>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	; (800512c <TIM_Base_SetConfig+0x130>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_Base_SetConfig+0x134>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_Base_SetConfig+0x138>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0x9a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <TIM_Base_SetConfig+0x12c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <TIM_Base_SetConfig+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x100>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <TIM_Base_SetConfig+0x128>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x100>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <TIM_Base_SetConfig+0x130>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x100>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a12      	ldr	r2, [pc, #72]	; (8005130 <TIM_Base_SetConfig+0x134>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x100>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a11      	ldr	r2, [pc, #68]	; (8005134 <TIM_Base_SetConfig+0x138>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x100>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0c      	ldr	r2, [pc, #48]	; (8005128 <TIM_Base_SetConfig+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d103      	bne.n	8005104 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	615a      	str	r2, [r3, #20]
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40013400 	.word	0x40013400
 8005128:	40015000 	.word	0x40015000
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f023 0201 	bic.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0302 	bic.w	r3, r3, #2
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a30      	ldr	r2, [pc, #192]	; (8005254 <TIM_OC1_SetConfig+0x11c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <TIM_OC1_SetConfig+0x88>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a2f      	ldr	r2, [pc, #188]	; (8005258 <TIM_OC1_SetConfig+0x120>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00f      	beq.n	80051c0 <TIM_OC1_SetConfig+0x88>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2e      	ldr	r2, [pc, #184]	; (800525c <TIM_OC1_SetConfig+0x124>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_OC1_SetConfig+0x88>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <TIM_OC1_SetConfig+0x128>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_OC1_SetConfig+0x88>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2c      	ldr	r2, [pc, #176]	; (8005264 <TIM_OC1_SetConfig+0x12c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC1_SetConfig+0x88>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <TIM_OC1_SetConfig+0x130>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10c      	bne.n	80051da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0308 	bic.w	r3, r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_OC1_SetConfig+0x11c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <TIM_OC1_SetConfig+0xd2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <TIM_OC1_SetConfig+0x120>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_OC1_SetConfig+0xd2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1b      	ldr	r2, [pc, #108]	; (800525c <TIM_OC1_SetConfig+0x124>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC1_SetConfig+0xd2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <TIM_OC1_SetConfig+0x128>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC1_SetConfig+0xd2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <TIM_OC1_SetConfig+0x12c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC1_SetConfig+0xd2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <TIM_OC1_SetConfig+0x130>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d111      	bne.n	800522e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	40015000 	.word	0x40015000

0800526c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0210 	bic.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <TIM_OC2_SetConfig+0x110>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_OC2_SetConfig+0x74>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <TIM_OC2_SetConfig+0x114>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC2_SetConfig+0x74>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <TIM_OC2_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1f      	ldr	r2, [pc, #124]	; (800537c <TIM_OC2_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <TIM_OC2_SetConfig+0xc0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <TIM_OC2_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_OC2_SetConfig+0xc0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <TIM_OC2_SetConfig+0x11c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_OC2_SetConfig+0xc0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <TIM_OC2_SetConfig+0x120>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_OC2_SetConfig+0xc0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC2_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC2_SetConfig+0xc0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <TIM_OC2_SetConfig+0x118>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d113      	bne.n	8005354 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005332:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800533a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40013400 	.word	0x40013400
 8005384:	40015000 	.word	0x40015000
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	; (80054a0 <TIM_OC3_SetConfig+0x10c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_OC3_SetConfig+0x72>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <TIM_OC3_SetConfig+0x110>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC3_SetConfig+0x72>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a29      	ldr	r2, [pc, #164]	; (80054a8 <TIM_OC3_SetConfig+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10d      	bne.n	8005422 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005420:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <TIM_OC3_SetConfig+0x10c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <TIM_OC3_SetConfig+0xbe>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <TIM_OC3_SetConfig+0x110>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00f      	beq.n	8005452 <TIM_OC3_SetConfig+0xbe>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <TIM_OC3_SetConfig+0x118>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_OC3_SetConfig+0xbe>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <TIM_OC3_SetConfig+0x11c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_OC3_SetConfig+0xbe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <TIM_OC3_SetConfig+0x120>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC3_SetConfig+0xbe>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <TIM_OC3_SetConfig+0x114>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d113      	bne.n	800547a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40015000 	.word	0x40015000
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	031b      	lsls	r3, r3, #12
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <TIM_OC4_SetConfig+0xc8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_OC4_SetConfig+0x8c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a19      	ldr	r2, [pc, #100]	; (8005584 <TIM_OC4_SetConfig+0xcc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_OC4_SetConfig+0x8c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <TIM_OC4_SetConfig+0xd0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_OC4_SetConfig+0x8c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <TIM_OC4_SetConfig+0xd4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_OC4_SetConfig+0x8c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a16      	ldr	r2, [pc, #88]	; (8005590 <TIM_OC4_SetConfig+0xd8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_OC4_SetConfig+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <TIM_OC4_SetConfig+0xdc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800
 8005594:	40015000 	.word	0x40015000

08005598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a19      	ldr	r2, [pc, #100]	; (8005654 <TIM_OC5_SetConfig+0xbc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_OC5_SetConfig+0x82>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <TIM_OC5_SetConfig+0xc0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_OC5_SetConfig+0x82>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a17      	ldr	r2, [pc, #92]	; (800565c <TIM_OC5_SetConfig+0xc4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_OC5_SetConfig+0x82>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <TIM_OC5_SetConfig+0xc8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_OC5_SetConfig+0x82>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <TIM_OC5_SetConfig+0xcc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC5_SetConfig+0x82>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <TIM_OC5_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d109      	bne.n	800562e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800
 8005668:	40015000 	.word	0x40015000

0800566c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	051b      	lsls	r3, r3, #20
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	; (800572c <TIM_OC6_SetConfig+0xc0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <TIM_OC6_SetConfig+0x84>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a19      	ldr	r2, [pc, #100]	; (8005730 <TIM_OC6_SetConfig+0xc4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00f      	beq.n	80056f0 <TIM_OC6_SetConfig+0x84>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <TIM_OC6_SetConfig+0xc8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <TIM_OC6_SetConfig+0x84>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a17      	ldr	r2, [pc, #92]	; (8005738 <TIM_OC6_SetConfig+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <TIM_OC6_SetConfig+0x84>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a16      	ldr	r2, [pc, #88]	; (800573c <TIM_OC6_SetConfig+0xd0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_OC6_SetConfig+0x84>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <TIM_OC6_SetConfig+0xd4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	40015000 	.word	0x40015000

08005744 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a26      	ldr	r2, [pc, #152]	; (8005808 <TIM_TI1_SetConfig+0xc4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d017      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d013      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a23      	ldr	r2, [pc, #140]	; (800580c <TIM_TI1_SetConfig+0xc8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00f      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <TIM_TI1_SetConfig+0xcc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a21      	ldr	r2, [pc, #132]	; (8005814 <TIM_TI1_SetConfig+0xd0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <TIM_TI1_SetConfig+0xd4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_TI1_SetConfig+0x5e>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <TIM_TI1_SetConfig+0xd8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <TIM_TI1_SetConfig+0x62>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <TIM_TI1_SetConfig+0x64>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e003      	b.n	80057c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f023 030a 	bic.w	r3, r3, #10
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f003 030a 	and.w	r3, r3, #10
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40015000 	.word	0x40015000

08005820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 030a 	bic.w	r3, r3, #10
 800585c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0210 	bic.w	r2, r3, #16
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	031b      	lsls	r3, r3, #12
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 0210 	bic.w	r2, r3, #16
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	031b      	lsls	r3, r3, #12
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	621a      	str	r2, [r3, #32]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0303 	bic.w	r3, r3, #3
 8005984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005994:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	b2db      	uxtb	r3, r3
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	031b      	lsls	r3, r3, #12
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	031b      	lsls	r3, r3, #12
 8005a28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f043 0307 	orr.w	r3, r3, #7
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e06d      	b.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a30      	ldr	r2, [pc, #192]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2f      	ldr	r2, [pc, #188]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d108      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d01d      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d018      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10c      	bne.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40015000 	.word	0x40015000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40014000 	.word	0x40014000

08005c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e06a      	b.n	8005d16 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d115      	bne.n	8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	051b      	lsls	r3, r3, #20
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40015000 	.word	0x40015000

08005d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e040      	b.n	8005e00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fb fdb6 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fb32 	bl	8006414 <UART_SetConfig>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e022      	b.n	8005e00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcfa 	bl	80067bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fd81 	bl	8006900 <UART_CheckIdleState>
 8005dfe:	4603      	mov	r3, r0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b0ba      	sub	sp, #232	; 0xe8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e32:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e36:	4013      	ands	r3, r2
 8005e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d115      	bne.n	8005e70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00f      	beq.n	8005e70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 82ab 	beq.w	80063bc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
      }
      return;
 8005e6e:	e2a5      	b.n	80063bc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8117 	beq.w	80060a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e8a:	4b85      	ldr	r3, [pc, #532]	; (80060a0 <HAL_UART_IRQHandler+0x298>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 810a 	beq.w	80060a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d011      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xbc>
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00b      	beq.n	8005ec4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d011      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xec>
 8005ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <HAL_UART_IRQHandler+0x11c>
 8005f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2204      	movs	r2, #4
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	f043 0202 	orr.w	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d017      	beq.n	8005f60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f56:	f043 0208 	orr.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d012      	beq.n	8005f92 <HAL_UART_IRQHandler+0x18a>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f88:	f043 0220 	orr.w	r2, r3, #32
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8211 	beq.w	80063c0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04f      	beq.n	800608a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fd97 	bl	8006b1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b40      	cmp	r3, #64	; 0x40
 8005ffc:	d141      	bne.n	8006082 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3308      	adds	r3, #8
 8006026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800602a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800602e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1d9      	bne.n	8005ffe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604e:	2b00      	cmp	r3, #0
 8006050:	d013      	beq.n	800607a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <HAL_UART_IRQHandler+0x29c>)
 8006058:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605e:	4618      	mov	r0, r3
 8006060:	f7fb ffd9 	bl	8002016 <HAL_DMA_Abort_IT>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d017      	beq.n	800609a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00f      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9b4 	bl	80063e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00b      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9b0 	bl	80063e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e007      	b.n	800609a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9ac 	bl	80063e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006098:	e192      	b.n	80063c0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609a:	bf00      	nop
    return;
 800609c:	e190      	b.n	80063c0 <HAL_UART_IRQHandler+0x5b8>
 800609e:	bf00      	nop
 80060a0:	04000120 	.word	0x04000120
 80060a4:	08006be7 	.word	0x08006be7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 814b 	bne.w	8006348 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8144 	beq.w	8006348 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 813d 	beq.w	8006348 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2210      	movs	r2, #16
 80060d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	f040 80b5 	bne.w	8006250 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8164 	beq.w	80063c4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006106:	429a      	cmp	r2, r3
 8006108:	f080 815c 	bcs.w	80063c4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b20      	cmp	r3, #32
 800611e:	f000 8086 	beq.w	800622e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800613a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800614c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006150:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006158:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1da      	bne.n	8006122 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3308      	adds	r3, #8
 8006172:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800617c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006190:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006194:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006198:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e3      	bne.n	80061a8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fe:	f023 0310 	bic.w	r3, r3, #16
 8006202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006210:	65bb      	str	r3, [r7, #88]	; 0x58
 8006212:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e4      	bne.n	80061ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006228:	4618      	mov	r0, r3
 800622a:	f7fb febb 	bl	8001fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006240:	b29b      	uxth	r3, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	b29b      	uxth	r3, r3
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8d7 	bl	80063fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800624e:	e0b9      	b.n	80063c4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800625c:	b29b      	uxth	r3, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80ab 	beq.w	80063c8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 80a6 	beq.w	80063c8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
 80062a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e4      	bne.n	800627c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	623b      	str	r3, [r7, #32]
   return(result);
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062d6:	633a      	str	r2, [r7, #48]	; 0x30
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e3      	bne.n	80062b2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	60fb      	str	r3, [r7, #12]
   return(result);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0310 	bic.w	r3, r3, #16
 8006312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	617b      	str	r3, [r7, #20]
   return(result);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e4      	bne.n	80062fe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f85b 	bl	80063fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006346:	e03f      	b.n	80063c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <HAL_UART_IRQHandler+0x56a>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc7b 	bl	8006c66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006370:	e02d      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01c      	beq.n	80063cc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
    }
    return;
 800639a:	e017      	b.n	80063cc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_UART_IRQHandler+0x5c6>
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc2c 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 80063ba:	e008      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80063bc:	bf00      	nop
 80063be:	e006      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80063c0:	bf00      	nop
 80063c2:	e004      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
      return;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_UART_IRQHandler+0x5c6>
    return;
 80063cc:	bf00      	nop
  }

}
 80063ce:	37e8      	adds	r7, #232	; 0xe8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b92      	ldr	r3, [pc, #584]	; (8006688 <UART_SetConfig+0x274>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6979      	ldr	r1, [r7, #20]
 8006448:	430b      	orrs	r3, r1
 800644a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a80      	ldr	r2, [pc, #512]	; (800668c <UART_SetConfig+0x278>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d120      	bne.n	80064d2 <UART_SetConfig+0xbe>
 8006490:	4b7f      	ldr	r3, [pc, #508]	; (8006690 <UART_SetConfig+0x27c>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d817      	bhi.n	80064cc <UART_SetConfig+0xb8>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x90>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064c1 	.word	0x080064c1
 80064ac:	080064c7 	.word	0x080064c7
 80064b0:	080064bb 	.word	0x080064bb
 80064b4:	2301      	movs	r3, #1
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e0b5      	b.n	8006626 <UART_SetConfig+0x212>
 80064ba:	2302      	movs	r3, #2
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e0b2      	b.n	8006626 <UART_SetConfig+0x212>
 80064c0:	2304      	movs	r3, #4
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0af      	b.n	8006626 <UART_SetConfig+0x212>
 80064c6:	2308      	movs	r3, #8
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0ac      	b.n	8006626 <UART_SetConfig+0x212>
 80064cc:	2310      	movs	r3, #16
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0a9      	b.n	8006626 <UART_SetConfig+0x212>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a6f      	ldr	r2, [pc, #444]	; (8006694 <UART_SetConfig+0x280>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d124      	bne.n	8006526 <UART_SetConfig+0x112>
 80064dc:	4b6c      	ldr	r3, [pc, #432]	; (8006690 <UART_SetConfig+0x27c>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e8:	d011      	beq.n	800650e <UART_SetConfig+0xfa>
 80064ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ee:	d817      	bhi.n	8006520 <UART_SetConfig+0x10c>
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f4:	d011      	beq.n	800651a <UART_SetConfig+0x106>
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064fa:	d811      	bhi.n	8006520 <UART_SetConfig+0x10c>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <UART_SetConfig+0xf4>
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006504:	d006      	beq.n	8006514 <UART_SetConfig+0x100>
 8006506:	e00b      	b.n	8006520 <UART_SetConfig+0x10c>
 8006508:	2300      	movs	r3, #0
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e08b      	b.n	8006626 <UART_SetConfig+0x212>
 800650e:	2302      	movs	r3, #2
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e088      	b.n	8006626 <UART_SetConfig+0x212>
 8006514:	2304      	movs	r3, #4
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e085      	b.n	8006626 <UART_SetConfig+0x212>
 800651a:	2308      	movs	r3, #8
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e082      	b.n	8006626 <UART_SetConfig+0x212>
 8006520:	2310      	movs	r3, #16
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e07f      	b.n	8006626 <UART_SetConfig+0x212>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5b      	ldr	r2, [pc, #364]	; (8006698 <UART_SetConfig+0x284>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d124      	bne.n	800657a <UART_SetConfig+0x166>
 8006530:	4b57      	ldr	r3, [pc, #348]	; (8006690 <UART_SetConfig+0x27c>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006538:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800653c:	d011      	beq.n	8006562 <UART_SetConfig+0x14e>
 800653e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006542:	d817      	bhi.n	8006574 <UART_SetConfig+0x160>
 8006544:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006548:	d011      	beq.n	800656e <UART_SetConfig+0x15a>
 800654a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800654e:	d811      	bhi.n	8006574 <UART_SetConfig+0x160>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <UART_SetConfig+0x148>
 8006554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006558:	d006      	beq.n	8006568 <UART_SetConfig+0x154>
 800655a:	e00b      	b.n	8006574 <UART_SetConfig+0x160>
 800655c:	2300      	movs	r3, #0
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e061      	b.n	8006626 <UART_SetConfig+0x212>
 8006562:	2302      	movs	r3, #2
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e05e      	b.n	8006626 <UART_SetConfig+0x212>
 8006568:	2304      	movs	r3, #4
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e05b      	b.n	8006626 <UART_SetConfig+0x212>
 800656e:	2308      	movs	r3, #8
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e058      	b.n	8006626 <UART_SetConfig+0x212>
 8006574:	2310      	movs	r3, #16
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e055      	b.n	8006626 <UART_SetConfig+0x212>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a47      	ldr	r2, [pc, #284]	; (800669c <UART_SetConfig+0x288>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d124      	bne.n	80065ce <UART_SetConfig+0x1ba>
 8006584:	4b42      	ldr	r3, [pc, #264]	; (8006690 <UART_SetConfig+0x27c>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800658c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006590:	d011      	beq.n	80065b6 <UART_SetConfig+0x1a2>
 8006592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006596:	d817      	bhi.n	80065c8 <UART_SetConfig+0x1b4>
 8006598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659c:	d011      	beq.n	80065c2 <UART_SetConfig+0x1ae>
 800659e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065a2:	d811      	bhi.n	80065c8 <UART_SetConfig+0x1b4>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <UART_SetConfig+0x19c>
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ac:	d006      	beq.n	80065bc <UART_SetConfig+0x1a8>
 80065ae:	e00b      	b.n	80065c8 <UART_SetConfig+0x1b4>
 80065b0:	2300      	movs	r3, #0
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e037      	b.n	8006626 <UART_SetConfig+0x212>
 80065b6:	2302      	movs	r3, #2
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e034      	b.n	8006626 <UART_SetConfig+0x212>
 80065bc:	2304      	movs	r3, #4
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e031      	b.n	8006626 <UART_SetConfig+0x212>
 80065c2:	2308      	movs	r3, #8
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e02e      	b.n	8006626 <UART_SetConfig+0x212>
 80065c8:	2310      	movs	r3, #16
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e02b      	b.n	8006626 <UART_SetConfig+0x212>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a33      	ldr	r2, [pc, #204]	; (80066a0 <UART_SetConfig+0x28c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d124      	bne.n	8006622 <UART_SetConfig+0x20e>
 80065d8:	4b2d      	ldr	r3, [pc, #180]	; (8006690 <UART_SetConfig+0x27c>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80065e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065e4:	d011      	beq.n	800660a <UART_SetConfig+0x1f6>
 80065e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065ea:	d817      	bhi.n	800661c <UART_SetConfig+0x208>
 80065ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f0:	d011      	beq.n	8006616 <UART_SetConfig+0x202>
 80065f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f6:	d811      	bhi.n	800661c <UART_SetConfig+0x208>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <UART_SetConfig+0x1f0>
 80065fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006600:	d006      	beq.n	8006610 <UART_SetConfig+0x1fc>
 8006602:	e00b      	b.n	800661c <UART_SetConfig+0x208>
 8006604:	2300      	movs	r3, #0
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e00d      	b.n	8006626 <UART_SetConfig+0x212>
 800660a:	2302      	movs	r3, #2
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e00a      	b.n	8006626 <UART_SetConfig+0x212>
 8006610:	2304      	movs	r3, #4
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e007      	b.n	8006626 <UART_SetConfig+0x212>
 8006616:	2308      	movs	r3, #8
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e004      	b.n	8006626 <UART_SetConfig+0x212>
 800661c:	2310      	movs	r3, #16
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e001      	b.n	8006626 <UART_SetConfig+0x212>
 8006622:	2310      	movs	r3, #16
 8006624:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d16b      	bne.n	8006708 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d838      	bhi.n	80066a8 <UART_SetConfig+0x294>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x228>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006661 	.word	0x08006661
 8006640:	08006669 	.word	0x08006669
 8006644:	08006671 	.word	0x08006671
 8006648:	080066a9 	.word	0x080066a9
 800664c:	08006677 	.word	0x08006677
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066a9 	.word	0x080066a9
 8006658:	080066a9 	.word	0x080066a9
 800665c:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fd f900 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8006664:	61b8      	str	r0, [r7, #24]
        break;
 8006666:	e024      	b.n	80066b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fd f91e 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 800666c:	61b8      	str	r0, [r7, #24]
        break;
 800666e:	e020      	b.n	80066b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <UART_SetConfig+0x290>)
 8006672:	61bb      	str	r3, [r7, #24]
        break;
 8006674:	e01d      	b.n	80066b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fd f87f 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 800667a:	61b8      	str	r0, [r7, #24]
        break;
 800667c:	e019      	b.n	80066b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006682:	61bb      	str	r3, [r7, #24]
        break;
 8006684:	e015      	b.n	80066b2 <UART_SetConfig+0x29e>
 8006686:	bf00      	nop
 8006688:	efff69f3 	.word	0xefff69f3
 800668c:	40013800 	.word	0x40013800
 8006690:	40021000 	.word	0x40021000
 8006694:	40004400 	.word	0x40004400
 8006698:	40004800 	.word	0x40004800
 800669c:	40004c00 	.word	0x40004c00
 80066a0:	40005000 	.word	0x40005000
 80066a4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	77bb      	strb	r3, [r7, #30]
        break;
 80066b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d073      	beq.n	80067a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	005a      	lsls	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d916      	bls.n	8006702 <UART_SetConfig+0x2ee>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066da:	d212      	bcs.n	8006702 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f023 030f 	bic.w	r3, r3, #15
 80066e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	89fb      	ldrh	r3, [r7, #14]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	89fa      	ldrh	r2, [r7, #14]
 80066fe:	60da      	str	r2, [r3, #12]
 8006700:	e04e      	b.n	80067a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	77bb      	strb	r3, [r7, #30]
 8006706:	e04b      	b.n	80067a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006708:	7ffb      	ldrb	r3, [r7, #31]
 800670a:	2b08      	cmp	r3, #8
 800670c:	d827      	bhi.n	800675e <UART_SetConfig+0x34a>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x300>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006739 	.word	0x08006739
 8006718:	08006741 	.word	0x08006741
 800671c:	08006749 	.word	0x08006749
 8006720:	0800675f 	.word	0x0800675f
 8006724:	0800674f 	.word	0x0800674f
 8006728:	0800675f 	.word	0x0800675f
 800672c:	0800675f 	.word	0x0800675f
 8006730:	0800675f 	.word	0x0800675f
 8006734:	08006757 	.word	0x08006757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fd f894 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 800673c:	61b8      	str	r0, [r7, #24]
        break;
 800673e:	e013      	b.n	8006768 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fd f8b2 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8006744:	61b8      	str	r0, [r7, #24]
        break;
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006748:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <UART_SetConfig+0x3a4>)
 800674a:	61bb      	str	r3, [r7, #24]
        break;
 800674c:	e00c      	b.n	8006768 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674e:	f7fd f813 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8006752:	61b8      	str	r0, [r7, #24]
        break;
 8006754:	e008      	b.n	8006768 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	61bb      	str	r3, [r7, #24]
        break;
 800675c:	e004      	b.n	8006768 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	77bb      	strb	r3, [r7, #30]
        break;
 8006766:	bf00      	nop
    }

    if (pclk != 0U)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d018      	beq.n	80067a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085a      	lsrs	r2, r3, #1
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d909      	bls.n	800679c <UART_SetConfig+0x388>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678e:	d205      	bcs.n	800679c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e001      	b.n	80067a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	007a1200 	.word	0x007a1200

080067bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ba:	d10a      	bne.n	80068d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b098      	sub	sp, #96	; 0x60
 8006904:	af02      	add	r7, sp, #8
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006910:	f7fb fa5a 	bl	8001dc8 <HAL_GetTick>
 8006914:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b08      	cmp	r3, #8
 8006922:	d12e      	bne.n	8006982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692c:	2200      	movs	r2, #0
 800692e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f88c 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d021      	beq.n	8006982 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	647b      	str	r3, [r7, #68]	; 0x44
 800695e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e6      	bne.n	800693e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e062      	b.n	8006a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b04      	cmp	r3, #4
 800698e:	d149      	bne.n	8006a24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006998:	2200      	movs	r2, #0
 800699a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f856 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d03c      	beq.n	8006a24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	623b      	str	r3, [r7, #32]
   return(result);
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	69b9      	ldr	r1, [r7, #24]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	617b      	str	r3, [r7, #20]
   return(result);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e011      	b.n	8006a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3758      	adds	r7, #88	; 0x58
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	e049      	b.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d045      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6a:	f7fb f9ad 	bl	8001dc8 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e048      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d031      	beq.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d110      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f838 	bl	8006b1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e029      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad0:	d111      	bne.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f81e 	bl	8006b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00f      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d0a6      	beq.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b095      	sub	sp, #84	; 0x54
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
 8006b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d118      	bne.n	8006bc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bda:	bf00      	nop
 8006bdc:	3754      	adds	r7, #84	; 0x54
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fbef 	bl	80063e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff fbbb 	bl	80063d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5e:	bf00      	nop
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <std>:
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	e9c0 3300 	strd	r3, r3, [r0]
 8006c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c8a:	6083      	str	r3, [r0, #8]
 8006c8c:	8181      	strh	r1, [r0, #12]
 8006c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c90:	81c2      	strh	r2, [r0, #14]
 8006c92:	6183      	str	r3, [r0, #24]
 8006c94:	4619      	mov	r1, r3
 8006c96:	2208      	movs	r2, #8
 8006c98:	305c      	adds	r0, #92	; 0x5c
 8006c9a:	f000 f989 	bl	8006fb0 <memset>
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <std+0x38>)
 8006ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <std+0x3c>)
 8006ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <std+0x40>)
 8006ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <std+0x44>)
 8006cac:	6224      	str	r4, [r4, #32]
 8006cae:	6323      	str	r3, [r4, #48]	; 0x30
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08006e01 	.word	0x08006e01
 8006cb8:	08006e23 	.word	0x08006e23
 8006cbc:	08006e5b 	.word	0x08006e5b
 8006cc0:	08006e7f 	.word	0x08006e7f

08006cc4 <stdio_exit_handler>:
 8006cc4:	4a02      	ldr	r2, [pc, #8]	; (8006cd0 <stdio_exit_handler+0xc>)
 8006cc6:	4903      	ldr	r1, [pc, #12]	; (8006cd4 <stdio_exit_handler+0x10>)
 8006cc8:	4803      	ldr	r0, [pc, #12]	; (8006cd8 <stdio_exit_handler+0x14>)
 8006cca:	f000 b869 	b.w	8006da0 <_fwalk_sglue>
 8006cce:	bf00      	nop
 8006cd0:	20000054 	.word	0x20000054
 8006cd4:	08007949 	.word	0x08007949
 8006cd8:	20000060 	.word	0x20000060

08006cdc <cleanup_stdio>:
 8006cdc:	6841      	ldr	r1, [r0, #4]
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <cleanup_stdio+0x34>)
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	b510      	push	{r4, lr}
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	d001      	beq.n	8006cec <cleanup_stdio+0x10>
 8006ce8:	f000 fe2e 	bl	8007948 <_fflush_r>
 8006cec:	68a1      	ldr	r1, [r4, #8]
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <cleanup_stdio+0x38>)
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <cleanup_stdio+0x1e>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fe27 	bl	8007948 <_fflush_r>
 8006cfa:	68e1      	ldr	r1, [r4, #12]
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <cleanup_stdio+0x3c>)
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d004      	beq.n	8006d0c <cleanup_stdio+0x30>
 8006d02:	4620      	mov	r0, r4
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d08:	f000 be1e 	b.w	8007948 <_fflush_r>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	bf00      	nop
 8006d10:	200004b0 	.word	0x200004b0
 8006d14:	20000518 	.word	0x20000518
 8006d18:	20000580 	.word	0x20000580

08006d1c <global_stdio_init.part.0>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <global_stdio_init.part.0+0x30>)
 8006d20:	4c0b      	ldr	r4, [pc, #44]	; (8006d50 <global_stdio_init.part.0+0x34>)
 8006d22:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <global_stdio_init.part.0+0x38>)
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	4620      	mov	r0, r4
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	f7ff ffa6 	bl	8006c7c <std>
 8006d30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d34:	2201      	movs	r2, #1
 8006d36:	2109      	movs	r1, #9
 8006d38:	f7ff ffa0 	bl	8006c7c <std>
 8006d3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d40:	2202      	movs	r2, #2
 8006d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d46:	2112      	movs	r1, #18
 8006d48:	f7ff bf98 	b.w	8006c7c <std>
 8006d4c:	200005e8 	.word	0x200005e8
 8006d50:	200004b0 	.word	0x200004b0
 8006d54:	08006cc5 	.word	0x08006cc5

08006d58 <__sfp_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sfp_lock_acquire+0x8>)
 8006d5a:	f000 b9a1 	b.w	80070a0 <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	200005f1 	.word	0x200005f1

08006d64 <__sfp_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sfp_lock_release+0x8>)
 8006d66:	f000 b99c 	b.w	80070a2 <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	200005f1 	.word	0x200005f1

08006d70 <__sinit>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7ff fff0 	bl	8006d58 <__sfp_lock_acquire>
 8006d78:	6a23      	ldr	r3, [r4, #32]
 8006d7a:	b11b      	cbz	r3, 8006d84 <__sinit+0x14>
 8006d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d80:	f7ff bff0 	b.w	8006d64 <__sfp_lock_release>
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <__sinit+0x28>)
 8006d86:	6223      	str	r3, [r4, #32]
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <__sinit+0x2c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f5      	bne.n	8006d7c <__sinit+0xc>
 8006d90:	f7ff ffc4 	bl	8006d1c <global_stdio_init.part.0>
 8006d94:	e7f2      	b.n	8006d7c <__sinit+0xc>
 8006d96:	bf00      	nop
 8006d98:	08006cdd 	.word	0x08006cdd
 8006d9c:	200005e8 	.word	0x200005e8

08006da0 <_fwalk_sglue>:
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	4607      	mov	r7, r0
 8006da6:	4688      	mov	r8, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	2600      	movs	r6, #0
 8006dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006db0:	f1b9 0901 	subs.w	r9, r9, #1
 8006db4:	d505      	bpl.n	8006dc2 <_fwalk_sglue+0x22>
 8006db6:	6824      	ldr	r4, [r4, #0]
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	d1f7      	bne.n	8006dac <_fwalk_sglue+0xc>
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d907      	bls.n	8006dd8 <_fwalk_sglue+0x38>
 8006dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <_fwalk_sglue+0x38>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	47c0      	blx	r8
 8006dd6:	4306      	orrs	r6, r0
 8006dd8:	3568      	adds	r5, #104	; 0x68
 8006dda:	e7e9      	b.n	8006db0 <_fwalk_sglue+0x10>

08006ddc <iprintf>:
 8006ddc:	b40f      	push	{r0, r1, r2, r3}
 8006dde:	b507      	push	{r0, r1, r2, lr}
 8006de0:	4906      	ldr	r1, [pc, #24]	; (8006dfc <iprintf+0x20>)
 8006de2:	ab04      	add	r3, sp, #16
 8006de4:	6808      	ldr	r0, [r1, #0]
 8006de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dea:	6881      	ldr	r1, [r0, #8]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	f000 fa7b 	bl	80072e8 <_vfiprintf_r>
 8006df2:	b003      	add	sp, #12
 8006df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df8:	b004      	add	sp, #16
 8006dfa:	4770      	bx	lr
 8006dfc:	200000ac 	.word	0x200000ac

08006e00 <__sread>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	f000 f8fc 	bl	8007004 <_read_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	bfab      	itete	ge
 8006e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e12:	89a3      	ldrhlt	r3, [r4, #12]
 8006e14:	181b      	addge	r3, r3, r0
 8006e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e1a:	bfac      	ite	ge
 8006e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e1e:	81a3      	strhlt	r3, [r4, #12]
 8006e20:	bd10      	pop	{r4, pc}

08006e22 <__swrite>:
 8006e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e26:	461f      	mov	r7, r3
 8006e28:	898b      	ldrh	r3, [r1, #12]
 8006e2a:	05db      	lsls	r3, r3, #23
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	4616      	mov	r6, r2
 8006e32:	d505      	bpl.n	8006e40 <__swrite+0x1e>
 8006e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e38:	2302      	movs	r3, #2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f000 f8d0 	bl	8006fe0 <_lseek_r>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	463b      	mov	r3, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e56:	f000 b8e7 	b.w	8007028 <_write_r>

08006e5a <__sseek>:
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e62:	f000 f8bd 	bl	8006fe0 <_lseek_r>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	bf15      	itete	ne
 8006e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e76:	81a3      	strheq	r3, [r4, #12]
 8006e78:	bf18      	it	ne
 8006e7a:	81a3      	strhne	r3, [r4, #12]
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <__sclose>:
 8006e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e82:	f000 b89d 	b.w	8006fc0 <_close_r>

08006e86 <__swbuf_r>:
 8006e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e88:	460e      	mov	r6, r1
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	b118      	cbz	r0, 8006e98 <__swbuf_r+0x12>
 8006e90:	6a03      	ldr	r3, [r0, #32]
 8006e92:	b90b      	cbnz	r3, 8006e98 <__swbuf_r+0x12>
 8006e94:	f7ff ff6c 	bl	8006d70 <__sinit>
 8006e98:	69a3      	ldr	r3, [r4, #24]
 8006e9a:	60a3      	str	r3, [r4, #8]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	071a      	lsls	r2, r3, #28
 8006ea0:	d525      	bpl.n	8006eee <__swbuf_r+0x68>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	b31b      	cbz	r3, 8006eee <__swbuf_r+0x68>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	1a98      	subs	r0, r3, r2
 8006eac:	6963      	ldr	r3, [r4, #20]
 8006eae:	b2f6      	uxtb	r6, r6
 8006eb0:	4283      	cmp	r3, r0
 8006eb2:	4637      	mov	r7, r6
 8006eb4:	dc04      	bgt.n	8006ec0 <__swbuf_r+0x3a>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fd45 	bl	8007948 <_fflush_r>
 8006ebe:	b9e0      	cbnz	r0, 8006efa <__swbuf_r+0x74>
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	6022      	str	r2, [r4, #0]
 8006ecc:	701e      	strb	r6, [r3, #0]
 8006ece:	6962      	ldr	r2, [r4, #20]
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d004      	beq.n	8006ee0 <__swbuf_r+0x5a>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	07db      	lsls	r3, r3, #31
 8006eda:	d506      	bpl.n	8006eea <__swbuf_r+0x64>
 8006edc:	2e0a      	cmp	r6, #10
 8006ede:	d104      	bne.n	8006eea <__swbuf_r+0x64>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 fd30 	bl	8007948 <_fflush_r>
 8006ee8:	b938      	cbnz	r0, 8006efa <__swbuf_r+0x74>
 8006eea:	4638      	mov	r0, r7
 8006eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 f805 	bl	8006f00 <__swsetup_r>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d0d5      	beq.n	8006ea6 <__swbuf_r+0x20>
 8006efa:	f04f 37ff 	mov.w	r7, #4294967295
 8006efe:	e7f4      	b.n	8006eea <__swbuf_r+0x64>

08006f00 <__swsetup_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4b2a      	ldr	r3, [pc, #168]	; (8006fac <__swsetup_r+0xac>)
 8006f04:	4605      	mov	r5, r0
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	460c      	mov	r4, r1
 8006f0a:	b118      	cbz	r0, 8006f14 <__swsetup_r+0x14>
 8006f0c:	6a03      	ldr	r3, [r0, #32]
 8006f0e:	b90b      	cbnz	r3, 8006f14 <__swsetup_r+0x14>
 8006f10:	f7ff ff2e 	bl	8006d70 <__sinit>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f1a:	0718      	lsls	r0, r3, #28
 8006f1c:	d422      	bmi.n	8006f64 <__swsetup_r+0x64>
 8006f1e:	06d9      	lsls	r1, r3, #27
 8006f20:	d407      	bmi.n	8006f32 <__swsetup_r+0x32>
 8006f22:	2309      	movs	r3, #9
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	e034      	b.n	8006f9c <__swsetup_r+0x9c>
 8006f32:	0758      	lsls	r0, r3, #29
 8006f34:	d512      	bpl.n	8006f5c <__swsetup_r+0x5c>
 8006f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f38:	b141      	cbz	r1, 8006f4c <__swsetup_r+0x4c>
 8006f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	d002      	beq.n	8006f48 <__swsetup_r+0x48>
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f8ae 	bl	80070a4 <_free_r>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6363      	str	r3, [r4, #52]	; 0x34
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	2300      	movs	r3, #0
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f043 0308 	orr.w	r3, r3, #8
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b94b      	cbnz	r3, 8006f7c <__swsetup_r+0x7c>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f72:	d003      	beq.n	8006f7c <__swsetup_r+0x7c>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fd34 	bl	80079e4 <__smakebuf_r>
 8006f7c:	89a0      	ldrh	r0, [r4, #12]
 8006f7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f82:	f010 0301 	ands.w	r3, r0, #1
 8006f86:	d00a      	beq.n	8006f9e <__swsetup_r+0x9e>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60a3      	str	r3, [r4, #8]
 8006f8c:	6963      	ldr	r3, [r4, #20]
 8006f8e:	425b      	negs	r3, r3
 8006f90:	61a3      	str	r3, [r4, #24]
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	b943      	cbnz	r3, 8006fa8 <__swsetup_r+0xa8>
 8006f96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f9a:	d1c4      	bne.n	8006f26 <__swsetup_r+0x26>
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	0781      	lsls	r1, r0, #30
 8006fa0:	bf58      	it	pl
 8006fa2:	6963      	ldrpl	r3, [r4, #20]
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	e7f4      	b.n	8006f92 <__swsetup_r+0x92>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e7f7      	b.n	8006f9c <__swsetup_r+0x9c>
 8006fac:	200000ac 	.word	0x200000ac

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <_close_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d06      	ldr	r5, [pc, #24]	; (8006fdc <_close_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7f9 fc6b 	bl	80008a6 <_close>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_close_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_close_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	200005ec 	.word	0x200005ec

08006fe0 <_lseek_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_lseek_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7f9 fc80 	bl	80008f4 <_lseek>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_lseek_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_lseek_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	200005ec 	.word	0x200005ec

08007004 <_read_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d07      	ldr	r5, [pc, #28]	; (8007024 <_read_r+0x20>)
 8007008:	4604      	mov	r4, r0
 800700a:	4608      	mov	r0, r1
 800700c:	4611      	mov	r1, r2
 800700e:	2200      	movs	r2, #0
 8007010:	602a      	str	r2, [r5, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f7f9 fc0e 	bl	8000834 <_read>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_read_r+0x1e>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_read_r+0x1e>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	200005ec 	.word	0x200005ec

08007028 <_write_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	; (8007048 <_write_r+0x20>)
 800702c:	4604      	mov	r4, r0
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	2200      	movs	r2, #0
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7f9 fc19 	bl	800086e <_write>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_write_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_write_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	200005ec 	.word	0x200005ec

0800704c <__errno>:
 800704c:	4b01      	ldr	r3, [pc, #4]	; (8007054 <__errno+0x8>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	200000ac 	.word	0x200000ac

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4d0d      	ldr	r5, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1b64      	subs	r4, r4, r5
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2600      	movs	r6, #0
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4d0b      	ldr	r5, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f000 fd28 	bl	8007ac0 <_init>
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2600      	movs	r6, #0
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f855 3b04 	ldr.w	r3, [r5], #4
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	08007c0c 	.word	0x08007c0c
 8007094:	08007c0c 	.word	0x08007c0c
 8007098:	08007c0c 	.word	0x08007c0c
 800709c:	08007c10 	.word	0x08007c10

080070a0 <__retarget_lock_acquire_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__retarget_lock_release_recursive>:
 80070a2:	4770      	bx	lr

080070a4 <_free_r>:
 80070a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d044      	beq.n	8007134 <_free_r+0x90>
 80070aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ae:	9001      	str	r0, [sp, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f1a1 0404 	sub.w	r4, r1, #4
 80070b6:	bfb8      	it	lt
 80070b8:	18e4      	addlt	r4, r4, r3
 80070ba:	f000 f8df 	bl	800727c <__malloc_lock>
 80070be:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <_free_r+0x94>)
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	6813      	ldr	r3, [r2, #0]
 80070c4:	b933      	cbnz	r3, 80070d4 <_free_r+0x30>
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	6014      	str	r4, [r2, #0]
 80070ca:	b003      	add	sp, #12
 80070cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d0:	f000 b8da 	b.w	8007288 <__malloc_unlock>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d908      	bls.n	80070ea <_free_r+0x46>
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	1961      	adds	r1, r4, r5
 80070dc:	428b      	cmp	r3, r1
 80070de:	bf01      	itttt	eq
 80070e0:	6819      	ldreq	r1, [r3, #0]
 80070e2:	685b      	ldreq	r3, [r3, #4]
 80070e4:	1949      	addeq	r1, r1, r5
 80070e6:	6021      	streq	r1, [r4, #0]
 80070e8:	e7ed      	b.n	80070c6 <_free_r+0x22>
 80070ea:	461a      	mov	r2, r3
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	b10b      	cbz	r3, 80070f4 <_free_r+0x50>
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d9fa      	bls.n	80070ea <_free_r+0x46>
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	1855      	adds	r5, r2, r1
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d10b      	bne.n	8007114 <_free_r+0x70>
 80070fc:	6824      	ldr	r4, [r4, #0]
 80070fe:	4421      	add	r1, r4
 8007100:	1854      	adds	r4, r2, r1
 8007102:	42a3      	cmp	r3, r4
 8007104:	6011      	str	r1, [r2, #0]
 8007106:	d1e0      	bne.n	80070ca <_free_r+0x26>
 8007108:	681c      	ldr	r4, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	6053      	str	r3, [r2, #4]
 800710e:	440c      	add	r4, r1
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	e7da      	b.n	80070ca <_free_r+0x26>
 8007114:	d902      	bls.n	800711c <_free_r+0x78>
 8007116:	230c      	movs	r3, #12
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	e7d6      	b.n	80070ca <_free_r+0x26>
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	1961      	adds	r1, r4, r5
 8007120:	428b      	cmp	r3, r1
 8007122:	bf04      	itt	eq
 8007124:	6819      	ldreq	r1, [r3, #0]
 8007126:	685b      	ldreq	r3, [r3, #4]
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	bf04      	itt	eq
 800712c:	1949      	addeq	r1, r1, r5
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	6054      	str	r4, [r2, #4]
 8007132:	e7ca      	b.n	80070ca <_free_r+0x26>
 8007134:	b003      	add	sp, #12
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	200005f4 	.word	0x200005f4

0800713c <sbrk_aligned>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4e0e      	ldr	r6, [pc, #56]	; (8007178 <sbrk_aligned+0x3c>)
 8007140:	460c      	mov	r4, r1
 8007142:	6831      	ldr	r1, [r6, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	b911      	cbnz	r1, 800714e <sbrk_aligned+0x12>
 8007148:	f000 fcaa 	bl	8007aa0 <_sbrk_r>
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 fca5 	bl	8007aa0 <_sbrk_r>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d00a      	beq.n	8007170 <sbrk_aligned+0x34>
 800715a:	1cc4      	adds	r4, r0, #3
 800715c:	f024 0403 	bic.w	r4, r4, #3
 8007160:	42a0      	cmp	r0, r4
 8007162:	d007      	beq.n	8007174 <sbrk_aligned+0x38>
 8007164:	1a21      	subs	r1, r4, r0
 8007166:	4628      	mov	r0, r5
 8007168:	f000 fc9a 	bl	8007aa0 <_sbrk_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d101      	bne.n	8007174 <sbrk_aligned+0x38>
 8007170:	f04f 34ff 	mov.w	r4, #4294967295
 8007174:	4620      	mov	r0, r4
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	200005f8 	.word	0x200005f8

0800717c <_malloc_r>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	1ccd      	adds	r5, r1, #3
 8007182:	f025 0503 	bic.w	r5, r5, #3
 8007186:	3508      	adds	r5, #8
 8007188:	2d0c      	cmp	r5, #12
 800718a:	bf38      	it	cc
 800718c:	250c      	movcc	r5, #12
 800718e:	2d00      	cmp	r5, #0
 8007190:	4607      	mov	r7, r0
 8007192:	db01      	blt.n	8007198 <_malloc_r+0x1c>
 8007194:	42a9      	cmp	r1, r5
 8007196:	d905      	bls.n	80071a4 <_malloc_r+0x28>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	2600      	movs	r6, #0
 800719e:	4630      	mov	r0, r6
 80071a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007278 <_malloc_r+0xfc>
 80071a8:	f000 f868 	bl	800727c <__malloc_lock>
 80071ac:	f8d8 3000 	ldr.w	r3, [r8]
 80071b0:	461c      	mov	r4, r3
 80071b2:	bb5c      	cbnz	r4, 800720c <_malloc_r+0x90>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4638      	mov	r0, r7
 80071b8:	f7ff ffc0 	bl	800713c <sbrk_aligned>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	4604      	mov	r4, r0
 80071c0:	d155      	bne.n	800726e <_malloc_r+0xf2>
 80071c2:	f8d8 4000 	ldr.w	r4, [r8]
 80071c6:	4626      	mov	r6, r4
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	d145      	bne.n	8007258 <_malloc_r+0xdc>
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d048      	beq.n	8007262 <_malloc_r+0xe6>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	4631      	mov	r1, r6
 80071d4:	4638      	mov	r0, r7
 80071d6:	eb04 0903 	add.w	r9, r4, r3
 80071da:	f000 fc61 	bl	8007aa0 <_sbrk_r>
 80071de:	4581      	cmp	r9, r0
 80071e0:	d13f      	bne.n	8007262 <_malloc_r+0xe6>
 80071e2:	6821      	ldr	r1, [r4, #0]
 80071e4:	1a6d      	subs	r5, r5, r1
 80071e6:	4629      	mov	r1, r5
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa7 	bl	800713c <sbrk_aligned>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d037      	beq.n	8007262 <_malloc_r+0xe6>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	442b      	add	r3, r5
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	f8d8 3000 	ldr.w	r3, [r8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d038      	beq.n	8007272 <_malloc_r+0xf6>
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	42a2      	cmp	r2, r4
 8007204:	d12b      	bne.n	800725e <_malloc_r+0xe2>
 8007206:	2200      	movs	r2, #0
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	e00f      	b.n	800722c <_malloc_r+0xb0>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	d41f      	bmi.n	8007252 <_malloc_r+0xd6>
 8007212:	2a0b      	cmp	r2, #11
 8007214:	d917      	bls.n	8007246 <_malloc_r+0xca>
 8007216:	1961      	adds	r1, r4, r5
 8007218:	42a3      	cmp	r3, r4
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	6059      	strne	r1, [r3, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	bf08      	it	eq
 8007224:	f8c8 1000 	streq.w	r1, [r8]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4638      	mov	r0, r7
 800722e:	f104 060b 	add.w	r6, r4, #11
 8007232:	f000 f829 	bl	8007288 <__malloc_unlock>
 8007236:	f026 0607 	bic.w	r6, r6, #7
 800723a:	1d23      	adds	r3, r4, #4
 800723c:	1af2      	subs	r2, r6, r3
 800723e:	d0ae      	beq.n	800719e <_malloc_r+0x22>
 8007240:	1b9b      	subs	r3, r3, r6
 8007242:	50a3      	str	r3, [r4, r2]
 8007244:	e7ab      	b.n	800719e <_malloc_r+0x22>
 8007246:	42a3      	cmp	r3, r4
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	d1dd      	bne.n	8007208 <_malloc_r+0x8c>
 800724c:	f8c8 2000 	str.w	r2, [r8]
 8007250:	e7ec      	b.n	800722c <_malloc_r+0xb0>
 8007252:	4623      	mov	r3, r4
 8007254:	6864      	ldr	r4, [r4, #4]
 8007256:	e7ac      	b.n	80071b2 <_malloc_r+0x36>
 8007258:	4634      	mov	r4, r6
 800725a:	6876      	ldr	r6, [r6, #4]
 800725c:	e7b4      	b.n	80071c8 <_malloc_r+0x4c>
 800725e:	4613      	mov	r3, r2
 8007260:	e7cc      	b.n	80071fc <_malloc_r+0x80>
 8007262:	230c      	movs	r3, #12
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4638      	mov	r0, r7
 8007268:	f000 f80e 	bl	8007288 <__malloc_unlock>
 800726c:	e797      	b.n	800719e <_malloc_r+0x22>
 800726e:	6025      	str	r5, [r4, #0]
 8007270:	e7dc      	b.n	800722c <_malloc_r+0xb0>
 8007272:	605b      	str	r3, [r3, #4]
 8007274:	deff      	udf	#255	; 0xff
 8007276:	bf00      	nop
 8007278:	200005f4 	.word	0x200005f4

0800727c <__malloc_lock>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__malloc_lock+0x8>)
 800727e:	f7ff bf0f 	b.w	80070a0 <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	200005f0 	.word	0x200005f0

08007288 <__malloc_unlock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_unlock+0x8>)
 800728a:	f7ff bf0a 	b.w	80070a2 <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	200005f0 	.word	0x200005f0

08007294 <__sfputc_r>:
 8007294:	6893      	ldr	r3, [r2, #8]
 8007296:	3b01      	subs	r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	b410      	push	{r4}
 800729c:	6093      	str	r3, [r2, #8]
 800729e:	da08      	bge.n	80072b2 <__sfputc_r+0x1e>
 80072a0:	6994      	ldr	r4, [r2, #24]
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	db01      	blt.n	80072aa <__sfputc_r+0x16>
 80072a6:	290a      	cmp	r1, #10
 80072a8:	d103      	bne.n	80072b2 <__sfputc_r+0x1e>
 80072aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072ae:	f7ff bdea 	b.w	8006e86 <__swbuf_r>
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	1c58      	adds	r0, r3, #1
 80072b6:	6010      	str	r0, [r2, #0]
 80072b8:	7019      	strb	r1, [r3, #0]
 80072ba:	4608      	mov	r0, r1
 80072bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <__sfputs_r>:
 80072c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	18d5      	adds	r5, r2, r3
 80072cc:	42ac      	cmp	r4, r5
 80072ce:	d101      	bne.n	80072d4 <__sfputs_r+0x12>
 80072d0:	2000      	movs	r0, #0
 80072d2:	e007      	b.n	80072e4 <__sfputs_r+0x22>
 80072d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d8:	463a      	mov	r2, r7
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff ffda 	bl	8007294 <__sfputc_r>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d1f3      	bne.n	80072cc <__sfputs_r+0xa>
 80072e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072e8 <_vfiprintf_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	460d      	mov	r5, r1
 80072ee:	b09d      	sub	sp, #116	; 0x74
 80072f0:	4614      	mov	r4, r2
 80072f2:	4698      	mov	r8, r3
 80072f4:	4606      	mov	r6, r0
 80072f6:	b118      	cbz	r0, 8007300 <_vfiprintf_r+0x18>
 80072f8:	6a03      	ldr	r3, [r0, #32]
 80072fa:	b90b      	cbnz	r3, 8007300 <_vfiprintf_r+0x18>
 80072fc:	f7ff fd38 	bl	8006d70 <__sinit>
 8007300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007302:	07d9      	lsls	r1, r3, #31
 8007304:	d405      	bmi.n	8007312 <_vfiprintf_r+0x2a>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	059a      	lsls	r2, r3, #22
 800730a:	d402      	bmi.n	8007312 <_vfiprintf_r+0x2a>
 800730c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800730e:	f7ff fec7 	bl	80070a0 <__retarget_lock_acquire_recursive>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	071b      	lsls	r3, r3, #28
 8007316:	d501      	bpl.n	800731c <_vfiprintf_r+0x34>
 8007318:	692b      	ldr	r3, [r5, #16]
 800731a:	b99b      	cbnz	r3, 8007344 <_vfiprintf_r+0x5c>
 800731c:	4629      	mov	r1, r5
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff fdee 	bl	8006f00 <__swsetup_r>
 8007324:	b170      	cbz	r0, 8007344 <_vfiprintf_r+0x5c>
 8007326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007328:	07dc      	lsls	r4, r3, #31
 800732a:	d504      	bpl.n	8007336 <_vfiprintf_r+0x4e>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b01d      	add	sp, #116	; 0x74
 8007332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007336:	89ab      	ldrh	r3, [r5, #12]
 8007338:	0598      	lsls	r0, r3, #22
 800733a:	d4f7      	bmi.n	800732c <_vfiprintf_r+0x44>
 800733c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800733e:	f7ff feb0 	bl	80070a2 <__retarget_lock_release_recursive>
 8007342:	e7f3      	b.n	800732c <_vfiprintf_r+0x44>
 8007344:	2300      	movs	r3, #0
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
 8007348:	2320      	movs	r3, #32
 800734a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007352:	2330      	movs	r3, #48	; 0x30
 8007354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007508 <_vfiprintf_r+0x220>
 8007358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735c:	f04f 0901 	mov.w	r9, #1
 8007360:	4623      	mov	r3, r4
 8007362:	469a      	mov	sl, r3
 8007364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007368:	b10a      	cbz	r2, 800736e <_vfiprintf_r+0x86>
 800736a:	2a25      	cmp	r2, #37	; 0x25
 800736c:	d1f9      	bne.n	8007362 <_vfiprintf_r+0x7a>
 800736e:	ebba 0b04 	subs.w	fp, sl, r4
 8007372:	d00b      	beq.n	800738c <_vfiprintf_r+0xa4>
 8007374:	465b      	mov	r3, fp
 8007376:	4622      	mov	r2, r4
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ffa1 	bl	80072c2 <__sfputs_r>
 8007380:	3001      	adds	r0, #1
 8007382:	f000 80a9 	beq.w	80074d8 <_vfiprintf_r+0x1f0>
 8007386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007388:	445a      	add	r2, fp
 800738a:	9209      	str	r2, [sp, #36]	; 0x24
 800738c:	f89a 3000 	ldrb.w	r3, [sl]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80a1 	beq.w	80074d8 <_vfiprintf_r+0x1f0>
 8007396:	2300      	movs	r3, #0
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a0:	f10a 0a01 	add.w	sl, sl, #1
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ac:	931a      	str	r3, [sp, #104]	; 0x68
 80073ae:	4654      	mov	r4, sl
 80073b0:	2205      	movs	r2, #5
 80073b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b6:	4854      	ldr	r0, [pc, #336]	; (8007508 <_vfiprintf_r+0x220>)
 80073b8:	f7f8 ff12 	bl	80001e0 <memchr>
 80073bc:	9a04      	ldr	r2, [sp, #16]
 80073be:	b9d8      	cbnz	r0, 80073f8 <_vfiprintf_r+0x110>
 80073c0:	06d1      	lsls	r1, r2, #27
 80073c2:	bf44      	itt	mi
 80073c4:	2320      	movmi	r3, #32
 80073c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ca:	0713      	lsls	r3, r2, #28
 80073cc:	bf44      	itt	mi
 80073ce:	232b      	movmi	r3, #43	; 0x2b
 80073d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d4:	f89a 3000 	ldrb.w	r3, [sl]
 80073d8:	2b2a      	cmp	r3, #42	; 0x2a
 80073da:	d015      	beq.n	8007408 <_vfiprintf_r+0x120>
 80073dc:	9a07      	ldr	r2, [sp, #28]
 80073de:	4654      	mov	r4, sl
 80073e0:	2000      	movs	r0, #0
 80073e2:	f04f 0c0a 	mov.w	ip, #10
 80073e6:	4621      	mov	r1, r4
 80073e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ec:	3b30      	subs	r3, #48	; 0x30
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	d94d      	bls.n	800748e <_vfiprintf_r+0x1a6>
 80073f2:	b1b0      	cbz	r0, 8007422 <_vfiprintf_r+0x13a>
 80073f4:	9207      	str	r2, [sp, #28]
 80073f6:	e014      	b.n	8007422 <_vfiprintf_r+0x13a>
 80073f8:	eba0 0308 	sub.w	r3, r0, r8
 80073fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	46a2      	mov	sl, r4
 8007406:	e7d2      	b.n	80073ae <_vfiprintf_r+0xc6>
 8007408:	9b03      	ldr	r3, [sp, #12]
 800740a:	1d19      	adds	r1, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	9103      	str	r1, [sp, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	bfbb      	ittet	lt
 8007414:	425b      	neglt	r3, r3
 8007416:	f042 0202 	orrlt.w	r2, r2, #2
 800741a:	9307      	strge	r3, [sp, #28]
 800741c:	9307      	strlt	r3, [sp, #28]
 800741e:	bfb8      	it	lt
 8007420:	9204      	strlt	r2, [sp, #16]
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	2b2e      	cmp	r3, #46	; 0x2e
 8007426:	d10c      	bne.n	8007442 <_vfiprintf_r+0x15a>
 8007428:	7863      	ldrb	r3, [r4, #1]
 800742a:	2b2a      	cmp	r3, #42	; 0x2a
 800742c:	d134      	bne.n	8007498 <_vfiprintf_r+0x1b0>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9203      	str	r2, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	f04f 33ff 	movlt.w	r3, #4294967295
 800743e:	3402      	adds	r4, #2
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007518 <_vfiprintf_r+0x230>
 8007446:	7821      	ldrb	r1, [r4, #0]
 8007448:	2203      	movs	r2, #3
 800744a:	4650      	mov	r0, sl
 800744c:	f7f8 fec8 	bl	80001e0 <memchr>
 8007450:	b138      	cbz	r0, 8007462 <_vfiprintf_r+0x17a>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	eba0 000a 	sub.w	r0, r0, sl
 8007458:	2240      	movs	r2, #64	; 0x40
 800745a:	4082      	lsls	r2, r0
 800745c:	4313      	orrs	r3, r2
 800745e:	3401      	adds	r4, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4829      	ldr	r0, [pc, #164]	; (800750c <_vfiprintf_r+0x224>)
 8007468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746c:	2206      	movs	r2, #6
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d03f      	beq.n	80074f6 <_vfiprintf_r+0x20e>
 8007476:	4b26      	ldr	r3, [pc, #152]	; (8007510 <_vfiprintf_r+0x228>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_vfiprintf_r+0x1da>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	443b      	add	r3, r7
 800748a:	9309      	str	r3, [sp, #36]	; 0x24
 800748c:	e768      	b.n	8007360 <_vfiprintf_r+0x78>
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	460c      	mov	r4, r1
 8007494:	2001      	movs	r0, #1
 8007496:	e7a6      	b.n	80073e6 <_vfiprintf_r+0xfe>
 8007498:	2300      	movs	r3, #0
 800749a:	3401      	adds	r4, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4619      	mov	r1, r3
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	; 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_vfiprintf_r+0x1d0>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c6      	beq.n	8007442 <_vfiprintf_r+0x15a>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c4      	b.n	8007442 <_vfiprintf_r+0x15a>
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	4604      	mov	r4, r0
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f0      	b.n	80074a4 <_vfiprintf_r+0x1bc>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b12      	ldr	r3, [pc, #72]	; (8007514 <_vfiprintf_r+0x22c>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4630      	mov	r0, r6
 80074ce:	f3af 8000 	nop.w
 80074d2:	4607      	mov	r7, r0
 80074d4:	1c78      	adds	r0, r7, #1
 80074d6:	d1d6      	bne.n	8007486 <_vfiprintf_r+0x19e>
 80074d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x202>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x202>
 80074e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e6:	f7ff fddc 	bl	80070a2 <__retarget_lock_release_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af1d 	bmi.w	800732c <_vfiprintf_r+0x44>
 80074f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f4:	e71c      	b.n	8007330 <_vfiprintf_r+0x48>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <_vfiprintf_r+0x22c>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4630      	mov	r0, r6
 8007502:	f000 f879 	bl	80075f8 <_printf_i>
 8007506:	e7e4      	b.n	80074d2 <_vfiprintf_r+0x1ea>
 8007508:	08007bd8 	.word	0x08007bd8
 800750c:	08007be2 	.word	0x08007be2
 8007510:	00000000 	.word	0x00000000
 8007514:	080072c3 	.word	0x080072c3
 8007518:	08007bde 	.word	0x08007bde

0800751c <_printf_common>:
 800751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	4616      	mov	r6, r2
 8007522:	4699      	mov	r9, r3
 8007524:	688a      	ldr	r2, [r1, #8]
 8007526:	690b      	ldr	r3, [r1, #16]
 8007528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800752c:	4293      	cmp	r3, r2
 800752e:	bfb8      	it	lt
 8007530:	4613      	movlt	r3, r2
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007538:	4607      	mov	r7, r0
 800753a:	460c      	mov	r4, r1
 800753c:	b10a      	cbz	r2, 8007542 <_printf_common+0x26>
 800753e:	3301      	adds	r3, #1
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	0699      	lsls	r1, r3, #26
 8007546:	bf42      	ittt	mi
 8007548:	6833      	ldrmi	r3, [r6, #0]
 800754a:	3302      	addmi	r3, #2
 800754c:	6033      	strmi	r3, [r6, #0]
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	f015 0506 	ands.w	r5, r5, #6
 8007554:	d106      	bne.n	8007564 <_printf_common+0x48>
 8007556:	f104 0a19 	add.w	sl, r4, #25
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	6832      	ldr	r2, [r6, #0]
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	42ab      	cmp	r3, r5
 8007562:	dc26      	bgt.n	80075b2 <_printf_common+0x96>
 8007564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007568:	1e13      	subs	r3, r2, #0
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	bf18      	it	ne
 800756e:	2301      	movne	r3, #1
 8007570:	0692      	lsls	r2, r2, #26
 8007572:	d42b      	bmi.n	80075cc <_printf_common+0xb0>
 8007574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007578:	4649      	mov	r1, r9
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d01e      	beq.n	80075c0 <_printf_common+0xa4>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	f003 0306 	and.w	r3, r3, #6
 800758a:	2b04      	cmp	r3, #4
 800758c:	bf02      	ittt	eq
 800758e:	68e5      	ldreq	r5, [r4, #12]
 8007590:	6833      	ldreq	r3, [r6, #0]
 8007592:	1aed      	subeq	r5, r5, r3
 8007594:	68a3      	ldr	r3, [r4, #8]
 8007596:	bf0c      	ite	eq
 8007598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800759c:	2500      	movne	r5, #0
 800759e:	4293      	cmp	r3, r2
 80075a0:	bfc4      	itt	gt
 80075a2:	1a9b      	subgt	r3, r3, r2
 80075a4:	18ed      	addgt	r5, r5, r3
 80075a6:	2600      	movs	r6, #0
 80075a8:	341a      	adds	r4, #26
 80075aa:	42b5      	cmp	r5, r6
 80075ac:	d11a      	bne.n	80075e4 <_printf_common+0xc8>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e008      	b.n	80075c4 <_printf_common+0xa8>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4652      	mov	r2, sl
 80075b6:	4649      	mov	r1, r9
 80075b8:	4638      	mov	r0, r7
 80075ba:	47c0      	blx	r8
 80075bc:	3001      	adds	r0, #1
 80075be:	d103      	bne.n	80075c8 <_printf_common+0xac>
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c8:	3501      	adds	r5, #1
 80075ca:	e7c6      	b.n	800755a <_printf_common+0x3e>
 80075cc:	18e1      	adds	r1, r4, r3
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	2030      	movs	r0, #48	; 0x30
 80075d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075d6:	4422      	add	r2, r4
 80075d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075e0:	3302      	adds	r3, #2
 80075e2:	e7c7      	b.n	8007574 <_printf_common+0x58>
 80075e4:	2301      	movs	r3, #1
 80075e6:	4622      	mov	r2, r4
 80075e8:	4649      	mov	r1, r9
 80075ea:	4638      	mov	r0, r7
 80075ec:	47c0      	blx	r8
 80075ee:	3001      	adds	r0, #1
 80075f0:	d0e6      	beq.n	80075c0 <_printf_common+0xa4>
 80075f2:	3601      	adds	r6, #1
 80075f4:	e7d9      	b.n	80075aa <_printf_common+0x8e>
	...

080075f8 <_printf_i>:
 80075f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075fc:	7e0f      	ldrb	r7, [r1, #24]
 80075fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007600:	2f78      	cmp	r7, #120	; 0x78
 8007602:	4691      	mov	r9, r2
 8007604:	4680      	mov	r8, r0
 8007606:	460c      	mov	r4, r1
 8007608:	469a      	mov	sl, r3
 800760a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800760e:	d807      	bhi.n	8007620 <_printf_i+0x28>
 8007610:	2f62      	cmp	r7, #98	; 0x62
 8007612:	d80a      	bhi.n	800762a <_printf_i+0x32>
 8007614:	2f00      	cmp	r7, #0
 8007616:	f000 80d4 	beq.w	80077c2 <_printf_i+0x1ca>
 800761a:	2f58      	cmp	r7, #88	; 0x58
 800761c:	f000 80c0 	beq.w	80077a0 <_printf_i+0x1a8>
 8007620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007628:	e03a      	b.n	80076a0 <_printf_i+0xa8>
 800762a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800762e:	2b15      	cmp	r3, #21
 8007630:	d8f6      	bhi.n	8007620 <_printf_i+0x28>
 8007632:	a101      	add	r1, pc, #4	; (adr r1, 8007638 <_printf_i+0x40>)
 8007634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007638:	08007691 	.word	0x08007691
 800763c:	080076a5 	.word	0x080076a5
 8007640:	08007621 	.word	0x08007621
 8007644:	08007621 	.word	0x08007621
 8007648:	08007621 	.word	0x08007621
 800764c:	08007621 	.word	0x08007621
 8007650:	080076a5 	.word	0x080076a5
 8007654:	08007621 	.word	0x08007621
 8007658:	08007621 	.word	0x08007621
 800765c:	08007621 	.word	0x08007621
 8007660:	08007621 	.word	0x08007621
 8007664:	080077a9 	.word	0x080077a9
 8007668:	080076d1 	.word	0x080076d1
 800766c:	08007763 	.word	0x08007763
 8007670:	08007621 	.word	0x08007621
 8007674:	08007621 	.word	0x08007621
 8007678:	080077cb 	.word	0x080077cb
 800767c:	08007621 	.word	0x08007621
 8007680:	080076d1 	.word	0x080076d1
 8007684:	08007621 	.word	0x08007621
 8007688:	08007621 	.word	0x08007621
 800768c:	0800776b 	.word	0x0800776b
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	602a      	str	r2, [r5, #0]
 8007698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800769c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a0:	2301      	movs	r3, #1
 80076a2:	e09f      	b.n	80077e4 <_printf_i+0x1ec>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	682b      	ldr	r3, [r5, #0]
 80076a8:	0607      	lsls	r7, r0, #24
 80076aa:	f103 0104 	add.w	r1, r3, #4
 80076ae:	6029      	str	r1, [r5, #0]
 80076b0:	d501      	bpl.n	80076b6 <_printf_i+0xbe>
 80076b2:	681e      	ldr	r6, [r3, #0]
 80076b4:	e003      	b.n	80076be <_printf_i+0xc6>
 80076b6:	0646      	lsls	r6, r0, #25
 80076b8:	d5fb      	bpl.n	80076b2 <_printf_i+0xba>
 80076ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076be:	2e00      	cmp	r6, #0
 80076c0:	da03      	bge.n	80076ca <_printf_i+0xd2>
 80076c2:	232d      	movs	r3, #45	; 0x2d
 80076c4:	4276      	negs	r6, r6
 80076c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ca:	485a      	ldr	r0, [pc, #360]	; (8007834 <_printf_i+0x23c>)
 80076cc:	230a      	movs	r3, #10
 80076ce:	e012      	b.n	80076f6 <_printf_i+0xfe>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	1d19      	adds	r1, r3, #4
 80076d6:	6029      	str	r1, [r5, #0]
 80076d8:	0605      	lsls	r5, r0, #24
 80076da:	d501      	bpl.n	80076e0 <_printf_i+0xe8>
 80076dc:	681e      	ldr	r6, [r3, #0]
 80076de:	e002      	b.n	80076e6 <_printf_i+0xee>
 80076e0:	0641      	lsls	r1, r0, #25
 80076e2:	d5fb      	bpl.n	80076dc <_printf_i+0xe4>
 80076e4:	881e      	ldrh	r6, [r3, #0]
 80076e6:	4853      	ldr	r0, [pc, #332]	; (8007834 <_printf_i+0x23c>)
 80076e8:	2f6f      	cmp	r7, #111	; 0x6f
 80076ea:	bf0c      	ite	eq
 80076ec:	2308      	moveq	r3, #8
 80076ee:	230a      	movne	r3, #10
 80076f0:	2100      	movs	r1, #0
 80076f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076f6:	6865      	ldr	r5, [r4, #4]
 80076f8:	60a5      	str	r5, [r4, #8]
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	bfa2      	ittt	ge
 80076fe:	6821      	ldrge	r1, [r4, #0]
 8007700:	f021 0104 	bicge.w	r1, r1, #4
 8007704:	6021      	strge	r1, [r4, #0]
 8007706:	b90e      	cbnz	r6, 800770c <_printf_i+0x114>
 8007708:	2d00      	cmp	r5, #0
 800770a:	d04b      	beq.n	80077a4 <_printf_i+0x1ac>
 800770c:	4615      	mov	r5, r2
 800770e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007712:	fb03 6711 	mls	r7, r3, r1, r6
 8007716:	5dc7      	ldrb	r7, [r0, r7]
 8007718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800771c:	4637      	mov	r7, r6
 800771e:	42bb      	cmp	r3, r7
 8007720:	460e      	mov	r6, r1
 8007722:	d9f4      	bls.n	800770e <_printf_i+0x116>
 8007724:	2b08      	cmp	r3, #8
 8007726:	d10b      	bne.n	8007740 <_printf_i+0x148>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	07de      	lsls	r6, r3, #31
 800772c:	d508      	bpl.n	8007740 <_printf_i+0x148>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	4299      	cmp	r1, r3
 8007734:	bfde      	ittt	le
 8007736:	2330      	movle	r3, #48	; 0x30
 8007738:	f805 3c01 	strble.w	r3, [r5, #-1]
 800773c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007740:	1b52      	subs	r2, r2, r5
 8007742:	6122      	str	r2, [r4, #16]
 8007744:	f8cd a000 	str.w	sl, [sp]
 8007748:	464b      	mov	r3, r9
 800774a:	aa03      	add	r2, sp, #12
 800774c:	4621      	mov	r1, r4
 800774e:	4640      	mov	r0, r8
 8007750:	f7ff fee4 	bl	800751c <_printf_common>
 8007754:	3001      	adds	r0, #1
 8007756:	d14a      	bne.n	80077ee <_printf_i+0x1f6>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	b004      	add	sp, #16
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f043 0320 	orr.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	4833      	ldr	r0, [pc, #204]	; (8007838 <_printf_i+0x240>)
 800776c:	2778      	movs	r7, #120	; 0x78
 800776e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	6829      	ldr	r1, [r5, #0]
 8007776:	061f      	lsls	r7, r3, #24
 8007778:	f851 6b04 	ldr.w	r6, [r1], #4
 800777c:	d402      	bmi.n	8007784 <_printf_i+0x18c>
 800777e:	065f      	lsls	r7, r3, #25
 8007780:	bf48      	it	mi
 8007782:	b2b6      	uxthmi	r6, r6
 8007784:	07df      	lsls	r7, r3, #31
 8007786:	bf48      	it	mi
 8007788:	f043 0320 	orrmi.w	r3, r3, #32
 800778c:	6029      	str	r1, [r5, #0]
 800778e:	bf48      	it	mi
 8007790:	6023      	strmi	r3, [r4, #0]
 8007792:	b91e      	cbnz	r6, 800779c <_printf_i+0x1a4>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	f023 0320 	bic.w	r3, r3, #32
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	2310      	movs	r3, #16
 800779e:	e7a7      	b.n	80076f0 <_printf_i+0xf8>
 80077a0:	4824      	ldr	r0, [pc, #144]	; (8007834 <_printf_i+0x23c>)
 80077a2:	e7e4      	b.n	800776e <_printf_i+0x176>
 80077a4:	4615      	mov	r5, r2
 80077a6:	e7bd      	b.n	8007724 <_printf_i+0x12c>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	6826      	ldr	r6, [r4, #0]
 80077ac:	6961      	ldr	r1, [r4, #20]
 80077ae:	1d18      	adds	r0, r3, #4
 80077b0:	6028      	str	r0, [r5, #0]
 80077b2:	0635      	lsls	r5, r6, #24
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0x1c4>
 80077b8:	6019      	str	r1, [r3, #0]
 80077ba:	e002      	b.n	80077c2 <_printf_i+0x1ca>
 80077bc:	0670      	lsls	r0, r6, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0x1c0>
 80077c0:	8019      	strh	r1, [r3, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	4615      	mov	r5, r2
 80077c8:	e7bc      	b.n	8007744 <_printf_i+0x14c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	681d      	ldr	r5, [r3, #0]
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	2100      	movs	r1, #0
 80077d6:	4628      	mov	r0, r5
 80077d8:	f7f8 fd02 	bl	80001e0 <memchr>
 80077dc:	b108      	cbz	r0, 80077e2 <_printf_i+0x1ea>
 80077de:	1b40      	subs	r0, r0, r5
 80077e0:	6060      	str	r0, [r4, #4]
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	2300      	movs	r3, #0
 80077e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ec:	e7aa      	b.n	8007744 <_printf_i+0x14c>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	462a      	mov	r2, r5
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	47d0      	blx	sl
 80077f8:	3001      	adds	r0, #1
 80077fa:	d0ad      	beq.n	8007758 <_printf_i+0x160>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	079b      	lsls	r3, r3, #30
 8007800:	d413      	bmi.n	800782a <_printf_i+0x232>
 8007802:	68e0      	ldr	r0, [r4, #12]
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	4298      	cmp	r0, r3
 8007808:	bfb8      	it	lt
 800780a:	4618      	movlt	r0, r3
 800780c:	e7a6      	b.n	800775c <_printf_i+0x164>
 800780e:	2301      	movs	r3, #1
 8007810:	4632      	mov	r2, r6
 8007812:	4649      	mov	r1, r9
 8007814:	4640      	mov	r0, r8
 8007816:	47d0      	blx	sl
 8007818:	3001      	adds	r0, #1
 800781a:	d09d      	beq.n	8007758 <_printf_i+0x160>
 800781c:	3501      	adds	r5, #1
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	9903      	ldr	r1, [sp, #12]
 8007822:	1a5b      	subs	r3, r3, r1
 8007824:	42ab      	cmp	r3, r5
 8007826:	dcf2      	bgt.n	800780e <_printf_i+0x216>
 8007828:	e7eb      	b.n	8007802 <_printf_i+0x20a>
 800782a:	2500      	movs	r5, #0
 800782c:	f104 0619 	add.w	r6, r4, #25
 8007830:	e7f5      	b.n	800781e <_printf_i+0x226>
 8007832:	bf00      	nop
 8007834:	08007be9 	.word	0x08007be9
 8007838:	08007bfa 	.word	0x08007bfa

0800783c <__sflush_r>:
 800783c:	898a      	ldrh	r2, [r1, #12]
 800783e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007842:	4605      	mov	r5, r0
 8007844:	0710      	lsls	r0, r2, #28
 8007846:	460c      	mov	r4, r1
 8007848:	d458      	bmi.n	80078fc <__sflush_r+0xc0>
 800784a:	684b      	ldr	r3, [r1, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc05      	bgt.n	800785c <__sflush_r+0x20>
 8007850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	dc02      	bgt.n	800785c <__sflush_r+0x20>
 8007856:	2000      	movs	r0, #0
 8007858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800785e:	2e00      	cmp	r6, #0
 8007860:	d0f9      	beq.n	8007856 <__sflush_r+0x1a>
 8007862:	2300      	movs	r3, #0
 8007864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007868:	682f      	ldr	r7, [r5, #0]
 800786a:	6a21      	ldr	r1, [r4, #32]
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	d032      	beq.n	80078d6 <__sflush_r+0x9a>
 8007870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	075a      	lsls	r2, r3, #29
 8007876:	d505      	bpl.n	8007884 <__sflush_r+0x48>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	1ac0      	subs	r0, r0, r3
 800787c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800787e:	b10b      	cbz	r3, 8007884 <__sflush_r+0x48>
 8007880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007882:	1ac0      	subs	r0, r0, r3
 8007884:	2300      	movs	r3, #0
 8007886:	4602      	mov	r2, r0
 8007888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800788a:	6a21      	ldr	r1, [r4, #32]
 800788c:	4628      	mov	r0, r5
 800788e:	47b0      	blx	r6
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	d106      	bne.n	80078a4 <__sflush_r+0x68>
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	291d      	cmp	r1, #29
 800789a:	d82b      	bhi.n	80078f4 <__sflush_r+0xb8>
 800789c:	4a29      	ldr	r2, [pc, #164]	; (8007944 <__sflush_r+0x108>)
 800789e:	410a      	asrs	r2, r1
 80078a0:	07d6      	lsls	r6, r2, #31
 80078a2:	d427      	bmi.n	80078f4 <__sflush_r+0xb8>
 80078a4:	2200      	movs	r2, #0
 80078a6:	6062      	str	r2, [r4, #4]
 80078a8:	04d9      	lsls	r1, r3, #19
 80078aa:	6922      	ldr	r2, [r4, #16]
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	d504      	bpl.n	80078ba <__sflush_r+0x7e>
 80078b0:	1c42      	adds	r2, r0, #1
 80078b2:	d101      	bne.n	80078b8 <__sflush_r+0x7c>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b903      	cbnz	r3, 80078ba <__sflush_r+0x7e>
 80078b8:	6560      	str	r0, [r4, #84]	; 0x54
 80078ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078bc:	602f      	str	r7, [r5, #0]
 80078be:	2900      	cmp	r1, #0
 80078c0:	d0c9      	beq.n	8007856 <__sflush_r+0x1a>
 80078c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d002      	beq.n	80078d0 <__sflush_r+0x94>
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7ff fbea 	bl	80070a4 <_free_r>
 80078d0:	2000      	movs	r0, #0
 80078d2:	6360      	str	r0, [r4, #52]	; 0x34
 80078d4:	e7c0      	b.n	8007858 <__sflush_r+0x1c>
 80078d6:	2301      	movs	r3, #1
 80078d8:	4628      	mov	r0, r5
 80078da:	47b0      	blx	r6
 80078dc:	1c41      	adds	r1, r0, #1
 80078de:	d1c8      	bne.n	8007872 <__sflush_r+0x36>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0c5      	beq.n	8007872 <__sflush_r+0x36>
 80078e6:	2b1d      	cmp	r3, #29
 80078e8:	d001      	beq.n	80078ee <__sflush_r+0xb2>
 80078ea:	2b16      	cmp	r3, #22
 80078ec:	d101      	bne.n	80078f2 <__sflush_r+0xb6>
 80078ee:	602f      	str	r7, [r5, #0]
 80078f0:	e7b1      	b.n	8007856 <__sflush_r+0x1a>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	e7ad      	b.n	8007858 <__sflush_r+0x1c>
 80078fc:	690f      	ldr	r7, [r1, #16]
 80078fe:	2f00      	cmp	r7, #0
 8007900:	d0a9      	beq.n	8007856 <__sflush_r+0x1a>
 8007902:	0793      	lsls	r3, r2, #30
 8007904:	680e      	ldr	r6, [r1, #0]
 8007906:	bf08      	it	eq
 8007908:	694b      	ldreq	r3, [r1, #20]
 800790a:	600f      	str	r7, [r1, #0]
 800790c:	bf18      	it	ne
 800790e:	2300      	movne	r3, #0
 8007910:	eba6 0807 	sub.w	r8, r6, r7
 8007914:	608b      	str	r3, [r1, #8]
 8007916:	f1b8 0f00 	cmp.w	r8, #0
 800791a:	dd9c      	ble.n	8007856 <__sflush_r+0x1a>
 800791c:	6a21      	ldr	r1, [r4, #32]
 800791e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007920:	4643      	mov	r3, r8
 8007922:	463a      	mov	r2, r7
 8007924:	4628      	mov	r0, r5
 8007926:	47b0      	blx	r6
 8007928:	2800      	cmp	r0, #0
 800792a:	dc06      	bgt.n	800793a <__sflush_r+0xfe>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	e78e      	b.n	8007858 <__sflush_r+0x1c>
 800793a:	4407      	add	r7, r0
 800793c:	eba8 0800 	sub.w	r8, r8, r0
 8007940:	e7e9      	b.n	8007916 <__sflush_r+0xda>
 8007942:	bf00      	nop
 8007944:	dfbffffe 	.word	0xdfbffffe

08007948 <_fflush_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	690b      	ldr	r3, [r1, #16]
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b913      	cbnz	r3, 8007958 <_fflush_r+0x10>
 8007952:	2500      	movs	r5, #0
 8007954:	4628      	mov	r0, r5
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	b118      	cbz	r0, 8007962 <_fflush_r+0x1a>
 800795a:	6a03      	ldr	r3, [r0, #32]
 800795c:	b90b      	cbnz	r3, 8007962 <_fflush_r+0x1a>
 800795e:	f7ff fa07 	bl	8006d70 <__sinit>
 8007962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f3      	beq.n	8007952 <_fflush_r+0xa>
 800796a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800796c:	07d0      	lsls	r0, r2, #31
 800796e:	d404      	bmi.n	800797a <_fflush_r+0x32>
 8007970:	0599      	lsls	r1, r3, #22
 8007972:	d402      	bmi.n	800797a <_fflush_r+0x32>
 8007974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007976:	f7ff fb93 	bl	80070a0 <__retarget_lock_acquire_recursive>
 800797a:	4628      	mov	r0, r5
 800797c:	4621      	mov	r1, r4
 800797e:	f7ff ff5d 	bl	800783c <__sflush_r>
 8007982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007984:	07da      	lsls	r2, r3, #31
 8007986:	4605      	mov	r5, r0
 8007988:	d4e4      	bmi.n	8007954 <_fflush_r+0xc>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	059b      	lsls	r3, r3, #22
 800798e:	d4e1      	bmi.n	8007954 <_fflush_r+0xc>
 8007990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007992:	f7ff fb86 	bl	80070a2 <__retarget_lock_release_recursive>
 8007996:	e7dd      	b.n	8007954 <_fflush_r+0xc>

08007998 <__swhatbuf_r>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	460c      	mov	r4, r1
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	b096      	sub	sp, #88	; 0x58
 80079a4:	4615      	mov	r5, r2
 80079a6:	461e      	mov	r6, r3
 80079a8:	da0d      	bge.n	80079c6 <__swhatbuf_r+0x2e>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079b0:	f04f 0100 	mov.w	r1, #0
 80079b4:	bf0c      	ite	eq
 80079b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079ba:	2340      	movne	r3, #64	; 0x40
 80079bc:	2000      	movs	r0, #0
 80079be:	6031      	str	r1, [r6, #0]
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	b016      	add	sp, #88	; 0x58
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
 80079c6:	466a      	mov	r2, sp
 80079c8:	f000 f848 	bl	8007a5c <_fstat_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	dbec      	blt.n	80079aa <__swhatbuf_r+0x12>
 80079d0:	9901      	ldr	r1, [sp, #4]
 80079d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079da:	4259      	negs	r1, r3
 80079dc:	4159      	adcs	r1, r3
 80079de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e2:	e7eb      	b.n	80079bc <__swhatbuf_r+0x24>

080079e4 <__smakebuf_r>:
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e8:	079d      	lsls	r5, r3, #30
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	d507      	bpl.n	8007a00 <__smakebuf_r+0x1c>
 80079f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	2301      	movs	r3, #1
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	b002      	add	sp, #8
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	ab01      	add	r3, sp, #4
 8007a02:	466a      	mov	r2, sp
 8007a04:	f7ff ffc8 	bl	8007998 <__swhatbuf_r>
 8007a08:	9900      	ldr	r1, [sp, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fbb5 	bl	800717c <_malloc_r>
 8007a12:	b948      	cbnz	r0, 8007a28 <__smakebuf_r+0x44>
 8007a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d4ef      	bmi.n	80079fc <__smakebuf_r+0x18>
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	e7e3      	b.n	80079f0 <__smakebuf_r+0xc>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	6020      	str	r0, [r4, #0]
 8007a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	9b00      	ldr	r3, [sp, #0]
 8007a34:	6163      	str	r3, [r4, #20]
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	6120      	str	r0, [r4, #16]
 8007a3a:	b15b      	cbz	r3, 8007a54 <__smakebuf_r+0x70>
 8007a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f81d 	bl	8007a80 <_isatty_r>
 8007a46:	b128      	cbz	r0, 8007a54 <__smakebuf_r+0x70>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	431d      	orrs	r5, r3
 8007a58:	81a5      	strh	r5, [r4, #12]
 8007a5a:	e7cf      	b.n	80079fc <__smakebuf_r+0x18>

08007a5c <_fstat_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_fstat_r+0x20>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7f8 ff28 	bl	80008be <_fstat>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_fstat_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_fstat_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200005ec 	.word	0x200005ec

08007a80 <_isatty_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_isatty_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7f8 ff27 	bl	80008de <_isatty>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_isatty_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_isatty_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	200005ec 	.word	0x200005ec

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	; (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7f8 ff30 	bl	8000910 <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	200005ec 	.word	0x200005ec

08007ac0 <_init>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr

08007acc <_fini>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr
