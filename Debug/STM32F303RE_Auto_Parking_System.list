
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800ee38  0800ee38  0001ee38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f65c  0800f65c  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800f65c  0800f65c  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f65c  0800f65c  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f65c  0800f65c  0001f65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f660  0800f660  0001f660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800f664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020264  2**0
                  CONTENTS
 10 .bss          000027bc  20000268  20000268  00020268  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002a24  20002a24  00020268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fda1  00000000  00000000  0002031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a7a  00000000  00000000  000400bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  00044b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001252  00000000  00000000  000462f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000257d7  00000000  00000000  0004754a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020d01  00000000  00000000  0006cd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7901  00000000  00000000  0008da22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000712c  00000000  00000000  00165324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee1c 	.word	0x0800ee1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800ee1c 	.word	0x0800ee1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <MX_FREERTOS_Init+0x6c>)
 8000bfe:	f008 fb15 	bl	800922c <osMutexNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_FREERTOS_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_FREERTOS_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_FREERTOS_Init+0x78>)
 8000c0e:	f008 f885 	bl	8008d1c <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_FREERTOS_Init+0x7c>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MX_FREERTOS_Init+0x80>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_FREERTOS_Init+0x84>)
 8000c1e:	f008 f87d 	bl	8008d1c <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <MX_FREERTOS_Init+0x88>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <MX_FREERTOS_Init+0x8c>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_FREERTOS_Init+0x90>)
 8000c2e:	f008 f875 	bl	8008d1c <osThreadNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_FREERTOS_Init+0x94>)
 8000c36:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_FREERTOS_Init+0x98>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_FREERTOS_Init+0x9c>)
 8000c3e:	f008 f86d 	bl	8008d1c <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_FREERTOS_Init+0xa0>)
 8000c46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <MX_FREERTOS_Init+0xa4>)
 8000c4a:	f008 f9cd 	bl	8008fe8 <osEventFlagsNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_FREERTOS_Init+0xa8>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_FREERTOS_Init+0xac>)
 8000c56:	f008 f9c7 	bl	8008fe8 <osEventFlagsNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_FREERTOS_Init+0xb0>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800f280 	.word	0x0800f280
 8000c68:	20000294 	.word	0x20000294
 8000c6c:	0800f1f0 	.word	0x0800f1f0
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	20000284 	.word	0x20000284
 8000c78:	0800f214 	.word	0x0800f214
 8000c7c:	08000ced 	.word	0x08000ced
 8000c80:	20000288 	.word	0x20000288
 8000c84:	0800f238 	.word	0x0800f238
 8000c88:	08000e09 	.word	0x08000e09
 8000c8c:	2000028c 	.word	0x2000028c
 8000c90:	0800f25c 	.word	0x0800f25c
 8000c94:	08000eb5 	.word	0x08000eb5
 8000c98:	20000290 	.word	0x20000290
 8000c9c:	0800f290 	.word	0x0800f290
 8000ca0:	20000298 	.word	0x20000298
 8000ca4:	0800f2a0 	.word	0x0800f2a0
 8000ca8:	2000029c 	.word	0x2000029c

08000cac <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <DefaultTask+0x34>)
 8000cb6:	f002 f8df 	bl	8002e78 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <DefaultTask+0x38>)
 8000cbc:	f002 f90c 	bl	8002ed8 <ECU_Motor_GeneratePWM>

  /* Infinite loop */
  for(;;)
  {
	  //printf("DefaultTask is Running\n");
	  osThreadSuspend(Automatic_ParkingHandle);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <DefaultTask+0x3c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 f8f9 	bl	8008ebc <osThreadSuspend>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 8000cca:	f008 f8d1 	bl	8008e70 <osThreadGetId>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 f8f3 	bl	8008ebc <osThreadSuspend>
    osDelay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f008 f957 	bl	8008f8c <osDelay>
	  osThreadSuspend(Automatic_ParkingHandle);
 8000cde:	e7ef      	b.n	8000cc0 <DefaultTask+0x14>
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	20000290 	.word	0x20000290

08000cec <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		  ECU_Busser_GeneratePWM(&busser);
	  }
	  else{
		  ECU_Busser_StopPWM(&busser);
	  }*/
	  printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
 8000cf4:	4832      	ldr	r0, [pc, #200]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000cf6:	f002 f8d9 	bl	8002eac <ECU_IR_IsActive>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <RTOS_Ultrasonics_Read+0xd8>)
 8000d00:	f00c f834 	bl	800cd6c <iprintf>
	  printf("IR_Left_Rear in = %d\n",ECU_IR_IsActive(&IR_Left_Rear));
 8000d04:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <RTOS_Ultrasonics_Read+0xdc>)
 8000d06:	f002 f8d1 	bl	8002eac <ECU_IR_IsActive>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <RTOS_Ultrasonics_Read+0xe0>)
 8000d10:	f00c f82c 	bl	800cd6c <iprintf>

	  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 fa53 	bl	80091c4 <osEventFlagsGet>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <RTOS_Ultrasonics_Read+0x56>
	  {
		  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 8000d28:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <RTOS_Ultrasonics_Read+0xe8>)
 8000d2a:	f002 fbed 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d2e:	482a      	ldr	r0, [pc, #168]	; (8000dd8 <RTOS_Ultrasonics_Read+0xec>)
 8000d30:	f002 fbea 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d34:	4829      	ldr	r0, [pc, #164]	; (8000ddc <RTOS_Ultrasonics_Read+0xf0>)
 8000d36:	f002 fbe7 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d3c:	f002 fbe4 	bl	8003508 <ECU_Ultrasonic_Read>
 8000d40:	e015      	b.n	8000d6e <RTOS_Ultrasonics_Read+0x82>
	  }
	  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f008 fa3c 	bl	80091c4 <osEventFlagsGet>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d10b      	bne.n	8000d6e <RTOS_Ultrasonics_Read+0x82>
	  {
		  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 8000d56:	4823      	ldr	r0, [pc, #140]	; (8000de4 <RTOS_Ultrasonics_Read+0xf8>)
 8000d58:	f002 fbd6 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d5c:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <RTOS_Ultrasonics_Read+0xec>)
 8000d5e:	f002 fbd3 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <RTOS_Ultrasonics_Read+0xf0>)
 8000d64:	f002 fbd0 	bl	8003508 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <RTOS_Ultrasonics_Read+0xfc>)
 8000d6a:	f002 fbcd 	bl	8003508 <ECU_Ultrasonic_Read>
	  else{}

	  //ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
	  //ECU_Ultrasonic_Read(&LeftRear_ultrasonic);

	  printf("Front_ultrasonic distance is %f\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	481e      	ldr	r0, [pc, #120]	; (8000df0 <RTOS_Ultrasonics_Read+0x104>)
 8000d76:	f00b fff9 	bl	800cd6c <iprintf>
	  printf("RightFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d80:	481c      	ldr	r0, [pc, #112]	; (8000df4 <RTOS_Ultrasonics_Read+0x108>)
 8000d82:	f00b fff3 	bl	800cd6c <iprintf>
	  printf("RightRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <RTOS_Ultrasonics_Read+0x10c>)
 8000d8e:	f00b ffed 	bl	800cd6c <iprintf>
	  printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000d98:	4818      	ldr	r0, [pc, #96]	; (8000dfc <RTOS_Ultrasonics_Read+0x110>)
 8000d9a:	f00b ffe7 	bl	800cd6c <iprintf>
	  printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000da4:	4816      	ldr	r0, [pc, #88]	; (8000e00 <RTOS_Ultrasonics_Read+0x114>)
 8000da6:	f00b ffe1 	bl	800cd6c <iprintf>
	  printf("Rear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000dac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <RTOS_Ultrasonics_Read+0x118>)
 8000db2:	f00b ffdb 	bl	800cd6c <iprintf>

    osDelay(70);
 8000db6:	2046      	movs	r0, #70	; 0x46
 8000db8:	f008 f8e8 	bl	8008f8c <osDelay>
	  printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
 8000dbc:	e79a      	b.n	8000cf4 <RTOS_Ultrasonics_Read+0x8>
 8000dbe:	bf00      	nop
 8000dc0:	20000068 	.word	0x20000068
 8000dc4:	0800eea8 	.word	0x0800eea8
 8000dc8:	20000070 	.word	0x20000070
 8000dcc:	0800eec0 	.word	0x0800eec0
 8000dd0:	20000298 	.word	0x20000298
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	2000003c 	.word	0x2000003c
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000030 	.word	0x20000030
 8000de8:	20000024 	.word	0x20000024
 8000dec:	20000668 	.word	0x20000668
 8000df0:	0800eed8 	.word	0x0800eed8
 8000df4:	0800eefc 	.word	0x0800eefc
 8000df8:	0800ef24 	.word	0x0800ef24
 8000dfc:	0800ef4c 	.word	0x0800ef4c
 8000e00:	0800ef74 	.word	0x0800ef74
 8000e04:	0800ef98 	.word	0x0800ef98

08000e08 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <RTOS_Car_Next_Step+0x98>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b57      	cmp	r3, #87	; 0x57
 8000e16:	d116      	bne.n	8000e46 <RTOS_Car_Next_Step+0x3e>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <RTOS_Car_Next_Step+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 f934 	bl	800908c <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <RTOS_Car_Next_Step+0x9c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f008 f986 	bl	800913c <osEventFlagsClear>
		  osThreadResume(Automatic_ParkingHandle);
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <RTOS_Car_Next_Step+0xa0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 f875 	bl	8008f24 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <RTOS_Car_Next_Step+0xa4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 f83c 	bl	8008ebc <osThreadSuspend>
 8000e44:	e019      	b.n	8000e7a <RTOS_Car_Next_Step+0x72>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <RTOS_Car_Next_Step+0x98>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b55      	cmp	r3, #85	; 0x55
 8000e4c:	d115      	bne.n	8000e7a <RTOS_Car_Next_Step+0x72>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <RTOS_Car_Next_Step+0x9c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2101      	movs	r1, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 f919 	bl	800908c <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <RTOS_Car_Next_Step+0x9c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f008 f913 	bl	800908c <osEventFlagsSet>
		  osThreadResume(Automatic_ParkingHandle);
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <RTOS_Car_Next_Step+0xa0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f008 f85a 	bl	8008f24 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <RTOS_Car_Next_Step+0xa4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f008 f821 	bl	8008ebc <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == MANUAL_CONTROL_MODE){
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <RTOS_Car_Next_Step+0x9c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f008 f9a0 	bl	80091c4 <osEventFlagsGet>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <RTOS_Car_Next_Step+0x8e>
		  //printf("Mobile Control Mode\n");
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000e8e:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <RTOS_Car_Next_Step+0x98>)
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <RTOS_Car_Next_Step+0xa8>)
 8000e92:	f002 f8e7 	bl	8003064 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(150);
 8000e96:	2096      	movs	r0, #150	; 0x96
 8000e98:	f008 f878 	bl	8008f8c <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e9c:	e7b8      	b.n	8000e10 <RTOS_Car_Next_Step+0x8>
 8000e9e:	bf00      	nop
 8000ea0:	20000064 	.word	0x20000064
 8000ea4:	20000298 	.word	0x20000298
 8000ea8:	20000290 	.word	0x20000290
 8000eac:	2000028c 	.word	0x2000028c
 8000eb0:	20000048 	.word	0x20000048

08000eb4 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	72fb      	strb	r3, [r7, #11]
	uint8_t rear_ultrasonic = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	72bb      	strb	r3, [r7, #10]
	uint32_t time_out = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000ec8:	4bba      	ldr	r3, [pc, #744]	; (80011b4 <RTOS_Automatic_Parking+0x300>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b77      	cmp	r3, #119	; 0x77
 8000ece:	d105      	bne.n	8000edc <RTOS_Automatic_Parking+0x28>
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000ed0:	4bb9      	ldr	r3, [pc, #740]	; (80011b8 <RTOS_Automatic_Parking+0x304>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f008 f930 	bl	800913c <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8000edc:	4bb6      	ldr	r3, [pc, #728]	; (80011b8 <RTOS_Automatic_Parking+0x304>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f008 f96f 	bl	80091c4 <osEventFlagsGet>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	f040 82ba 	bne.w	8001466 <RTOS_Automatic_Parking+0x5b2>
	  {
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 8000ef2:	48b2      	ldr	r0, [pc, #712]	; (80011bc <RTOS_Automatic_Parking+0x308>)
 8000ef4:	f00b ffa0 	bl	800ce38 <puts>

		  /* changing the speed to parking speed */
		  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 8000ef8:	49b1      	ldr	r1, [pc, #708]	; (80011c0 <RTOS_Automatic_Parking+0x30c>)
 8000efa:	48b2      	ldr	r0, [pc, #712]	; (80011c4 <RTOS_Automatic_Parking+0x310>)
 8000efc:	f002 f892 	bl	8003024 <ECU_Motor_ChangeSpeed>

		  /* Selected Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000f00:	4bad      	ldr	r3, [pc, #692]	; (80011b8 <RTOS_Automatic_Parking+0x304>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f008 f95d 	bl	80091c4 <osEventFlagsGet>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f040 812b 	bne.w	800116c <RTOS_Automatic_Parking+0x2b8>
		  {
			  printf("Parking Right Side\n");
 8000f16:	48ac      	ldr	r0, [pc, #688]	; (80011c8 <RTOS_Automatic_Parking+0x314>)
 8000f18:	f00b ff8e 	bl	800ce38 <puts>

			  /* storing the ultra-sonic initial distance before parking */
			  front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 8000f1c:	4bab      	ldr	r3, [pc, #684]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000f1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fe47 	bl	8000bb8 <__aeabi_d2uiz>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	72fb      	strb	r3, [r7, #11]
			  rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 8000f2e:	4ba7      	ldr	r3, [pc, #668]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000f30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fe3e 	bl	8000bb8 <__aeabi_d2uiz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	72bb      	strb	r3, [r7, #10]

			  /* MoveForward so it can Searching for Empty Slot */
			  ECU_Motor_MoveForward();
 8000f40:	f002 f942 	bl	80031c8 <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f44:	e002      	b.n	8000f4c <RTOS_Automatic_Parking+0x98>
			  {
				  //printf("RightFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
				  //printf("RightRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  printf("Searching for Empty Slot\n");
 8000f46:	48a2      	ldr	r0, [pc, #648]	; (80011d0 <RTOS_Automatic_Parking+0x31c>)
 8000f48:	f00b ff76 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f4c:	4b9f      	ldr	r3, [pc, #636]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000f4e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	330f      	adds	r3, #15
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff faec 	bl	8000534 <__aeabi_i2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fdc2 	bl	8000aec <__aeabi_dcmplt>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1eb      	bne.n	8000f46 <RTOS_Automatic_Parking+0x92>
 8000f6e:	4b97      	ldr	r3, [pc, #604]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000f70:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000f74:	7abb      	ldrb	r3, [r7, #10]
 8000f76:	330f      	adds	r3, #15
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fadb 	bl	8000534 <__aeabi_i2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4620      	mov	r0, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	f7ff fdb1 	bl	8000aec <__aeabi_dcmplt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1da      	bne.n	8000f46 <RTOS_Automatic_Parking+0x92>
			  }
			  printf("Found the Empty Slot\n");
 8000f90:	4890      	ldr	r0, [pc, #576]	; (80011d4 <RTOS_Automatic_Parking+0x320>)
 8000f92:	f00b ff51 	bl	800ce38 <puts>

			  /* Delay to let the car move Forward to about car length */
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000f96:	e005      	b.n	8000fa4 <RTOS_Automatic_Parking+0xf0>
			  {
				  printf("Centering the car after Finding the Empty Slot\n");
 8000f98:	488f      	ldr	r0, [pc, #572]	; (80011d8 <RTOS_Automatic_Parking+0x324>)
 8000f9a:	f00b ff4d 	bl	800ce38 <puts>
				  time_out++;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000faa:	d021      	beq.n	8000ff0 <RTOS_Automatic_Parking+0x13c>
 8000fac:	4b87      	ldr	r3, [pc, #540]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000fae:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	3311      	adds	r3, #17
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_i2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f7ff fdb0 	bl	8000b28 <__aeabi_dcmpgt>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1e4      	bne.n	8000f98 <RTOS_Automatic_Parking+0xe4>
 8000fce:	4b7f      	ldr	r3, [pc, #508]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8000fd0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000fd4:	7abb      	ldrb	r3, [r7, #10]
 8000fd6:	330f      	adds	r3, #15
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff faab 	bl	8000534 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	f7ff fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1d3      	bne.n	8000f98 <RTOS_Automatic_Parking+0xe4>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 8000ff0:	f002 f90c 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f002 fbed 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8000ffa:	f002 f9b9 	bl	8003370 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000ffe:	4977      	ldr	r1, [pc, #476]	; (80011dc <RTOS_Automatic_Parking+0x328>)
 8001000:	4870      	ldr	r0, [pc, #448]	; (80011c4 <RTOS_Automatic_Parking+0x310>)
 8001002:	f002 f80f 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  ECU_Motor_MoveReverse();
 8001006:	f002 f901 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(1400);
 800100a:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800100e:	f002 fbe1 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001012:	f002 f9ad 	bl	8003370 <ECU_Motor_Stop>

			  /* MoveReverseRight so the car rear can enter the Empty Slot */
			  ECU_Motor_MoveReverseRight();
 8001016:	f002 f963 	bl	80032e0 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 800101a:	e002      	b.n	8001022 <RTOS_Automatic_Parking+0x16e>
			  {
				  //printf("IR_Right_Rear in = %d",ECU_IR_IsActive(&IR_Right_Rear));
				  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 1 Reverse Right\n");
 800101c:	4870      	ldr	r0, [pc, #448]	; (80011e0 <RTOS_Automatic_Parking+0x32c>)
 800101e:	f00b ff0b 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 30))
 8001022:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8001024:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <RTOS_Automatic_Parking+0x330>)
 800102e:	f7ff fd7b 	bl	8000b28 <__aeabi_dcmpgt>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f1      	bne.n	800101c <RTOS_Automatic_Parking+0x168>
			  }
			  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8001038:	f002 f8c6 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 800103c:	2005      	movs	r0, #5
 800103e:	f002 fbc9 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001042:	f002 f995 	bl	8003370 <ECU_Motor_Stop>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 8001046:	f002 f96f 	bl	8003328 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 800104a:	e002      	b.n	8001052 <RTOS_Automatic_Parking+0x19e>
			  {
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 2 Reverse Left\n");
 800104c:	4866      	ldr	r0, [pc, #408]	; (80011e8 <RTOS_Automatic_Parking+0x334>)
 800104e:	f00b fef3 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8001052:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8001054:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b63      	ldr	r3, [pc, #396]	; (80011ec <RTOS_Automatic_Parking+0x338>)
 800105e:	f7ff fd63 	bl	8000b28 <__aeabi_dcmpgt>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00a      	beq.n	800107e <RTOS_Automatic_Parking+0x1ca>
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 800106a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <RTOS_Automatic_Parking+0x338>)
 8001074:	f7ff fd58 	bl	8000b28 <__aeabi_dcmpgt>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e6      	bne.n	800104c <RTOS_Automatic_Parking+0x198>
			  }
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
			  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 800107e:	f002 f8a3 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f002 fba6 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001088:	f002 f972 	bl	8003370 <ECU_Motor_Stop>

			  /* return the speed back to parking speed */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 800108c:	4953      	ldr	r1, [pc, #332]	; (80011dc <RTOS_Automatic_Parking+0x328>)
 800108e:	484d      	ldr	r0, [pc, #308]	; (80011c4 <RTOS_Automatic_Parking+0x310>)
 8001090:	f001 ffc8 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  /* MoveForwardRight to Adjust the position of the front of the car */
			  ECU_Motor_MoveForwardRight();
 8001094:	f002 f8dc 	bl	8003250 <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 13))
 8001098:	e002      	b.n	80010a0 <RTOS_Automatic_Parking+0x1ec>
			  {
				  printf("trying to Park 3 Forward Right\n");
 800109a:	4855      	ldr	r0, [pc, #340]	; (80011f0 <RTOS_Automatic_Parking+0x33c>)
 800109c:	f00b fecc 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 13))
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 80010a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <RTOS_Automatic_Parking+0x340>)
 80010ac:	f7ff fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <RTOS_Automatic_Parking+0x218>
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 80010b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <RTOS_Automatic_Parking+0x344>)
 80010c2:	f7ff fd31 	bl	8000b28 <__aeabi_dcmpgt>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e6      	bne.n	800109a <RTOS_Automatic_Parking+0x1e6>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 80010cc:	f002 f89e 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80010d0:	2005      	movs	r0, #5
 80010d2:	f002 fb7f 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80010d6:	f002 f94b 	bl	8003370 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80010da:	4940      	ldr	r1, [pc, #256]	; (80011dc <RTOS_Automatic_Parking+0x328>)
 80010dc:	4839      	ldr	r0, [pc, #228]	; (80011c4 <RTOS_Automatic_Parking+0x310>)
 80010de:	f001 ffa1 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  /* ReverseLeft to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseLeft();
 80010e2:	f002 f921 	bl	8003328 <ECU_Motor_MoveReverseLeft>
			  HAL_Delay(300);
 80010e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ea:	f002 fb73 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80010ee:	f002 f93f 	bl	8003370 <ECU_Motor_Stop>

			  /* MoveReverse to Adjust the position better in the slot */
			  ECU_Motor_MoveReverse();
 80010f2:	f002 f88b 	bl	800320c <ECU_Motor_MoveReverse>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80010f6:	e002      	b.n	80010fe <RTOS_Automatic_Parking+0x24a>
			  {
				  printf("try to Park 4 Reverse \n");
 80010f8:	4840      	ldr	r0, [pc, #256]	; (80011fc <RTOS_Automatic_Parking+0x348>)
 80010fa:	f00b fe9d 	bl	800ce38 <puts>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8001100:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <RTOS_Automatic_Parking+0x34c>)
 800110a:	f7ff fd0d 	bl	8000b28 <__aeabi_dcmpgt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f1      	bne.n	80010f8 <RTOS_Automatic_Parking+0x244>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8001114:	f002 f858 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8001118:	2005      	movs	r0, #5
 800111a:	f002 fb5b 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 800111e:	f002 f927 	bl	8003370 <ECU_Motor_Stop>

			  ECU_Motor_MoveForwardRight(&moving_motor);
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <RTOS_Automatic_Parking+0x310>)
 8001124:	f002 f894 	bl	8003250 <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 12) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 8001128:	e002      	b.n	8001130 <RTOS_Automatic_Parking+0x27c>
			  {
				  printf("try to Park 5 Forward Right\n");
 800112a:	4836      	ldr	r0, [pc, #216]	; (8001204 <RTOS_Automatic_Parking+0x350>)
 800112c:	f00b fe84 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 12) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <RTOS_Automatic_Parking+0x354>)
 800113c:	f7ff fcf4 	bl	8000b28 <__aeabi_dcmpgt>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <RTOS_Automatic_Parking+0x2a8>
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 8001148:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <RTOS_Automatic_Parking+0x358>)
 8001152:	f7ff fce9 	bl	8000b28 <__aeabi_dcmpgt>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e6      	bne.n	800112a <RTOS_Automatic_Parking+0x276>
			  }
			  ECU_Motor_MoveReverse();
 800115c:	f002 f856 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 8001160:	2005      	movs	r0, #5
 8001162:	f002 fb37 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001166:	f002 f903 	bl	8003370 <ECU_Motor_Stop>
 800116a:	e165      	b.n	8001438 <RTOS_Automatic_Parking+0x584>

		  }
		  /* ----------------------------------------------- Selected Left Side to Park -------------------------------------------- */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <RTOS_Automatic_Parking+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f008 f827 	bl	80091c4 <osEventFlagsGet>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	f040 815b 	bne.w	8001438 <RTOS_Automatic_Parking+0x584>
		  {
			  printf("Park Left Side\n");
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <RTOS_Automatic_Parking+0x35c>)
 8001184:	f00b fe58 	bl	800ce38 <puts>

			  /* storing the ultra-sonic initial distance before parking */
			  front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 800118a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd11 	bl	8000bb8 <__aeabi_d2uiz>
 8001196:	4603      	mov	r3, r0
 8001198:	72fb      	strb	r3, [r7, #11]
			  rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <RTOS_Automatic_Parking+0x318>)
 800119c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fd08 	bl	8000bb8 <__aeabi_d2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	72bb      	strb	r3, [r7, #10]

			  /* MoveForward so it can Searching for Empty Slot */
			  ECU_Motor_MoveForward();
 80011ac:	f002 f80c 	bl	80031c8 <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 80011b0:	e033      	b.n	800121a <RTOS_Automatic_Parking+0x366>
 80011b2:	bf00      	nop
 80011b4:	20000064 	.word	0x20000064
 80011b8:	20000298 	.word	0x20000298
 80011bc:	0800efb8 	.word	0x0800efb8
 80011c0:	20000080 	.word	0x20000080
 80011c4:	20000048 	.word	0x20000048
 80011c8:	0800f004 	.word	0x0800f004
 80011cc:	20000668 	.word	0x20000668
 80011d0:	0800f018 	.word	0x0800f018
 80011d4:	0800f034 	.word	0x0800f034
 80011d8:	0800f04c 	.word	0x0800f04c
 80011dc:	20000088 	.word	0x20000088
 80011e0:	0800f07c 	.word	0x0800f07c
 80011e4:	403e0000 	.word	0x403e0000
 80011e8:	0800f09c 	.word	0x0800f09c
 80011ec:	40100000 	.word	0x40100000
 80011f0:	0800f0bc 	.word	0x0800f0bc
 80011f4:	40140000 	.word	0x40140000
 80011f8:	402a0000 	.word	0x402a0000
 80011fc:	0800f0dc 	.word	0x0800f0dc
 8001200:	40340000 	.word	0x40340000
 8001204:	0800f0f4 	.word	0x0800f0f4
 8001208:	40240000 	.word	0x40240000
 800120c:	40280000 	.word	0x40280000
 8001210:	0800f110 	.word	0x0800f110
			  {
				  //printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
				  //printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  printf("Searching for Empty Slot\n");
 8001214:	4896      	ldr	r0, [pc, #600]	; (8001470 <RTOS_Automatic_Parking+0x5bc>)
 8001216:	f00b fe0f 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 800121a:	4b96      	ldr	r3, [pc, #600]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 800121c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	330f      	adds	r3, #15
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f985 	bl	8000534 <__aeabi_i2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4620      	mov	r0, r4
 8001230:	4629      	mov	r1, r5
 8001232:	f7ff fc5b 	bl	8000aec <__aeabi_dcmplt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1eb      	bne.n	8001214 <RTOS_Automatic_Parking+0x360>
 800123c:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 800123e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	330f      	adds	r3, #15
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f974 	bl	8000534 <__aeabi_i2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff fc4a 	bl	8000aec <__aeabi_dcmplt>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1da      	bne.n	8001214 <RTOS_Automatic_Parking+0x360>
			  }
			  printf("Found the Empty Slot\n");
 800125e:	4886      	ldr	r0, [pc, #536]	; (8001478 <RTOS_Automatic_Parking+0x5c4>)
 8001260:	f00b fdea 	bl	800ce38 <puts>

			  /* Delay to let the car move Forward to about car length */
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8001264:	e005      	b.n	8001272 <RTOS_Automatic_Parking+0x3be>
			  {
				  printf("Centering the car after Finding the Empty Slot\n");
 8001266:	4885      	ldr	r0, [pc, #532]	; (800147c <RTOS_Automatic_Parking+0x5c8>)
 8001268:	f00b fde6 	bl	800ce38 <puts>
				  time_out++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
			  while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8001278:	d021      	beq.n	80012be <RTOS_Automatic_Parking+0x40a>
 800127a:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 800127c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	3311      	adds	r3, #17
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f955 	bl	8000534 <__aeabi_i2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff fc49 	bl	8000b28 <__aeabi_dcmpgt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e4      	bne.n	8001266 <RTOS_Automatic_Parking+0x3b2>
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 800129e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80012a2:	7abb      	ldrb	r3, [r7, #10]
 80012a4:	330f      	adds	r3, #15
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f944 	bl	8000534 <__aeabi_i2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff fc38 	bl	8000b28 <__aeabi_dcmpgt>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1d3      	bne.n	8001266 <RTOS_Automatic_Parking+0x3b2>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 80012be:	f001 ffa5 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80012c2:	2005      	movs	r0, #5
 80012c4:	f002 fa86 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80012c8:	f002 f852 	bl	8003370 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80012cc:	496c      	ldr	r1, [pc, #432]	; (8001480 <RTOS_Automatic_Parking+0x5cc>)
 80012ce:	486d      	ldr	r0, [pc, #436]	; (8001484 <RTOS_Automatic_Parking+0x5d0>)
 80012d0:	f001 fea8 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  ECU_Motor_MoveReverse();
 80012d4:	f001 ff9a 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(1400);
 80012d8:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80012dc:	f002 fa7a 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80012e0:	f002 f846 	bl	8003370 <ECU_Motor_Stop>

			  /* MoveReverseLeft so the car rear can enter the Empty Slot */
			  ECU_Motor_MoveReverseLeft();
 80012e4:	f002 f820 	bl	8003328 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20))
 80012e8:	e002      	b.n	80012f0 <RTOS_Automatic_Parking+0x43c>
			  {
				  //printf("IR_Left_Rear in = %d",ECU_IR_IsActive(&IR_Left_Rear));
				  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 1 Reverse Left\n");
 80012ea:	4867      	ldr	r0, [pc, #412]	; (8001488 <RTOS_Automatic_Parking+0x5d4>)
 80012ec:	f00b fda4 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20))
 80012f0:	4b60      	ldr	r3, [pc, #384]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 80012f2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <RTOS_Automatic_Parking+0x5d8>)
 80012fc:	f7ff fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f1      	bne.n	80012ea <RTOS_Automatic_Parking+0x436>
			  }
			  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 8001306:	f001 ff5f 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 800130a:	2005      	movs	r0, #5
 800130c:	f002 fa62 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001310:	f002 f82e 	bl	8003370 <ECU_Motor_Stop>

			  /* ReverseRight to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseRight();
 8001314:	f001 ffe4 	bl	80032e0 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8001318:	e002      	b.n	8001320 <RTOS_Automatic_Parking+0x46c>
			  {
				  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
				  printf("trying to Park 2 Reverse Right\n");
 800131a:	485d      	ldr	r0, [pc, #372]	; (8001490 <RTOS_Automatic_Parking+0x5dc>)
 800131c:	f00b fd8c 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001322:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <RTOS_Automatic_Parking+0x5e0>)
 800132c:	f7ff fbfc 	bl	8000b28 <__aeabi_dcmpgt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00a      	beq.n	800134c <RTOS_Automatic_Parking+0x498>
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001338:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <RTOS_Automatic_Parking+0x5e0>)
 8001342:	f7ff fbf1 	bl	8000b28 <__aeabi_dcmpgt>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e6      	bne.n	800131a <RTOS_Automatic_Parking+0x466>
			  }
			  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
			  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 800134c:	f001 ff3c 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8001350:	2005      	movs	r0, #5
 8001352:	f002 fa3f 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001356:	f002 f80b 	bl	8003370 <ECU_Motor_Stop>

			  /* return the speed back to parking speed */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 800135a:	4949      	ldr	r1, [pc, #292]	; (8001480 <RTOS_Automatic_Parking+0x5cc>)
 800135c:	4849      	ldr	r0, [pc, #292]	; (8001484 <RTOS_Automatic_Parking+0x5d0>)
 800135e:	f001 fe61 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  /* MoveForwardLeft to Adjust the position of the front of the car */
			  ECU_Motor_MoveForwardLeft();
 8001362:	f001 ff99 	bl	8003298 <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 13))
 8001366:	e002      	b.n	800136e <RTOS_Automatic_Parking+0x4ba>
			  {
				  printf("trying to Park 3 Forward Left\n");
 8001368:	484b      	ldr	r0, [pc, #300]	; (8001498 <RTOS_Automatic_Parking+0x5e4>)
 800136a:	f00b fd65 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 13))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <RTOS_Automatic_Parking+0x5e8>)
 800137a:	f7ff fbd5 	bl	8000b28 <__aeabi_dcmpgt>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <RTOS_Automatic_Parking+0x4e6>
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001386:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <RTOS_Automatic_Parking+0x5ec>)
 8001390:	f7ff fbca 	bl	8000b28 <__aeabi_dcmpgt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e6      	bne.n	8001368 <RTOS_Automatic_Parking+0x4b4>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveReverse();
 800139a:	f001 ff37 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800139e:	2005      	movs	r0, #5
 80013a0:	f002 fa18 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80013a4:	f001 ffe4 	bl	8003370 <ECU_Motor_Stop>

			  /* reduce the speed while Reversing to deal with motor hardware inefficiency */
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80013a8:	4935      	ldr	r1, [pc, #212]	; (8001480 <RTOS_Automatic_Parking+0x5cc>)
 80013aa:	4836      	ldr	r0, [pc, #216]	; (8001484 <RTOS_Automatic_Parking+0x5d0>)
 80013ac:	f001 fe3a 	bl	8003024 <ECU_Motor_ChangeSpeed>

			  /* ReverseRight to Adjust the position better in the slot */
			  ECU_Motor_MoveReverseRight();
 80013b0:	f001 ff96 	bl	80032e0 <ECU_Motor_MoveReverseRight>
			  HAL_Delay(300);
 80013b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013b8:	f002 fa0c 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80013bc:	f001 ffd8 	bl	8003370 <ECU_Motor_Stop>

			  /* MoveReverse to Adjust the position better in the slot */
			  ECU_Motor_MoveReverse();
 80013c0:	f001 ff24 	bl	800320c <ECU_Motor_MoveReverse>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80013c4:	e002      	b.n	80013cc <RTOS_Automatic_Parking+0x518>
			  {
				  printf("try to Park 4 Reverse \n");
 80013c6:	4837      	ldr	r0, [pc, #220]	; (80014a4 <RTOS_Automatic_Parking+0x5f0>)
 80013c8:	f00b fd36 	bl	800ce38 <puts>
			  while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 20) )
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 80013ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <RTOS_Automatic_Parking+0x5d8>)
 80013d8:	f7ff fba6 	bl	8000b28 <__aeabi_dcmpgt>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f1      	bne.n	80013c6 <RTOS_Automatic_Parking+0x512>
			  }

			  /* Breaking Sequence */
			  ECU_Motor_MoveForward();
 80013e2:	f001 fef1 	bl	80031c8 <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80013e6:	2005      	movs	r0, #5
 80013e8:	f002 f9f4 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 80013ec:	f001 ffc0 	bl	8003370 <ECU_Motor_Stop>

			  ECU_Motor_MoveForwardLeft(&moving_motor);
 80013f0:	4824      	ldr	r0, [pc, #144]	; (8001484 <RTOS_Automatic_Parking+0x5d0>)
 80013f2:	f001 ff51 	bl	8003298 <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 9) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 80013f6:	e002      	b.n	80013fe <RTOS_Automatic_Parking+0x54a>
			  {
				  printf("try to Park 5 Forward Left\n");
 80013f8:	482b      	ldr	r0, [pc, #172]	; (80014a8 <RTOS_Automatic_Parking+0x5f4>)
 80013fa:	f00b fd1d 	bl	800ce38 <puts>
			  while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 10 ) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 9) /*&& (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4)*/)
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <RTOS_Automatic_Parking+0x5f8>)
 800140a:	f7ff fb8d 	bl	8000b28 <__aeabi_dcmpgt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <RTOS_Automatic_Parking+0x576>
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <RTOS_Automatic_Parking+0x5c0>)
 8001416:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <RTOS_Automatic_Parking+0x5fc>)
 8001420:	f7ff fb82 	bl	8000b28 <__aeabi_dcmpgt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1e6      	bne.n	80013f8 <RTOS_Automatic_Parking+0x544>
			  }
			  ECU_Motor_MoveReverse();
 800142a:	f001 feef 	bl	800320c <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f002 f9d0 	bl	80037d4 <HAL_Delay>
			  ECU_Motor_Stop();
 8001434:	f001 ff9c 	bl	8003370 <ECU_Motor_Stop>
		  }
		  else{/* DO NOTHING */}

		  /* terminating the Auto Parking mode */
		  printf("Finally ... the car should be parked successfully by now\n");
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <RTOS_Automatic_Parking+0x600>)
 800143a:	f00b fcfd 	bl	800ce38 <puts>
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <RTOS_Automatic_Parking+0x604>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f007 fe79 	bl	800913c <osEventFlagsClear>
		  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 800144a:	491c      	ldr	r1, [pc, #112]	; (80014bc <RTOS_Automatic_Parking+0x608>)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <RTOS_Automatic_Parking+0x5d0>)
 800144e:	f001 fde9 	bl	8003024 <ECU_Motor_ChangeSpeed>
		  //Bluetooth_RX_Data = 'S';
		  osThreadResume(car_next_stepHandle);
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <RTOS_Automatic_Parking+0x60c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f007 fd64 	bl	8008f24 <osThreadResume>
		  osThreadSuspend(Automatic_ParkingHandle);
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <RTOS_Automatic_Parking+0x610>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fd2b 	bl	8008ebc <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}
    osDelay(120000);
 8001466:	4818      	ldr	r0, [pc, #96]	; (80014c8 <RTOS_Automatic_Parking+0x614>)
 8001468:	f007 fd90 	bl	8008f8c <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 800146c:	e52c      	b.n	8000ec8 <RTOS_Automatic_Parking+0x14>
 800146e:	bf00      	nop
 8001470:	0800f018 	.word	0x0800f018
 8001474:	20000668 	.word	0x20000668
 8001478:	0800f034 	.word	0x0800f034
 800147c:	0800f04c 	.word	0x0800f04c
 8001480:	20000088 	.word	0x20000088
 8001484:	20000048 	.word	0x20000048
 8001488:	0800f120 	.word	0x0800f120
 800148c:	40340000 	.word	0x40340000
 8001490:	0800f140 	.word	0x0800f140
 8001494:	40100000 	.word	0x40100000
 8001498:	0800f160 	.word	0x0800f160
 800149c:	40140000 	.word	0x40140000
 80014a0:	402a0000 	.word	0x402a0000
 80014a4:	0800f0dc 	.word	0x0800f0dc
 80014a8:	0800f180 	.word	0x0800f180
 80014ac:	40240000 	.word	0x40240000
 80014b0:	40220000 	.word	0x40220000
 80014b4:	0800f19c 	.word	0x0800f19c
 80014b8:	20000298 	.word	0x20000298
 80014bc:	20000078 	.word	0x20000078
 80014c0:	2000028c 	.word	0x2000028c
 80014c4:	20000290 	.word	0x20000290
 80014c8:	0001d4c0 	.word	0x0001d4c0

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <MX_GPIO_Init+0x158>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <MX_GPIO_Init+0x158>)
 80014e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <MX_GPIO_Init+0x158>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <MX_GPIO_Init+0x158>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a49      	ldr	r2, [pc, #292]	; (8001624 <MX_GPIO_Init+0x158>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <MX_GPIO_Init+0x158>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <MX_GPIO_Init+0x158>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	4a43      	ldr	r2, [pc, #268]	; (8001624 <MX_GPIO_Init+0x158>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <MX_GPIO_Init+0x158>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <MX_GPIO_Init+0x158>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a3d      	ldr	r2, [pc, #244]	; (8001624 <MX_GPIO_Init+0x158>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <MX_GPIO_Init+0x158>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f002 fc62 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin|LCD_DATA_2_Pin
 8001550:	2200      	movs	r2, #0
 8001552:	f643 4102 	movw	r1, #15362	; 0x3c02
 8001556:	4834      	ldr	r0, [pc, #208]	; (8001628 <MX_GPIO_Init+0x15c>)
 8001558:	f002 fc5c 	bl	8003e14 <HAL_GPIO_WritePin>
                          |LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2104      	movs	r1, #4
 8001560:	4831      	ldr	r0, [pc, #196]	; (8001628 <MX_GPIO_Init+0x15c>)
 8001562:	f002 fc57 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 7140 	mov.w	r1, #768	; 0x300
 800156c:	482f      	ldr	r0, [pc, #188]	; (800162c <MX_GPIO_Init+0x160>)
 800156e:	f002 fc51 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001578:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4828      	ldr	r0, [pc, #160]	; (800162c <MX_GPIO_Init+0x160>)
 800158a:	f002 faa1 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 800158e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f002 fa91 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_Left_Pin;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Left_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4819      	ldr	r0, [pc, #100]	; (8001628 <MX_GPIO_Init+0x15c>)
 80015c2:	f002 fa85 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80015c6:	f643 4306 	movw	r3, #15366	; 0x3c06
 80015ca:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4812      	ldr	r0, [pc, #72]	; (8001628 <MX_GPIO_Init+0x15c>)
 80015e0:	f002 fa76 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80015e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <MX_GPIO_Init+0x160>)
 80015fe:	f002 fa67 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_RIGHT_Pin;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_GPIO_Init+0x160>)
 8001618:	f002 fa5a 	bl	8003ad0 <HAL_GPIO_Init>

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f002 f898 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f81e 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff ff46 	bl	80014cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001640:	f000 fabc 	bl	8001bbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001644:	f000 fb8a 	bl	8001d5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001648:	f000 fc22 	bl	8001e90 <MX_TIM3_Init>
  MX_TIM4_Init();
 800164c:	f000 fcbc 	bl	8001fc8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001650:	f000 fd56 	bl	8002100 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001654:	f000 fe24 	bl	80022a0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001658:	f000 feea 	bl	8002430 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800165c:	f001 fae2 	bl	8002c24 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001660:	f001 fab0 	bl	8002bc4 <MX_UART4_Init>
  MX_TIM17_Init();
 8001664:	f000 ff5e 	bl	8002524 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001668:	f007 faf0 	bl	8008c4c <osKernelInitialize>
  MX_FREERTOS_Init();
 800166c:	f7ff fac4 	bl	8000bf8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001670:	f007 fb20 	bl	8008cb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001674:	e7fe      	b.n	8001674 <main+0x44>
	...

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a6      	sub	sp, #152	; 0x98
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001682:	2228      	movs	r2, #40	; 0x28
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f00b fcb6 	bl	800cff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2258      	movs	r2, #88	; 0x58
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00b fca8 	bl	800cff8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a8:	2302      	movs	r3, #2
 80016aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b0:	2310      	movs	r3, #16
 80016b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fbbf 	bl	8003e44 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016cc:	f000 f84a 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d4:	2300      	movs	r3, #0
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fbfe 	bl	8004eec <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016f6:	f000 f835 	bl	8001764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <SystemClock_Config+0xc4>)
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800170a:	2300      	movs	r3, #0
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800170e:	2300      	movs	r3, #0
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001712:	2300      	movs	r3, #0
 8001714:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001716:	2300      	movs	r3, #0
 8001718:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800171e:	2300      	movs	r3, #0
 8001720:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fe49 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001730:	f000 f818 	bl	8001764 <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3798      	adds	r7, #152	; 0x98
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	01f0300a 	.word	0x01f0300a

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f002 f81f 	bl	8003794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40001000 	.word	0x40001000

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_MspInit+0x4c>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_MspInit+0x4c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_MspInit+0x4c>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_MspInit+0x4c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_MspInit+0x4c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	210f      	movs	r1, #15
 80017aa:	f06f 0001 	mvn.w	r0, #1
 80017ae:	f002 f8ed 	bl	800398c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	; 0x38
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_InitTick+0xe0>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <HAL_InitTick+0xe0>)
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_InitTick+0xe0>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e8:	f107 0210 	add.w	r2, r7, #16
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fdb0 	bl	8005358 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001802:	f003 fd65 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8001806:	6378      	str	r0, [r7, #52]	; 0x34
 8001808:	e004      	b.n	8001814 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800180a:	f003 fd61 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 800180e:	4603      	mov	r3, r0
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_InitTick+0xe4>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	3b01      	subs	r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_InitTick+0xe8>)
 8001824:	4a21      	ldr	r2, [pc, #132]	; (80018ac <HAL_InitTick+0xec>)
 8001826:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_InitTick+0xe8>)
 800182a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_InitTick+0xe8>)
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_InitTick+0xe8>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_InitTick+0xe8>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_InitTick+0xe8>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001848:	4817      	ldr	r0, [pc, #92]	; (80018a8 <HAL_InitTick+0xe8>)
 800184a:	f003 ffd5 	bl	80057f8 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001858:	2b00      	cmp	r3, #0
 800185a:	d11b      	bne.n	8001894 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800185c:	4812      	ldr	r0, [pc, #72]	; (80018a8 <HAL_InitTick+0xe8>)
 800185e:	f004 f823 	bl	80058a8 <HAL_TIM_Base_Start_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800186c:	2b00      	cmp	r3, #0
 800186e:	d111      	bne.n	8001894 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001870:	2036      	movs	r0, #54	; 0x36
 8001872:	f002 f8a7 	bl	80039c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d808      	bhi.n	800188e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	2036      	movs	r0, #54	; 0x36
 8001882:	f002 f883 	bl	800398c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_InitTick+0xf0>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e002      	b.n	8001894 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001894:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001898:	4618      	mov	r0, r3
 800189a:	3738      	adds	r7, #56	; 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	200002a0 	.word	0x200002a0
 80018ac:	40001000 	.word	0x40001000
 80018b0:	20000090 	.word	0x20000090

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80018e6:	2205      	movs	r2, #5
 80018e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80018ec:	f004 fcc0 	bl	8006270 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80018f2:	f004 fcbd 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000698 	.word	0x20000698
 8001900:	200002f0 	.word	0x200002f0
 8001904:	2000046c 	.word	0x2000046c

08001908 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <TIM1_CC_IRQHandler+0x14>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <TIM1_CC_IRQHandler+0x18>)
 8001914:	f004 fcac 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000698 	.word	0x20000698
 8001920:	200002f0 	.word	0x200002f0

08001924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <TIM2_IRQHandler+0x14>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <TIM2_IRQHandler+0x18>)
 8001930:	f004 fc9e 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000698 	.word	0x20000698
 800193c:	2000033c 	.word	0x2000033c

08001940 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <TIM3_IRQHandler+0x14>)
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <TIM3_IRQHandler+0x18>)
 800194c:	f004 fc90 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000698 	.word	0x20000698
 8001958:	20000388 	.word	0x20000388

0800195c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <TIM4_IRQHandler+0x14>)
 8001962:	2203      	movs	r2, #3
 8001964:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <TIM4_IRQHandler+0x18>)
 8001968:	f004 fc82 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000698 	.word	0x20000698
 8001974:	200003d4 	.word	0x200003d4

08001978 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <TIM8_CC_IRQHandler+0x14>)
 800197e:	2204      	movs	r2, #4
 8001980:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <TIM8_CC_IRQHandler+0x18>)
 8001984:	f004 fc74 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000698 	.word	0x20000698
 8001990:	20000420 	.word	0x20000420

08001994 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <UART4_IRQHandler+0x10>)
 800199a:	f005 ffaf 	bl	80078fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000550 	.word	0x20000550

080019a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM6_DAC_IRQHandler+0x10>)
 80019ae:	f004 fc5f 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002a0 	.word	0x200002a0

080019bc <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <Custom_ITM_sendChar_Ch0+0x48>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <Custom_ITM_sendChar_Ch0+0x48>)
 80019cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d0:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019de:	bf00      	nop
 80019e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f8      	beq.n	80019e0 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 80019ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	6013      	str	r3, [r2, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000edfc 	.word	0xe000edfc
 8001a08:	e0000e00 	.word	0xe0000e00

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a26:	f00b fb8f 	bl	800d148 <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4e:	e7fe      	b.n	8001a4e <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
  }

  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e009      	b.n	8001ab0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff89 	bl	80019bc <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf1      	blt.n	8001a9c <_write+0x12>
  }
  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f00b faf4 	bl	800d148 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20010000 	.word	0x20010000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	200002ec 	.word	0x200002ec
 8001b94:	20002a28 	.word	0x20002a28

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b09e      	sub	sp, #120	; 0x78
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	222c      	movs	r2, #44	; 0x2c
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00b f9f7 	bl	800cff8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0a:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <MX_TIM1_Init+0x19c>)
 8001c0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c12:	2207      	movs	r2, #7
 8001c14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c36:	4847      	ldr	r0, [pc, #284]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c38:	f003 fdde 	bl	80057f8 <HAL_TIM_Base_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c42:	f7ff fd8f 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c50:	4619      	mov	r1, r3
 8001c52:	4840      	ldr	r0, [pc, #256]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c54:	f004 fddc 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c5e:	f7ff fd81 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c62:	483c      	ldr	r0, [pc, #240]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c64:	f003 fe90 	bl	8005988 <HAL_TIM_PWM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001c6e:	f7ff fd79 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c72:	4838      	ldr	r0, [pc, #224]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c74:	f004 f892 	bl	8005d9c <HAL_TIM_IC_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c7e:	f7ff fd71 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c92:	4619      	mov	r1, r3
 8001c94:	482f      	ldr	r0, [pc, #188]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001c96:	f005 fc6f 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8001ca0:	f7ff fd60 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001ca8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4822      	ldr	r0, [pc, #136]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001ccc:	f004 fc8c 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001cd6:	f7ff fd45 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4818      	ldr	r0, [pc, #96]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001cf4:	f004 fbdb 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001cfe:	f7ff fd31 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001d38:	f005 fcaa 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001d42:	f7ff fd0f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM1_Init+0x198>)
 8001d48:	f000 fe02 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3778      	adds	r7, #120	; 0x78
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002f0 	.word	0x200002f0
 8001d58:	40012c00 	.word	0x40012c00

08001d5c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b092      	sub	sp, #72	; 0x48
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001da6:	2207      	movs	r2, #7
 8001da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc4:	4831      	ldr	r0, [pc, #196]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001dc6:	f003 fd17 	bl	80057f8 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001dd0:	f7ff fcc8 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dde:	4619      	mov	r1, r3
 8001de0:	482a      	ldr	r0, [pc, #168]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001de2:	f004 fd15 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001dec:	f7ff fcba 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001df0:	4826      	ldr	r0, [pc, #152]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001df2:	f003 fdc9 	bl	8005988 <HAL_TIM_PWM_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001dfc:	f7ff fcb2 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e00:	4822      	ldr	r0, [pc, #136]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001e02:	f003 ffcb 	bl	8005d9c <HAL_TIM_IC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e0c:	f7ff fcaa 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481b      	ldr	r0, [pc, #108]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001e20:	f005 fbaa 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e2a:	f7ff fc9b 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2e:	2360      	movs	r3, #96	; 0x60
 8001e30:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001e32:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001e36:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001e4a:	f004 fbcd 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001e54:	f7ff fc86 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001e70:	f004 fb1d 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8001e7a:	f7ff fc73 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM2_Init+0x130>)
 8001e80:	f000 fd66 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001e84:	bf00      	nop
 8001e86:	3748      	adds	r7, #72	; 0x48
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000033c 	.word	0x2000033c

08001e90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b092      	sub	sp, #72	; 0x48
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <MX_TIM3_Init+0x134>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ef6:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001ef8:	f003 fc7e 	bl	80057f8 <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f02:	f7ff fc2f 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f10:	4619      	mov	r1, r3
 8001f12:	482b      	ldr	r0, [pc, #172]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001f14:	f004 fc7c 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f1e:	f7ff fc21 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f22:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001f24:	f003 fd30 	bl	8005988 <HAL_TIM_PWM_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001f2e:	f7ff fc19 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f32:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001f34:	f003 ff32 	bl	8005d9c <HAL_TIM_IC_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f3e:	f7ff fc11 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481b      	ldr	r0, [pc, #108]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001f52:	f005 fb11 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f5c:	f7ff fc02 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001f64:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001f68:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001f7c:	f004 fb34 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001f86:	f7ff fbed 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001fa2:	f004 fa84 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001fac:	f7ff fbda 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM3_Init+0x130>)
 8001fb2:	f000 fccd 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3748      	adds	r7, #72	; 0x48
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000388 	.word	0x20000388
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b092      	sub	sp, #72	; 0x48
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <MX_TIM4_Init+0x130>)
 800200a:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <MX_TIM4_Init+0x134>)
 800200c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <MX_TIM4_Init+0x130>)
 8002010:	2207      	movs	r2, #7
 8002012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <MX_TIM4_Init+0x130>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <MX_TIM4_Init+0x130>)
 800201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <MX_TIM4_Init+0x130>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <MX_TIM4_Init+0x130>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800202e:	4832      	ldr	r0, [pc, #200]	; (80020f8 <MX_TIM4_Init+0x130>)
 8002030:	f003 fbe2 	bl	80057f8 <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800203a:	f7ff fb93 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002048:	4619      	mov	r1, r3
 800204a:	482b      	ldr	r0, [pc, #172]	; (80020f8 <MX_TIM4_Init+0x130>)
 800204c:	f004 fbe0 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002056:	f7ff fb85 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800205a:	4827      	ldr	r0, [pc, #156]	; (80020f8 <MX_TIM4_Init+0x130>)
 800205c:	f003 fc94 	bl	8005988 <HAL_TIM_PWM_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002066:	f7ff fb7d 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800206a:	4823      	ldr	r0, [pc, #140]	; (80020f8 <MX_TIM4_Init+0x130>)
 800206c:	f003 fe96 	bl	8005d9c <HAL_TIM_IC_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002076:	f7ff fb75 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	481b      	ldr	r0, [pc, #108]	; (80020f8 <MX_TIM4_Init+0x130>)
 800208a:	f005 fa75 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002094:	f7ff fb66 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 800209c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80020a0:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4811      	ldr	r0, [pc, #68]	; (80020f8 <MX_TIM4_Init+0x130>)
 80020b4:	f004 fa98 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 80020be:	f7ff fb51 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020c6:	2301      	movs	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020d2:	463b      	mov	r3, r7
 80020d4:	2204      	movs	r2, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <MX_TIM4_Init+0x130>)
 80020da:	f004 f9e8 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 80020e4:	f7ff fb3e 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <MX_TIM4_Init+0x130>)
 80020ea:	f000 fc31 	bl	8002950 <HAL_TIM_MspPostInit>

}
 80020ee:	bf00      	nop
 80020f0:	3748      	adds	r7, #72	; 0x48
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003d4 	.word	0x200003d4
 80020fc:	40000800 	.word	0x40000800

08002100 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b09e      	sub	sp, #120	; 0x78
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
 8002130:	615a      	str	r2, [r3, #20]
 8002132:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	222c      	movs	r2, #44	; 0x2c
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f00a ff55 	bl	800cff8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <MX_TIM8_Init+0x198>)
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <MX_TIM8_Init+0x19c>)
 8002152:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <MX_TIM8_Init+0x198>)
 8002156:	2207      	movs	r2, #7
 8002158:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <MX_TIM8_Init+0x198>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <MX_TIM8_Init+0x198>)
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <MX_TIM8_Init+0x198>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <MX_TIM8_Init+0x198>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b48      	ldr	r3, [pc, #288]	; (8002298 <MX_TIM8_Init+0x198>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800217a:	4847      	ldr	r0, [pc, #284]	; (8002298 <MX_TIM8_Init+0x198>)
 800217c:	f003 fb3c 	bl	80057f8 <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002186:	f7ff faed 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002190:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002194:	4619      	mov	r1, r3
 8002196:	4840      	ldr	r0, [pc, #256]	; (8002298 <MX_TIM8_Init+0x198>)
 8002198:	f004 fb3a 	bl	8006810 <HAL_TIM_ConfigClockSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021a2:	f7ff fadf 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021a6:	483c      	ldr	r0, [pc, #240]	; (8002298 <MX_TIM8_Init+0x198>)
 80021a8:	f003 fbee 	bl	8005988 <HAL_TIM_PWM_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80021b2:	f7ff fad7 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80021b6:	4838      	ldr	r0, [pc, #224]	; (8002298 <MX_TIM8_Init+0x198>)
 80021b8:	f003 fdf0 	bl	8005d9c <HAL_TIM_IC_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80021c2:	f7ff facf 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021d6:	4619      	mov	r1, r3
 80021d8:	482f      	ldr	r0, [pc, #188]	; (8002298 <MX_TIM8_Init+0x198>)
 80021da:	f005 f9cd 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80021e4:	f7ff fabe 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e8:	2360      	movs	r3, #96	; 0x60
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80021ec:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4822      	ldr	r0, [pc, #136]	; (8002298 <MX_TIM8_Init+0x198>)
 8002210:	f004 f9ea 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800221a:	f7ff faa3 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002222:	2301      	movs	r3, #1
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800222e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002232:	2204      	movs	r2, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4818      	ldr	r0, [pc, #96]	; (8002298 <MX_TIM8_Init+0x198>)
 8002238:	f004 f939 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8002242:	f7ff fa8f 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800225a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM8_Init+0x198>)
 800227c:	f005 fa08 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8002286:	f7ff fa6d 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM8_Init+0x198>)
 800228c:	f000 fb60 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002290:	bf00      	nop
 8002292:	3778      	adds	r7, #120	; 0x78
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000420 	.word	0x20000420
 800229c:	40013400 	.word	0x40013400

080022a0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09e      	sub	sp, #120	; 0x78
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	222c      	movs	r2, #44	; 0x2c
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00a fe85 	bl	800cff8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022ee:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <MX_TIM15_Init+0x188>)
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <MX_TIM15_Init+0x18c>)
 80022f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80022f4:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <MX_TIM15_Init+0x188>)
 80022f6:	2207      	movs	r2, #7
 80022f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <MX_TIM15_Init+0x188>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002300:	4b49      	ldr	r3, [pc, #292]	; (8002428 <MX_TIM15_Init+0x188>)
 8002302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002306:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <MX_TIM15_Init+0x188>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <MX_TIM15_Init+0x188>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b44      	ldr	r3, [pc, #272]	; (8002428 <MX_TIM15_Init+0x188>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800231a:	4843      	ldr	r0, [pc, #268]	; (8002428 <MX_TIM15_Init+0x188>)
 800231c:	f003 fa6c 	bl	80057f8 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 8002326:	f7ff fa1d 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002334:	4619      	mov	r1, r3
 8002336:	483c      	ldr	r0, [pc, #240]	; (8002428 <MX_TIM15_Init+0x188>)
 8002338:	f004 fa6a 	bl	8006810 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8002342:	f7ff fa0f 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002346:	4838      	ldr	r0, [pc, #224]	; (8002428 <MX_TIM15_Init+0x188>)
 8002348:	f003 fb1e 	bl	8005988 <HAL_TIM_PWM_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8002352:	f7ff fa07 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002356:	4834      	ldr	r0, [pc, #208]	; (8002428 <MX_TIM15_Init+0x188>)
 8002358:	f003 fd20 	bl	8005d9c <HAL_TIM_IC_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002362:	f7ff f9ff 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800236e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002372:	4619      	mov	r1, r3
 8002374:	482c      	ldr	r0, [pc, #176]	; (8002428 <MX_TIM15_Init+0x188>)
 8002376:	f005 f8ff 	bl	8007578 <HAL_TIMEx_MasterConfigSynchronization>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8002380:	f7ff f9f0 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002384:	2360      	movs	r3, #96	; 0x60
 8002386:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8002388:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238e:	2300      	movs	r3, #0
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002392:	2300      	movs	r3, #0
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	481f      	ldr	r0, [pc, #124]	; (8002428 <MX_TIM15_Init+0x188>)
 80023ac:	f004 f91c 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80023b6:	f7ff f9d5 	bl	8001764 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023ba:	2300      	movs	r3, #0
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023be:	2301      	movs	r3, #1
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ce:	2204      	movs	r2, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4815      	ldr	r0, [pc, #84]	; (8002428 <MX_TIM15_Init+0x188>)
 80023d4:	f004 f86b 	bl	80064ae <HAL_TIM_IC_ConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80023de:	f7ff f9c1 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_TIM15_Init+0x188>)
 800240a:	f005 f941 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 8002414:	f7ff f9a6 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <MX_TIM15_Init+0x188>)
 800241a:	f000 fa99 	bl	8002950 <HAL_TIM_MspPostInit>

}
 800241e:	bf00      	nop
 8002420:	3778      	adds	r7, #120	; 0x78
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000046c 	.word	0x2000046c
 800242c:	40014000 	.word	0x40014000

08002430 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b092      	sub	sp, #72	; 0x48
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800244a:	463b      	mov	r3, r7
 800244c:	222c      	movs	r2, #44	; 0x2c
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f00a fdd1 	bl	800cff8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <MX_TIM16_Init+0xec>)
 8002458:	4a31      	ldr	r2, [pc, #196]	; (8002520 <MX_TIM16_Init+0xf0>)
 800245a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <MX_TIM16_Init+0xec>)
 800245e:	2207      	movs	r2, #7
 8002460:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <MX_TIM16_Init+0xec>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002468:	4b2c      	ldr	r3, [pc, #176]	; (800251c <MX_TIM16_Init+0xec>)
 800246a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <MX_TIM16_Init+0xec>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <MX_TIM16_Init+0xec>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <MX_TIM16_Init+0xec>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002482:	4826      	ldr	r0, [pc, #152]	; (800251c <MX_TIM16_Init+0xec>)
 8002484:	f003 f9b8 	bl	80057f8 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800248e:	f7ff f969 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002492:	4822      	ldr	r0, [pc, #136]	; (800251c <MX_TIM16_Init+0xec>)
 8002494:	f003 fa78 	bl	8005988 <HAL_TIM_PWM_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800249e:	f7ff f961 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 80024a6:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	2200      	movs	r2, #0
 80024c6:	4619      	mov	r1, r3
 80024c8:	4814      	ldr	r0, [pc, #80]	; (800251c <MX_TIM16_Init+0xec>)
 80024ca:	f004 f88d 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80024d4:	f7ff f946 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	4619      	mov	r1, r3
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <MX_TIM16_Init+0xec>)
 8002500:	f005 f8c6 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800250a:	f7ff f92b 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800250e:	4803      	ldr	r0, [pc, #12]	; (800251c <MX_TIM16_Init+0xec>)
 8002510:	f000 fa1e 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002514:	bf00      	nop
 8002516:	3748      	adds	r7, #72	; 0x48
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200004b8 	.word	0x200004b8
 8002520:	40014400 	.word	0x40014400

08002524 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b092      	sub	sp, #72	; 0x48
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800253e:	463b      	mov	r3, r7
 8002540:	222c      	movs	r2, #44	; 0x2c
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f00a fd57 	bl	800cff8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <MX_TIM17_Init+0xec>)
 800254c:	4a31      	ldr	r2, [pc, #196]	; (8002614 <MX_TIM17_Init+0xf0>)
 800254e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <MX_TIM17_Init+0xec>)
 8002552:	2207      	movs	r2, #7
 8002554:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002556:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <MX_TIM17_Init+0xec>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <MX_TIM17_Init+0xec>)
 800255e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002562:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <MX_TIM17_Init+0xec>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <MX_TIM17_Init+0xec>)
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <MX_TIM17_Init+0xec>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002576:	4826      	ldr	r0, [pc, #152]	; (8002610 <MX_TIM17_Init+0xec>)
 8002578:	f003 f93e 	bl	80057f8 <HAL_TIM_Base_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002582:	f7ff f8ef 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002586:	4822      	ldr	r0, [pc, #136]	; (8002610 <MX_TIM17_Init+0xec>)
 8002588:	f003 f9fe 	bl	8005988 <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002592:	f7ff f8e7 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800259a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	2200      	movs	r2, #0
 80025ba:	4619      	mov	r1, r3
 80025bc:	4814      	ldr	r0, [pc, #80]	; (8002610 <MX_TIM17_Init+0xec>)
 80025be:	f004 f813 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80025c8:	f7ff f8cc 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80025ee:	463b      	mov	r3, r7
 80025f0:	4619      	mov	r1, r3
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <MX_TIM17_Init+0xec>)
 80025f4:	f005 f84c 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80025fe:	f7ff f8b1 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002602:	4803      	ldr	r0, [pc, #12]	; (8002610 <MX_TIM17_Init+0xec>)
 8002604:	f000 f9a4 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002608:	bf00      	nop
 800260a:	3748      	adds	r7, #72	; 0x48
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000504 	.word	0x20000504
 8002614:	40014800 	.word	0x40014800

08002618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b096      	sub	sp, #88	; 0x58
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4aa7      	ldr	r2, [pc, #668]	; (80028d4 <HAL_TIM_Base_MspInit+0x2bc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d138      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800263a:	4ba7      	ldr	r3, [pc, #668]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	4aa6      	ldr	r2, [pc, #664]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	6193      	str	r3, [r2, #24]
 8002646:	4ba4      	ldr	r3, [pc, #656]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
 8002650:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	4ba1      	ldr	r3, [pc, #644]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4aa0      	ldr	r2, [pc, #640]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800265c:	6153      	str	r3, [r2, #20]
 800265e:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800266a:	2302      	movs	r3, #2
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800267a:	2302      	movs	r3, #2
 800267c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002682:	4619      	mov	r1, r3
 8002684:	4895      	ldr	r0, [pc, #596]	; (80028dc <HAL_TIM_Base_MspInit+0x2c4>)
 8002686:	f001 fa23 	bl	8003ad0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2105      	movs	r1, #5
 800268e:	2018      	movs	r0, #24
 8002690:	f001 f97c 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002694:	2018      	movs	r0, #24
 8002696:	f001 f995 	bl	80039c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2105      	movs	r1, #5
 800269e:	201b      	movs	r0, #27
 80026a0:	f001 f974 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026a4:	201b      	movs	r0, #27
 80026a6:	f001 f98d 	bl	80039c4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80026aa:	e146      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d131      	bne.n	800271a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b6:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4a81      	ldr	r2, [pc, #516]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6153      	str	r3, [r2, #20]
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026e6:	2302      	movs	r3, #2
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f6:	2301      	movs	r3, #1
 80026f8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fe:	4619      	mov	r1, r3
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002704:	f001 f9e4 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2105      	movs	r1, #5
 800270c:	201c      	movs	r0, #28
 800270e:	f001 f93d 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002712:	201c      	movs	r0, #28
 8002714:	f001 f956 	bl	80039c4 <HAL_NVIC_EnableIRQ>
}
 8002718:	e10f      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a70      	ldr	r2, [pc, #448]	; (80028e0 <HAL_TIM_Base_MspInit+0x2c8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d131      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002724:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	61d3      	str	r3, [r2, #28]
 8002730:	4b69      	ldr	r3, [pc, #420]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002746:	6153      	str	r3, [r2, #20]
 8002748:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002754:	2310      	movs	r3, #16
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002764:	2302      	movs	r3, #2
 8002766:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800276c:	4619      	mov	r1, r3
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002772:	f001 f9ad 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2105      	movs	r1, #5
 800277a:	201d      	movs	r0, #29
 800277c:	f001 f906 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002780:	201d      	movs	r0, #29
 8002782:	f001 f91f 	bl	80039c4 <HAL_NVIC_EnableIRQ>
}
 8002786:	e0d8      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a55      	ldr	r2, [pc, #340]	; (80028e4 <HAL_TIM_Base_MspInit+0x2cc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d132      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4a4a      	ldr	r2, [pc, #296]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	6153      	str	r3, [r2, #20]
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80027d4:	230a      	movs	r3, #10
 80027d6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027dc:	4619      	mov	r1, r3
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f001 f975 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2105      	movs	r1, #5
 80027ea:	201e      	movs	r0, #30
 80027ec:	f001 f8ce 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027f0:	201e      	movs	r0, #30
 80027f2:	f001 f8e7 	bl	80039c4 <HAL_NVIC_EnableIRQ>
}
 80027f6:	e0a0      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_TIM_Base_MspInit+0x2d0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d130      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800280c:	6193      	str	r3, [r2, #24]
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002824:	6153      	str	r3, [r2, #20]
 8002826:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002842:	2304      	movs	r3, #4
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002846:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800284a:	4619      	mov	r1, r3
 800284c:	4823      	ldr	r0, [pc, #140]	; (80028dc <HAL_TIM_Base_MspInit+0x2c4>)
 800284e:	f001 f93f 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2105      	movs	r1, #5
 8002856:	202e      	movs	r0, #46	; 0x2e
 8002858:	f001 f898 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800285c:	202e      	movs	r0, #46	; 0x2e
 800285e:	f001 f8b1 	bl	80039c4 <HAL_NVIC_EnableIRQ>
}
 8002862:	e06a      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM15)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_TIM_Base_MspInit+0x2d4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d142      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6193      	str	r3, [r2, #24]
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6153      	str	r3, [r2, #20]
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c0>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800289e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80028b0:	2301      	movs	r3, #1
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <HAL_TIM_Base_MspInit+0x2d8>)
 80028bc:	f001 f908 	bl	8003ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2105      	movs	r1, #5
 80028c4:	2018      	movs	r0, #24
 80028c6:	f001 f861 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028ca:	2018      	movs	r0, #24
 80028cc:	f001 f87a 	bl	80039c4 <HAL_NVIC_EnableIRQ>
}
 80028d0:	e033      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
 80028d2:	bf00      	nop
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48000800 	.word	0x48000800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40013400 	.word	0x40013400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_TIM_Base_MspInit+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10c      	bne.n	8002918 <HAL_TIM_Base_MspInit+0x300>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	6193      	str	r3, [r2, #24]
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
}
 8002916:	e010      	b.n	800293a <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM17)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_TIM_Base_MspInit+0x334>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10b      	bne.n	800293a <HAL_TIM_Base_MspInit+0x322>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6193      	str	r3, [r2, #24]
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_TIM_Base_MspInit+0x330>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
}
 800293a:	bf00      	nop
 800293c:	3758      	adds	r7, #88	; 0x58
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40014400 	.word	0x40014400
 8002948:	40021000 	.word	0x40021000
 800294c:	40014800 	.word	0x40014800

08002950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b090      	sub	sp, #64	; 0x40
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a8b      	ldr	r2, [pc, #556]	; (8002b9c <HAL_TIM_MspPostInit+0x24c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d11c      	bne.n	80029ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800297c:	6153      	str	r3, [r2, #20]
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002992:	2302      	movs	r3, #2
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800299a:	2302      	movs	r3, #2
 800299c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a2:	4619      	mov	r1, r3
 80029a4:	487f      	ldr	r0, [pc, #508]	; (8002ba4 <HAL_TIM_MspPostInit+0x254>)
 80029a6:	f001 f893 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029aa:	e0f2      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d11d      	bne.n	80029f2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b7a      	ldr	r3, [pc, #488]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4a79      	ldr	r2, [pc, #484]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	6153      	str	r3, [r2, #20]
 80029c2:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ce:	2301      	movs	r3, #1
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d6:	2302      	movs	r3, #2
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029de:	2301      	movs	r3, #1
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e6:	4619      	mov	r1, r3
 80029e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ec:	f001 f870 	bl	8003ad0 <HAL_GPIO_Init>
}
 80029f0:	e0cf      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6c      	ldr	r2, [pc, #432]	; (8002ba8 <HAL_TIM_MspPostInit+0x258>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d11d      	bne.n	8002a38 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4a67      	ldr	r2, [pc, #412]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	6153      	str	r3, [r2, #20]
 8002a08:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a14:	2340      	movs	r3, #64	; 0x40
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a24:	2302      	movs	r3, #2
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a32:	f001 f84d 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002a36:	e0ac      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5b      	ldr	r2, [pc, #364]	; (8002bac <HAL_TIM_MspPostInit+0x25c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11e      	bne.n	8002a80 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4a56      	ldr	r2, [pc, #344]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4c:	6153      	str	r3, [r2, #20]
 8002a4e:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a64:	2302      	movs	r3, #2
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a6c:	230a      	movs	r3, #10
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7a:	f001 f829 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002a7e:	e088      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM8)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <HAL_TIM_MspPostInit+0x260>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d11c      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4a44      	ldr	r2, [pc, #272]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a94:	6153      	str	r3, [r2, #20]
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aa2:	2340      	movs	r3, #64	; 0x40
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aba:	4619      	mov	r1, r3
 8002abc:	4839      	ldr	r0, [pc, #228]	; (8002ba4 <HAL_TIM_MspPostInit+0x254>)
 8002abe:	f001 f807 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002ac2:	e066      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM15)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <HAL_TIM_MspPostInit+0x264>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d11d      	bne.n	8002b0a <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6153      	str	r3, [r2, #20]
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002af0:	2302      	movs	r3, #2
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002af8:	2301      	movs	r3, #1
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b00:	4619      	mov	r1, r3
 8002b02:	482d      	ldr	r0, [pc, #180]	; (8002bb8 <HAL_TIM_MspPostInit+0x268>)
 8002b04:	f000 ffe4 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002b08:	e043      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_TIM_MspPostInit+0x26c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d11c      	bne.n	8002b4e <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1e:	6153      	str	r3, [r2, #20]
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b34:	2302      	movs	r3, #2
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b44:	4619      	mov	r1, r3
 8002b46:	481c      	ldr	r0, [pc, #112]	; (8002bb8 <HAL_TIM_MspPostInit+0x268>)
 8002b48:	f000 ffc2 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002b4c:	e021      	b.n	8002b92 <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM17)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_TIM_MspPostInit+0x270>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d11c      	bne.n	8002b92 <HAL_TIM_MspPostInit+0x242>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b62:	6153      	str	r3, [r2, #20]
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_TIM_MspPostInit+0x250>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002b80:	2301      	movs	r3, #1
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f000 ff9f 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002b92:	bf00      	nop
 8002b94:	3740      	adds	r7, #64	; 0x40
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	48000800 	.word	0x48000800
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40013400 	.word	0x40013400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800

08002bc4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <MX_UART4_Init+0x5c>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <MX_UART4_Init+0x58>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <MX_UART4_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <MX_UART4_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_UART4_Init+0x58>)
 8002c08:	f004 fde6 	bl	80077d8 <HAL_UART_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002c12:	f7fe fda7 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000550 	.word	0x20000550
 8002c20:	40004c00 	.word	0x40004c00

08002c24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <MX_USART2_UART_Init+0x5c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_USART2_UART_Init+0x58>)
 8002c68:	f004 fdb6 	bl	80077d8 <HAL_UART_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c72:	f7fe fd77 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005d8 	.word	0x200005d8
 8002c80:	40004400 	.word	0x40004400

08002c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <HAL_UART_MspInit+0xec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d131      	bne.n	8002d0a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a32      	ldr	r2, [pc, #200]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cb0:	61d3      	str	r3, [r2, #28]
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4a2c      	ldr	r2, [pc, #176]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cc8:	6153      	str	r3, [r2, #20]
 8002cca:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002ce8:	2305      	movs	r3, #5
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4821      	ldr	r0, [pc, #132]	; (8002d78 <HAL_UART_MspInit+0xf4>)
 8002cf4:	f000 feec 	bl	8003ad0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2105      	movs	r1, #5
 8002cfc:	2034      	movs	r0, #52	; 0x34
 8002cfe:	f000 fe45 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d02:	2034      	movs	r0, #52	; 0x34
 8002d04:	f000 fe5e 	bl	80039c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d08:	e02d      	b.n	8002d66 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_UART_MspInit+0xf8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d128      	bne.n	8002d66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1e:	61d3      	str	r3, [r2, #28]
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d36:	6153      	str	r3, [r2, #20]
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_UART_MspInit+0xf0>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d44:	230c      	movs	r3, #12
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d54:	2307      	movs	r3, #7
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d62:	f000 feb5 	bl	8003ad0 <HAL_GPIO_Init>
}
 8002d66:	bf00      	nop
 8002d68:	3730      	adds	r7, #48	; 0x30
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40004c00 	.word	0x40004c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	40004400 	.word	0x40004400

08002d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d84:	f7fe ff08 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d88:	480c      	ldr	r0, [pc, #48]	; (8002dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002d8a:	490d      	ldr	r1, [pc, #52]	; (8002dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <LoopForever+0xe>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d90:	e002      	b.n	8002d98 <LoopCopyDataInit>

08002d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d96:	3304      	adds	r3, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d9c:	d3f9      	bcc.n	8002d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002da0:	4c0a      	ldr	r4, [pc, #40]	; (8002dcc <LoopForever+0x16>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da4:	e001      	b.n	8002daa <LoopFillZerobss>

08002da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da8:	3204      	adds	r2, #4

08002daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dac:	d3fb      	bcc.n	8002da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dae:	f00a f9d1 	bl	800d154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002db2:	f7fe fc3d 	bl	8001630 <main>

08002db6 <LoopForever>:

LoopForever:
    b LoopForever
 8002db6:	e7fe      	b.n	8002db6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002db8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc0:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002dc4:	0800f664 	.word	0x0800f664
  ldr r2, =_sbss
 8002dc8:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002dcc:	20002a24 	.word	0x20002a24

08002dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC1_2_IRQHandler>
	...

08002dd4 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if( BLUETOOTH_CONDITION(temp) ){
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b46      	cmp	r3, #70	; 0x46
 8002de2:	d037      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b42      	cmp	r3, #66	; 0x42
 8002dea:	d033      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002dec:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b47      	cmp	r3, #71	; 0x47
 8002df2:	d02f      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b49      	cmp	r3, #73	; 0x49
 8002dfa:	d02b      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b48      	cmp	r3, #72	; 0x48
 8002e02:	d027      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b4a      	cmp	r3, #74	; 0x4a
 8002e0a:	d023      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b52      	cmp	r3, #82	; 0x52
 8002e12:	d01f      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e14:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b4c      	cmp	r3, #76	; 0x4c
 8002e1a:	d01b      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b53      	cmp	r3, #83	; 0x53
 8002e22:	d017      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b23      	cmp	r3, #35	; 0x23
 8002e2a:	d013      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d00f      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b21      	cmp	r3, #33	; 0x21
 8002e3a:	d00b      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b57      	cmp	r3, #87	; 0x57
 8002e42:	d007      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b55      	cmp	r3, #85	; 0x55
 8002e4a:	d003      	beq.n	8002e54 <HAL_UART_RxCpltCallback+0x80>
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b77      	cmp	r3, #119	; 0x77
 8002e52:	d103      	bne.n	8002e5c <HAL_UART_RxCpltCallback+0x88>
		Bluetooth_RX_Data = temp;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_UART_RxCpltCallback+0xa0>)
 8002e5a:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_UART_RxCpltCallback+0x9c>)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f004 fd07 	bl	8007874 <HAL_UART_Receive_IT>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000660 	.word	0x20000660
 8002e74:	20000064 	.word	0x20000064

08002e78 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e009      	b.n	8002e9e <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <ECU_Bluetooth_ReciveData+0x30>)
 8002e98:	f004 fcec 	bl	8007874 <HAL_UART_Receive_IT>

	return ECU_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000660 	.word	0x20000660

08002eac <ECU_IR_IsActive>:
  * @param  ir_obj_t: IR handle       @ref ir_obj_t
  *
  * @retval status of the IR          IR_IDLE_STATE OR IR_Active_STATE
  *
  */
uint8_t ECU_IR_IsActive(ir_obj_t *ir_obj){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(ir_obj->port, ir_obj->pin) ? IR_IDLE_STATE: IR_Active_STATE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	889b      	ldrh	r3, [r3, #4]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 ff90 	bl	8003de4 <HAL_GPIO_ReadPin>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e07e      	b.n	8002fec <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <ECU_Motor_GeneratePWM+0x34>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e045      	b.n	8002f98 <ECU_Motor_GeneratePWM+0xc0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d10a      	bne.n	8002f2a <ECU_Motor_GeneratePWM+0x52>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e036      	b.n	8002f98 <ECU_Motor_GeneratePWM+0xc0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d10a      	bne.n	8002f48 <ECU_Motor_GeneratePWM+0x70>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e027      	b.n	8002f98 <ECU_Motor_GeneratePWM+0xc0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d10a      	bne.n	8002f66 <ECU_Motor_GeneratePWM+0x8e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e018      	b.n	8002f98 <ECU_Motor_GeneratePWM+0xc0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d10a      	bne.n	8002f84 <ECU_Motor_GeneratePWM+0xac>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e009      	b.n	8002f98 <ECU_Motor_GeneratePWM+0xc0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e025      	b.n	8002fec <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <ECU_Motor_GeneratePWM+0x11c>)
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd4:	ee17 2a90 	vmov	r2, s15
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f002 fd31 	bl	8005a4c <HAL_TIM_PWM_Start>

	return ECU_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	000f4240 	.word	0x000f4240

08002ff8 <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e008      	b.n	800301c <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f002 fe25 	bl	8005c64 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <ECU_Motor_ChangeSpeed+0x16>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00e      	b.n	800305c <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ffda 	bl	8002ff8 <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff3f 	bl	8002ed8 <ECU_Motor_GeneratePWM>

	return ECU_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <ECU_Motor_NextStep+0x16>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e099      	b.n	80031b2 <ECU_Motor_NextStep+0x14e>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	3b21      	subs	r3, #33	; 0x21
 8003084:	2b32      	cmp	r3, #50	; 0x32
 8003086:	f200 8090 	bhi.w	80031aa <ECU_Motor_NextStep+0x146>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <ECU_Motor_NextStep+0x2c>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080031a3 	.word	0x080031a3
 8003094:	080031ab 	.word	0x080031ab
 8003098:	08003193 	.word	0x08003193
 800309c:	080031ab 	.word	0x080031ab
 80030a0:	080031ab 	.word	0x080031ab
 80030a4:	080031ab 	.word	0x080031ab
 80030a8:	080031ab 	.word	0x080031ab
 80030ac:	080031ab 	.word	0x080031ab
 80030b0:	080031ab 	.word	0x080031ab
 80030b4:	080031ab 	.word	0x080031ab
 80030b8:	080031ab 	.word	0x080031ab
 80030bc:	080031ab 	.word	0x080031ab
 80030c0:	080031ab 	.word	0x080031ab
 80030c4:	080031ab 	.word	0x080031ab
 80030c8:	080031ab 	.word	0x080031ab
 80030cc:	080031ab 	.word	0x080031ab
 80030d0:	080031ab 	.word	0x080031ab
 80030d4:	080031ab 	.word	0x080031ab
 80030d8:	080031ab 	.word	0x080031ab
 80030dc:	080031ab 	.word	0x080031ab
 80030e0:	080031ab 	.word	0x080031ab
 80030e4:	080031ab 	.word	0x080031ab
 80030e8:	080031ab 	.word	0x080031ab
 80030ec:	080031ab 	.word	0x080031ab
 80030f0:	080031ab 	.word	0x080031ab
 80030f4:	080031ab 	.word	0x080031ab
 80030f8:	080031ab 	.word	0x080031ab
 80030fc:	080031ab 	.word	0x080031ab
 8003100:	080031ab 	.word	0x080031ab
 8003104:	080031ab 	.word	0x080031ab
 8003108:	080031ab 	.word	0x080031ab
 800310c:	0800319b 	.word	0x0800319b
 8003110:	080031ab 	.word	0x080031ab
 8003114:	08003163 	.word	0x08003163
 8003118:	080031ab 	.word	0x080031ab
 800311c:	080031ab 	.word	0x080031ab
 8003120:	080031ab 	.word	0x080031ab
 8003124:	0800315d 	.word	0x0800315d
 8003128:	08003169 	.word	0x08003169
 800312c:	08003175 	.word	0x08003175
 8003130:	0800316f 	.word	0x0800316f
 8003134:	0800317b 	.word	0x0800317b
 8003138:	080031ab 	.word	0x080031ab
 800313c:	08003187 	.word	0x08003187
 8003140:	080031ab 	.word	0x080031ab
 8003144:	080031ab 	.word	0x080031ab
 8003148:	080031ab 	.word	0x080031ab
 800314c:	080031ab 	.word	0x080031ab
 8003150:	080031ab 	.word	0x080031ab
 8003154:	08003181 	.word	0x08003181
 8003158:	0800318d 	.word	0x0800318d
	{
		case FORWARD:       ECU_Motor_MoveForward     (); break;
 800315c:	f000 f834 	bl	80031c8 <ECU_Motor_MoveForward>
 8003160:	e026      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case REVERSE:       ECU_Motor_MoveReverse     (); break;
 8003162:	f000 f853 	bl	800320c <ECU_Motor_MoveReverse>
 8003166:	e023      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (); break;
 8003168:	f000 f896 	bl	8003298 <ECU_Motor_MoveForwardLeft>
 800316c:	e020      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(); break;
 800316e:	f000 f86f 	bl	8003250 <ECU_Motor_MoveForwardRight>
 8003172:	e01d      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (); break;
 8003174:	f000 f8d8 	bl	8003328 <ECU_Motor_MoveReverseLeft>
 8003178:	e01a      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(); break;
 800317a:	f000 f8b1 	bl	80032e0 <ECU_Motor_MoveReverseRight>
 800317e:	e017      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case RIGHT:         ECU_Motor_MoveRight       (); break;
 8003180:	f000 f91a 	bl	80033b8 <ECU_Motor_MoveRight>
 8003184:	e014      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case LEFT:          ECU_Motor_MoveLeft        (); break;
 8003186:	f000 f941 	bl	800340c <ECU_Motor_MoveLeft>
 800318a:	e011      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case STOP:          ECU_Motor_Stop            (); break;
 800318c:	f000 f8f0 	bl	8003370 <ECU_Motor_Stop>
 8003190:	e00e      	b.n	80031b0 <ECU_Motor_NextStep+0x14c>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8003192:	490a      	ldr	r1, [pc, #40]	; (80031bc <ECU_Motor_NextStep+0x158>)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff45 	bl	8003024 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800319a:	4909      	ldr	r1, [pc, #36]	; (80031c0 <ECU_Motor_NextStep+0x15c>)
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff41 	bl	8003024 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <ECU_Motor_NextStep+0x160>)
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff3d 	bl	8003024 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (); break;
 80031aa:	f000 f8e1 	bl	8003370 <ECU_Motor_Stop>
 80031ae:	bf00      	nop
	}

	return ECU_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000078 	.word	0x20000078
 80031c0:	20000080 	.word	0x20000080
 80031c4:	20000088 	.word	0x20000088

080031c8 <ECU_Motor_MoveForward>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0


	//printf("Motor_MoveForward\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031d2:	480d      	ldr	r0, [pc, #52]	; (8003208 <ECU_Motor_MoveForward+0x40>)
 80031d4:	f000 fe1e 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80031d8:	2200      	movs	r2, #0
 80031da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031de:	480a      	ldr	r0, [pc, #40]	; (8003208 <ECU_Motor_MoveForward+0x40>)
 80031e0:	f000 fe18 	bl	8003e14 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80031e4:	2201      	movs	r2, #1
 80031e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ee:	f000 fe11 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031fc:	f000 fe0a 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	48000800 	.word	0x48000800

0800320c <ECU_Motor_MoveReverse>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(){
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0


	//printf("MoveReverse\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003210:	2200      	movs	r2, #0
 8003212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <ECU_Motor_MoveReverse+0x40>)
 8003218:	f000 fdfc 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003222:	480a      	ldr	r0, [pc, #40]	; (800324c <ECU_Motor_MoveReverse+0x40>)
 8003224:	f000 fdf6 	bl	8003e14 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800322e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003232:	f000 fdef 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800323c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003240:	f000 fde8 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	48000800 	.word	0x48000800

08003250 <ECU_Motor_MoveForwardRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(){
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0

	//printf("MoveForwardRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003254:	2201      	movs	r2, #1
 8003256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800325a:	480e      	ldr	r0, [pc, #56]	; (8003294 <ECU_Motor_MoveForwardRight+0x44>)
 800325c:	f000 fdda 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003266:	480b      	ldr	r0, [pc, #44]	; (8003294 <ECU_Motor_MoveForwardRight+0x44>)
 8003268:	f000 fdd4 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	f000 fab1 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003272:	2201      	movs	r2, #1
 8003274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327c:	f000 fdca 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328a:	f000 fdc3 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	48000800 	.word	0x48000800

08003298 <ECU_Motor_MoveForwardLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(){
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0

	//printf("MoveForwardLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a2:	480e      	ldr	r0, [pc, #56]	; (80032dc <ECU_Motor_MoveForwardLeft+0x44>)
 80032a4:	f000 fdb6 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80032a8:	2201      	movs	r2, #1
 80032aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ae:	480b      	ldr	r0, [pc, #44]	; (80032dc <ECU_Motor_MoveForwardLeft+0x44>)
 80032b0:	f000 fdb0 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	f000 fa8d 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80032ba:	2201      	movs	r2, #1
 80032bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c4:	f000 fda6 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80032c8:	2200      	movs	r2, #0
 80032ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d2:	f000 fd9f 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	48000800 	.word	0x48000800

080032e0 <ECU_Motor_MoveReverseRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0

	//printf("MoveReverseRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80032e4:	2201      	movs	r2, #1
 80032e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ea:	480e      	ldr	r0, [pc, #56]	; (8003324 <ECU_Motor_MoveReverseRight+0x44>)
 80032ec:	f000 fd92 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80032f0:	2200      	movs	r2, #0
 80032f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032f6:	480b      	ldr	r0, [pc, #44]	; (8003324 <ECU_Motor_MoveReverseRight+0x44>)
 80032f8:	f000 fd8c 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032fc:	2064      	movs	r0, #100	; 0x64
 80032fe:	f000 fa69 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330c:	f000 fd82 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003310:	2201      	movs	r2, #1
 8003312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800331a:	f000 fd7b 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	48000800 	.word	0x48000800

08003328 <ECU_Motor_MoveReverseLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(){
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0

	//printf("MoveReverseLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003332:	480e      	ldr	r0, [pc, #56]	; (800336c <ECU_Motor_MoveReverseLeft+0x44>)
 8003334:	f000 fd6e 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003338:	2201      	movs	r2, #1
 800333a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333e:	480b      	ldr	r0, [pc, #44]	; (800336c <ECU_Motor_MoveReverseLeft+0x44>)
 8003340:	f000 fd68 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	f000 fa45 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003354:	f000 fd5e 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003358:	2201      	movs	r2, #1
 800335a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800335e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003362:	f000 fd57 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	48000800 	.word	0x48000800

08003370 <ECU_Motor_Stop>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(){
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0

	//printf("Stop\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003374:	2200      	movs	r2, #0
 8003376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800337a:	480e      	ldr	r0, [pc, #56]	; (80033b4 <ECU_Motor_Stop+0x44>)
 800337c:	f000 fd4a 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003386:	480b      	ldr	r0, [pc, #44]	; (80033b4 <ECU_Motor_Stop+0x44>)
 8003388:	f000 fd44 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800338c:	2032      	movs	r0, #50	; 0x32
 800338e:	f000 fa21 	bl	80037d4 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339c:	f000 fd3a 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80033a0:	2201      	movs	r2, #1
 80033a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033aa:	f000 fd33 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	48000800 	.word	0x48000800

080033b8 <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e01a      	b.n	8003400 <ECU_Motor_MoveRight+0x48>

	//printf("MoveRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80033ca:	2201      	movs	r2, #1
 80033cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d0:	480d      	ldr	r0, [pc, #52]	; (8003408 <ECU_Motor_MoveRight+0x50>)
 80033d2:	f000 fd1f 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80033d6:	2200      	movs	r2, #0
 80033d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <ECU_Motor_MoveRight+0x50>)
 80033de:	f000 fd19 	bl	8003e14 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80033e2:	2200      	movs	r2, #0
 80033e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ec:	f000 fd12 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80033f0:	2200      	movs	r2, #0
 80033f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fa:	f000 fd0b 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	48000800 	.word	0x48000800

0800340c <ECU_Motor_MoveLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(){
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0

	//printf("MoveLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003416:	480d      	ldr	r0, [pc, #52]	; (800344c <ECU_Motor_MoveLeft+0x40>)
 8003418:	f000 fcfc 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800341c:	2201      	movs	r2, #1
 800341e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003422:	480a      	ldr	r0, [pc, #40]	; (800344c <ECU_Motor_MoveLeft+0x40>)
 8003424:	f000 fcf6 	bl	8003e14 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003428:	2200      	movs	r2, #0
 800342a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800342e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003432:	f000 fcef 	bl	8003e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800343c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003440:	f000 fce8 	bl	8003e14 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	48000800 	.word	0x48000800

08003450 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b085      	sub	sp, #20
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7f1b      	ldrb	r3, [r3, #28]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d145      	bne.n	80034ec <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8003460:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d114      	bne.n	800349a <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f002 fbf6 	bl	8005c64 <HAL_TIM_PWM_Stop>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_TIM_IC_CaptureCallback+0xac>)
 8003482:	4413      	add	r3, r2
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800348e:	440a      	add	r2, r1
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8e0 	bl	8003658 <IC_first_Capture>
		}

	}
	else{/* Do Nothing */}

}
 8003498:	e028      	b.n	80034ec <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80034a4:	5c9b      	ldrb	r3, [r3, r2]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d120      	bne.n	80034ec <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_TIM_IC_CaptureCallback+0xac>)
 80034b4:	1899      	adds	r1, r3, r2
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a10      	ldr	r2, [pc, #64]	; (8003500 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80034c0:	441a      	add	r2, r3
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	480e      	ldr	r0, [pc, #56]	; (8003504 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80034cc:	4418      	add	r0, r3
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461c      	mov	r4, r3
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80034d8:	4423      	add	r3, r4
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4603      	mov	r3, r0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8e4 	bl	80036ac <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80034e4:	2104      	movs	r1, #4
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f002 fe04 	bl	80060f4 <HAL_TIM_IC_Stop_IT>
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	20000698 	.word	0x20000698
 80034f8:	2000069c 	.word	0x2000069c
 80034fc:	200006a4 	.word	0x200006a4
 8003500:	200006bc 	.word	0x200006bc
 8003504:	200006d4 	.word	0x200006d4

08003508 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 800351a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003544 <ECU_Ultrasonic_Read+0x3c>
 800351e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f810 	bl	8003548 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f002 fc94 	bl	8005e60 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	3a83126f 	.word	0x3a83126f

08003548 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e077      	b.n	8003650 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <ECU_Ultrasonic_GenerateTrigger+0x36>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e045      	b.n	800360a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d10a      	bne.n	800359c <ECU_Ultrasonic_GenerateTrigger+0x54>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e036      	b.n	800360a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d10a      	bne.n	80035ba <ECU_Ultrasonic_GenerateTrigger+0x72>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e027      	b.n	800360a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d10a      	bne.n	80035d8 <ECU_Ultrasonic_GenerateTrigger+0x90>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e018      	b.n	800360a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d10a      	bne.n	80035f6 <ECU_Ultrasonic_GenerateTrigger+0xae>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e009      	b.n	800360a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01e      	b.n	8003650 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003626:	edd7 7a01 	vldr	s15, [r7, #4]
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 2a90 	vmov	r2, s15
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f002 f9ff 	bl	8005a4c <HAL_TIM_PWM_Start>

	return ECU_OK;;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003664:	2104      	movs	r1, #4
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f003 f99c 	bl	80069a4 <HAL_TIM_ReadCapturedValue>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a1a      	ldr	r2, [r3, #32]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003690:	621a      	str	r2, [r3, #32]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0220 	orr.w	r2, r2, #32
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80036ba:	2104      	movs	r1, #4
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f003 f971 	bl	80069a4 <HAL_TIM_ReadCapturedValue>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d307      	bcc.n	80036ec <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1ad2      	subs	r2, r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e009      	b.n	8003700 <IC_second_Capture+0x54>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80036fa:	33ff      	adds	r3, #255	; 0xff
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	6013      	str	r3, [r2, #0]
		//printf("sensor %d --------> overflow\n",sensor_index+1);
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800375c <IC_second_Capture+0xb0>
 8003710:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <IC_second_Capture+0xb4>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461c      	mov	r4, r3
 800371c:	ee16 0a90 	vmov	r0, s13
 8003720:	f7fc ff1a 	bl	8000558 <__aeabi_f2d>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	480e      	ldr	r0, [pc, #56]	; (8003764 <IC_second_Capture+0xb8>)
 800372a:	00e1      	lsls	r1, r4, #3
 800372c:	4401      	add	r1, r0
 800372e:	e9c1 2300 	strd	r2, r3, [r1]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a12      	ldr	r2, [r2, #32]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	42680000 	.word	0x42680000
 8003760:	20000698 	.word	0x20000698
 8003764:	20000668 	.word	0x20000668

08003768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_Init+0x28>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <HAL_Init+0x28>)
 8003772:	f043 0310 	orr.w	r3, r3, #16
 8003776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003778:	2003      	movs	r0, #3
 800377a:	f000 f8fc 	bl	8003976 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377e:	200f      	movs	r0, #15
 8003780:	f7fe f81e 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003784:	f7fd fff4 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000094 	.word	0x20000094
 80037b8:	200006ec 	.word	0x200006ec

080037bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;  
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200006ec 	.word	0x200006ec

080037d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000094 	.word	0x20000094

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	; (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	; (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
         );
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff4c 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800399e:	f7ff ff61 	bl	8003864 <__NVIC_GetPriorityGrouping>
 80039a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f7ff ffb1 	bl	8003910 <NVIC_EncodePriority>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff80 	bl	80038bc <__NVIC_SetPriority>
}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ff54 	bl	8003880 <__NVIC_EnableIRQ>
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d008      	beq.n	8003a04 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e020      	b.n	8003a46 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 020e 	bic.w	r2, r2, #14
 8003a12:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d005      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e027      	b.n	8003ac4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020e 	bic.w	r2, r2, #14
 8003a82:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
    } 
  }
  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ade:	e160      	b.n	8003da2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8152 	beq.w	8003d9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d005      	beq.n	8003b10 <HAL_GPIO_Init+0x40>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d130      	bne.n	8003b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b46:	2201      	movs	r2, #1
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 0201 	and.w	r2, r3, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d017      	beq.n	8003bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	2203      	movs	r2, #3
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d123      	bne.n	8003c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	08da      	lsrs	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3208      	adds	r2, #8
 8003bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	6939      	ldr	r1, [r7, #16]
 8003bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0203 	and.w	r2, r3, #3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80ac 	beq.w	8003d9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c44:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	4a5d      	ldr	r2, [pc, #372]	; (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6193      	str	r3, [r2, #24]
 8003c50:	4b5b      	ldr	r3, [pc, #364]	; (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c5c:	4a59      	ldr	r2, [pc, #356]	; (8003dc4 <HAL_GPIO_Init+0x2f4>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c86:	d025      	beq.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a4f      	ldr	r2, [pc, #316]	; (8003dc8 <HAL_GPIO_Init+0x2f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01f      	beq.n	8003cd0 <HAL_GPIO_Init+0x200>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_GPIO_Init+0x2fc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d019      	beq.n	8003ccc <HAL_GPIO_Init+0x1fc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a4d      	ldr	r2, [pc, #308]	; (8003dd0 <HAL_GPIO_Init+0x300>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_GPIO_Init+0x1f8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a4c      	ldr	r2, [pc, #304]	; (8003dd4 <HAL_GPIO_Init+0x304>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_GPIO_Init+0x1f4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <HAL_GPIO_Init+0x308>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <HAL_GPIO_Init+0x1f0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	; (8003ddc <HAL_GPIO_Init+0x30c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <HAL_GPIO_Init+0x1ec>
 8003cb8:	2306      	movs	r3, #6
 8003cba:	e00c      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cbc:	2307      	movs	r3, #7
 8003cbe:	e00a      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	e008      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e006      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e004      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e002      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_GPIO_Init+0x206>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	f002 0203 	and.w	r2, r2, #3
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	4093      	lsls	r3, r2
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ce6:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_GPIO_Init+0x2f4>)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	3302      	adds	r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d18:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <HAL_GPIO_Init+0x310>)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f47f ae97 	bne.w	8003ae0 <HAL_GPIO_Init+0x10>
  }
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	48000400 	.word	0x48000400
 8003dcc:	48000800 	.word	0x48000800
 8003dd0:	48000c00 	.word	0x48000c00
 8003dd4:	48001000 	.word	0x48001000
 8003dd8:	48001400 	.word	0x48001400
 8003ddc:	48001800 	.word	0x48001800
 8003de0:	40010400 	.word	0x40010400

08003de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e001      	b.n	8003e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f001 b83a 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 816f 	beq.w	800415e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e80:	4bb5      	ldr	r3, [pc, #724]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4bb2      	ldr	r3, [pc, #712]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d15c      	bne.n	8003f52 <HAL_RCC_OscConfig+0x10e>
 8003e98:	4baf      	ldr	r3, [pc, #700]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d155      	bne.n	8003f52 <HAL_RCC_OscConfig+0x10e>
 8003ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x94>
 8003ed2:	4ba1      	ldr	r3, [pc, #644]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	e015      	b.n	8003f04 <HAL_RCC_OscConfig+0xc0>
 8003ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003edc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ef0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ef4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f00:	4b95      	ldr	r3, [pc, #596]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f08:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003f0c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003f10:	fa92 f2a2 	rbit	r2, r2
 8003f14:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003f18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f1c:	fab2 f282 	clz	r2, r2
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	f042 0220 	orr.w	r2, r2, #32
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	f002 021f 	and.w	r2, r2, #31
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8111 	beq.w	800415c <HAL_RCC_OscConfig+0x318>
 8003f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 8108 	bne.w	800415c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f000 bfc6 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12e>
 8003f64:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a7b      	ldr	r2, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e036      	b.n	8003fe0 <HAL_RCC_OscConfig+0x19c>
 8003f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x158>
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a74      	ldr	r2, [pc, #464]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e021      	b.n	8003fe0 <HAL_RCC_OscConfig+0x19c>
 8003f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x184>
 8003fae:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a66      	ldr	r2, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x19c>
 8003fc8:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a62      	ldr	r2, [pc, #392]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b60      	ldr	r3, [pc, #384]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d059      	beq.n	80040a4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7ff fbe4 	bl	80037bc <HAL_GetTick>
 8003ff4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffa:	f7ff fbdf 	bl	80037bc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d902      	bls.n	8004010 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	f000 bf67 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 8004010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004014:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004024:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_RCC_OscConfig+0x1fe>
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	e015      	b.n	800406e <HAL_RCC_OscConfig+0x22a>
 8004042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004046:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800405a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800405e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004072:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004076:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800407a:	fa92 f2a2 	rbit	r2, r2
 800407e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004082:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004086:	fab2 f282 	clz	r2, r2
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	f042 0220 	orr.w	r2, r2, #32
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	f002 021f 	and.w	r2, r2, #31
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ab      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1b6>
 80040a2:	e05c      	b.n	800415e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7ff fb8a 	bl	80037bc <HAL_GetTick>
 80040a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ae:	f7ff fb85 	bl	80037bc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d902      	bls.n	80040c4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	f000 bf0d 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 80040c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80040d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2b2>
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	e015      	b.n	8004122 <HAL_RCC_OscConfig+0x2de>
 80040f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800410a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004112:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_RCC_OscConfig+0x314>)
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004126:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800412a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800412e:	fa92 f2a2 	rbit	r2, r2
 8004132:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004136:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800413a:	fab2 f282 	clz	r2, r2
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	f042 0220 	orr.w	r2, r2, #32
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f002 021f 	and.w	r2, r2, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f202 	lsl.w	r2, r1, r2
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1ab      	bne.n	80040ae <HAL_RCC_OscConfig+0x26a>
 8004156:	e002      	b.n	800415e <HAL_RCC_OscConfig+0x31a>
 8004158:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 817f 	beq.w	8004472 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004174:	4ba7      	ldr	r3, [pc, #668]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00c      	beq.n	800419a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004180:	4ba4      	ldr	r3, [pc, #656]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d173      	bne.n	8004274 <HAL_RCC_OscConfig+0x430>
 800418c:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	d16c      	bne.n	8004274 <HAL_RCC_OscConfig+0x430>
 800419a:	2302      	movs	r3, #2
 800419c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80041ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0x386>
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e013      	b.n	80041f2 <HAL_RCC_OscConfig+0x3ae>
 80041ca:	2302      	movs	r3, #2
 80041cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80041dc:	2302      	movs	r3, #2
 80041de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80041e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2202      	movs	r2, #2
 80041f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80041f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80041fc:	fa92 f2a2 	rbit	r2, r2
 8004200:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004204:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCC_OscConfig+0x3f6>
 8004224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d002      	beq.n	800423a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f000 be52 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	21f8      	movs	r1, #248	; 0xf8
 8004250:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004258:	fa91 f1a1 	rbit	r1, r1
 800425c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004260:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004264:	fab1 f181 	clz	r1, r1
 8004268:	b2c9      	uxtb	r1, r1
 800426a:	408b      	lsls	r3, r1
 800426c:	4969      	ldr	r1, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004272:	e0fe      	b.n	8004472 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004278:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8088 	beq.w	8004396 <HAL_RCC_OscConfig+0x552>
 8004286:	2301      	movs	r3, #1
 8004288:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004298:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	2301      	movs	r3, #1
 80042b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7ff fa83 	bl	80037bc <HAL_GetTick>
 80042b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042bc:	f7ff fa7e 	bl	80037bc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	f000 be06 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80042e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0x4be>
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e013      	b.n	800432a <HAL_RCC_OscConfig+0x4e6>
 8004302:	2302      	movs	r3, #2
 8004304:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800431a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2202      	movs	r2, #2
 800432c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004330:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004334:	fa92 f2a2 	rbit	r2, r2
 8004338:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800433c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004340:	fab2 f282 	clz	r2, r2
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	f042 0220 	orr.w	r2, r2, #32
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	f002 021f 	and.w	r2, r2, #31
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f202 	lsl.w	r2, r1, r2
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0af      	beq.n	80042bc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004368:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	21f8      	movs	r1, #248	; 0xf8
 8004372:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800437a:	fa91 f1a1 	rbit	r1, r1
 800437e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004382:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004386:	fab1 f181 	clz	r1, r1
 800438a:	b2c9      	uxtb	r1, r1
 800438c:	408b      	lsls	r3, r1
 800438e:	4921      	ldr	r1, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e06d      	b.n	8004472 <HAL_RCC_OscConfig+0x62e>
 8004396:	2301      	movs	r3, #1
 8004398:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80043a0:	fa93 f3a3 	rbit	r3, r3
 80043a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80043a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7ff f9fb 	bl	80037bc <HAL_GetTick>
 80043c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043cc:	f7ff f9f6 	bl	80037bc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	f000 bd7e 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80043f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x5d4>
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <HAL_RCC_OscConfig+0x5d0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	e016      	b.n	8004440 <HAL_RCC_OscConfig+0x5fc>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	2302      	movs	r3, #2
 800441a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800442a:	2302      	movs	r3, #2
 800442c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004430:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800443c:	4bbf      	ldr	r3, [pc, #764]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2202      	movs	r2, #2
 8004442:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004446:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800444a:	fa92 f2a2 	rbit	r2, r2
 800444e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004452:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004456:	fab2 f282 	clz	r2, r2
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	f042 0220 	orr.w	r2, r2, #32
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	f002 021f 	and.w	r2, r2, #31
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ac      	bne.n	80043cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004476:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8113 	beq.w	80046ae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d07c      	beq.n	8004592 <HAL_RCC_OscConfig+0x74e>
 8004498:	2301      	movs	r3, #1
 800449a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80044aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	4ba2      	ldr	r3, [pc, #648]	; (8004740 <HAL_RCC_OscConfig+0x8fc>)
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	461a      	mov	r2, r3
 80044be:	2301      	movs	r3, #1
 80044c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7ff f97b 	bl	80037bc <HAL_GetTick>
 80044c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044cc:	f7ff f976 	bl	80037bc <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d902      	bls.n	80044e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	f000 bcfe 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 80044e2:	2302      	movs	r3, #2
 80044e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ec:	fa93 f2a3 	rbit	r2, r3
 80044f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004502:	2202      	movs	r2, #2
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	fa93 f2a3 	rbit	r2, r3
 8004514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004526:	2202      	movs	r2, #2
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800452e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800453c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004540:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	4b7e      	ldr	r3, [pc, #504]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 8004544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800454a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800454e:	2102      	movs	r1, #2
 8004550:	6019      	str	r1, [r3, #0]
 8004552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004556:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	fa93 f1a3 	rbit	r1, r3
 8004560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004564:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004568:	6019      	str	r1, [r3, #0]
  return result;
 800456a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800456e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d09d      	beq.n	80044cc <HAL_RCC_OscConfig+0x688>
 8004590:	e08d      	b.n	80046ae <HAL_RCC_OscConfig+0x86a>
 8004592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004596:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	fa93 f2a3 	rbit	r2, r3
 80045ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80045b4:	601a      	str	r2, [r3, #0]
  return result;
 80045b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80045be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x8fc>)
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7ff f8f2 	bl	80037bc <HAL_GetTick>
 80045d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045de:	f7ff f8ed 	bl	80037bc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d902      	bls.n	80045f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	f000 bc75 	b.w	8004ede <HAL_RCC_OscConfig+0x109a>
 80045f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80045fc:	2202      	movs	r2, #2
 80045fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004604:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	fa93 f2a3 	rbit	r2, r3
 800460e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004620:	2202      	movs	r2, #2
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	fa93 f2a3 	rbit	r2, r3
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004640:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004644:	2202      	movs	r2, #2
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800464c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800465e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004668:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800466c:	2102      	movs	r1, #2
 800466e:	6019      	str	r1, [r3, #0]
 8004670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004674:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f1a3 	rbit	r1, r3
 800467e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004682:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004686:	6019      	str	r1, [r3, #0]
  return result;
 8004688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2101      	movs	r1, #1
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d197      	bne.n	80045de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 81a5 	beq.w	8004a0e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d116      	bne.n	8004704 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	61d3      	str	r3, [r2, #28]
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <HAL_RCC_OscConfig+0x8f8>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80046ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCC_OscConfig+0x900>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d121      	bne.n	8004754 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_RCC_OscConfig+0x900>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x900>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471c:	f7ff f84e 	bl	80037bc <HAL_GetTick>
 8004720:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e010      	b.n	8004748 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7ff f849 	bl	80037bc <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d908      	bls.n	8004748 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e3d1      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	10908120 	.word	0x10908120
 8004744:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b8d      	ldr	r3, [pc, #564]	; (8004980 <HAL_RCC_OscConfig+0xb3c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0e8      	beq.n	8004726 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004758:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x92e>
 8004764:	4b87      	ldr	r3, [pc, #540]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4a86      	ldr	r2, [pc, #536]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6213      	str	r3, [r2, #32]
 8004770:	e035      	b.n	80047de <HAL_RCC_OscConfig+0x99a>
 8004772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004776:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x958>
 8004782:	4b80      	ldr	r3, [pc, #512]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a7f      	ldr	r2, [pc, #508]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	e020      	b.n	80047de <HAL_RCC_OscConfig+0x99a>
 800479c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x982>
 80047ac:	4b75      	ldr	r3, [pc, #468]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4a74      	ldr	r2, [pc, #464]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6213      	str	r3, [r2, #32]
 80047b8:	4b72      	ldr	r3, [pc, #456]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4a71      	ldr	r2, [pc, #452]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6213      	str	r3, [r2, #32]
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x99a>
 80047c6:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4a6e      	ldr	r2, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6213      	str	r3, [r2, #32]
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4a6b      	ldr	r2, [pc, #428]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8081 	beq.w	80048f2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fe ffe4 	bl	80037bc <HAL_GetTick>
 80047f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fe ffdf 	bl	80037bc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e365      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 8004812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004816:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800481a:	2202      	movs	r2, #2
 800481c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004822:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004830:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800483a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800483e:	2202      	movs	r2, #2
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004846:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	fa93 f2a3 	rbit	r2, r3
 8004850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004854:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004858:	601a      	str	r2, [r3, #0]
  return result;
 800485a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004862:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d102      	bne.n	800487e <HAL_RCC_OscConfig+0xa3a>
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	e013      	b.n	80048a6 <HAL_RCC_OscConfig+0xa62>
 800487e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004882:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004886:	2202      	movs	r2, #2
 8004888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	fa93 f2a3 	rbit	r2, r3
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048ae:	2102      	movs	r1, #2
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	fa92 f1a2 	rbit	r1, r2
 80048c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048c4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80048c8:	6011      	str	r1, [r2, #0]
  return result;
 80048ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048ce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	fab2 f282 	clz	r2, r2
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	f002 021f 	and.w	r2, r2, #31
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f202 	lsl.w	r2, r1, r2
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d084      	beq.n	80047fa <HAL_RCC_OscConfig+0x9b6>
 80048f0:	e083      	b.n	80049fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe ff63 	bl	80037bc <HAL_GetTick>
 80048f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fe ff5e 	bl	80037bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e2e4      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 8004914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004918:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800491c:	2202      	movs	r2, #2
 800491e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004924:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004932:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004940:	2202      	movs	r2, #2
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004956:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800495a:	601a      	str	r2, [r3, #0]
  return result;
 800495c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004960:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004964:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0xb44>
 800497a:	4b02      	ldr	r3, [pc, #8]	; (8004984 <HAL_RCC_OscConfig+0xb40>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	e017      	b.n	80049b0 <HAL_RCC_OscConfig+0xb6c>
 8004980:	40007000 	.word	0x40007000
 8004984:	40021000 	.word	0x40021000
 8004988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800498c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004990:	2202      	movs	r2, #2
 8004992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004998:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	fa93 f2a3 	rbit	r2, r3
 80049a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	4bb3      	ldr	r3, [pc, #716]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049b8:	2102      	movs	r1, #2
 80049ba:	6011      	str	r1, [r2, #0]
 80049bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	fa92 f1a2 	rbit	r1, r2
 80049ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049ce:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80049d2:	6011      	str	r1, [r2, #0]
  return result;
 80049d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049d8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	fab2 f282 	clz	r2, r2
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	f002 021f 	and.w	r2, r2, #31
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d180      	bne.n	80048fc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049fa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a02:	4b9e      	ldr	r3, [pc, #632]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4a9d      	ldr	r2, [pc, #628]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 825e 	beq.w	8004edc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a20:	4b96      	ldr	r3, [pc, #600]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	f000 821f 	beq.w	8004e6c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	f040 8170 	bne.w	8004d20 <HAL_RCC_OscConfig+0xedc>
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	fa93 f2a3 	rbit	r2, r3
 8004a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a64:	601a      	str	r2, [r3, #0]
  return result;
 8004a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004a6e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fe fe99 	bl	80037bc <HAL_GetTick>
 8004a8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8e:	e009      	b.n	8004aa4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fe fe94 	bl	80037bc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e21c      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 8004aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	fa93 f2a3 	rbit	r2, r3
 8004ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ac8:	601a      	str	r2, [r3, #0]
  return result;
 8004aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ace:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ad2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_OscConfig+0xcaa>
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	e027      	b.n	8004b3e <HAL_RCC_OscConfig+0xcfa>
 8004aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b00:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	fa93 f2a3 	rbit	r2, r3
 8004b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b26:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	fa93 f2a3 	rbit	r2, r3
 8004b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b34:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b4a:	6011      	str	r1, [r2, #0]
 8004b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b50:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	fa92 f1a2 	rbit	r1, r2
 8004b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b5e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004b62:	6011      	str	r1, [r2, #0]
  return result;
 8004b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b68:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	fab2 f282 	clz	r2, r2
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	f002 021f 	and.w	r2, r2, #31
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d182      	bne.n	8004a90 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	4937      	ldr	r1, [pc, #220]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a19      	ldr	r1, [r3, #32]
 8004bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	492d      	ldr	r1, [pc, #180]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
 8004bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	fa93 f2a3 	rbit	r2, r3
 8004be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004bf0:	601a      	str	r2, [r3, #0]
  return result;
 8004bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004bfa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bfc:	fab3 f383 	clz	r3, r3
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2301      	movs	r3, #1
 8004c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe fdd3 	bl	80037bc <HAL_GetTick>
 8004c16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c1a:	e009      	b.n	8004c30 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fe fdce 	bl	80037bc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e156      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 8004c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c34:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	fa93 f2a3 	rbit	r2, r3
 8004c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c54:	601a      	str	r2, [r3, #0]
  return result;
 8004c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCC_OscConfig+0xe3c>
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <HAL_RCC_OscConfig+0xe38>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	e02a      	b.n	8004cd0 <HAL_RCC_OscConfig+0xe8c>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	fa93 f2a3 	rbit	r2, r3
 8004c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004caa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	fa93 f2a3 	rbit	r2, r3
 8004cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	4b86      	ldr	r3, [pc, #536]	; (8004ee8 <HAL_RCC_OscConfig+0x10a4>)
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cd4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ce2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	fa92 f1a2 	rbit	r1, r2
 8004cec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cf0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004cf4:	6011      	str	r1, [r2, #0]
  return result;
 8004cf6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cfa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	fab2 f282 	clz	r2, r2
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	f042 0220 	orr.w	r2, r2, #32
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	f002 021f 	and.w	r2, r2, #31
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f202 	lsl.w	r2, r1, r2
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f43f af7f 	beq.w	8004c1c <HAL_RCC_OscConfig+0xdd8>
 8004d1e:	e0dd      	b.n	8004edc <HAL_RCC_OscConfig+0x1098>
 8004d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fa93 f2a3 	rbit	r2, r3
 8004d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d44:	601a      	str	r2, [r3, #0]
  return result;
 8004d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d4e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fe fd29 	bl	80037bc <HAL_GetTick>
 8004d6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6e:	e009      	b.n	8004d84 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fe fd24 	bl	80037bc <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e0ac      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
 8004d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	fa93 f2a3 	rbit	r2, r3
 8004da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004da8:	601a      	str	r2, [r3, #0]
  return result;
 8004daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004db2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d102      	bne.n	8004dce <HAL_RCC_OscConfig+0xf8a>
 8004dc8:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCC_OscConfig+0x10a4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	e027      	b.n	8004e1e <HAL_RCC_OscConfig+0xfda>
 8004dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	fa93 f2a3 	rbit	r2, r3
 8004dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	fa93 f2a3 	rbit	r2, r3
 8004e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e14:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCC_OscConfig+0x10a4>)
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e2a:	6011      	str	r1, [r2, #0]
 8004e2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	fa92 f1a2 	rbit	r1, r2
 8004e3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e3e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004e42:	6011      	str	r1, [r2, #0]
  return result;
 8004e44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e48:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	fab2 f282 	clz	r2, r2
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	f042 0220 	orr.w	r2, r2, #32
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	f002 021f 	and.w	r2, r2, #31
 8004e5e:	2101      	movs	r1, #1
 8004e60:	fa01 f202 	lsl.w	r2, r1, r2
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d182      	bne.n	8004d70 <HAL_RCC_OscConfig+0xf2c>
 8004e6a:	e037      	b.n	8004edc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e02e      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_OscConfig+0x10a4>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_RCC_OscConfig+0x10a4>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e94:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d117      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000

08004eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b09e      	sub	sp, #120	; 0x78
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e162      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b90      	ldr	r3, [pc, #576]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d910      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b8d      	ldr	r3, [pc, #564]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 0207 	bic.w	r2, r3, #7
 8004f1a:	498b      	ldr	r1, [pc, #556]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b89      	ldr	r3, [pc, #548]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e14a      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	497f      	ldr	r1, [pc, #508]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80dc 	beq.w	8005118 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d13c      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xf6>
 8004f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xa6>
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	e00f      	b.n	8004fb2 <HAL_RCC_ClockConfig+0xc6>
 8004f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fae:	4b67      	ldr	r3, [pc, #412]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fba:	fa92 f2a2 	rbit	r2, r2
 8004fbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fc2:	fab2 f282 	clz	r2, r2
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	f042 0220 	orr.w	r2, r2, #32
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	f002 021f 	and.w	r2, r2, #31
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d17b      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0f3      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d13c      	bne.n	8005064 <HAL_RCC_ClockConfig+0x178>
 8004fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d102      	bne.n	8005014 <HAL_RCC_ClockConfig+0x128>
 800500e:	4b4f      	ldr	r3, [pc, #316]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	e00f      	b.n	8005034 <HAL_RCC_ClockConfig+0x148>
 8005014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	647b      	str	r3, [r7, #68]	; 0x44
 8005022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	fa93 f3a3 	rbit	r3, r3
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005030:	4b46      	ldr	r3, [pc, #280]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005038:	63ba      	str	r2, [r7, #56]	; 0x38
 800503a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503c:	fa92 f2a2 	rbit	r2, r2
 8005040:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005044:	fab2 f282 	clz	r2, r2
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f042 0220 	orr.w	r2, r2, #32
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	f002 021f 	and.w	r2, r2, #31
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f202 	lsl.w	r2, r1, r2
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d13a      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b2      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
 8005064:	2302      	movs	r3, #2
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_ClockConfig+0x1a0>
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e00d      	b.n	80050a8 <HAL_RCC_ClockConfig+0x1bc>
 800508c:	2302      	movs	r3, #2
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	2302      	movs	r3, #2
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2202      	movs	r2, #2
 80050aa:	61ba      	str	r2, [r7, #24]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	fa92 f2a2 	rbit	r2, r2
 80050b2:	617a      	str	r2, [r7, #20]
  return result;
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	fab2 f282 	clz	r2, r2
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	f042 0220 	orr.w	r2, r2, #32
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	f002 021f 	and.w	r2, r2, #31
 80050c6:	2101      	movs	r1, #1
 80050c8:	fa01 f202 	lsl.w	r2, r1, r2
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e079      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	491a      	ldr	r1, [pc, #104]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fe fb68 	bl	80037bc <HAL_GetTick>
 80050ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fe fb64 	bl	80037bc <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e061      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_ClockConfig+0x260>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 020c 	and.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d1eb      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d214      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 0207 	bic.w	r2, r3, #7
 800512e:	4906      	ldr	r1, [pc, #24]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <HAL_RCC_ClockConfig+0x25c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e040      	b.n	80051ca <HAL_RCC_ClockConfig+0x2de>
 8005148:	40022000 	.word	0x40022000
 800514c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_RCC_ClockConfig+0x2e8>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	491a      	ldr	r1, [pc, #104]	; (80051d4 <HAL_RCC_ClockConfig+0x2e8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <HAL_RCC_ClockConfig+0x2e8>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4912      	ldr	r1, [pc, #72]	; (80051d4 <HAL_RCC_ClockConfig+0x2e8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800518e:	f000 f829 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8005192:	4601      	mov	r1, r0
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <HAL_RCC_ClockConfig+0x2e8>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800519c:	22f0      	movs	r2, #240	; 0xf0
 800519e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	fa92 f2a2 	rbit	r2, r2
 80051a6:	60fa      	str	r2, [r7, #12]
  return result;
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	fab2 f282 	clz	r2, r2
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	40d3      	lsrs	r3, r2
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_RCC_ClockConfig+0x2ec>)
 80051b4:	5cd3      	ldrb	r3, [r2, r3]
 80051b6:	fa21 f303 	lsr.w	r3, r1, r3
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <HAL_RCC_ClockConfig+0x2f0>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <HAL_RCC_ClockConfig+0x2f4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fc fafc 	bl	80017c0 <HAL_InitTick>
  
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3778      	adds	r7, #120	; 0x78
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	0800f2b0 	.word	0x0800f2b0
 80051dc:	20000060 	.word	0x20000060
 80051e0:	20000090 	.word	0x20000090

080051e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b08b      	sub	sp, #44	; 0x2c
 80051e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b04      	cmp	r3, #4
 800520c:	d002      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x30>
 800520e:	2b08      	cmp	r3, #8
 8005210:	d003      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x36>
 8005212:	e03f      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005216:	623b      	str	r3, [r7, #32]
      break;
 8005218:	e03f      	b.n	800529a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005220:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005224:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	fa92 f2a2 	rbit	r2, r2
 800522c:	607a      	str	r2, [r7, #4]
  return result;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	fab2 f282 	clz	r2, r2
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	40d3      	lsrs	r3, r2
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800523e:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	220f      	movs	r2, #15
 8005248:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	fa92 f2a2 	rbit	r2, r2
 8005250:	60fa      	str	r2, [r7, #12]
  return result;
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	fab2 f282 	clz	r2, r2
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	40d3      	lsrs	r3, r2
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800525e:	5cd3      	ldrb	r3, [r2, r3]
 8005260:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800526c:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	fbb2 f2f3 	udiv	r2, r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	e007      	b.n	800528e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	fbb2 f2f3 	udiv	r2, r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	623b      	str	r3, [r7, #32]
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005296:	623b      	str	r3, [r7, #32]
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	6a3b      	ldr	r3, [r7, #32]
}
 800529c:	4618      	mov	r0, r3
 800529e:	372c      	adds	r7, #44	; 0x2c
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	0800f2c8 	.word	0x0800f2c8
 80052b4:	0800f2d8 	.word	0x0800f2d8

080052b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCC_GetHCLKFreq+0x14>)
 80052be:	681b      	ldr	r3, [r3, #0]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000060 	.word	0x20000060

080052d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052d6:	f7ff ffef 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 80052da:	4601      	mov	r1, r0
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	fa92 f2a2 	rbit	r2, r2
 80052f0:	603a      	str	r2, [r7, #0]
  return result;
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	fab2 f282 	clz	r2, r2
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	40d3      	lsrs	r3, r2
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x40>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	0800f2c0 	.word	0x0800f2c0

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800531a:	f7ff ffcd 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 800531e:	4601      	mov	r1, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005328:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800532c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	fa92 f2a2 	rbit	r2, r2
 8005334:	603a      	str	r2, [r7, #0]
  return result;
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	fab2 f282 	clz	r2, r2
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	40d3      	lsrs	r3, r2
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	0800f2c0 	.word	0x0800f2c0

08005358 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	220f      	movs	r2, #15
 8005366:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 0203 	and.w	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	08db      	lsrs	r3, r3, #3
 8005392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <HAL_RCC_GetClockConfig+0x60>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40022000 	.word	0x40022000

080053bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b092      	sub	sp, #72	; 0x48
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80d4 	beq.w	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e0:	4b4e      	ldr	r3, [pc, #312]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ec:	4b4b      	ldr	r3, [pc, #300]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4a4a      	ldr	r2, [pc, #296]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	61d3      	str	r3, [r2, #28]
 80053f8:	4b48      	ldr	r3, [pc, #288]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540a:	4b45      	ldr	r3, [pc, #276]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d118      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005416:	4b42      	ldr	r3, [pc, #264]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a41      	ldr	r2, [pc, #260]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005422:	f7fe f9cb 	bl	80037bc <HAL_GetTick>
 8005426:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fe f9c7 	bl	80037bc <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e1d6      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8084 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005464:	429a      	cmp	r2, r3
 8005466:	d07c      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005468:	4b2c      	ldr	r3, [pc, #176]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	461a      	mov	r2, r3
 8005492:	2301      	movs	r3, #1
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	fa93 f3a3 	rbit	r3, r3
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	461a      	mov	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054ba:	4a18      	ldr	r2, [pc, #96]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04b      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fe f977 	bl	80037bc <HAL_GetTick>
 80054ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d0:	e00a      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fe f973 	bl	80037bc <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e180      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80054e8:	2302      	movs	r3, #2
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	2302      	movs	r3, #2
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005500:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d108      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005516:	4b01      	ldr	r3, [pc, #4]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	e00d      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800551c:	40021000 	.word	0x40021000
 8005520:	40007000 	.word	0x40007000
 8005524:	10908100 	.word	0x10908100
 8005528:	2302      	movs	r3, #2
 800552a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	4b9a      	ldr	r3, [pc, #616]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2202      	movs	r2, #2
 800553a:	613a      	str	r2, [r7, #16]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	fa92 f2a2 	rbit	r2, r2
 8005542:	60fa      	str	r2, [r7, #12]
  return result;
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	fab2 f282 	clz	r2, r2
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	f002 021f 	and.w	r2, r2, #31
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f202 	lsl.w	r2, r1, r2
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0b7      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005562:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	498c      	ldr	r1, [pc, #560]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005578:	2b01      	cmp	r3, #1
 800557a:	d105      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557c:	4b88      	ldr	r3, [pc, #544]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	4a87      	ldr	r2, [pc, #540]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005586:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005594:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	f023 0203 	bic.w	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	497f      	ldr	r1, [pc, #508]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b2:	4b7b      	ldr	r3, [pc, #492]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4978      	ldr	r1, [pc, #480]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	4970      	ldr	r1, [pc, #448]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ee:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f023 0210 	bic.w	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4969      	ldr	r1, [pc, #420]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800560c:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	4961      	ldr	r1, [pc, #388]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f023 0220 	bic.w	r2, r3, #32
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	495a      	ldr	r1, [pc, #360]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005638:	4313      	orrs	r3, r2
 800563a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005648:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	4952      	ldr	r1, [pc, #328]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005666:	4b4e      	ldr	r3, [pc, #312]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	494b      	ldr	r1, [pc, #300]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005684:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4943      	ldr	r1, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005692:	4313      	orrs	r3, r2
 8005694:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056a2:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	493c      	ldr	r1, [pc, #240]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	4934      	ldr	r1, [pc, #208]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d008      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80056de:	4b30      	ldr	r3, [pc, #192]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	492d      	ldr	r1, [pc, #180]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056fc:	4b28      	ldr	r3, [pc, #160]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	4925      	ldr	r1, [pc, #148]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800570a:	4313      	orrs	r3, r2
 800570c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	491e      	ldr	r1, [pc, #120]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	4916      	ldr	r1, [pc, #88]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	490f      	ldr	r1, [pc, #60]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005764:	4313      	orrs	r3, r2
 8005766:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	4907      	ldr	r1, [pc, #28]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00c      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	e002      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	4913      	ldr	r1, [pc, #76]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c4:	490b      	ldr	r1, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3748      	adds	r7, #72	; 0x48
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc fefa 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f001 f916 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04f      	b.n	8005960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_TIM_Base_Start_IT+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d018      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xcc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d115      	bne.n	800594a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_TIM_Base_Start_IT+0xdc>)
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b06      	cmp	r3, #6
 800592e:	d015      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d011      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	e008      	b.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e000      	b.n	800595e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40013400 	.word	0x40013400
 800597c:	40014000 	.word	0x40014000
 8005980:	40015000 	.word	0x40015000
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e049      	b.n	8005a2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f841 	bl	8005a36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f001 f84e 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_TIM_PWM_Start+0x24>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e03c      	b.n	8005aea <HAL_TIM_PWM_Start+0x9e>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d109      	bne.n	8005a8a <HAL_TIM_PWM_Start+0x3e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e02f      	b.n	8005aea <HAL_TIM_PWM_Start+0x9e>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d109      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0x58>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e022      	b.n	8005aea <HAL_TIM_PWM_Start+0x9e>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b0c      	cmp	r3, #12
 8005aa8:	d109      	bne.n	8005abe <HAL_TIM_PWM_Start+0x72>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e015      	b.n	8005aea <HAL_TIM_PWM_Start+0x9e>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x8c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e008      	b.n	8005aea <HAL_TIM_PWM_Start+0x9e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e0a1      	b.n	8005c36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xb6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b00:	e023      	b.n	8005b4a <HAL_TIM_PWM_Start+0xfe>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0xc6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b10:	e01b      	b.n	8005b4a <HAL_TIM_PWM_Start+0xfe>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0xd6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b20:	e013      	b.n	8005b4a <HAL_TIM_PWM_Start+0xfe>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xe6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b30:	e00b      	b.n	8005b4a <HAL_TIM_PWM_Start+0xfe>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xf6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b40:	e003      	b.n	8005b4a <HAL_TIM_PWM_Start+0xfe>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fcea 	bl	800752c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a38      	ldr	r2, [pc, #224]	; (8005c40 <HAL_TIM_PWM_Start+0x1f4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x148>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a37      	ldr	r2, [pc, #220]	; (8005c44 <HAL_TIM_PWM_Start+0x1f8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x148>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <HAL_TIM_PWM_Start+0x1fc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x148>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a34      	ldr	r2, [pc, #208]	; (8005c4c <HAL_TIM_PWM_Start+0x200>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x148>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a32      	ldr	r2, [pc, #200]	; (8005c50 <HAL_TIM_PWM_Start+0x204>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_PWM_Start+0x148>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a31      	ldr	r2, [pc, #196]	; (8005c54 <HAL_TIM_PWM_Start+0x208>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <HAL_TIM_PWM_Start+0x14c>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_TIM_PWM_Start+0x14e>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <HAL_TIM_PWM_Start+0x1f4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01d      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d018      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <HAL_TIM_PWM_Start+0x20c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_TIM_PWM_Start+0x210>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_TIM_PWM_Start+0x1f8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_TIM_PWM_Start+0x1fc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x1a8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_TIM_PWM_Start+0x208>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d115      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	4b19      	ldr	r3, [pc, #100]	; (8005c60 <HAL_TIM_PWM_Start+0x214>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d015      	beq.n	8005c32 <HAL_TIM_PWM_Start+0x1e6>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d011      	beq.n	8005c32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	e008      	b.n	8005c32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e000      	b.n	8005c34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800
 8005c54:	40015000 	.word	0x40015000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	00010007 	.word	0x00010007

08005c64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fc58 	bl	800752c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a40      	ldr	r2, [pc, #256]	; (8005d84 <HAL_TIM_PWM_Stop+0x120>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d018      	beq.n	8005cb8 <HAL_TIM_PWM_Stop+0x54>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <HAL_TIM_PWM_Stop+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <HAL_TIM_PWM_Stop+0x54>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a3d      	ldr	r2, [pc, #244]	; (8005d8c <HAL_TIM_PWM_Stop+0x128>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00e      	beq.n	8005cb8 <HAL_TIM_PWM_Stop+0x54>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3c      	ldr	r2, [pc, #240]	; (8005d90 <HAL_TIM_PWM_Stop+0x12c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d009      	beq.n	8005cb8 <HAL_TIM_PWM_Stop+0x54>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a3a      	ldr	r2, [pc, #232]	; (8005d94 <HAL_TIM_PWM_Stop+0x130>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_PWM_Stop+0x54>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a39      	ldr	r2, [pc, #228]	; (8005d98 <HAL_TIM_PWM_Stop+0x134>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIM_PWM_Stop+0x58>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_TIM_PWM_Stop+0x5a>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <HAL_TIM_PWM_Stop+0x8e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	f240 4344 	movw	r3, #1092	; 0x444
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_PWM_Stop+0x8e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10f      	bne.n	8005d22 <HAL_TIM_PWM_Stop+0xbe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	f240 4344 	movw	r3, #1092	; 0x444
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <HAL_TIM_PWM_Stop+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Stop+0xce>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	e023      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x116>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Stop+0xde>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d40:	e01b      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x116>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0xee>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d50:	e013      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x116>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_PWM_Stop+0xfe>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d60:	e00b      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x116>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_PWM_Stop+0x10e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d70:	e003      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x116>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800
 8005d98:	40015000 	.word	0x40015000

08005d9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e049      	b.n	8005e42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f841 	bl	8005e4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 fe44 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0x1e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e023      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x66>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_IC_Start_IT+0x2e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	e01b      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x66>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_IC_Start_IT+0x3e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e013      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x66>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_IC_Start_IT+0x4e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e00b      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x66>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_IC_Start_IT+0x5e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	e003      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x66>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_TIM_IC_Start_IT+0x78>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e013      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0xa0>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d104      	bne.n	8005ee8 <HAL_TIM_IC_Start_IT+0x88>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e00b      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0xa0>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d104      	bne.n	8005ef8 <HAL_TIM_IC_Start_IT+0x98>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e003      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0xa0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d102      	bne.n	8005f0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f08:	7b7b      	ldrb	r3, [r7, #13]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d001      	beq.n	8005f12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e0dd      	b.n	80060ce <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_IC_Start_IT+0xc2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f20:	e023      	b.n	8005f6a <HAL_TIM_IC_Start_IT+0x10a>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_IC_Start_IT+0xd2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f30:	e01b      	b.n	8005f6a <HAL_TIM_IC_Start_IT+0x10a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_IC_Start_IT+0xe2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f40:	e013      	b.n	8005f6a <HAL_TIM_IC_Start_IT+0x10a>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_IC_Start_IT+0xf2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f50:	e00b      	b.n	8005f6a <HAL_TIM_IC_Start_IT+0x10a>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_IC_Start_IT+0x102>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	e003      	b.n	8005f6a <HAL_TIM_IC_Start_IT+0x10a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_IC_Start_IT+0x11a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	e013      	b.n	8005fa2 <HAL_TIM_IC_Start_IT+0x142>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0x12a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f88:	e00b      	b.n	8005fa2 <HAL_TIM_IC_Start_IT+0x142>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0x13a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f98:	e003      	b.n	8005fa2 <HAL_TIM_IC_Start_IT+0x142>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d841      	bhi.n	800602c <HAL_TIM_IC_Start_IT+0x1cc>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <HAL_TIM_IC_Start_IT+0x150>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	0800602d 	.word	0x0800602d
 8005fb8:	0800602d 	.word	0x0800602d
 8005fbc:	0800602d 	.word	0x0800602d
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	0800602d 	.word	0x0800602d
 8005fcc:	0800602d 	.word	0x0800602d
 8005fd0:	08006009 	.word	0x08006009
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	0800601b 	.word	0x0800601b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0202 	orr.w	r2, r2, #2
 8005ff2:	60da      	str	r2, [r3, #12]
      break;
 8005ff4:	e01d      	b.n	8006032 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0204 	orr.w	r2, r2, #4
 8006004:	60da      	str	r2, [r3, #12]
      break;
 8006006:	e014      	b.n	8006032 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0208 	orr.w	r2, r2, #8
 8006016:	60da      	str	r2, [r3, #12]
      break;
 8006018:	e00b      	b.n	8006032 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0210 	orr.w	r2, r2, #16
 8006028:	60da      	str	r2, [r3, #12]
      break;
 800602a:	e002      	b.n	8006032 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	bf00      	nop
  }

  if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d149      	bne.n	80060cc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2201      	movs	r2, #1
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fa73 	bl	800752c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <HAL_TIM_IC_Start_IT+0x278>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01d      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d018      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_TIM_IC_Start_IT+0x27c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <HAL_TIM_IC_Start_IT+0x280>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_TIM_IC_Start_IT+0x284>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1a      	ldr	r2, [pc, #104]	; (80060e8 <HAL_TIM_IC_Start_IT+0x288>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_IC_Start_IT+0x22c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a19      	ldr	r2, [pc, #100]	; (80060ec <HAL_TIM_IC_Start_IT+0x28c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d115      	bne.n	80060b8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <HAL_TIM_IC_Start_IT+0x290>)
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d015      	beq.n	80060ca <HAL_TIM_IC_Start_IT+0x26a>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a4:	d011      	beq.n	80060ca <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	e008      	b.n	80060ca <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e000      	b.n	80060cc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40013400 	.word	0x40013400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40015000 	.word	0x40015000
 80060f0:	00010007 	.word	0x00010007

080060f4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b0c      	cmp	r3, #12
 8006106:	d841      	bhi.n	800618c <HAL_TIM_IC_Stop_IT+0x98>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <HAL_TIM_IC_Stop_IT+0x1c>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006145 	.word	0x08006145
 8006114:	0800618d 	.word	0x0800618d
 8006118:	0800618d 	.word	0x0800618d
 800611c:	0800618d 	.word	0x0800618d
 8006120:	08006157 	.word	0x08006157
 8006124:	0800618d 	.word	0x0800618d
 8006128:	0800618d 	.word	0x0800618d
 800612c:	0800618d 	.word	0x0800618d
 8006130:	08006169 	.word	0x08006169
 8006134:	0800618d 	.word	0x0800618d
 8006138:	0800618d 	.word	0x0800618d
 800613c:	0800618d 	.word	0x0800618d
 8006140:	0800617b 	.word	0x0800617b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0202 	bic.w	r2, r2, #2
 8006152:	60da      	str	r2, [r3, #12]
      break;
 8006154:	e01d      	b.n	8006192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	60da      	str	r2, [r3, #12]
      break;
 8006166:	e014      	b.n	8006192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0208 	bic.w	r2, r2, #8
 8006176:	60da      	str	r2, [r3, #12]
      break;
 8006178:	e00b      	b.n	8006192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0210 	bic.w	r2, r2, #16
 8006188:	60da      	str	r2, [r3, #12]
      break;
 800618a:	e002      	b.n	8006192 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      break;
 8006190:	bf00      	nop
  }

  if (status == HAL_OK)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d166      	bne.n	8006266 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2200      	movs	r2, #0
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f9c3 	bl	800752c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	f240 4344 	movw	r3, #1092	; 0x444
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d107      	bne.n	80061d6 <HAL_TIM_IC_Stop_IT+0xe2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_IC_Stop_IT+0xf2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e4:	e023      	b.n	800622e <HAL_TIM_IC_Stop_IT+0x13a>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_IC_Stop_IT+0x102>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f4:	e01b      	b.n	800622e <HAL_TIM_IC_Stop_IT+0x13a>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_IC_Stop_IT+0x112>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006204:	e013      	b.n	800622e <HAL_TIM_IC_Stop_IT+0x13a>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b0c      	cmp	r3, #12
 800620a:	d104      	bne.n	8006216 <HAL_TIM_IC_Stop_IT+0x122>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006214:	e00b      	b.n	800622e <HAL_TIM_IC_Stop_IT+0x13a>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b10      	cmp	r3, #16
 800621a:	d104      	bne.n	8006226 <HAL_TIM_IC_Stop_IT+0x132>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006224:	e003      	b.n	800622e <HAL_TIM_IC_Stop_IT+0x13a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_IC_Stop_IT+0x14a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	e013      	b.n	8006266 <HAL_TIM_IC_Stop_IT+0x172>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_IC_Stop_IT+0x15a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624c:	e00b      	b.n	8006266 <HAL_TIM_IC_Stop_IT+0x172>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_IC_Stop_IT+0x16a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800625c:	e003      	b.n	8006266 <HAL_TIM_IC_Stop_IT+0x172>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d122      	bne.n	80062cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b02      	cmp	r3, #2
 8006292:	d11b      	bne.n	80062cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0202 	mvn.w	r2, #2
 800629c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fd f8cc 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fbb6 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fbbd 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d122      	bne.n	8006320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d11b      	bne.n	8006320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0204 	mvn.w	r2, #4
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fd f8a2 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fb8c 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb93 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b08      	cmp	r3, #8
 800632c:	d122      	bne.n	8006374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b08      	cmp	r3, #8
 800633a:	d11b      	bne.n	8006374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0208 	mvn.w	r2, #8
 8006344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2204      	movs	r2, #4
 800634a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fd f878 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 8006360:	e005      	b.n	800636e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fb62 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb69 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	d122      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b10      	cmp	r3, #16
 800638e:	d11b      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0210 	mvn.w	r2, #16
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2208      	movs	r2, #8
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fd f84e 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fb38 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb3f 	bl	8006a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d10e      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d107      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0201 	mvn.w	r2, #1
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb f9a6 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b80      	cmp	r3, #128	; 0x80
 8006400:	d10e      	bne.n	8006420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b80      	cmp	r3, #128	; 0x80
 800640e:	d107      	bne.n	8006420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f9c8 	bl	80077b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d10e      	bne.n	800644e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d107      	bne.n	800644e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f9bb 	bl	80077c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d10e      	bne.n	800647a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d107      	bne.n	800647a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 faed 	bl	8006a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b20      	cmp	r3, #32
 8006486:	d10e      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d107      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f06f 0220 	mvn.w	r2, #32
 800649e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 f97b 	bl	800779c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e088      	b.n	80065de <HAL_TIM_IC_ConfigChannel+0x130>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11b      	bne.n	8006512 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80064ea:	f000 fe61 	bl	80071b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 020c 	bic.w	r2, r2, #12
 80064fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6999      	ldr	r1, [r3, #24]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	619a      	str	r2, [r3, #24]
 8006510:	e060      	b.n	80065d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b04      	cmp	r3, #4
 8006516:	d11c      	bne.n	8006552 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006528:	f000 fedf 	bl	80072ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800653a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
 8006550:	e040      	b.n	80065d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d11b      	bne.n	8006590 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006568:	f000 ff2c 	bl	80073c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 020c 	bic.w	r2, r2, #12
 800657a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69d9      	ldr	r1, [r3, #28]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	61da      	str	r2, [r3, #28]
 800658e:	e021      	b.n	80065d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b0c      	cmp	r3, #12
 8006594:	d11c      	bne.n	80065d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80065a6:	f000 ff49 	bl	800743c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69d9      	ldr	r1, [r3, #28]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	021a      	lsls	r2, r3, #8
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	61da      	str	r2, [r3, #28]
 80065ce:	e001      	b.n	80065d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006602:	2302      	movs	r3, #2
 8006604:	e0ff      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b14      	cmp	r3, #20
 8006612:	f200 80f0 	bhi.w	80067f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006671 	.word	0x08006671
 8006620:	080067f7 	.word	0x080067f7
 8006624:	080067f7 	.word	0x080067f7
 8006628:	080067f7 	.word	0x080067f7
 800662c:	080066b1 	.word	0x080066b1
 8006630:	080067f7 	.word	0x080067f7
 8006634:	080067f7 	.word	0x080067f7
 8006638:	080067f7 	.word	0x080067f7
 800663c:	080066f3 	.word	0x080066f3
 8006640:	080067f7 	.word	0x080067f7
 8006644:	080067f7 	.word	0x080067f7
 8006648:	080067f7 	.word	0x080067f7
 800664c:	08006733 	.word	0x08006733
 8006650:	080067f7 	.word	0x080067f7
 8006654:	080067f7 	.word	0x080067f7
 8006658:	080067f7 	.word	0x080067f7
 800665c:	08006775 	.word	0x08006775
 8006660:	080067f7 	.word	0x080067f7
 8006664:	080067f7 	.word	0x080067f7
 8006668:	080067f7 	.word	0x080067f7
 800666c:	080067b5 	.word	0x080067b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fa94 	bl	8006ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0208 	orr.w	r2, r2, #8
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0204 	bic.w	r2, r2, #4
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	619a      	str	r2, [r3, #24]
      break;
 80066ae:	e0a5      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fb0e 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	021a      	lsls	r2, r3, #8
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	619a      	str	r2, [r3, #24]
      break;
 80066f0:	e084      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fb81 	bl	8006e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0208 	orr.w	r2, r2, #8
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0204 	bic.w	r2, r2, #4
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	61da      	str	r2, [r3, #28]
      break;
 8006730:	e064      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fbf3 	bl	8006f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69d9      	ldr	r1, [r3, #28]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	021a      	lsls	r2, r3, #8
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]
      break;
 8006772:	e043      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fc42 	bl	8007004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0204 	bic.w	r2, r2, #4
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067b2:	e023      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fc8c 	bl	80070d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f4:	e002      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
      break;
 80067fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop

08006810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_TIM_ConfigClockSource+0x1c>
 8006828:	2302      	movs	r3, #2
 800682a:	e0b6      	b.n	800699a <HAL_TIM_ConfigClockSource+0x18a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800684e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d03e      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0xd8>
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686e:	f200 8087 	bhi.w	8006980 <HAL_TIM_ConfigClockSource+0x170>
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	f000 8086 	beq.w	8006986 <HAL_TIM_ConfigClockSource+0x176>
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687e:	d87f      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 8006880:	2b70      	cmp	r3, #112	; 0x70
 8006882:	d01a      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xaa>
 8006884:	2b70      	cmp	r3, #112	; 0x70
 8006886:	d87b      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 8006888:	2b60      	cmp	r3, #96	; 0x60
 800688a:	d050      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x11e>
 800688c:	2b60      	cmp	r3, #96	; 0x60
 800688e:	d877      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 8006890:	2b50      	cmp	r3, #80	; 0x50
 8006892:	d03c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xfe>
 8006894:	2b50      	cmp	r3, #80	; 0x50
 8006896:	d873      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d058      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x13e>
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d86f      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 80068a0:	2b30      	cmp	r3, #48	; 0x30
 80068a2:	d064      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15e>
 80068a4:	2b30      	cmp	r3, #48	; 0x30
 80068a6:	d86b      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d060      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15e>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d867      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d05c      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15e>
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d05a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15e>
 80068b8:	e062      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068ca:	f000 fe0f 	bl	80074ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	609a      	str	r2, [r3, #8]
      break;
 80068e6:	e04f      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f8:	f000 fdf8 	bl	80074ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800690a:	609a      	str	r2, [r3, #8]
      break;
 800690c:	e03c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 fcb6 	bl	800728c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2150      	movs	r1, #80	; 0x50
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fdc5 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 800692c:	e02c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fd12 	bl	8007364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2160      	movs	r1, #96	; 0x60
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fdb5 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 800694c:	e01c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695a:	461a      	mov	r2, r3
 800695c:	f000 fc96 	bl	800728c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fda5 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 800696c:	e00c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4619      	mov	r1, r3
 8006978:	4610      	mov	r0, r2
 800697a:	f000 fd9c 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 800697e:	e003      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      break;
 8006984:	e000      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d831      	bhi.n	8006a1c <HAL_TIM_ReadCapturedValue+0x78>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069f5 	.word	0x080069f5
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	080069ff 	.word	0x080069ff
 80069d4:	08006a1d 	.word	0x08006a1d
 80069d8:	08006a1d 	.word	0x08006a1d
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a1d 	.word	0x08006a1d
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a13 	.word	0x08006a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	60fb      	str	r3, [r7, #12]

      break;
 80069fc:	e00f      	b.n	8006a1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	60fb      	str	r3, [r7, #12]

      break;
 8006a06:	e00a      	b.n	8006a1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	60fb      	str	r3, [r7, #12]

      break;
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	60fb      	str	r3, [r7, #12]

      break;
 8006a1a:	e000      	b.n	8006a1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a1c:	bf00      	nop
  }

  return tmpreg;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a42      	ldr	r2, [pc, #264]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d00f      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <TIM_Base_SetConfig+0x120>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a3e      	ldr	r2, [pc, #248]	; (8006b8c <TIM_Base_SetConfig+0x124>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a3d      	ldr	r2, [pc, #244]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3c      	ldr	r2, [pc, #240]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d108      	bne.n	8006aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a31      	ldr	r2, [pc, #196]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01f      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d01b      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <TIM_Base_SetConfig+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d017      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2d      	ldr	r2, [pc, #180]	; (8006b8c <TIM_Base_SetConfig+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00f      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_Base_SetConfig+0x130>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00b      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <TIM_Base_SetConfig+0x134>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d007      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_Base_SetConfig+0x138>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a25      	ldr	r2, [pc, #148]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d108      	bne.n	8006b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a12      	ldr	r2, [pc, #72]	; (8006b84 <TIM_Base_SetConfig+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d013      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <TIM_Base_SetConfig+0x128>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <TIM_Base_SetConfig+0x130>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a12      	ldr	r2, [pc, #72]	; (8006b9c <TIM_Base_SetConfig+0x134>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <TIM_Base_SetConfig+0x138>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0x100>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <TIM_Base_SetConfig+0x12c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d103      	bne.n	8006b70 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	615a      	str	r2, [r3, #20]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40015000 	.word	0x40015000
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <TIM_OC1_SetConfig+0x11c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <TIM_OC1_SetConfig+0x120>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <TIM_OC1_SetConfig+0x124>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <TIM_OC1_SetConfig+0x128>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <TIM_OC1_SetConfig+0x12c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC1_SetConfig+0x88>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a2b      	ldr	r2, [pc, #172]	; (8006cd4 <TIM_OC1_SetConfig+0x130>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10c      	bne.n	8006c46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0308 	bic.w	r3, r3, #8
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f023 0304 	bic.w	r3, r3, #4
 8006c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <TIM_OC1_SetConfig+0x11c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <TIM_OC1_SetConfig+0x120>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <TIM_OC1_SetConfig+0x124>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <TIM_OC1_SetConfig+0x128>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <TIM_OC1_SetConfig+0x12c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_OC1_SetConfig+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <TIM_OC1_SetConfig+0x130>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800
 8006cd4:	40015000 	.word	0x40015000

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC2_SetConfig+0x74>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <TIM_OC2_SetConfig+0x114>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC2_SetConfig+0x74>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <TIM_OC2_SetConfig+0x118>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10d      	bne.n	8006d68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d013      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <TIM_OC2_SetConfig+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <TIM_OC2_SetConfig+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <TIM_OC2_SetConfig+0x120>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <TIM_OC2_SetConfig+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC2_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <TIM_OC2_SetConfig+0x118>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d113      	bne.n	8006dc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006da6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40015000 	.word	0x40015000
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40014400 	.word	0x40014400
 8006dfc:	40014800 	.word	0x40014800

08006e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <TIM_OC3_SetConfig+0x10c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_OC3_SetConfig+0x72>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <TIM_OC3_SetConfig+0x110>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC3_SetConfig+0x72>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <TIM_OC3_SetConfig+0x114>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10d      	bne.n	8006e8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <TIM_OC3_SetConfig+0x10c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <TIM_OC3_SetConfig+0x110>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <TIM_OC3_SetConfig+0x118>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <TIM_OC3_SetConfig+0x11c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <TIM_OC3_SetConfig+0x120>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0xbe>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <TIM_OC3_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d113      	bne.n	8006ee6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40015000 	.word	0x40015000
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	031b      	lsls	r3, r3, #12
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <TIM_OC4_SetConfig+0xc8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <TIM_OC4_SetConfig+0xcc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00f      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_OC4_SetConfig+0xd0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <TIM_OC4_SetConfig+0xd4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d007      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <TIM_OC4_SetConfig+0xd8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x8c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <TIM_OC4_SetConfig+0xdc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d109      	bne.n	8006fc4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	019b      	lsls	r3, r3, #6
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40013400 	.word	0x40013400
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400
 8006ffc:	40014800 	.word	0x40014800
 8007000:	40015000 	.word	0x40015000

08007004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <TIM_OC5_SetConfig+0xbc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a18      	ldr	r2, [pc, #96]	; (80070c4 <TIM_OC5_SetConfig+0xc0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00f      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <TIM_OC5_SetConfig+0xc4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00b      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <TIM_OC5_SetConfig+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <TIM_OC5_SetConfig+0xcc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC5_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <TIM_OC5_SetConfig+0xd0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d109      	bne.n	800709a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800
 80070d4:	40015000 	.word	0x40015000

080070d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a1a      	ldr	r2, [pc, #104]	; (8007198 <TIM_OC6_SetConfig+0xc0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a19      	ldr	r2, [pc, #100]	; (800719c <TIM_OC6_SetConfig+0xc4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00f      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <TIM_OC6_SetConfig+0xc8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00b      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <TIM_OC6_SetConfig+0xcc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d007      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a16      	ldr	r2, [pc, #88]	; (80071a8 <TIM_OC6_SetConfig+0xd0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC6_SetConfig+0x84>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <TIM_OC6_SetConfig+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d109      	bne.n	8007170 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	029b      	lsls	r3, r3, #10
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40012c00 	.word	0x40012c00
 800719c:	40013400 	.word	0x40013400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800
 80071ac:	40015000 	.word	0x40015000

080071b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a26      	ldr	r2, [pc, #152]	; (8007274 <TIM_TI1_SetConfig+0xc4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d017      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e4:	d013      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4a23      	ldr	r2, [pc, #140]	; (8007278 <TIM_TI1_SetConfig+0xc8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00f      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4a22      	ldr	r2, [pc, #136]	; (800727c <TIM_TI1_SetConfig+0xcc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00b      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a21      	ldr	r2, [pc, #132]	; (8007280 <TIM_TI1_SetConfig+0xd0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d007      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a20      	ldr	r2, [pc, #128]	; (8007284 <TIM_TI1_SetConfig+0xd4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_TI1_SetConfig+0x5e>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4a1f      	ldr	r2, [pc, #124]	; (8007288 <TIM_TI1_SetConfig+0xd8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <TIM_TI1_SetConfig+0x62>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <TIM_TI1_SetConfig+0x64>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e003      	b.n	8007232 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	b2db      	uxtb	r3, r3
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 030a 	and.w	r3, r3, #10
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40013400 	.word	0x40013400
 8007284:	40014000 	.word	0x40014000
 8007288:	40015000 	.word	0x40015000

0800728c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 030a 	bic.w	r3, r3, #10
 80072c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	f023 0210 	bic.w	r2, r3, #16
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	031b      	lsls	r3, r3, #12
 800732e:	b29b      	uxth	r3, r3
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800733c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0210 	bic.w	r2, r3, #16
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800738e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007400:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007414:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007468:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	031b      	lsls	r3, r3, #12
 8007480:	b29b      	uxth	r3, r3
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800748e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	031b      	lsls	r3, r3, #12
 8007494:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f043 0307 	orr.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	021a      	lsls	r2, r3, #8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2201      	movs	r2, #1
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	43db      	mvns	r3, r3
 800754e:	401a      	ands	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a1a      	ldr	r2, [r3, #32]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	fa01 f303 	lsl.w	r3, r1, r3
 8007564:	431a      	orrs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800758c:	2302      	movs	r3, #2
 800758e:	e06d      	b.n	800766c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a30      	ldr	r2, [pc, #192]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2f      	ldr	r2, [pc, #188]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2d      	ldr	r2, [pc, #180]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d01d      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d018      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00e      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a15      	ldr	r2, [pc, #84]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d009      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a16      	ldr	r2, [pc, #88]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a11      	ldr	r2, [pc, #68]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d10c      	bne.n	800765a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	4313      	orrs	r3, r2
 8007650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40013400 	.word	0x40013400
 8007680:	40015000 	.word	0x40015000
 8007684:	40000400 	.word	0x40000400
 8007688:	40000800 	.word	0x40000800
 800768c:	40014000 	.word	0x40014000

08007690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e06a      	b.n	8007782 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a16      	ldr	r2, [pc, #88]	; (8007798 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d115      	bne.n	8007770 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	051b      	lsls	r3, r3, #20
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40015000 	.word	0x40015000

0800779c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e040      	b.n	800786c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fb fa42 	bl	8002c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	; 0x24
 8007804:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0201 	bic.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fb76 	bl	8007f08 <UART_SetConfig>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e022      	b.n	800786c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fd3e 	bl	80082b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fdc5 	bl	80083f4 <UART_CheckIdleState>
 800786a:	4603      	mov	r3, r0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007888:	2b20      	cmp	r3, #32
 800788a:	d132      	bne.n	80078f2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Receive_IT+0x24>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e02b      	b.n	80078f4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d018      	beq.n	80078e2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	613b      	str	r3, [r7, #16]
   return(result);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	623b      	str	r3, [r7, #32]
 80078d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	6a3a      	ldr	r2, [r7, #32]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	61bb      	str	r3, [r7, #24]
   return(result);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fe93 	bl	8008614 <UART_Start_Receive_IT>
 80078ee:	4603      	mov	r3, r0
 80078f0:	e000      	b.n	80078f4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
  }
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3728      	adds	r7, #40	; 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b0ba      	sub	sp, #232	; 0xe8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007926:	f640 030f 	movw	r3, #2063	; 0x80f
 800792a:	4013      	ands	r3, r2
 800792c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d115      	bne.n	8007964 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00f      	beq.n	8007964 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 82ab 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      }
      return;
 8007962:	e2a5      	b.n	8007eb0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8117 	beq.w	8007b9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800797a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800797e:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <HAL_UART_IRQHandler+0x298>)
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 810a 	beq.w	8007b9c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <HAL_UART_IRQHandler+0xbc>
 8007994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2201      	movs	r2, #1
 80079a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0xec>
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2202      	movs	r2, #2
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0x11c>
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2204      	movs	r2, #4
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0e:	f043 0202 	orr.w	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d017      	beq.n	8007a54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2208      	movs	r2, #8
 8007a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d012      	beq.n	8007a86 <HAL_UART_IRQHandler+0x18a>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8211 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d04f      	beq.n	8007b7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fe5e 	bl	80087a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d141      	bne.n	8007b76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1d9      	bne.n	8007af2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d013      	beq.n	8007b6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4a:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <HAL_UART_IRQHandler+0x29c>)
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb ff7d 	bl	8003a52 <HAL_DMA_Abort_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	e00f      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9b4 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b74:	e00b      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9b0 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e007      	b.n	8007b8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f9ac 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b8c:	e192      	b.n	8007eb4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8e:	bf00      	nop
    return;
 8007b90:	e190      	b.n	8007eb4 <HAL_UART_IRQHandler+0x5b8>
 8007b92:	bf00      	nop
 8007b94:	04000120 	.word	0x04000120
 8007b98:	08008869 	.word	0x08008869

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 814b 	bne.w	8007e3c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8144 	beq.w	8007e3c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 813d 	beq.w	8007e3c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	f040 80b5 	bne.w	8007d44 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007be6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8164 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	f080 815c 	bcs.w	8007eb8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	f000 8086 	beq.w	8007d22 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1da      	bne.n	8007c16 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e1      	bne.n	8007c60 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e3      	bne.n	8007c9c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf2:	f023 0310 	bic.w	r3, r3, #16
 8007cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e4      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fb fe5f 	bl	80039e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8d7 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d42:	e0b9      	b.n	8007eb8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80ab 	beq.w	8007ebc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80a6 	beq.w	8007ebc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d92:	647b      	str	r3, [r7, #68]	; 0x44
 8007d94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e4      	bne.n	8007d70 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	623b      	str	r3, [r7, #32]
   return(result);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dca:	633a      	str	r2, [r7, #48]	; 0x30
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	69b9      	ldr	r1, [r7, #24]
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	617b      	str	r3, [r7, #20]
   return(result);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e4      	bne.n	8007df2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f85b 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e3a:	e03f      	b.n	8007ebc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00e      	beq.n	8007e66 <HAL_UART_IRQHandler+0x56a>
 8007e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 feea 	bl	8008c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e64:	e02d      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00e      	beq.n	8007e90 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01c      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
    }
    return;
 8007e8e:	e017      	b.n	8007ec0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d012      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
 8007e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00c      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fcf3 	bl	8008894 <UART_EndTransmit_IT>
    return;
 8007eae:	e008      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007eb0:	bf00      	nop
 8007eb2:	e006      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007eb4:	bf00      	nop
 8007eb6:	e004      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007eb8:	bf00      	nop
 8007eba:	e002      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007ebc:	bf00      	nop
 8007ebe:	e000      	b.n	8007ec2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007ec0:	bf00      	nop
  }

}
 8007ec2:	37e8      	adds	r7, #232	; 0xe8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b92      	ldr	r3, [pc, #584]	; (800817c <UART_SetConfig+0x274>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a80      	ldr	r2, [pc, #512]	; (8008180 <UART_SetConfig+0x278>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d120      	bne.n	8007fc6 <UART_SetConfig+0xbe>
 8007f84:	4b7f      	ldr	r3, [pc, #508]	; (8008184 <UART_SetConfig+0x27c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d817      	bhi.n	8007fc0 <UART_SetConfig+0xb8>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x90>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fb5 	.word	0x08007fb5
 8007fa0:	08007fbb 	.word	0x08007fbb
 8007fa4:	08007faf 	.word	0x08007faf
 8007fa8:	2301      	movs	r3, #1
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e0b5      	b.n	800811a <UART_SetConfig+0x212>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e0b2      	b.n	800811a <UART_SetConfig+0x212>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e0af      	b.n	800811a <UART_SetConfig+0x212>
 8007fba:	2308      	movs	r3, #8
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e0ac      	b.n	800811a <UART_SetConfig+0x212>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e0a9      	b.n	800811a <UART_SetConfig+0x212>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a6f      	ldr	r2, [pc, #444]	; (8008188 <UART_SetConfig+0x280>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d124      	bne.n	800801a <UART_SetConfig+0x112>
 8007fd0:	4b6c      	ldr	r3, [pc, #432]	; (8008184 <UART_SetConfig+0x27c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fdc:	d011      	beq.n	8008002 <UART_SetConfig+0xfa>
 8007fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fe2:	d817      	bhi.n	8008014 <UART_SetConfig+0x10c>
 8007fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe8:	d011      	beq.n	800800e <UART_SetConfig+0x106>
 8007fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fee:	d811      	bhi.n	8008014 <UART_SetConfig+0x10c>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <UART_SetConfig+0xf4>
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff8:	d006      	beq.n	8008008 <UART_SetConfig+0x100>
 8007ffa:	e00b      	b.n	8008014 <UART_SetConfig+0x10c>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	77fb      	strb	r3, [r7, #31]
 8008000:	e08b      	b.n	800811a <UART_SetConfig+0x212>
 8008002:	2302      	movs	r3, #2
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e088      	b.n	800811a <UART_SetConfig+0x212>
 8008008:	2304      	movs	r3, #4
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e085      	b.n	800811a <UART_SetConfig+0x212>
 800800e:	2308      	movs	r3, #8
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e082      	b.n	800811a <UART_SetConfig+0x212>
 8008014:	2310      	movs	r3, #16
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e07f      	b.n	800811a <UART_SetConfig+0x212>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a5b      	ldr	r2, [pc, #364]	; (800818c <UART_SetConfig+0x284>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d124      	bne.n	800806e <UART_SetConfig+0x166>
 8008024:	4b57      	ldr	r3, [pc, #348]	; (8008184 <UART_SetConfig+0x27c>)
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800802c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008030:	d011      	beq.n	8008056 <UART_SetConfig+0x14e>
 8008032:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008036:	d817      	bhi.n	8008068 <UART_SetConfig+0x160>
 8008038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800803c:	d011      	beq.n	8008062 <UART_SetConfig+0x15a>
 800803e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008042:	d811      	bhi.n	8008068 <UART_SetConfig+0x160>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <UART_SetConfig+0x148>
 8008048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800804c:	d006      	beq.n	800805c <UART_SetConfig+0x154>
 800804e:	e00b      	b.n	8008068 <UART_SetConfig+0x160>
 8008050:	2300      	movs	r3, #0
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e061      	b.n	800811a <UART_SetConfig+0x212>
 8008056:	2302      	movs	r3, #2
 8008058:	77fb      	strb	r3, [r7, #31]
 800805a:	e05e      	b.n	800811a <UART_SetConfig+0x212>
 800805c:	2304      	movs	r3, #4
 800805e:	77fb      	strb	r3, [r7, #31]
 8008060:	e05b      	b.n	800811a <UART_SetConfig+0x212>
 8008062:	2308      	movs	r3, #8
 8008064:	77fb      	strb	r3, [r7, #31]
 8008066:	e058      	b.n	800811a <UART_SetConfig+0x212>
 8008068:	2310      	movs	r3, #16
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e055      	b.n	800811a <UART_SetConfig+0x212>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a47      	ldr	r2, [pc, #284]	; (8008190 <UART_SetConfig+0x288>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d124      	bne.n	80080c2 <UART_SetConfig+0x1ba>
 8008078:	4b42      	ldr	r3, [pc, #264]	; (8008184 <UART_SetConfig+0x27c>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008084:	d011      	beq.n	80080aa <UART_SetConfig+0x1a2>
 8008086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800808a:	d817      	bhi.n	80080bc <UART_SetConfig+0x1b4>
 800808c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008090:	d011      	beq.n	80080b6 <UART_SetConfig+0x1ae>
 8008092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008096:	d811      	bhi.n	80080bc <UART_SetConfig+0x1b4>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <UART_SetConfig+0x19c>
 800809c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a0:	d006      	beq.n	80080b0 <UART_SetConfig+0x1a8>
 80080a2:	e00b      	b.n	80080bc <UART_SetConfig+0x1b4>
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e037      	b.n	800811a <UART_SetConfig+0x212>
 80080aa:	2302      	movs	r3, #2
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e034      	b.n	800811a <UART_SetConfig+0x212>
 80080b0:	2304      	movs	r3, #4
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e031      	b.n	800811a <UART_SetConfig+0x212>
 80080b6:	2308      	movs	r3, #8
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e02e      	b.n	800811a <UART_SetConfig+0x212>
 80080bc:	2310      	movs	r3, #16
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e02b      	b.n	800811a <UART_SetConfig+0x212>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a33      	ldr	r2, [pc, #204]	; (8008194 <UART_SetConfig+0x28c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d124      	bne.n	8008116 <UART_SetConfig+0x20e>
 80080cc:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <UART_SetConfig+0x27c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80080d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080d8:	d011      	beq.n	80080fe <UART_SetConfig+0x1f6>
 80080da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080de:	d817      	bhi.n	8008110 <UART_SetConfig+0x208>
 80080e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e4:	d011      	beq.n	800810a <UART_SetConfig+0x202>
 80080e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ea:	d811      	bhi.n	8008110 <UART_SetConfig+0x208>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <UART_SetConfig+0x1f0>
 80080f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f4:	d006      	beq.n	8008104 <UART_SetConfig+0x1fc>
 80080f6:	e00b      	b.n	8008110 <UART_SetConfig+0x208>
 80080f8:	2300      	movs	r3, #0
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e00d      	b.n	800811a <UART_SetConfig+0x212>
 80080fe:	2302      	movs	r3, #2
 8008100:	77fb      	strb	r3, [r7, #31]
 8008102:	e00a      	b.n	800811a <UART_SetConfig+0x212>
 8008104:	2304      	movs	r3, #4
 8008106:	77fb      	strb	r3, [r7, #31]
 8008108:	e007      	b.n	800811a <UART_SetConfig+0x212>
 800810a:	2308      	movs	r3, #8
 800810c:	77fb      	strb	r3, [r7, #31]
 800810e:	e004      	b.n	800811a <UART_SetConfig+0x212>
 8008110:	2310      	movs	r3, #16
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e001      	b.n	800811a <UART_SetConfig+0x212>
 8008116:	2310      	movs	r3, #16
 8008118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008122:	d16b      	bne.n	80081fc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008124:	7ffb      	ldrb	r3, [r7, #31]
 8008126:	2b08      	cmp	r3, #8
 8008128:	d838      	bhi.n	800819c <UART_SetConfig+0x294>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <UART_SetConfig+0x228>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008155 	.word	0x08008155
 8008134:	0800815d 	.word	0x0800815d
 8008138:	08008165 	.word	0x08008165
 800813c:	0800819d 	.word	0x0800819d
 8008140:	0800816b 	.word	0x0800816b
 8008144:	0800819d 	.word	0x0800819d
 8008148:	0800819d 	.word	0x0800819d
 800814c:	0800819d 	.word	0x0800819d
 8008150:	08008173 	.word	0x08008173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008154:	f7fd f8bc 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8008158:	61b8      	str	r0, [r7, #24]
        break;
 800815a:	e024      	b.n	80081a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800815c:	f7fd f8da 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8008160:	61b8      	str	r0, [r7, #24]
        break;
 8008162:	e020      	b.n	80081a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <UART_SetConfig+0x290>)
 8008166:	61bb      	str	r3, [r7, #24]
        break;
 8008168:	e01d      	b.n	80081a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800816a:	f7fd f83b 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800816e:	61b8      	str	r0, [r7, #24]
        break;
 8008170:	e019      	b.n	80081a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	61bb      	str	r3, [r7, #24]
        break;
 8008178:	e015      	b.n	80081a6 <UART_SetConfig+0x29e>
 800817a:	bf00      	nop
 800817c:	efff69f3 	.word	0xefff69f3
 8008180:	40013800 	.word	0x40013800
 8008184:	40021000 	.word	0x40021000
 8008188:	40004400 	.word	0x40004400
 800818c:	40004800 	.word	0x40004800
 8008190:	40004c00 	.word	0x40004c00
 8008194:	40005000 	.word	0x40005000
 8008198:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	77bb      	strb	r3, [r7, #30]
        break;
 80081a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d073      	beq.n	8008294 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	005a      	lsls	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	441a      	add	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b0f      	cmp	r3, #15
 80081c6:	d916      	bls.n	80081f6 <UART_SetConfig+0x2ee>
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ce:	d212      	bcs.n	80081f6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f023 030f 	bic.w	r3, r3, #15
 80081d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	89fb      	ldrh	r3, [r7, #14]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	89fa      	ldrh	r2, [r7, #14]
 80081f2:	60da      	str	r2, [r3, #12]
 80081f4:	e04e      	b.n	8008294 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	77bb      	strb	r3, [r7, #30]
 80081fa:	e04b      	b.n	8008294 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081fc:	7ffb      	ldrb	r3, [r7, #31]
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d827      	bhi.n	8008252 <UART_SetConfig+0x34a>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <UART_SetConfig+0x300>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800822d 	.word	0x0800822d
 800820c:	08008235 	.word	0x08008235
 8008210:	0800823d 	.word	0x0800823d
 8008214:	08008253 	.word	0x08008253
 8008218:	08008243 	.word	0x08008243
 800821c:	08008253 	.word	0x08008253
 8008220:	08008253 	.word	0x08008253
 8008224:	08008253 	.word	0x08008253
 8008228:	0800824b 	.word	0x0800824b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800822c:	f7fd f850 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8008230:	61b8      	str	r0, [r7, #24]
        break;
 8008232:	e013      	b.n	800825c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008234:	f7fd f86e 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8008238:	61b8      	str	r0, [r7, #24]
        break;
 800823a:	e00f      	b.n	800825c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800823c:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <UART_SetConfig+0x3a4>)
 800823e:	61bb      	str	r3, [r7, #24]
        break;
 8008240:	e00c      	b.n	800825c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008242:	f7fc ffcf 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8008246:	61b8      	str	r0, [r7, #24]
        break;
 8008248:	e008      	b.n	800825c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800824a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824e:	61bb      	str	r3, [r7, #24]
        break;
 8008250:	e004      	b.n	800825c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	77bb      	strb	r3, [r7, #30]
        break;
 800825a:	bf00      	nop
    }

    if (pclk != 0U)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d018      	beq.n	8008294 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	085a      	lsrs	r2, r3, #1
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	441a      	add	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b0f      	cmp	r3, #15
 800827a:	d909      	bls.n	8008290 <UART_SetConfig+0x388>
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008282:	d205      	bcs.n	8008290 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60da      	str	r2, [r3, #12]
 800828e:	e001      	b.n	8008294 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80082a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	007a1200 	.word	0x007a1200

080082b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01a      	beq.n	80083c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ae:	d10a      	bne.n	80083c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b098      	sub	sp, #96	; 0x60
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008404:	f7fb f9da 	bl	80037bc <HAL_GetTick>
 8008408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b08      	cmp	r3, #8
 8008416:	d12e      	bne.n	8008476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008420:	2200      	movs	r2, #0
 8008422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f88c 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d021      	beq.n	8008476 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008446:	653b      	str	r3, [r7, #80]	; 0x50
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008450:	647b      	str	r3, [r7, #68]	; 0x44
 8008452:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e062      	b.n	800853c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b04      	cmp	r3, #4
 8008482:	d149      	bne.n	8008518 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800848c:	2200      	movs	r2, #0
 800848e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f856 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d03c      	beq.n	8008518 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	623b      	str	r3, [r7, #32]
   return(result);
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30
 80084be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e6      	bne.n	800849e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3308      	adds	r3, #8
 80084d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f0:	61fa      	str	r2, [r7, #28]
 80084f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	617b      	str	r3, [r7, #20]
   return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e011      	b.n	800853c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3758      	adds	r7, #88	; 0x58
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008554:	e049      	b.n	80085ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d045      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855e:	f7fb f92d 	bl	80037bc <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e048      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d031      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b08      	cmp	r3, #8
 8008592:	d110      	bne.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2208      	movs	r2, #8
 800859a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f8ff 	bl	80087a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2208      	movs	r2, #8
 80085a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e029      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c4:	d111      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f8e5 	bl	80087a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e00f      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4013      	ands	r3, r2
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2300      	movne	r3, #0
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	429a      	cmp	r2, r3
 8008606:	d0a6      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008614:	b480      	push	{r7}
 8008616:	b097      	sub	sp, #92	; 0x5c
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	d10e      	bne.n	8008666 <UART_Start_Receive_IT+0x52>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <UART_Start_Receive_IT+0x48>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800865a:	e02d      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008664:	e028      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <UART_Start_Receive_IT+0x76>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <UART_Start_Receive_IT+0x6c>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800867e:	e01b      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	227f      	movs	r2, #127	; 0x7f
 8008684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008688:	e016      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008692:	d10d      	bne.n	80086b0 <UART_Start_Receive_IT+0x9c>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <UART_Start_Receive_IT+0x92>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	227f      	movs	r2, #127	; 0x7f
 80086a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086a4:	e008      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	223f      	movs	r2, #63	; 0x3f
 80086aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ae:	e003      	b.n	80086b8 <UART_Start_Receive_IT+0xa4>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2222      	movs	r2, #34	; 0x22
 80086c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3308      	adds	r3, #8
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	657b      	str	r3, [r7, #84]	; 0x54
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e5      	bne.n	80086c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008704:	d107      	bne.n	8008716 <UART_Start_Receive_IT+0x102>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a21      	ldr	r2, [pc, #132]	; (8008798 <UART_Start_Receive_IT+0x184>)
 8008712:	669a      	str	r2, [r3, #104]	; 0x68
 8008714:	e002      	b.n	800871c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a20      	ldr	r2, [pc, #128]	; (800879c <UART_Start_Receive_IT+0x188>)
 800871a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d019      	beq.n	8008758 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008742:	637b      	str	r3, [r7, #52]	; 0x34
 8008744:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e6      	bne.n	8008724 <UART_Start_Receive_IT+0x110>
 8008756:	e018      	b.n	800878a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	613b      	str	r3, [r7, #16]
   return(result);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f043 0320 	orr.w	r3, r3, #32
 800876c:	653b      	str	r3, [r7, #80]	; 0x50
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008776:	623b      	str	r3, [r7, #32]
 8008778:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	69f9      	ldr	r1, [r7, #28]
 800877c:	6a3a      	ldr	r2, [r7, #32]
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	61bb      	str	r3, [r7, #24]
   return(result);
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	375c      	adds	r7, #92	; 0x5c
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	08008a91 	.word	0x08008a91
 800879c:	080088e9 	.word	0x080088e9

080087a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b095      	sub	sp, #84	; 0x54
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c6:	643b      	str	r3, [r7, #64]	; 0x40
 80087c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008812:	2b01      	cmp	r3, #1
 8008814:	d118      	bne.n	8008848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	60bb      	str	r3, [r7, #8]
   return(result);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 0310 	bic.w	r3, r3, #16
 800882a:	647b      	str	r3, [r7, #68]	; 0x44
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6979      	ldr	r1, [r7, #20]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	613b      	str	r3, [r7, #16]
   return(result);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800885c:	bf00      	nop
 800885e:	3754      	adds	r7, #84	; 0x54
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fb28 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b0:	61fb      	str	r3, [r7, #28]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	61bb      	str	r3, [r7, #24]
 80088bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6979      	ldr	r1, [r7, #20]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	613b      	str	r3, [r7, #16]
   return(result);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e6      	bne.n	800889c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff faf4 	bl	8007ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e0:	bf00      	nop
 80088e2:	3720      	adds	r7, #32
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b09c      	sub	sp, #112	; 0x70
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008900:	2b22      	cmp	r3, #34	; 0x22
 8008902:	f040 80b9 	bne.w	8008a78 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800890c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008910:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008914:	b2d9      	uxtb	r1, r3
 8008916:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800891a:	b2da      	uxtb	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	400a      	ands	r2, r1
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008936:	b29b      	uxth	r3, r3
 8008938:	3b01      	subs	r3, #1
 800893a:	b29a      	uxth	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 809c 	bne.w	8008a88 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008964:	66bb      	str	r3, [r7, #104]	; 0x68
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800896e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800897c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	f023 0301 	bic.w	r3, r3, #1
 8008998:	667b      	str	r3, [r7, #100]	; 0x64
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089a2:	647a      	str	r2, [r7, #68]	; 0x44
 80089a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e5      	bne.n	8008982 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d018      	beq.n	8008a0a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	623b      	str	r3, [r7, #32]
   return(result);
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ec:	663b      	str	r3, [r7, #96]	; 0x60
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f6:	633b      	str	r3, [r7, #48]	; 0x30
 80089f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d12e      	bne.n	8008a70 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 0310 	bic.w	r3, r3, #16
 8008a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	617b      	str	r3, [r7, #20]
   return(result);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e6      	bne.n	8008a18 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d103      	bne.n	8008a60 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2210      	movs	r2, #16
 8008a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fa41 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a6e:	e00b      	b.n	8008a88 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fa f9af 	bl	8002dd4 <HAL_UART_RxCpltCallback>
}
 8008a76:	e007      	b.n	8008a88 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0208 	orr.w	r2, r2, #8
 8008a86:	619a      	str	r2, [r3, #24]
}
 8008a88:	bf00      	nop
 8008a8a:	3770      	adds	r7, #112	; 0x70
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b09c      	sub	sp, #112	; 0x70
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aa8:	2b22      	cmp	r3, #34	; 0x22
 8008aaa:	f040 80b9 	bne.w	8008c20 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ab4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008abe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008acc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad2:	1c9a      	adds	r2, r3, #2
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 809c 	bne.w	8008c30 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b16:	657b      	str	r3, [r7, #84]	; 0x54
 8008b18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e6      	bne.n	8008af8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	663b      	str	r3, [r7, #96]	; 0x60
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b4a:	643a      	str	r2, [r7, #64]	; 0x40
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d018      	beq.n	8008bb2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e6      	bne.n	8008b80 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d12e      	bne.n	8008c18 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f023 0310 	bic.w	r3, r3, #16
 8008bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6979      	ldr	r1, [r7, #20]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	613b      	str	r3, [r7, #16]
   return(result);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e6      	bne.n	8008bc0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d103      	bne.n	8008c08 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2210      	movs	r2, #16
 8008c06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff f96d 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c16:	e00b      	b.n	8008c30 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fa f8db 	bl	8002dd4 <HAL_UART_RxCpltCallback>
}
 8008c1e:	e007      	b.n	8008c30 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0208 	orr.w	r2, r2, #8
 8008c2e:	619a      	str	r2, [r3, #24]
}
 8008c30:	bf00      	nop
 8008c32:	3770      	adds	r7, #112	; 0x70
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c52:	f3ef 8305 	mrs	r3, IPSR
 8008c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10f      	bne.n	8008c7e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c62:	607b      	str	r3, [r7, #4]
  return(result);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <osKernelInitialize+0x32>
 8008c6a:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <osKernelInitialize+0x64>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d109      	bne.n	8008c86 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c72:	f3ef 8311 	mrs	r3, BASEPRI
 8008c76:	603b      	str	r3, [r7, #0]
  return(result);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c7e:	f06f 0305 	mvn.w	r3, #5
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e00c      	b.n	8008ca0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c86:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <osKernelInitialize+0x64>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d105      	bne.n	8008c9a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008c8e:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <osKernelInitialize+0x64>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e002      	b.n	8008ca0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	200006f0 	.word	0x200006f0

08008cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cba:	f3ef 8305 	mrs	r3, IPSR
 8008cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10f      	bne.n	8008ce6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cca:	607b      	str	r3, [r7, #4]
  return(result);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <osKernelStart+0x32>
 8008cd2:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <osKernelStart+0x64>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d109      	bne.n	8008cee <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cda:	f3ef 8311 	mrs	r3, BASEPRI
 8008cde:	603b      	str	r3, [r7, #0]
  return(result);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <osKernelStart+0x3a>
    stat = osErrorISR;
 8008ce6:	f06f 0305 	mvn.w	r3, #5
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e00e      	b.n	8008d0c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cee:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <osKernelStart+0x64>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d107      	bne.n	8008d06 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008cf6:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <osKernelStart+0x64>)
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008cfc:	f001 fdfa 	bl	800a8f4 <vTaskStartScheduler>
      stat = osOK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e002      	b.n	8008d0c <osKernelStart+0x58>
    } else {
      stat = osError;
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200006f0 	.word	0x200006f0

08008d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b092      	sub	sp, #72	; 0x48
 8008d20:	af04      	add	r7, sp, #16
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2c:	f3ef 8305 	mrs	r3, IPSR
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 8094 	bne.w	8008e62 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 808d 	bne.w	8008e62 <osThreadNew+0x146>
 8008d48:	4b48      	ldr	r3, [pc, #288]	; (8008e6c <osThreadNew+0x150>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d106      	bne.n	8008d5e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d50:	f3ef 8311 	mrs	r3, BASEPRI
 8008d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 8082 	bne.w	8008e62 <osThreadNew+0x146>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d07e      	beq.n	8008e62 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008d68:	2318      	movs	r3, #24
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008d70:	f107 031b 	add.w	r3, r7, #27
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d045      	beq.n	8008e0e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <osThreadNew+0x74>
        name = attr->name;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d008      	beq.n	8008db6 <osThreadNew+0x9a>
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2b38      	cmp	r3, #56	; 0x38
 8008da8:	d805      	bhi.n	8008db6 <osThreadNew+0x9a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <osThreadNew+0x9e>
        return (NULL);
 8008db6:	2300      	movs	r3, #0
 8008db8:	e054      	b.n	8008e64 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <osThreadNew+0xd4>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2bab      	cmp	r3, #171	; 0xab
 8008dd8:	d90a      	bls.n	8008df0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d006      	beq.n	8008df0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <osThreadNew+0xd4>
        mem = 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dee:	e010      	b.n	8008e12 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10c      	bne.n	8008e12 <osThreadNew+0xf6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d108      	bne.n	8008e12 <osThreadNew+0xf6>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <osThreadNew+0xf6>
          mem = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e0c:	e001      	b.n	8008e12 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d110      	bne.n	8008e3a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e20:	9202      	str	r2, [sp, #8]
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f001 fa6c 	bl	800a30c <xTaskCreateStatic>
 8008e34:	4603      	mov	r3, r0
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e013      	b.n	8008e62 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d110      	bne.n	8008e62 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	f107 0314 	add.w	r3, r7, #20
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f001 fab6 	bl	800a3c4 <xTaskCreate>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d001      	beq.n	8008e62 <osThreadNew+0x146>
          hTask = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3738      	adds	r7, #56	; 0x38
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	200006f0 	.word	0x200006f0

08008e70 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e76:	f3ef 8305 	mrs	r3, IPSR
 8008e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10f      	bne.n	8008ea2 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e82:	f3ef 8310 	mrs	r3, PRIMASK
 8008e86:	607b      	str	r3, [r7, #4]
  return(result);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <osThreadGetId+0x32>
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <osThreadGetId+0x48>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d108      	bne.n	8008ea8 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e96:	f3ef 8311 	mrs	r3, BASEPRI
 8008e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <osThreadGetId+0x38>
    id = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	e002      	b.n	8008eae <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008ea8:	f002 f9ec 	bl	800b284 <xTaskGetCurrentTaskHandle>
 8008eac:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200006f0 	.word	0x200006f0

08008ebc <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ec8:	f3ef 8305 	mrs	r3, IPSR
 8008ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8008ece:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10f      	bne.n	8008ef4 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ed8:	613b      	str	r3, [r7, #16]
  return(result);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <osThreadSuspend+0x38>
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <osThreadSuspend+0x64>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d109      	bne.n	8008efc <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8008eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008ef4:	f06f 0305 	mvn.w	r3, #5
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e00b      	b.n	8008f14 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008f02:	f06f 0303 	mvn.w	r3, #3
 8008f06:	61fb      	str	r3, [r7, #28]
 8008f08:	e004      	b.n	8008f14 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008f0e:	69b8      	ldr	r0, [r7, #24]
 8008f10:	f001 fbe0 	bl	800a6d4 <vTaskSuspend>
  }

  return (stat);
 8008f14:	69fb      	ldr	r3, [r7, #28]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200006f0 	.word	0x200006f0

08008f24 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f30:	f3ef 8305 	mrs	r3, IPSR
 8008f34:	617b      	str	r3, [r7, #20]
  return(result);
 8008f36:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f40:	613b      	str	r3, [r7, #16]
  return(result);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <osThreadResume+0x38>
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <osThreadResume+0x64>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d109      	bne.n	8008f64 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f50:	f3ef 8311 	mrs	r3, BASEPRI
 8008f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <osThreadResume+0x40>
    stat = osErrorISR;
 8008f5c:	f06f 0305 	mvn.w	r3, #5
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	e00b      	b.n	8008f7c <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008f6a:	f06f 0303 	mvn.w	r3, #3
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	e004      	b.n	8008f7c <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008f76:	69b8      	ldr	r0, [r7, #24]
 8008f78:	f001 fc5e 	bl	800a838 <vTaskResume>
  }

  return (stat);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	200006f0 	.word	0x200006f0

08008f8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f94:	f3ef 8305 	mrs	r3, IPSR
 8008f98:	613b      	str	r3, [r7, #16]
  return(result);
 8008f9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10f      	bne.n	8008fc0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <osDelay+0x34>
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <osDelay+0x58>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d109      	bne.n	8008fc8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <osDelay+0x3c>
    stat = osErrorISR;
 8008fc0:	f06f 0305 	mvn.w	r3, #5
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e007      	b.n	8008fd8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fb4a 	bl	800a66c <vTaskDelay>
    }
  }

  return (stat);
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200006f0 	.word	0x200006f0

08008fe8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff4:	f3ef 8305 	mrs	r3, IPSR
 8008ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8008ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d13d      	bne.n	800907c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009000:	f3ef 8310 	mrs	r3, PRIMASK
 8009004:	613b      	str	r3, [r7, #16]
  return(result);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d137      	bne.n	800907c <osEventFlagsNew+0x94>
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <osEventFlagsNew+0xa0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b02      	cmp	r3, #2
 8009012:	d105      	bne.n	8009020 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009014:	f3ef 8311 	mrs	r3, BASEPRI
 8009018:	60fb      	str	r3, [r7, #12]
  return(result);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d12d      	bne.n	800907c <osEventFlagsNew+0x94>
    mem = -1;
 8009020:	f04f 33ff 	mov.w	r3, #4294967295
 8009024:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d015      	beq.n	8009058 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <osEventFlagsNew+0x5a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	2b1f      	cmp	r3, #31
 800903a:	d902      	bls.n	8009042 <osEventFlagsNew+0x5a>
        mem = 1;
 800903c:	2301      	movs	r3, #1
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	e00c      	b.n	800905c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d108      	bne.n	800905c <osEventFlagsNew+0x74>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <osEventFlagsNew+0x74>
          mem = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	e001      	b.n	800905c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d106      	bne.n	8009070 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f9ae 	bl	80093c8 <xEventGroupCreateStatic>
 800906c:	61f8      	str	r0, [r7, #28]
 800906e:	e005      	b.n	800907c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8009076:	f000 f9de 	bl	8009436 <xEventGroupCreate>
 800907a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800907c:	69fb      	ldr	r3, [r7, #28]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200006f0 	.word	0x200006f0

0800908c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <osEventFlagsSet+0x1e>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80090aa:	f06f 0303 	mvn.w	r3, #3
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e03a      	b.n	8009128 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b2:	f3ef 8305 	mrs	r3, IPSR
 80090b6:	617b      	str	r3, [r7, #20]
  return(result);
 80090b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10f      	bne.n	80090de <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090be:	f3ef 8310 	mrs	r3, PRIMASK
 80090c2:	613b      	str	r3, [r7, #16]
  return(result);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <osEventFlagsSet+0x52>
 80090ca:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <osEventFlagsSet+0xa8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d123      	bne.n	800911a <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090d2:	f3ef 8311 	mrs	r3, BASEPRI
 80090d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01d      	beq.n	800911a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	461a      	mov	r2, r3
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	69b8      	ldr	r0, [r7, #24]
 80090ec:	f000 fad4 	bl	8009698 <xEventGroupSetBitsFromISR>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80090f6:	f06f 0302 	mvn.w	r3, #2
 80090fa:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80090fc:	e013      	b.n	8009126 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <osEventFlagsSet+0x9a>
 8009108:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <osEventFlagsSet+0xac>)
 800910a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009118:	e005      	b.n	8009126 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	69b8      	ldr	r0, [r7, #24]
 800911e:	f000 fa15 	bl	800954c <xEventGroupSetBits>
 8009122:	61f8      	str	r0, [r7, #28]
 8009124:	e000      	b.n	8009128 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009126:	bf00      	nop
  }

  return (rflags);
 8009128:	69fb      	ldr	r3, [r7, #28]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	200006f0 	.word	0x200006f0
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <osEventFlagsClear+0x1e>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800915a:	f06f 0303 	mvn.w	r3, #3
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	e029      	b.n	80091b6 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	617b      	str	r3, [r7, #20]
  return(result);
 8009168:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10f      	bne.n	800918e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916e:	f3ef 8310 	mrs	r3, PRIMASK
 8009172:	613b      	str	r3, [r7, #16]
  return(result);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <osEventFlagsClear+0x52>
 800917a:	4b11      	ldr	r3, [pc, #68]	; (80091c0 <osEventFlagsClear+0x84>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d114      	bne.n	80091ac <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009182:	f3ef 8311 	mrs	r3, BASEPRI
 8009186:	60fb      	str	r3, [r7, #12]
  return(result);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00e      	beq.n	80091ac <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800918e:	69b8      	ldr	r0, [r7, #24]
 8009190:	f000 f9b8 	bl	8009504 <xEventGroupGetBitsFromISR>
 8009194:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	69b8      	ldr	r0, [r7, #24]
 800919a:	f000 f99f 	bl	80094dc <xEventGroupClearBitsFromISR>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80091a4:	f06f 0302 	mvn.w	r3, #2
 80091a8:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80091aa:	e004      	b.n	80091b6 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	69b8      	ldr	r0, [r7, #24]
 80091b0:	f000 f95b 	bl	800946a <xEventGroupClearBits>
 80091b4:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80091b6:	69fb      	ldr	r3, [r7, #28]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200006f0 	.word	0x200006f0

080091c4 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <osEventFlagsGet+0x18>
    rflags = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	e01f      	b.n	800921c <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091dc:	f3ef 8305 	mrs	r3, IPSR
 80091e0:	617b      	str	r3, [r7, #20]
  return(result);
 80091e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10f      	bne.n	8009208 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091e8:	f3ef 8310 	mrs	r3, PRIMASK
 80091ec:	613b      	str	r3, [r7, #16]
  return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d109      	bne.n	8009208 <osEventFlagsGet+0x44>
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <osEventFlagsGet+0x64>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d10a      	bne.n	8009212 <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091fc:	f3ef 8311 	mrs	r3, BASEPRI
 8009200:	60fb      	str	r3, [r7, #12]
  return(result);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8009208:	69b8      	ldr	r0, [r7, #24]
 800920a:	f000 f97b 	bl	8009504 <xEventGroupGetBitsFromISR>
 800920e:	61f8      	str	r0, [r7, #28]
 8009210:	e004      	b.n	800921c <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8009212:	2100      	movs	r1, #0
 8009214:	69b8      	ldr	r0, [r7, #24]
 8009216:	f000 f928 	bl	800946a <xEventGroupClearBits>
 800921a:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800921c:	69fb      	ldr	r3, [r7, #28]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200006f0 	.word	0x200006f0

0800922c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	; 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009238:	f3ef 8305 	mrs	r3, IPSR
 800923c:	613b      	str	r3, [r7, #16]
  return(result);
 800923e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009240:	2b00      	cmp	r3, #0
 8009242:	f040 8085 	bne.w	8009350 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009246:	f3ef 8310 	mrs	r3, PRIMASK
 800924a:	60fb      	str	r3, [r7, #12]
  return(result);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d17e      	bne.n	8009350 <osMutexNew+0x124>
 8009252:	4b42      	ldr	r3, [pc, #264]	; (800935c <osMutexNew+0x130>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b02      	cmp	r3, #2
 8009258:	d105      	bne.n	8009266 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800925a:	f3ef 8311 	mrs	r3, BASEPRI
 800925e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d174      	bne.n	8009350 <osMutexNew+0x124>
    if (attr != NULL) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <osMutexNew+0x48>
      type = attr->attr_bits;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	e001      	b.n	8009278 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <osMutexNew+0x5c>
      rmtx = 1U;
 8009282:	2301      	movs	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e001      	b.n	800928c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d15c      	bne.n	8009350 <osMutexNew+0x124>
      mem = -1;
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d015      	beq.n	80092ce <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d006      	beq.n	80092b8 <osMutexNew+0x8c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	2b4f      	cmp	r3, #79	; 0x4f
 80092b0:	d902      	bls.n	80092b8 <osMutexNew+0x8c>
          mem = 1;
 80092b2:	2301      	movs	r3, #1
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	e00c      	b.n	80092d2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d108      	bne.n	80092d2 <osMutexNew+0xa6>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d104      	bne.n	80092d2 <osMutexNew+0xa6>
            mem = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61bb      	str	r3, [r7, #24]
 80092cc:	e001      	b.n	80092d2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d112      	bne.n	80092fe <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4619      	mov	r1, r3
 80092e4:	2004      	movs	r0, #4
 80092e6:	f000 fc11 	bl	8009b0c <xQueueCreateMutexStatic>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
 80092ec:	e016      	b.n	800931c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	4619      	mov	r1, r3
 80092f4:	2001      	movs	r0, #1
 80092f6:	f000 fc09 	bl	8009b0c <xQueueCreateMutexStatic>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24
 80092fc:	e00e      	b.n	800931c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10b      	bne.n	800931c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800930a:	2004      	movs	r0, #4
 800930c:	f000 fbe6 	bl	8009adc <xQueueCreateMutex>
 8009310:	6278      	str	r0, [r7, #36]	; 0x24
 8009312:	e003      	b.n	800931c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009314:	2001      	movs	r0, #1
 8009316:	f000 fbe1 	bl	8009adc <xQueueCreateMutex>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00c      	beq.n	800933c <osMutexNew+0x110>
        if (attr != NULL) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <osMutexNew+0x104>
          name = attr->name;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	e001      	b.n	8009334 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009334:	6979      	ldr	r1, [r7, #20]
 8009336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009338:	f000 ff8a 	bl	800a250 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d006      	beq.n	8009350 <osMutexNew+0x124>
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009352:	4618      	mov	r0, r3
 8009354:	3728      	adds	r7, #40	; 0x28
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	200006f0 	.word	0x200006f0

08009360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4a07      	ldr	r2, [pc, #28]	; (800938c <vApplicationGetIdleTaskMemory+0x2c>)
 8009370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4a06      	ldr	r2, [pc, #24]	; (8009390 <vApplicationGetIdleTaskMemory+0x30>)
 8009376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2280      	movs	r2, #128	; 0x80
 800937c:	601a      	str	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	200006f4 	.word	0x200006f4
 8009390:	200007a0 	.word	0x200007a0

08009394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a07      	ldr	r2, [pc, #28]	; (80093c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80093a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a06      	ldr	r2, [pc, #24]	; (80093c4 <vApplicationGetTimerTaskMemory+0x30>)
 80093aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093b2:	601a      	str	r2, [r3, #0]
}
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	200009a0 	.word	0x200009a0
 80093c4:	20000a4c 	.word	0x20000a4c

080093c8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10a      	bne.n	80093ec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80093ec:	2320      	movs	r3, #32
 80093ee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d00a      	beq.n	800940c <xEventGroupCreateStatic+0x44>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	60fb      	str	r3, [r7, #12]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	3304      	adds	r3, #4
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f94d 	bl	80096c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2201      	movs	r2, #1
 800942a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800942c:	697b      	ldr	r3, [r7, #20]
	}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800943c:	2020      	movs	r0, #32
 800943e:	f002 fd93 	bl	800bf68 <pvPortMalloc>
 8009442:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f933 	bl	80096c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009460:	687b      	ldr	r3, [r7, #4]
	}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b086      	sub	sp, #24
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <xEventGroupClearBits+0x2a>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60fb      	str	r3, [r7, #12]
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <xEventGroupClearBits+0x4a>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60bb      	str	r3, [r7, #8]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80094b4:	f002 fc36 	bl	800bd24 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	43db      	mvns	r3, r3
 80094c6:	401a      	ands	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80094cc:	f002 fc5a 	bl	800bd84 <vPortExitCritical>

	return uxReturn;
 80094d0:	693b      	ldr	r3, [r7, #16]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80094e6:	2300      	movs	r3, #0
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	4804      	ldr	r0, [pc, #16]	; (8009500 <xEventGroupClearBitsFromISR+0x24>)
 80094ee:	f002 facb 	bl	800ba88 <xTimerPendFunctionCallFromISR>
 80094f2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80094f4:	68fb      	ldr	r3, [r7, #12]
	}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	0800967d 	.word	0x0800967d

08009504 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8009504:	b480      	push	{r7}
 8009506:	b089      	sub	sp, #36	; 0x24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009510:	f3ef 8211 	mrs	r2, BASEPRI
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60fa      	str	r2, [r7, #12]
 8009526:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009528:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800952a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800953c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800953e:	697b      	ldr	r3, [r7, #20]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3724      	adds	r7, #36	; 0x24
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009556:	2300      	movs	r3, #0
 8009558:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800955e:	2300      	movs	r3, #0
 8009560:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xEventGroupSetBits+0x32>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	613b      	str	r3, [r7, #16]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <xEventGroupSetBits+0x52>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	3304      	adds	r3, #4
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	3308      	adds	r3, #8
 80095a8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80095aa:	f001 fa13 	bl	800a9d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80095c0:	e03c      	b.n	800963c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80095c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80095d8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095e0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d108      	bne.n	80095fe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fc:	e008      	b.n	8009610 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	4013      	ands	r3, r2
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	429a      	cmp	r2, r3
 800960a:	d101      	bne.n	8009610 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	4313      	orrs	r3, r2
 8009626:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009630:	4619      	mov	r1, r3
 8009632:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009634:	f001 fc60 	bl	800aef8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800963c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	429a      	cmp	r2, r3
 8009642:	d1be      	bne.n	80095c2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	43db      	mvns	r3, r3
 800964c:	401a      	ands	r2, r3
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009652:	f001 f9cd 	bl	800a9f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	681b      	ldr	r3, [r3, #0]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3738      	adds	r7, #56	; 0x38
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ff6c 	bl	800954c <xEventGroupSetBits>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff feee 	bl	800946a <xEventGroupClearBits>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	68f9      	ldr	r1, [r7, #12]
 80096aa:	4804      	ldr	r0, [pc, #16]	; (80096bc <xEventGroupSetBitsFromISR+0x24>)
 80096ac:	f002 f9ec 	bl	800ba88 <xTimerPendFunctionCallFromISR>
 80096b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80096b2:	697b      	ldr	r3, [r7, #20]
	}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	08009663 	.word	0x08009663

080096c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f103 0208 	add.w	r2, r3, #8
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f04f 32ff 	mov.w	r2, #4294967295
 80096d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f103 0208 	add.w	r2, r3, #8
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f103 0208 	add.w	r2, r3, #8
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	601a      	str	r2, [r3, #0]
}
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d103      	bne.n	8009782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e00c      	b.n	800979c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3308      	adds	r3, #8
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e002      	b.n	8009790 <vListInsert+0x2e>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	429a      	cmp	r2, r3
 800979a:	d2f6      	bcs.n	800978a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6892      	ldr	r2, [r2, #8]
 80097ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	6852      	ldr	r2, [r2, #4]
 80097f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d103      	bne.n	8009808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	1e5a      	subs	r2, r3, #1
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <xQueueGenericReset+0x2a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60bb      	str	r3, [r7, #8]
}
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009852:	f002 fa67 	bl	800bd24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	441a      	add	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	3b01      	subs	r3, #1
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009888:	fb01 f303 	mul.w	r3, r1, r3
 800988c:	441a      	add	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	22ff      	movs	r2, #255	; 0xff
 800989e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d114      	bne.n	80098d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01a      	beq.n	80098e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3310      	adds	r3, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 fabb 	bl	800ae30 <xTaskRemoveFromEventList>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d012      	beq.n	80098e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098c0:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <xQueueGenericReset+0xcc>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	e009      	b.n	80098e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3310      	adds	r3, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fef2 	bl	80096c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3324      	adds	r3, #36	; 0x24
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff feed 	bl	80096c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80098e6:	f002 fa4d 	bl	800bd84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80098ea:	2301      	movs	r3, #1
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08e      	sub	sp, #56	; 0x38
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <xQueueGenericCreateStatic+0x52>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <xQueueGenericCreateStatic+0x56>
 800994a:	2301      	movs	r3, #1
 800994c:	e000      	b.n	8009950 <xQueueGenericCreateStatic+0x58>
 800994e:	2300      	movs	r3, #0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	623b      	str	r3, [r7, #32]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <xQueueGenericCreateStatic+0x7e>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <xQueueGenericCreateStatic+0x82>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <xQueueGenericCreateStatic+0x84>
 800997a:	2300      	movs	r3, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	61fb      	str	r3, [r7, #28]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009996:	2350      	movs	r3, #80	; 0x50
 8009998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b50      	cmp	r3, #80	; 0x50
 800999e:	d00a      	beq.n	80099b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	61bb      	str	r3, [r7, #24]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00d      	beq.n	80099dc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	4613      	mov	r3, r2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f843 	bl	8009a62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80099de:	4618      	mov	r0, r3
 80099e0:	3730      	adds	r7, #48	; 0x30
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b08a      	sub	sp, #40	; 0x28
 80099ea:	af02      	add	r7, sp, #8
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	4613      	mov	r3, r2
 80099f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xQueueGenericCreate+0x2a>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	613b      	str	r3, [r7, #16]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d102      	bne.n	8009a1c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	e004      	b.n	8009a26 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	fb02 f303 	mul.w	r3, r2, r3
 8009a24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	3350      	adds	r3, #80	; 0x50
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f002 fa9c 	bl	800bf68 <pvPortMalloc>
 8009a30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00f      	beq.n	8009a58 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	3350      	adds	r3, #80	; 0x50
 8009a3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a46:	79fa      	ldrb	r2, [r7, #7]
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f805 	bl	8009a62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009a58:	69bb      	ldr	r3, [r7, #24]
	}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d103      	bne.n	8009a7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	e002      	b.n	8009a84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a90:	2101      	movs	r1, #1
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f7ff fec8 	bl	8009828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	78fa      	ldrb	r2, [r7, #3]
 8009a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ac8:	2300      	movs	r3, #0
 8009aca:	2200      	movs	r2, #0
 8009acc:	2100      	movs	r1, #0
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f838 	bl	8009b44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	461a      	mov	r2, r3
 8009af2:	6939      	ldr	r1, [r7, #16]
 8009af4:	6978      	ldr	r0, [r7, #20]
 8009af6:	f7ff ff76 	bl	80099e6 <xQueueGenericCreate>
 8009afa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7ff ffd3 	bl	8009aa8 <prvInitialiseMutex>

		return pxNewQueue;
 8009b02:	68fb      	ldr	r3, [r7, #12]
	}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2200      	movs	r2, #0
 8009b28:	6939      	ldr	r1, [r7, #16]
 8009b2a:	6978      	ldr	r0, [r7, #20]
 8009b2c:	f7ff fee4 	bl	80098f8 <xQueueGenericCreateStatic>
 8009b30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff ffb8 	bl	8009aa8 <prvInitialiseMutex>

		return pxNewQueue;
 8009b38:	68fb      	ldr	r3, [r7, #12]
	}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08e      	sub	sp, #56	; 0x38
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b52:	2300      	movs	r3, #0
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xQueueGenericSend+0x32>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <xQueueGenericSend+0x40>
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <xQueueGenericSend+0x44>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <xQueueGenericSend+0x46>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <xQueueGenericSend+0x60>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d103      	bne.n	8009bb2 <xQueueGenericSend+0x6e>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <xQueueGenericSend+0x72>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <xQueueGenericSend+0x74>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	623b      	str	r3, [r7, #32]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bd2:	f001 fb67 	bl	800b2a4 <xTaskGetSchedulerState>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <xQueueGenericSend+0x9e>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <xQueueGenericSend+0xa2>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <xQueueGenericSend+0xa4>
 8009be6:	2300      	movs	r3, #0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <xQueueGenericSend+0xbe>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	61fb      	str	r3, [r7, #28]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c02:	f002 f88f 	bl	800bd24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d302      	bcc.n	8009c18 <xQueueGenericSend+0xd4>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d129      	bne.n	8009c6c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1e:	f000 fa07 	bl	800a030 <prvCopyDataToQueue>
 8009c22:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d010      	beq.n	8009c4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	3324      	adds	r3, #36	; 0x24
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 f8fd 	bl	800ae30 <xTaskRemoveFromEventList>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d013      	beq.n	8009c64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c3c:	4b3f      	ldr	r3, [pc, #252]	; (8009d3c <xQueueGenericSend+0x1f8>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	e00a      	b.n	8009c64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c54:	4b39      	ldr	r3, [pc, #228]	; (8009d3c <xQueueGenericSend+0x1f8>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c64:	f002 f88e 	bl	800bd84 <vPortExitCritical>
				return pdPASS;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e063      	b.n	8009d34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d103      	bne.n	8009c7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c72:	f002 f887 	bl	800bd84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e05c      	b.n	8009d34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c80:	f107 0314 	add.w	r3, r7, #20
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 f999 	bl	800afbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c8e:	f002 f879 	bl	800bd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c92:	f000 fe9f 	bl	800a9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c96:	f002 f845 	bl	800bd24 <vPortEnterCritical>
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d103      	bne.n	8009cb0 <xQueueGenericSend+0x16c>
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d103      	bne.n	8009cc6 <xQueueGenericSend+0x182>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cc6:	f002 f85d 	bl	800bd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cca:	1d3a      	adds	r2, r7, #4
 8009ccc:	f107 0314 	add.w	r3, r7, #20
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 f988 	bl	800afe8 <xTaskCheckForTimeOut>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d124      	bne.n	8009d28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ce0:	f000 fa9e 	bl	800a220 <prvIsQueueFull>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d018      	beq.n	8009d1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	3310      	adds	r3, #16
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 f84c 	bl	800ad90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cfa:	f000 fa29 	bl	800a150 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cfe:	f000 fe77 	bl	800a9f0 <xTaskResumeAll>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f47f af7c 	bne.w	8009c02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <xQueueGenericSend+0x1f8>)
 8009d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	e772      	b.n	8009c02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d1e:	f000 fa17 	bl	800a150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d22:	f000 fe65 	bl	800a9f0 <xTaskResumeAll>
 8009d26:	e76c      	b.n	8009c02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d2a:	f000 fa11 	bl	800a150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d2e:	f000 fe5f 	bl	800a9f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d32:	2300      	movs	r3, #0
		}
	}
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3738      	adds	r7, #56	; 0x38
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d103      	bne.n	8009d7c <xQueueGenericSendFromISR+0x3c>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <xQueueGenericSendFromISR+0x40>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <xQueueGenericSendFromISR+0x42>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	623b      	str	r3, [r7, #32]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d103      	bne.n	8009daa <xQueueGenericSendFromISR+0x6a>
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <xQueueGenericSendFromISR+0x6e>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e000      	b.n	8009db0 <xQueueGenericSendFromISR+0x70>
 8009dae:	2300      	movs	r3, #0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	61fb      	str	r3, [r7, #28]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dca:	f002 f88d 	bl	800bee8 <vPortValidateInterruptPriority>
	__asm volatile
 8009dce:	f3ef 8211 	mrs	r2, BASEPRI
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	61ba      	str	r2, [r7, #24]
 8009de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009de6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d302      	bcc.n	8009dfc <xQueueGenericSendFromISR+0xbc>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d12c      	bne.n	8009e56 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0c:	f000 f910 	bl	800a030 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d112      	bne.n	8009e40 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d016      	beq.n	8009e50 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	3324      	adds	r3, #36	; 0x24
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 f802 	bl	800ae30 <xTaskRemoveFromEventList>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e007      	b.n	8009e50 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e44:	3301      	adds	r3, #1
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	b25a      	sxtb	r2, r3
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e50:	2301      	movs	r3, #1
 8009e52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009e54:	e001      	b.n	8009e5a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f383 8811 	msr	BASEPRI, r3
}
 8009e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3738      	adds	r7, #56	; 0x38
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08c      	sub	sp, #48	; 0x30
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <xQueueReceive+0x30>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	623b      	str	r3, [r7, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <xQueueReceive+0x3e>
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <xQueueReceive+0x42>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueReceive+0x44>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <xQueueReceive+0x5e>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	61fb      	str	r3, [r7, #28]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ece:	f001 f9e9 	bl	800b2a4 <xTaskGetSchedulerState>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <xQueueReceive+0x6e>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <xQueueReceive+0x72>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <xQueueReceive+0x74>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xQueueReceive+0x8e>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009efe:	f001 ff11 	bl	800bd24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01f      	beq.n	8009f4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f12:	f000 f8f7 	bl	800a104 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00f      	beq.n	8009f46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	3310      	adds	r3, #16
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 ff80 	bl	800ae30 <xTaskRemoveFromEventList>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f36:	4b3d      	ldr	r3, [pc, #244]	; (800a02c <xQueueReceive+0x1bc>)
 8009f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f46:	f001 ff1d 	bl	800bd84 <vPortExitCritical>
				return pdPASS;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e069      	b.n	800a022 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f54:	f001 ff16 	bl	800bd84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	e062      	b.n	800a022 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d106      	bne.n	8009f70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f62:	f107 0310 	add.w	r3, r7, #16
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 f828 	bl	800afbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f70:	f001 ff08 	bl	800bd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f74:	f000 fd2e 	bl	800a9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f78:	f001 fed4 	bl	800bd24 <vPortEnterCritical>
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f82:	b25b      	sxtb	r3, r3
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d103      	bne.n	8009f92 <xQueueReceive+0x122>
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f98:	b25b      	sxtb	r3, r3
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9e:	d103      	bne.n	8009fa8 <xQueueReceive+0x138>
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fa8:	f001 feec 	bl	800bd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fac:	1d3a      	adds	r2, r7, #4
 8009fae:	f107 0310 	add.w	r3, r7, #16
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f817 	bl	800afe8 <xTaskCheckForTimeOut>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d123      	bne.n	800a008 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fc2:	f000 f917 	bl	800a1f4 <prvIsQueueEmpty>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d017      	beq.n	8009ffc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	3324      	adds	r3, #36	; 0x24
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fedb 	bl	800ad90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fdc:	f000 f8b8 	bl	800a150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fe0:	f000 fd06 	bl	800a9f0 <xTaskResumeAll>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d189      	bne.n	8009efe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <xQueueReceive+0x1bc>)
 8009fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	e780      	b.n	8009efe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffe:	f000 f8a7 	bl	800a150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a002:	f000 fcf5 	bl	800a9f0 <xTaskResumeAll>
 800a006:	e77a      	b.n	8009efe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a00a:	f000 f8a1 	bl	800a150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a00e:	f000 fcef 	bl	800a9f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a014:	f000 f8ee 	bl	800a1f4 <prvIsQueueEmpty>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f43f af6f 	beq.w	8009efe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a022:	4618      	mov	r0, r3
 800a024:	3730      	adds	r7, #48	; 0x30
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10d      	bne.n	800a06a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d14d      	bne.n	800a0f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 f940 	bl	800b2e0 <xTaskPriorityDisinherit>
 800a060:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	e043      	b.n	800a0f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d119      	bne.n	800a0a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6898      	ldr	r0, [r3, #8]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	461a      	mov	r2, r3
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	f003 f891 	bl	800d1a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	441a      	add	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d32b      	bcc.n	800a0f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	609a      	str	r2, [r3, #8]
 800a0a2:	e026      	b.n	800a0f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68d8      	ldr	r0, [r3, #12]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	f003 f877 	bl	800d1a2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68da      	ldr	r2, [r3, #12]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0bc:	425b      	negs	r3, r3
 800a0be:	441a      	add	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d207      	bcs.n	800a0e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d8:	425b      	negs	r3, r3
 800a0da:	441a      	add	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d105      	bne.n	800a0f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0fa:	697b      	ldr	r3, [r7, #20]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d018      	beq.n	800a148 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	441a      	add	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d303      	bcc.n	800a138 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68d9      	ldr	r1, [r3, #12]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	461a      	mov	r2, r3
 800a142:	6838      	ldr	r0, [r7, #0]
 800a144:	f003 f82d 	bl	800d1a2 <memcpy>
	}
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a158:	f001 fde4 	bl	800bd24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a162:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a164:	e011      	b.n	800a18a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d012      	beq.n	800a194 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3324      	adds	r3, #36	; 0x24
 800a172:	4618      	mov	r0, r3
 800a174:	f000 fe5c 	bl	800ae30 <xTaskRemoveFromEventList>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a17e:	f000 ff95 	bl	800b0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	3b01      	subs	r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dce9      	bgt.n	800a166 <prvUnlockQueue+0x16>
 800a192:	e000      	b.n	800a196 <prvUnlockQueue+0x46>
					break;
 800a194:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	22ff      	movs	r2, #255	; 0xff
 800a19a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a19e:	f001 fdf1 	bl	800bd84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1a2:	f001 fdbf 	bl	800bd24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1ae:	e011      	b.n	800a1d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d012      	beq.n	800a1de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3310      	adds	r3, #16
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fe37 	bl	800ae30 <xTaskRemoveFromEventList>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1c8:	f000 ff70 	bl	800b0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dce9      	bgt.n	800a1b0 <prvUnlockQueue+0x60>
 800a1dc:	e000      	b.n	800a1e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	22ff      	movs	r2, #255	; 0xff
 800a1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1e8:	f001 fdcc 	bl	800bd84 <vPortExitCritical>
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1fc:	f001 fd92 	bl	800bd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	e001      	b.n	800a212 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a212:	f001 fdb7 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800a216:	68fb      	ldr	r3, [r7, #12]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a228:	f001 fd7c 	bl	800bd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a234:	429a      	cmp	r2, r3
 800a236:	d102      	bne.n	800a23e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a238:	2301      	movs	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	e001      	b.n	800a242 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a242:	f001 fd9f 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800a246:	68fb      	ldr	r3, [r7, #12]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	e014      	b.n	800a28a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a260:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <vQueueAddToRegistry+0x50>)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10b      	bne.n	800a284 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a26c:	490c      	ldr	r1, [pc, #48]	; (800a2a0 <vQueueAddToRegistry+0x50>)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a276:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <vQueueAddToRegistry+0x50>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	4413      	add	r3, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a282:	e006      	b.n	800a292 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3301      	adds	r3, #1
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d9e7      	bls.n	800a260 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000e4c 	.word	0x20000e4c

0800a2a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2b4:	f001 fd36 	bl	800bd24 <vPortEnterCritical>
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d103      	bne.n	800a2ce <vQueueWaitForMessageRestricted+0x2a>
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2d4:	b25b      	sxtb	r3, r3
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d103      	bne.n	800a2e4 <vQueueWaitForMessageRestricted+0x40>
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e4:	f001 fd4e 	bl	800bd84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fd6d 	bl	800add8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a2fe:	6978      	ldr	r0, [r7, #20]
 800a300:	f7ff ff26 	bl	800a150 <prvUnlockQueue>
	}
 800a304:	bf00      	nop
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08e      	sub	sp, #56	; 0x38
 800a310:	af04      	add	r7, sp, #16
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xTaskCreateStatic+0x46>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	61fb      	str	r3, [r7, #28]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a352:	23ac      	movs	r3, #172	; 0xac
 800a354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2bac      	cmp	r3, #172	; 0xac
 800a35a:	d00a      	beq.n	800a372 <xTaskCreateStatic+0x66>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	61bb      	str	r3, [r7, #24]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01e      	beq.n	800a3b6 <xTaskCreateStatic+0xaa>
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01b      	beq.n	800a3b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a386:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a390:	2300      	movs	r3, #0
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f851 	bl	800a450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3b0:	f000 f8ec 	bl	800a58c <prvAddNewTaskToReadyList>
 800a3b4:	e001      	b.n	800a3ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3ba:	697b      	ldr	r3, [r7, #20]
	}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3728      	adds	r7, #40	; 0x28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08c      	sub	sp, #48	; 0x30
 800a3c8:	af04      	add	r7, sp, #16
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fdc5 	bl	800bf68 <pvPortMalloc>
 800a3de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00e      	beq.n	800a404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a3e6:	20ac      	movs	r0, #172	; 0xac
 800a3e8:	f001 fdbe 	bl	800bf68 <pvPortMalloc>
 800a3ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	631a      	str	r2, [r3, #48]	; 0x30
 800a3fa:	e005      	b.n	800a408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3fc:	6978      	ldr	r0, [r7, #20]
 800a3fe:	f001 fe77 	bl	800c0f0 <vPortFree>
 800a402:	e001      	b.n	800a408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d017      	beq.n	800a43e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a416:	88fa      	ldrh	r2, [r7, #6]
 800a418:	2300      	movs	r3, #0
 800a41a:	9303      	str	r3, [sp, #12]
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 f80f 	bl	800a450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a432:	69f8      	ldr	r0, [r7, #28]
 800a434:	f000 f8aa 	bl	800a58c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a438:	2301      	movs	r3, #1
 800a43a:	61bb      	str	r3, [r7, #24]
 800a43c:	e002      	b.n	800a444 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a43e:	f04f 33ff 	mov.w	r3, #4294967295
 800a442:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a444:	69bb      	ldr	r3, [r7, #24]
	}
 800a446:	4618      	mov	r0, r3
 800a448:	3720      	adds	r7, #32
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	461a      	mov	r2, r3
 800a468:	21a5      	movs	r1, #165	; 0xa5
 800a46a:	f002 fdc5 	bl	800cff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a478:	3b01      	subs	r3, #1
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f023 0307 	bic.w	r3, r3, #7
 800a486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	617b      	str	r3, [r7, #20]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	e012      	b.n	800a4d4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	7819      	ldrb	r1, [r3, #0]
 800a4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	3334      	adds	r3, #52	; 0x34
 800a4be:	460a      	mov	r2, r1
 800a4c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	2b13      	cmp	r3, #19
 800a4d8:	d9e9      	bls.n	800a4ae <prvInitialiseNewTask+0x5e>
 800a4da:	e000      	b.n	800a4de <prvInitialiseNewTask+0x8e>
		{
			break;
 800a4dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	2b37      	cmp	r3, #55	; 0x37
 800a4ea:	d901      	bls.n	800a4f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4ec:	2337      	movs	r3, #55	; 0x37
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	2200      	movs	r2, #0
 800a500:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	3304      	adds	r3, #4
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff f8fa 	bl	8009700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	3318      	adds	r3, #24
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff f8f5 	bl	8009700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a51a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	2200      	movs	r2, #0
 800a538:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	3358      	adds	r3, #88	; 0x58
 800a540:	224c      	movs	r2, #76	; 0x4c
 800a542:	2100      	movs	r1, #0
 800a544:	4618      	mov	r0, r3
 800a546:	f002 fd57 	bl	800cff8 <memset>
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <prvInitialiseNewTask+0x130>)
 800a54e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	4a0c      	ldr	r2, [pc, #48]	; (800a584 <prvInitialiseNewTask+0x134>)
 800a554:	661a      	str	r2, [r3, #96]	; 0x60
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <prvInitialiseNewTask+0x138>)
 800a55a:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	69b8      	ldr	r0, [r7, #24]
 800a562:	f001 fab1 	bl	800bac8 <pxPortInitialiseStack>
 800a566:	4602      	mov	r2, r0
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a578:	bf00      	nop
 800a57a:	3720      	adds	r7, #32
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	200028d8 	.word	0x200028d8
 800a584:	20002940 	.word	0x20002940
 800a588:	200029a8 	.word	0x200029a8

0800a58c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a594:	f001 fbc6 	bl	800bd24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a598:	4b2d      	ldr	r3, [pc, #180]	; (800a650 <prvAddNewTaskToReadyList+0xc4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3301      	adds	r3, #1
 800a59e:	4a2c      	ldr	r2, [pc, #176]	; (800a650 <prvAddNewTaskToReadyList+0xc4>)
 800a5a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5a2:	4b2c      	ldr	r3, [pc, #176]	; (800a654 <prvAddNewTaskToReadyList+0xc8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5aa:	4a2a      	ldr	r2, [pc, #168]	; (800a654 <prvAddNewTaskToReadyList+0xc8>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5b0:	4b27      	ldr	r3, [pc, #156]	; (800a650 <prvAddNewTaskToReadyList+0xc4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d110      	bne.n	800a5da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5b8:	f000 fd9c 	bl	800b0f4 <prvInitialiseTaskLists>
 800a5bc:	e00d      	b.n	800a5da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5be:	4b26      	ldr	r3, [pc, #152]	; (800a658 <prvAddNewTaskToReadyList+0xcc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d109      	bne.n	800a5da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5c6:	4b23      	ldr	r3, [pc, #140]	; (800a654 <prvAddNewTaskToReadyList+0xc8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d802      	bhi.n	800a5da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5d4:	4a1f      	ldr	r2, [pc, #124]	; (800a654 <prvAddNewTaskToReadyList+0xc8>)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5da:	4b20      	ldr	r3, [pc, #128]	; (800a65c <prvAddNewTaskToReadyList+0xd0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	4a1e      	ldr	r2, [pc, #120]	; (800a65c <prvAddNewTaskToReadyList+0xd0>)
 800a5e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5e4:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <prvAddNewTaskToReadyList+0xd0>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f0:	4b1b      	ldr	r3, [pc, #108]	; (800a660 <prvAddNewTaskToReadyList+0xd4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d903      	bls.n	800a600 <prvAddNewTaskToReadyList+0x74>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	4a18      	ldr	r2, [pc, #96]	; (800a660 <prvAddNewTaskToReadyList+0xd4>)
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4a15      	ldr	r2, [pc, #84]	; (800a664 <prvAddNewTaskToReadyList+0xd8>)
 800a60e:	441a      	add	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7ff f87f 	bl	800971a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a61c:	f001 fbb2 	bl	800bd84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <prvAddNewTaskToReadyList+0xcc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00e      	beq.n	800a646 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <prvAddNewTaskToReadyList+0xc8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d207      	bcs.n	800a646 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a636:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <prvAddNewTaskToReadyList+0xdc>)
 800a638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20001360 	.word	0x20001360
 800a654:	20000e8c 	.word	0x20000e8c
 800a658:	2000136c 	.word	0x2000136c
 800a65c:	2000137c 	.word	0x2000137c
 800a660:	20001368 	.word	0x20001368
 800a664:	20000e90 	.word	0x20000e90
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d017      	beq.n	800a6ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <vTaskDelay+0x60>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <vTaskDelay+0x30>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60bb      	str	r3, [r7, #8]
}
 800a698:	bf00      	nop
 800a69a:	e7fe      	b.n	800a69a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a69c:	f000 f99a 	bl	800a9d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fe8a 	bl	800b3bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6a8:	f000 f9a2 	bl	800a9f0 <xTaskResumeAll>
 800a6ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d107      	bne.n	800a6c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6b4:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <vTaskDelay+0x64>)
 800a6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20001388 	.word	0x20001388
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a6dc:	f001 fb22 	bl	800bd24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <vTaskSuspend+0x18>
 800a6e6:	4b30      	ldr	r3, [pc, #192]	; (800a7a8 <vTaskSuspend+0xd4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	e000      	b.n	800a6ee <vTaskSuspend+0x1a>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff f86d 	bl	80097d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3318      	adds	r3, #24
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff f864 	bl	80097d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4826      	ldr	r0, [pc, #152]	; (800a7ac <vTaskSuspend+0xd8>)
 800a714:	f7ff f801 	bl	800971a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d103      	bne.n	800a72c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a72c:	f001 fb2a 	bl	800bd84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a730:	4b1f      	ldr	r3, [pc, #124]	; (800a7b0 <vTaskSuspend+0xdc>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a738:	f001 faf4 	bl	800bd24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a73c:	f000 fd7c 	bl	800b238 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a740:	f001 fb20 	bl	800bd84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a744:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <vTaskSuspend+0xd4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d127      	bne.n	800a79e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a74e:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <vTaskSuspend+0xdc>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d017      	beq.n	800a786 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a756:	4b17      	ldr	r3, [pc, #92]	; (800a7b4 <vTaskSuspend+0xe0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <vTaskSuspend+0xa0>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60bb      	str	r3, [r7, #8]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <vTaskSuspend+0xe4>)
 800a776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a784:	e00b      	b.n	800a79e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a786:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <vTaskSuspend+0xd8>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	4b0c      	ldr	r3, [pc, #48]	; (800a7bc <vTaskSuspend+0xe8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d103      	bne.n	800a79a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <vTaskSuspend+0xd4>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
	}
 800a798:	e001      	b.n	800a79e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a79a:	f000 fa95 	bl	800acc8 <vTaskSwitchContext>
	}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000e8c 	.word	0x20000e8c
 800a7ac:	2000134c 	.word	0x2000134c
 800a7b0:	2000136c 	.word	0x2000136c
 800a7b4:	20001388 	.word	0x20001388
 800a7b8:	e000ed04 	.word	0xe000ed04
 800a7bc:	20001360 	.word	0x20001360

0800a7c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	4a0f      	ldr	r2, [pc, #60]	; (800a830 <prvTaskIsTaskSuspended+0x70>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d101      	bne.n	800a7fa <prvTaskIsTaskSuspended+0x3a>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <prvTaskIsTaskSuspended+0x3c>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00f      	beq.n	800a820 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	4a0b      	ldr	r2, [pc, #44]	; (800a834 <prvTaskIsTaskSuspended+0x74>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00a      	beq.n	800a820 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <prvTaskIsTaskSuspended+0x56>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <prvTaskIsTaskSuspended+0x58>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a820:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a822:	4618      	mov	r0, r3
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	2000134c 	.word	0x2000134c
 800a834:	20001320 	.word	0x20001320

0800a838 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <vTaskResume+0x28>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60bb      	str	r3, [r7, #8]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d03a      	beq.n	800a8dc <vTaskResume+0xa4>
 800a866:	4b1f      	ldr	r3, [pc, #124]	; (800a8e4 <vTaskResume+0xac>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d035      	beq.n	800a8dc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a870:	f001 fa58 	bl	800bd24 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff ffa3 	bl	800a7c0 <prvTaskIsTaskSuspended>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d02b      	beq.n	800a8d8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3304      	adds	r3, #4
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe ffa5 	bl	80097d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88e:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <vTaskResume+0xb0>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d903      	bls.n	800a89e <vTaskResume+0x66>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	4a13      	ldr	r2, [pc, #76]	; (800a8e8 <vTaskResume+0xb0>)
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4a10      	ldr	r2, [pc, #64]	; (800a8ec <vTaskResume+0xb4>)
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7fe ff30 	bl	800971a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <vTaskResume+0xac>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d307      	bcc.n	800a8d8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a8c8:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <vTaskResume+0xb8>)
 800a8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a8d8:	f001 fa54 	bl	800bd84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000e8c 	.word	0x20000e8c
 800a8e8:	20001368 	.word	0x20001368
 800a8ec:	20000e90 	.word	0x20000e90
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	; 0x28
 800a8f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a902:	463a      	mov	r2, r7
 800a904:	1d39      	adds	r1, r7, #4
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fd28 	bl	8009360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	9202      	str	r2, [sp, #8]
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	2300      	movs	r3, #0
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	2300      	movs	r3, #0
 800a920:	460a      	mov	r2, r1
 800a922:	4924      	ldr	r1, [pc, #144]	; (800a9b4 <vTaskStartScheduler+0xc0>)
 800a924:	4824      	ldr	r0, [pc, #144]	; (800a9b8 <vTaskStartScheduler+0xc4>)
 800a926:	f7ff fcf1 	bl	800a30c <xTaskCreateStatic>
 800a92a:	4603      	mov	r3, r0
 800a92c:	4a23      	ldr	r2, [pc, #140]	; (800a9bc <vTaskStartScheduler+0xc8>)
 800a92e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a930:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <vTaskStartScheduler+0xc8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a938:	2301      	movs	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	e001      	b.n	800a942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d102      	bne.n	800a94e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a948:	f000 fd8c 	bl	800b464 <xTimerCreateTimerTask>
 800a94c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d11b      	bne.n	800a98c <vTaskStartScheduler+0x98>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	613b      	str	r3, [r7, #16]
}
 800a966:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <vTaskStartScheduler+0xcc>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3358      	adds	r3, #88	; 0x58
 800a96e:	4a15      	ldr	r2, [pc, #84]	; (800a9c4 <vTaskStartScheduler+0xd0>)
 800a970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a972:	4b15      	ldr	r3, [pc, #84]	; (800a9c8 <vTaskStartScheduler+0xd4>)
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a97a:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <vTaskStartScheduler+0xd8>)
 800a97c:	2201      	movs	r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <vTaskStartScheduler+0xdc>)
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a986:	f001 f92b 	bl	800bbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a98a:	e00e      	b.n	800a9aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a992:	d10a      	bne.n	800a9aa <vTaskStartScheduler+0xb6>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60fb      	str	r3, [r7, #12]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <vTaskStartScheduler+0xb4>
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800f1d8 	.word	0x0800f1d8
 800a9b8:	0800b0c5 	.word	0x0800b0c5
 800a9bc:	20001384 	.word	0x20001384
 800a9c0:	20000e8c 	.word	0x20000e8c
 800a9c4:	200000f4 	.word	0x200000f4
 800a9c8:	20001380 	.word	0x20001380
 800a9cc:	2000136c 	.word	0x2000136c
 800a9d0:	20001364 	.word	0x20001364

0800a9d4 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <vTaskSuspendAll+0x18>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	4a03      	ldr	r2, [pc, #12]	; (800a9ec <vTaskSuspendAll+0x18>)
 800a9e0:	6013      	str	r3, [r2, #0]
}
 800a9e2:	bf00      	nop
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20001388 	.word	0x20001388

0800a9f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9fe:	4b42      	ldr	r3, [pc, #264]	; (800ab08 <xTaskResumeAll+0x118>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10a      	bne.n	800aa1c <xTaskResumeAll+0x2c>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	603b      	str	r3, [r7, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	e7fe      	b.n	800aa1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa1c:	f001 f982 	bl	800bd24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa20:	4b39      	ldr	r3, [pc, #228]	; (800ab08 <xTaskResumeAll+0x118>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	4a38      	ldr	r2, [pc, #224]	; (800ab08 <xTaskResumeAll+0x118>)
 800aa28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa2a:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <xTaskResumeAll+0x118>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d162      	bne.n	800aaf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa32:	4b36      	ldr	r3, [pc, #216]	; (800ab0c <xTaskResumeAll+0x11c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d05e      	beq.n	800aaf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa3a:	e02f      	b.n	800aa9c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aa3c:	4b34      	ldr	r3, [pc, #208]	; (800ab10 <xTaskResumeAll+0x120>)
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3318      	adds	r3, #24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fec3 	bl	80097d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe febe 	bl	80097d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4b2d      	ldr	r3, [pc, #180]	; (800ab14 <xTaskResumeAll+0x124>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d903      	bls.n	800aa6c <xTaskResumeAll+0x7c>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <xTaskResumeAll+0x124>)
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa70:	4613      	mov	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4a27      	ldr	r2, [pc, #156]	; (800ab18 <xTaskResumeAll+0x128>)
 800aa7a:	441a      	add	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7fe fe49 	bl	800971a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8c:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <xTaskResumeAll+0x12c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d302      	bcc.n	800aa9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa96:	4b22      	ldr	r3, [pc, #136]	; (800ab20 <xTaskResumeAll+0x130>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa9c:	4b1c      	ldr	r3, [pc, #112]	; (800ab10 <xTaskResumeAll+0x120>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1cb      	bne.n	800aa3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aaaa:	f000 fbc5 	bl	800b238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aaae:	4b1d      	ldr	r3, [pc, #116]	; (800ab24 <xTaskResumeAll+0x134>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d010      	beq.n	800aadc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aaba:	f000 f847 	bl	800ab4c <xTaskIncrementTick>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aac4:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <xTaskResumeAll+0x130>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3b01      	subs	r3, #1
 800aace:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1f1      	bne.n	800aaba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <xTaskResumeAll+0x134>)
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aadc:	4b10      	ldr	r3, [pc, #64]	; (800ab20 <xTaskResumeAll+0x130>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aae8:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <xTaskResumeAll+0x138>)
 800aaea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaf8:	f001 f944 	bl	800bd84 <vPortExitCritical>

	return xAlreadyYielded;
 800aafc:	68bb      	ldr	r3, [r7, #8]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	20001388 	.word	0x20001388
 800ab0c:	20001360 	.word	0x20001360
 800ab10:	20001320 	.word	0x20001320
 800ab14:	20001368 	.word	0x20001368
 800ab18:	20000e90 	.word	0x20000e90
 800ab1c:	20000e8c 	.word	0x20000e8c
 800ab20:	20001374 	.word	0x20001374
 800ab24:	20001370 	.word	0x20001370
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab32:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <xTaskGetTickCount+0x1c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab38:	687b      	ldr	r3, [r7, #4]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20001364 	.word	0x20001364

0800ab4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab56:	4b51      	ldr	r3, [pc, #324]	; (800ac9c <xTaskIncrementTick+0x150>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 808e 	bne.w	800ac7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab60:	4b4f      	ldr	r3, [pc, #316]	; (800aca0 <xTaskIncrementTick+0x154>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab68:	4a4d      	ldr	r2, [pc, #308]	; (800aca0 <xTaskIncrementTick+0x154>)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d120      	bne.n	800abb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab74:	4b4b      	ldr	r3, [pc, #300]	; (800aca4 <xTaskIncrementTick+0x158>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	603b      	str	r3, [r7, #0]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <xTaskIncrementTick+0x46>
 800ab94:	4b43      	ldr	r3, [pc, #268]	; (800aca4 <xTaskIncrementTick+0x158>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	4b43      	ldr	r3, [pc, #268]	; (800aca8 <xTaskIncrementTick+0x15c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a41      	ldr	r2, [pc, #260]	; (800aca4 <xTaskIncrementTick+0x158>)
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4a41      	ldr	r2, [pc, #260]	; (800aca8 <xTaskIncrementTick+0x15c>)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	4b40      	ldr	r3, [pc, #256]	; (800acac <xTaskIncrementTick+0x160>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a3f      	ldr	r2, [pc, #252]	; (800acac <xTaskIncrementTick+0x160>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	f000 fb41 	bl	800b238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abb6:	4b3e      	ldr	r3, [pc, #248]	; (800acb0 <xTaskIncrementTick+0x164>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d34e      	bcc.n	800ac5e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abc0:	4b38      	ldr	r3, [pc, #224]	; (800aca4 <xTaskIncrementTick+0x158>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <xTaskIncrementTick+0x82>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <xTaskIncrementTick+0x84>
 800abce:	2300      	movs	r3, #0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd4:	4b36      	ldr	r3, [pc, #216]	; (800acb0 <xTaskIncrementTick+0x164>)
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295
 800abda:	601a      	str	r2, [r3, #0]
					break;
 800abdc:	e03f      	b.n	800ac5e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800abde:	4b31      	ldr	r3, [pc, #196]	; (800aca4 <xTaskIncrementTick+0x158>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d203      	bcs.n	800abfe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abf6:	4a2e      	ldr	r2, [pc, #184]	; (800acb0 <xTaskIncrementTick+0x164>)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6013      	str	r3, [r2, #0]
						break;
 800abfc:	e02f      	b.n	800ac5e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fde6 	bl	80097d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d004      	beq.n	800ac1a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	3318      	adds	r3, #24
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fddd 	bl	80097d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	4b25      	ldr	r3, [pc, #148]	; (800acb4 <xTaskIncrementTick+0x168>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d903      	bls.n	800ac2e <xTaskIncrementTick+0xe2>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	4a22      	ldr	r2, [pc, #136]	; (800acb4 <xTaskIncrementTick+0x168>)
 800ac2c:	6013      	str	r3, [r2, #0]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4a1f      	ldr	r2, [pc, #124]	; (800acb8 <xTaskIncrementTick+0x16c>)
 800ac3c:	441a      	add	r2, r3
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4619      	mov	r1, r3
 800ac44:	4610      	mov	r0, r2
 800ac46:	f7fe fd68 	bl	800971a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4e:	4b1b      	ldr	r3, [pc, #108]	; (800acbc <xTaskIncrementTick+0x170>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d3b3      	bcc.n	800abc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac5c:	e7b0      	b.n	800abc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac5e:	4b17      	ldr	r3, [pc, #92]	; (800acbc <xTaskIncrementTick+0x170>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	4914      	ldr	r1, [pc, #80]	; (800acb8 <xTaskIncrementTick+0x16c>)
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d907      	bls.n	800ac86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ac76:	2301      	movs	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	e004      	b.n	800ac86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac7c:	4b10      	ldr	r3, [pc, #64]	; (800acc0 <xTaskIncrementTick+0x174>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <xTaskIncrementTick+0x174>)
 800ac84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac86:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <xTaskIncrementTick+0x178>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac92:	697b      	ldr	r3, [r7, #20]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20001388 	.word	0x20001388
 800aca0:	20001364 	.word	0x20001364
 800aca4:	20001318 	.word	0x20001318
 800aca8:	2000131c 	.word	0x2000131c
 800acac:	20001378 	.word	0x20001378
 800acb0:	20001380 	.word	0x20001380
 800acb4:	20001368 	.word	0x20001368
 800acb8:	20000e90 	.word	0x20000e90
 800acbc:	20000e8c 	.word	0x20000e8c
 800acc0:	20001370 	.word	0x20001370
 800acc4:	20001374 	.word	0x20001374

0800acc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acce:	4b2a      	ldr	r3, [pc, #168]	; (800ad78 <vTaskSwitchContext+0xb0>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acd6:	4b29      	ldr	r3, [pc, #164]	; (800ad7c <vTaskSwitchContext+0xb4>)
 800acd8:	2201      	movs	r2, #1
 800acda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acdc:	e046      	b.n	800ad6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <vTaskSwitchContext+0xb4>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ace4:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <vTaskSwitchContext+0xb8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60fb      	str	r3, [r7, #12]
 800acea:	e010      	b.n	800ad0e <vTaskSwitchContext+0x46>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <vTaskSwitchContext+0x40>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	607b      	str	r3, [r7, #4]
}
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <vTaskSwitchContext+0x3e>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	60fb      	str	r3, [r7, #12]
 800ad0e:	491d      	ldr	r1, [pc, #116]	; (800ad84 <vTaskSwitchContext+0xbc>)
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	440b      	add	r3, r1
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0e4      	beq.n	800acec <vTaskSwitchContext+0x24>
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <vTaskSwitchContext+0xbc>)
 800ad2e:	4413      	add	r3, r2
 800ad30:	60bb      	str	r3, [r7, #8]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	605a      	str	r2, [r3, #4]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3308      	adds	r3, #8
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d104      	bne.n	800ad52 <vTaskSwitchContext+0x8a>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	4a0b      	ldr	r2, [pc, #44]	; (800ad88 <vTaskSwitchContext+0xc0>)
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <vTaskSwitchContext+0xb8>)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <vTaskSwitchContext+0xc0>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3358      	adds	r3, #88	; 0x58
 800ad68:	4a08      	ldr	r2, [pc, #32]	; (800ad8c <vTaskSwitchContext+0xc4>)
 800ad6a:	6013      	str	r3, [r2, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20001388 	.word	0x20001388
 800ad7c:	20001374 	.word	0x20001374
 800ad80:	20001368 	.word	0x20001368
 800ad84:	20000e90 	.word	0x20000e90
 800ad88:	20000e8c 	.word	0x20000e8c
 800ad8c:	200000f4 	.word	0x200000f4

0800ad90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adb6:	4b07      	ldr	r3, [pc, #28]	; (800add4 <vTaskPlaceOnEventList+0x44>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3318      	adds	r3, #24
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7fe fccf 	bl	8009762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adc4:	2101      	movs	r1, #1
 800adc6:	6838      	ldr	r0, [r7, #0]
 800adc8:	f000 faf8 	bl	800b3bc <prvAddCurrentTaskToDelayedList>
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	20000e8c 	.word	0x20000e8c

0800add8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10a      	bne.n	800ae00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	617b      	str	r3, [r7, #20]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <vTaskPlaceOnEventListRestricted+0x54>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4619      	mov	r1, r3
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7fe fc86 	bl	800971a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	68b8      	ldr	r0, [r7, #8]
 800ae1e:	f000 facd 	bl	800b3bc <prvAddCurrentTaskToDelayedList>
	}
 800ae22:	bf00      	nop
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000e8c 	.word	0x20000e8c

0800ae30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	60fb      	str	r3, [r7, #12]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fcb7 	bl	80097d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae66:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <xTaskRemoveFromEventList+0xb0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d11d      	bne.n	800aeaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fcae 	bl	80097d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <xTaskRemoveFromEventList+0xb4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <xTaskRemoveFromEventList+0x5c>
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a16      	ldr	r2, [pc, #88]	; (800aee4 <xTaskRemoveFromEventList+0xb4>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a13      	ldr	r2, [pc, #76]	; (800aee8 <xTaskRemoveFromEventList+0xb8>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe fc39 	bl	800971a <vListInsertEnd>
 800aea8:	e005      	b.n	800aeb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	3318      	adds	r3, #24
 800aeae:	4619      	mov	r1, r3
 800aeb0:	480e      	ldr	r0, [pc, #56]	; (800aeec <xTaskRemoveFromEventList+0xbc>)
 800aeb2:	f7fe fc32 	bl	800971a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <xTaskRemoveFromEventList+0xc0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d905      	bls.n	800aed0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <xTaskRemoveFromEventList+0xc4>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e001      	b.n	800aed4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aed4:	697b      	ldr	r3, [r7, #20]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20001388 	.word	0x20001388
 800aee4:	20001368 	.word	0x20001368
 800aee8:	20000e90 	.word	0x20000e90
 800aeec:	20001320 	.word	0x20001320
 800aef0:	20000e8c 	.word	0x20000e8c
 800aef4:	20001374 	.word	0x20001374

0800aef8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800af02:	4b29      	ldr	r3, [pc, #164]	; (800afa8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	613b      	str	r3, [r7, #16]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	60fb      	str	r3, [r7, #12]
}
 800af48:	bf00      	nop
 800af4a:	e7fe      	b.n	800af4a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7fe fc41 	bl	80097d4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	3304      	adds	r3, #4
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fc3c 	bl	80097d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af60:	4b12      	ldr	r3, [pc, #72]	; (800afac <vTaskRemoveFromUnorderedEventList+0xb4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d903      	bls.n	800af70 <vTaskRemoveFromUnorderedEventList+0x78>
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	4a0f      	ldr	r2, [pc, #60]	; (800afac <vTaskRemoveFromUnorderedEventList+0xb4>)
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800af7e:	441a      	add	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	3304      	adds	r3, #4
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7fe fbc7 	bl	800971a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af90:	4b08      	ldr	r3, [pc, #32]	; (800afb4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	429a      	cmp	r2, r3
 800af98:	d902      	bls.n	800afa0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800af9a:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800af9c:	2201      	movs	r2, #1
 800af9e:	601a      	str	r2, [r3, #0]
	}
}
 800afa0:	bf00      	nop
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20001388 	.word	0x20001388
 800afac:	20001368 	.word	0x20001368
 800afb0:	20000e90 	.word	0x20000e90
 800afb4:	20000e8c 	.word	0x20000e8c
 800afb8:	20001374 	.word	0x20001374

0800afbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <vTaskInternalSetTimeOutState+0x24>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <vTaskInternalSetTimeOutState+0x28>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	605a      	str	r2, [r3, #4]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20001378 	.word	0x20001378
 800afe4:	20001364 	.word	0x20001364

0800afe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	613b      	str	r3, [r7, #16]
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b02a:	f000 fe7b 	bl	800bd24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <xTaskCheckForTimeOut+0xbc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b046:	d102      	bne.n	800b04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b048:	2300      	movs	r3, #0
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	e023      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <xTaskCheckForTimeOut+0xc0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d007      	beq.n	800b06a <xTaskCheckForTimeOut+0x82>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	429a      	cmp	r2, r3
 800b062:	d302      	bcc.n	800b06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	e015      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d20b      	bcs.n	800b08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	1ad2      	subs	r2, r2, r3
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ff9b 	bl	800afbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	61fb      	str	r3, [r7, #28]
 800b08a:	e004      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b092:	2301      	movs	r3, #1
 800b094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b096:	f000 fe75 	bl	800bd84 <vPortExitCritical>

	return xReturn;
 800b09a:	69fb      	ldr	r3, [r7, #28]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20001364 	.word	0x20001364
 800b0a8:	20001378 	.word	0x20001378

0800b0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <vTaskMissedYield+0x14>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	20001374 	.word	0x20001374

0800b0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0cc:	f000 f852 	bl	800b174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0d0:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <prvIdleTask+0x28>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d9f9      	bls.n	800b0cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <prvIdleTask+0x2c>)
 800b0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0e8:	e7f0      	b.n	800b0cc <prvIdleTask+0x8>
 800b0ea:	bf00      	nop
 800b0ec:	20000e90 	.word	0x20000e90
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	607b      	str	r3, [r7, #4]
 800b0fe:	e00c      	b.n	800b11a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4a12      	ldr	r2, [pc, #72]	; (800b154 <prvInitialiseTaskLists+0x60>)
 800b10c:	4413      	add	r3, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fad6 	bl	80096c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b37      	cmp	r3, #55	; 0x37
 800b11e:	d9ef      	bls.n	800b100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b120:	480d      	ldr	r0, [pc, #52]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b122:	f7fe facd 	bl	80096c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b126:	480d      	ldr	r0, [pc, #52]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b128:	f7fe faca 	bl	80096c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b12c:	480c      	ldr	r0, [pc, #48]	; (800b160 <prvInitialiseTaskLists+0x6c>)
 800b12e:	f7fe fac7 	bl	80096c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b132:	480c      	ldr	r0, [pc, #48]	; (800b164 <prvInitialiseTaskLists+0x70>)
 800b134:	f7fe fac4 	bl	80096c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b138:	480b      	ldr	r0, [pc, #44]	; (800b168 <prvInitialiseTaskLists+0x74>)
 800b13a:	f7fe fac1 	bl	80096c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <prvInitialiseTaskLists+0x78>)
 800b140:	4a05      	ldr	r2, [pc, #20]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b144:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <prvInitialiseTaskLists+0x7c>)
 800b146:	4a05      	ldr	r2, [pc, #20]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b148:	601a      	str	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000e90 	.word	0x20000e90
 800b158:	200012f0 	.word	0x200012f0
 800b15c:	20001304 	.word	0x20001304
 800b160:	20001320 	.word	0x20001320
 800b164:	20001334 	.word	0x20001334
 800b168:	2000134c 	.word	0x2000134c
 800b16c:	20001318 	.word	0x20001318
 800b170:	2000131c 	.word	0x2000131c

0800b174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b17a:	e019      	b.n	800b1b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b17c:	f000 fdd2 	bl	800bd24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <prvCheckTasksWaitingTermination+0x50>)
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fb21 	bl	80097d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a0b      	ldr	r2, [pc, #44]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b19a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b19c:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1a6:	f000 fded 	bl	800bd84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f810 	bl	800b1d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e1      	bne.n	800b17c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20001334 	.word	0x20001334
 800b1c8:	20001360 	.word	0x20001360
 800b1cc:	20001348 	.word	0x20001348

0800b1d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3358      	adds	r3, #88	; 0x58
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 ff27 	bl	800d030 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d108      	bne.n	800b1fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 ff7d 	bl	800c0f0 <vPortFree>
				vPortFree( pxTCB );
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 ff7a 	bl	800c0f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1fc:	e018      	b.n	800b230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b204:	2b01      	cmp	r3, #1
 800b206:	d103      	bne.n	800b210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 ff71 	bl	800c0f0 <vPortFree>
	}
 800b20e:	e00f      	b.n	800b230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b216:	2b02      	cmp	r3, #2
 800b218:	d00a      	beq.n	800b230 <prvDeleteTCB+0x60>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60fb      	str	r3, [r7, #12]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <prvDeleteTCB+0x5e>
	}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <prvResetNextTaskUnblockTime+0x44>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <prvResetNextTaskUnblockTime+0x14>
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <prvResetNextTaskUnblockTime+0x16>
 800b24c:	2300      	movs	r3, #0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b252:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <prvResetNextTaskUnblockTime+0x48>)
 800b254:	f04f 32ff 	mov.w	r2, #4294967295
 800b258:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b25a:	e008      	b.n	800b26e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b25c:	4b07      	ldr	r3, [pc, #28]	; (800b27c <prvResetNextTaskUnblockTime+0x44>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	4a05      	ldr	r2, [pc, #20]	; (800b280 <prvResetNextTaskUnblockTime+0x48>)
 800b26c:	6013      	str	r3, [r2, #0]
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	20001318 	.word	0x20001318
 800b280:	20001380 	.word	0x20001380

0800b284 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <xTaskGetCurrentTaskHandle+0x1c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b290:	687b      	ldr	r3, [r7, #4]
	}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20000e8c 	.word	0x20000e8c

0800b2a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2aa:	4b0b      	ldr	r3, [pc, #44]	; (800b2d8 <xTaskGetSchedulerState+0x34>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	e008      	b.n	800b2ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2b8:	4b08      	ldr	r3, [pc, #32]	; (800b2dc <xTaskGetSchedulerState+0x38>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	607b      	str	r3, [r7, #4]
 800b2c4:	e001      	b.n	800b2ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2ca:	687b      	ldr	r3, [r7, #4]
	}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	2000136c 	.word	0x2000136c
 800b2dc:	20001388 	.word	0x20001388

0800b2e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d056      	beq.n	800b3a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2f6:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <xTaskPriorityDisinherit+0xd0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d00a      	beq.n	800b316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	60fb      	str	r3, [r7, #12]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	60bb      	str	r3, [r7, #8]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b338:	1e5a      	subs	r2, r3, #1
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b346:	429a      	cmp	r2, r3
 800b348:	d02c      	beq.n	800b3a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d128      	bne.n	800b3a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	3304      	adds	r3, #4
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fa3c 	bl	80097d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <xTaskPriorityDisinherit+0xd4>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d903      	bls.n	800b384 <xTaskPriorityDisinherit+0xa4>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	4a0c      	ldr	r2, [pc, #48]	; (800b3b4 <xTaskPriorityDisinherit+0xd4>)
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <xTaskPriorityDisinherit+0xd8>)
 800b392:	441a      	add	r2, r3
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	3304      	adds	r3, #4
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fe f9bd 	bl	800971a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3a4:	697b      	ldr	r3, [r7, #20]
	}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000e8c 	.word	0x20000e8c
 800b3b4:	20001368 	.word	0x20001368
 800b3b8:	20000e90 	.word	0x20000e90

0800b3bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3c6:	4b21      	ldr	r3, [pc, #132]	; (800b44c <prvAddCurrentTaskToDelayedList+0x90>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3cc:	4b20      	ldr	r3, [pc, #128]	; (800b450 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe f9fe 	bl	80097d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3de:	d10a      	bne.n	800b3f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e6:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4819      	ldr	r0, [pc, #100]	; (800b454 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3f0:	f7fe f993 	bl	800971a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3f4:	e026      	b.n	800b444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3fe:	4b14      	ldr	r3, [pc, #80]	; (800b450 <prvAddCurrentTaskToDelayedList+0x94>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d209      	bcs.n	800b422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b40e:	4b12      	ldr	r3, [pc, #72]	; (800b458 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <prvAddCurrentTaskToDelayedList+0x94>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3304      	adds	r3, #4
 800b418:	4619      	mov	r1, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	f7fe f9a1 	bl	8009762 <vListInsert>
}
 800b420:	e010      	b.n	800b444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b422:	4b0e      	ldr	r3, [pc, #56]	; (800b45c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <prvAddCurrentTaskToDelayedList+0x94>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fe f997 	bl	8009762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b434:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d202      	bcs.n	800b444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b43e:	4a08      	ldr	r2, [pc, #32]	; (800b460 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6013      	str	r3, [r2, #0]
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20001364 	.word	0x20001364
 800b450:	20000e8c 	.word	0x20000e8c
 800b454:	2000134c 	.word	0x2000134c
 800b458:	2000131c 	.word	0x2000131c
 800b45c:	20001318 	.word	0x20001318
 800b460:	20001380 	.word	0x20001380

0800b464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08a      	sub	sp, #40	; 0x28
 800b468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b46e:	f000 facb 	bl	800ba08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <xTimerCreateTimerTask+0x80>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d021      	beq.n	800b4be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b47e:	2300      	movs	r3, #0
 800b480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b482:	1d3a      	adds	r2, r7, #4
 800b484:	f107 0108 	add.w	r1, r7, #8
 800b488:	f107 030c 	add.w	r3, r7, #12
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fd ff81 	bl	8009394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	9202      	str	r2, [sp, #8]
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	2302      	movs	r3, #2
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	460a      	mov	r2, r1
 800b4a4:	4910      	ldr	r1, [pc, #64]	; (800b4e8 <xTimerCreateTimerTask+0x84>)
 800b4a6:	4811      	ldr	r0, [pc, #68]	; (800b4ec <xTimerCreateTimerTask+0x88>)
 800b4a8:	f7fe ff30 	bl	800a30c <xTaskCreateStatic>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <xTimerCreateTimerTask+0x8c>)
 800b4b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4b2:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <xTimerCreateTimerTask+0x8c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	613b      	str	r3, [r7, #16]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4da:	697b      	ldr	r3, [r7, #20]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200013bc 	.word	0x200013bc
 800b4e8:	0800f1e0 	.word	0x0800f1e0
 800b4ec:	0800b611 	.word	0x0800b611
 800b4f0:	200013c0 	.word	0x200013c0

0800b4f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	; 0x28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b502:	2300      	movs	r3, #0
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	623b      	str	r3, [r7, #32]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b522:	4b1a      	ldr	r3, [pc, #104]	; (800b58c <xTimerGenericCommand+0x98>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d02a      	beq.n	800b580 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b05      	cmp	r3, #5
 800b53a:	dc18      	bgt.n	800b56e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b53c:	f7ff feb2 	bl	800b2a4 <xTaskGetSchedulerState>
 800b540:	4603      	mov	r3, r0
 800b542:	2b02      	cmp	r3, #2
 800b544:	d109      	bne.n	800b55a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b546:	4b11      	ldr	r3, [pc, #68]	; (800b58c <xTimerGenericCommand+0x98>)
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	f107 0110 	add.w	r1, r7, #16
 800b54e:	2300      	movs	r3, #0
 800b550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b552:	f7fe faf7 	bl	8009b44 <xQueueGenericSend>
 800b556:	6278      	str	r0, [r7, #36]	; 0x24
 800b558:	e012      	b.n	800b580 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b55a:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <xTimerGenericCommand+0x98>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f107 0110 	add.w	r1, r7, #16
 800b562:	2300      	movs	r3, #0
 800b564:	2200      	movs	r2, #0
 800b566:	f7fe faed 	bl	8009b44 <xQueueGenericSend>
 800b56a:	6278      	str	r0, [r7, #36]	; 0x24
 800b56c:	e008      	b.n	800b580 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b56e:	4b07      	ldr	r3, [pc, #28]	; (800b58c <xTimerGenericCommand+0x98>)
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f107 0110 	add.w	r1, r7, #16
 800b576:	2300      	movs	r3, #0
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	f7fe fbe1 	bl	8009d40 <xQueueGenericSendFromISR>
 800b57e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b582:	4618      	mov	r0, r3
 800b584:	3728      	adds	r7, #40	; 0x28
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200013bc 	.word	0x200013bc

0800b590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af02      	add	r7, sp, #8
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b59a:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <prvProcessExpiredTimer+0x7c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe f913 	bl	80097d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d122      	bne.n	800b5fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	18d1      	adds	r1, r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	6978      	ldr	r0, [r7, #20]
 800b5c4:	f000 f8c8 	bl	800b758 <prvInsertTimerInActiveList>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d016      	beq.n	800b5fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	6978      	ldr	r0, [r7, #20]
 800b5da:	f7ff ff8b 	bl	800b4f4 <xTimerGenericCommand>
 800b5de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60fb      	str	r3, [r7, #12]
}
 800b5f8:	bf00      	nop
 800b5fa:	e7fe      	b.n	800b5fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	6978      	ldr	r0, [r7, #20]
 800b602:	4798      	blx	r3
}
 800b604:	bf00      	nop
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	200013b4 	.word	0x200013b4

0800b610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b618:	f107 0308 	add.w	r3, r7, #8
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 f857 	bl	800b6d0 <prvGetNextExpireTime>
 800b622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4619      	mov	r1, r3
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 f803 	bl	800b634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b62e:	f000 f8d5 	bl	800b7dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b632:	e7f1      	b.n	800b618 <prvTimerTask+0x8>

0800b634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b63e:	f7ff f9c9 	bl	800a9d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b642:	f107 0308 	add.w	r3, r7, #8
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f866 	bl	800b718 <prvSampleTimeNow>
 800b64c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d130      	bne.n	800b6b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <prvProcessTimerOrBlockTask+0x3c>
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d806      	bhi.n	800b670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b662:	f7ff f9c5 	bl	800a9f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ff91 	bl	800b590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b66e:	e024      	b.n	800b6ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d008      	beq.n	800b688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <prvProcessTimerOrBlockTask+0x90>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bf0c      	ite	eq
 800b680:	2301      	moveq	r3, #1
 800b682:	2300      	movne	r3, #0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b688:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <prvProcessTimerOrBlockTask+0x94>)
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	4619      	mov	r1, r3
 800b696:	f7fe fe05 	bl	800a2a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b69a:	f7ff f9a9 	bl	800a9f0 <xTaskResumeAll>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10a      	bne.n	800b6ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6a4:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <prvProcessTimerOrBlockTask+0x98>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
}
 800b6b4:	e001      	b.n	800b6ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6b6:	f7ff f99b 	bl	800a9f0 <xTaskResumeAll>
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	200013b8 	.word	0x200013b8
 800b6c8:	200013bc 	.word	0x200013bc
 800b6cc:	e000ed04 	.word	0xe000ed04

0800b6d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <prvGetNextExpireTime+0x44>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bf0c      	ite	eq
 800b6e2:	2301      	moveq	r3, #1
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d105      	bne.n	800b702 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6f6:	4b07      	ldr	r3, [pc, #28]	; (800b714 <prvGetNextExpireTime+0x44>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	e001      	b.n	800b706 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b706:	68fb      	ldr	r3, [r7, #12]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	200013b4 	.word	0x200013b4

0800b718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b720:	f7ff fa04 	bl	800ab2c <xTaskGetTickCount>
 800b724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b726:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <prvSampleTimeNow+0x3c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d205      	bcs.n	800b73c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b730:	f000 f908 	bl	800b944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	e002      	b.n	800b742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b742:	4a04      	ldr	r2, [pc, #16]	; (800b754 <prvSampleTimeNow+0x3c>)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b748:	68fb      	ldr	r3, [r7, #12]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	200013c4 	.word	0x200013c4

0800b758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b766:	2300      	movs	r3, #0
 800b768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d812      	bhi.n	800b7a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d302      	bcc.n	800b792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b78c:	2301      	movs	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	e01b      	b.n	800b7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b792:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <prvInsertTimerInActiveList+0x7c>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3304      	adds	r3, #4
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7fd ffe0 	bl	8009762 <vListInsert>
 800b7a2:	e012      	b.n	800b7ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d206      	bcs.n	800b7ba <prvInsertTimerInActiveList+0x62>
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d302      	bcc.n	800b7ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	e007      	b.n	800b7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ba:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <prvInsertTimerInActiveList+0x80>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f7fd ffcc 	bl	8009762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7ca:	697b      	ldr	r3, [r7, #20]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	200013b8 	.word	0x200013b8
 800b7d8:	200013b4 	.word	0x200013b4

0800b7dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	; 0x38
 800b7e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7e2:	e09d      	b.n	800b920 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da18      	bge.n	800b81c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7ea:	1d3b      	adds	r3, r7, #4
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	61fb      	str	r3, [r7, #28]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b812:	6850      	ldr	r0, [r2, #4]
 800b814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b816:	6892      	ldr	r2, [r2, #8]
 800b818:	4611      	mov	r1, r2
 800b81a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	db7e      	blt.n	800b920 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	3304      	adds	r3, #4
 800b832:	4618      	mov	r0, r3
 800b834:	f7fd ffce 	bl	80097d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b838:	463b      	mov	r3, r7
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff ff6c 	bl	800b718 <prvSampleTimeNow>
 800b840:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b09      	cmp	r3, #9
 800b846:	d86a      	bhi.n	800b91e <prvProcessReceivedCommands+0x142>
 800b848:	a201      	add	r2, pc, #4	; (adr r2, 800b850 <prvProcessReceivedCommands+0x74>)
 800b84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84e:	bf00      	nop
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b879 	.word	0x0800b879
 800b85c:	0800b921 	.word	0x0800b921
 800b860:	0800b8d5 	.word	0x0800b8d5
 800b864:	0800b90d 	.word	0x0800b90d
 800b868:	0800b879 	.word	0x0800b879
 800b86c:	0800b879 	.word	0x0800b879
 800b870:	0800b921 	.word	0x0800b921
 800b874:	0800b8d5 	.word	0x0800b8d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	18d1      	adds	r1, r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b886:	f7ff ff67 	bl	800b758 <prvInsertTimerInActiveList>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d047      	beq.n	800b920 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b896:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d13f      	bne.n	800b920 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b2:	f7ff fe1f 	bl	800b4f4 <xTimerGenericCommand>
 800b8b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d130      	bne.n	800b920 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	61bb      	str	r3, [r7, #24]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	617b      	str	r3, [r7, #20]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	699a      	ldr	r2, [r3, #24]
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	18d1      	adds	r1, r2, r3
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b906:	f7ff ff27 	bl	800b758 <prvInsertTimerInActiveList>
					break;
 800b90a:	e009      	b.n	800b920 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d104      	bne.n	800b920 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b918:	f000 fbea 	bl	800c0f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b91c:	e000      	b.n	800b920 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800b91e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <prvProcessReceivedCommands+0x164>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	1d39      	adds	r1, r7, #4
 800b926:	2200      	movs	r2, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe faa1 	bl	8009e70 <xQueueReceive>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	f47f af57 	bne.w	800b7e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	3730      	adds	r7, #48	; 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	200013bc 	.word	0x200013bc

0800b944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b94a:	e045      	b.n	800b9d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b94c:	4b2c      	ldr	r3, [pc, #176]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b956:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3304      	adds	r3, #4
 800b964:	4618      	mov	r0, r3
 800b966:	f7fd ff35 	bl	80097d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d12e      	bne.n	800b9d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	4413      	add	r3, r2
 800b982:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d90e      	bls.n	800b9aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b998:	4b19      	ldr	r3, [pc, #100]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fd fedd 	bl	8009762 <vListInsert>
 800b9a8:	e016      	b.n	800b9d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff fd9d 	bl	800b4f4 <xTimerGenericCommand>
 800b9ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	603b      	str	r3, [r7, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1b4      	bne.n	800b94c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <prvSwitchTimerLists+0xc0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a04      	ldr	r2, [pc, #16]	; (800ba00 <prvSwitchTimerLists+0xbc>)
 800b9ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9f0:	4a04      	ldr	r2, [pc, #16]	; (800ba04 <prvSwitchTimerLists+0xc0>)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	6013      	str	r3, [r2, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200013b4 	.word	0x200013b4
 800ba04:	200013b8 	.word	0x200013b8

0800ba08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba0e:	f000 f989 	bl	800bd24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba12:	4b15      	ldr	r3, [pc, #84]	; (800ba68 <prvCheckForValidListAndQueue+0x60>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d120      	bne.n	800ba5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba1a:	4814      	ldr	r0, [pc, #80]	; (800ba6c <prvCheckForValidListAndQueue+0x64>)
 800ba1c:	f7fd fe50 	bl	80096c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba20:	4813      	ldr	r0, [pc, #76]	; (800ba70 <prvCheckForValidListAndQueue+0x68>)
 800ba22:	f7fd fe4d 	bl	80096c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba26:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <prvCheckForValidListAndQueue+0x6c>)
 800ba28:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <prvCheckForValidListAndQueue+0x64>)
 800ba2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba2c:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <prvCheckForValidListAndQueue+0x70>)
 800ba2e:	4a10      	ldr	r2, [pc, #64]	; (800ba70 <prvCheckForValidListAndQueue+0x68>)
 800ba30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba32:	2300      	movs	r3, #0
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	4b11      	ldr	r3, [pc, #68]	; (800ba7c <prvCheckForValidListAndQueue+0x74>)
 800ba38:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <prvCheckForValidListAndQueue+0x78>)
 800ba3a:	2110      	movs	r1, #16
 800ba3c:	200a      	movs	r0, #10
 800ba3e:	f7fd ff5b 	bl	80098f8 <xQueueGenericCreateStatic>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <prvCheckForValidListAndQueue+0x60>)
 800ba46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <prvCheckForValidListAndQueue+0x60>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba50:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <prvCheckForValidListAndQueue+0x60>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	490b      	ldr	r1, [pc, #44]	; (800ba84 <prvCheckForValidListAndQueue+0x7c>)
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fbfa 	bl	800a250 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba5c:	f000 f992 	bl	800bd84 <vPortExitCritical>
}
 800ba60:	bf00      	nop
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	200013bc 	.word	0x200013bc
 800ba6c:	2000138c 	.word	0x2000138c
 800ba70:	200013a0 	.word	0x200013a0
 800ba74:	200013b4 	.word	0x200013b4
 800ba78:	200013b8 	.word	0x200013b8
 800ba7c:	20001468 	.word	0x20001468
 800ba80:	200013c8 	.word	0x200013c8
 800ba84:	0800f1e8 	.word	0x0800f1e8

0800ba88 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	; 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ba96:	f06f 0301 	mvn.w	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800baa8:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <xTimerPendFunctionCallFromISR+0x3c>)
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	f107 0114 	add.w	r1, r7, #20
 800bab0:	2300      	movs	r3, #0
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	f7fe f944 	bl	8009d40 <xQueueGenericSendFromISR>
 800bab8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800babc:	4618      	mov	r0, r3
 800babe:	3728      	adds	r7, #40	; 0x28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	200013bc 	.word	0x200013bc

0800bac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3b04      	subs	r3, #4
 800bad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3b04      	subs	r3, #4
 800bae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f023 0201 	bic.w	r2, r3, #1
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3b04      	subs	r3, #4
 800baf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800baf8:	4a0c      	ldr	r2, [pc, #48]	; (800bb2c <pxPortInitialiseStack+0x64>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3b14      	subs	r3, #20
 800bb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3b04      	subs	r3, #4
 800bb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f06f 0202 	mvn.w	r2, #2
 800bb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3b20      	subs	r3, #32
 800bb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	0800bb31 	.word	0x0800bb31

0800bb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <prvTaskExitError+0x54>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d00a      	beq.n	800bb5a <prvTaskExitError+0x2a>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	60fb      	str	r3, [r7, #12]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <prvTaskExitError+0x28>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	60bb      	str	r3, [r7, #8]
}
 800bb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb6e:	bf00      	nop
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0fc      	beq.n	800bb70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	20000098 	.word	0x20000098
	...

0800bb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb90:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <pxCurrentTCBConst2>)
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	6808      	ldr	r0, [r1, #0]
 800bb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9a:	f380 8809 	msr	PSP, r0
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f04f 0000 	mov.w	r0, #0
 800bba6:	f380 8811 	msr	BASEPRI, r0
 800bbaa:	4770      	bx	lr
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst2>:
 800bbb0:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbb8:	4808      	ldr	r0, [pc, #32]	; (800bbdc <prvPortStartFirstTask+0x24>)
 800bbba:	6800      	ldr	r0, [r0, #0]
 800bbbc:	6800      	ldr	r0, [r0, #0]
 800bbbe:	f380 8808 	msr	MSP, r0
 800bbc2:	f04f 0000 	mov.w	r0, #0
 800bbc6:	f380 8814 	msr	CONTROL, r0
 800bbca:	b662      	cpsie	i
 800bbcc:	b661      	cpsie	f
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	df00      	svc	0
 800bbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbda:	bf00      	nop
 800bbdc:	e000ed08 	.word	0xe000ed08

0800bbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbe6:	4b46      	ldr	r3, [pc, #280]	; (800bd00 <xPortStartScheduler+0x120>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a46      	ldr	r2, [pc, #280]	; (800bd04 <xPortStartScheduler+0x124>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d10a      	bne.n	800bc06 <xPortStartScheduler+0x26>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	613b      	str	r3, [r7, #16]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc06:	4b3e      	ldr	r3, [pc, #248]	; (800bd00 <xPortStartScheduler+0x120>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a3f      	ldr	r2, [pc, #252]	; (800bd08 <xPortStartScheduler+0x128>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d10a      	bne.n	800bc26 <xPortStartScheduler+0x46>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	60fb      	str	r3, [r7, #12]
}
 800bc22:	bf00      	nop
 800bc24:	e7fe      	b.n	800bc24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc26:	4b39      	ldr	r3, [pc, #228]	; (800bd0c <xPortStartScheduler+0x12c>)
 800bc28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	22ff      	movs	r2, #255	; 0xff
 800bc36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	4b31      	ldr	r3, [pc, #196]	; (800bd10 <xPortStartScheduler+0x130>)
 800bc4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc4e:	4b31      	ldr	r3, [pc, #196]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc50:	2207      	movs	r2, #7
 800bc52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc54:	e009      	b.n	800bc6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc56:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	4a2d      	ldr	r2, [pc, #180]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc72:	2b80      	cmp	r3, #128	; 0x80
 800bc74:	d0ef      	beq.n	800bc56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc76:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f1c3 0307 	rsb	r3, r3, #7
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d00a      	beq.n	800bc98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60bb      	str	r3, [r7, #8]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc98:	4b1e      	ldr	r3, [pc, #120]	; (800bd14 <xPortStartScheduler+0x134>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	4a1d      	ldr	r2, [pc, #116]	; (800bd14 <xPortStartScheduler+0x134>)
 800bca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bca2:	4b1c      	ldr	r3, [pc, #112]	; (800bd14 <xPortStartScheduler+0x134>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcaa:	4a1a      	ldr	r2, [pc, #104]	; (800bd14 <xPortStartScheduler+0x134>)
 800bcac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcb6:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a17      	ldr	r2, [pc, #92]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a14      	ldr	r2, [pc, #80]	; (800bd18 <xPortStartScheduler+0x138>)
 800bcc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcce:	f000 f8dd 	bl	800be8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcd2:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <xPortStartScheduler+0x13c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcd8:	f000 f8fc 	bl	800bed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcdc:	4b10      	ldr	r3, [pc, #64]	; (800bd20 <xPortStartScheduler+0x140>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <xPortStartScheduler+0x140>)
 800bce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bce8:	f7ff ff66 	bl	800bbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcec:	f7fe ffec 	bl	800acc8 <vTaskSwitchContext>
	prvTaskExitError();
 800bcf0:	f7ff ff1e 	bl	800bb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	e000ed00 	.word	0xe000ed00
 800bd04:	410fc271 	.word	0x410fc271
 800bd08:	410fc270 	.word	0x410fc270
 800bd0c:	e000e400 	.word	0xe000e400
 800bd10:	200014b8 	.word	0x200014b8
 800bd14:	200014bc 	.word	0x200014bc
 800bd18:	e000ed20 	.word	0xe000ed20
 800bd1c:	20000098 	.word	0x20000098
 800bd20:	e000ef34 	.word	0xe000ef34

0800bd24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	607b      	str	r3, [r7, #4]
}
 800bd3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	4a0d      	ldr	r2, [pc, #52]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd48:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <vPortEnterCritical+0x58>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10f      	bne.n	800bd70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd50:	4b0b      	ldr	r3, [pc, #44]	; (800bd80 <vPortEnterCritical+0x5c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00a      	beq.n	800bd70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	603b      	str	r3, [r7, #0]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <vPortEnterCritical+0x4a>
	}
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	20000098 	.word	0x20000098
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd8a:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <vPortExitCritical+0x50>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <vPortExitCritical+0x24>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	607b      	str	r3, [r7, #4]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdb2:	4b08      	ldr	r3, [pc, #32]	; (800bdd4 <vPortExitCritical+0x50>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d105      	bne.n	800bdc6 <vPortExitCritical+0x42>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f383 8811 	msr	BASEPRI, r3
}
 800bdc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20000098 	.word	0x20000098
	...

0800bde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bde0:	f3ef 8009 	mrs	r0, PSP
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	4b15      	ldr	r3, [pc, #84]	; (800be40 <pxCurrentTCBConst>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	f01e 0f10 	tst.w	lr, #16
 800bdf0:	bf08      	it	eq
 800bdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfa:	6010      	str	r0, [r2, #0]
 800bdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be04:	f380 8811 	msr	BASEPRI, r0
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f7fe ff5a 	bl	800acc8 <vTaskSwitchContext>
 800be14:	f04f 0000 	mov.w	r0, #0
 800be18:	f380 8811 	msr	BASEPRI, r0
 800be1c:	bc09      	pop	{r0, r3}
 800be1e:	6819      	ldr	r1, [r3, #0]
 800be20:	6808      	ldr	r0, [r1, #0]
 800be22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be26:	f01e 0f10 	tst.w	lr, #16
 800be2a:	bf08      	it	eq
 800be2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be30:	f380 8809 	msr	PSP, r0
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	f3af 8000 	nop.w

0800be40 <pxCurrentTCBConst>:
 800be40:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be44:	bf00      	nop
 800be46:	bf00      	nop

0800be48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be62:	f7fe fe73 	bl	800ab4c <xTaskIncrementTick>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <SysTick_Handler+0x40>)
 800be6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	f383 8811 	msr	BASEPRI, r3
}
 800be7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	e000ed04 	.word	0xe000ed04

0800be8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <vPortSetupTimerInterrupt+0x34>)
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <vPortSetupTimerInterrupt+0x38>)
 800be98:	2200      	movs	r2, #0
 800be9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <vPortSetupTimerInterrupt+0x3c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a0a      	ldr	r2, [pc, #40]	; (800becc <vPortSetupTimerInterrupt+0x40>)
 800bea2:	fba2 2303 	umull	r2, r3, r2, r3
 800bea6:	099b      	lsrs	r3, r3, #6
 800bea8:	4a09      	ldr	r2, [pc, #36]	; (800bed0 <vPortSetupTimerInterrupt+0x44>)
 800beaa:	3b01      	subs	r3, #1
 800beac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800beae:	4b04      	ldr	r3, [pc, #16]	; (800bec0 <vPortSetupTimerInterrupt+0x34>)
 800beb0:	2207      	movs	r2, #7
 800beb2:	601a      	str	r2, [r3, #0]
}
 800beb4:	bf00      	nop
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	e000e010 	.word	0xe000e010
 800bec4:	e000e018 	.word	0xe000e018
 800bec8:	20000060 	.word	0x20000060
 800becc:	10624dd3 	.word	0x10624dd3
 800bed0:	e000e014 	.word	0xe000e014

0800bed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bee4 <vPortEnableVFP+0x10>
 800bed8:	6801      	ldr	r1, [r0, #0]
 800beda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bede:	6001      	str	r1, [r0, #0]
 800bee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bee2:	bf00      	nop
 800bee4:	e000ed88 	.word	0xe000ed88

0800bee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800beee:	f3ef 8305 	mrs	r3, IPSR
 800bef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b0f      	cmp	r3, #15
 800bef8:	d914      	bls.n	800bf24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800befa:	4a17      	ldr	r2, [pc, #92]	; (800bf58 <vPortValidateInterruptPriority+0x70>)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf04:	4b15      	ldr	r3, [pc, #84]	; (800bf5c <vPortValidateInterruptPriority+0x74>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	7afa      	ldrb	r2, [r7, #11]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d20a      	bcs.n	800bf24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	607b      	str	r3, [r7, #4]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf24:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <vPortValidateInterruptPriority+0x78>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf2c:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <vPortValidateInterruptPriority+0x7c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d90a      	bls.n	800bf4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	603b      	str	r3, [r7, #0]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <vPortValidateInterruptPriority+0x60>
	}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	e000e3f0 	.word	0xe000e3f0
 800bf5c:	200014b8 	.word	0x200014b8
 800bf60:	e000ed0c 	.word	0xe000ed0c
 800bf64:	200014bc 	.word	0x200014bc

0800bf68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08a      	sub	sp, #40	; 0x28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf74:	f7fe fd2e 	bl	800a9d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf78:	4b58      	ldr	r3, [pc, #352]	; (800c0dc <pvPortMalloc+0x174>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf80:	f000 f910 	bl	800c1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf84:	4b56      	ldr	r3, [pc, #344]	; (800c0e0 <pvPortMalloc+0x178>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f040 808e 	bne.w	800c0ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01d      	beq.n	800bfd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf98:	2208      	movs	r2, #8
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d014      	beq.n	800bfd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f003 0307 	and.w	r3, r3, #7
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <pvPortMalloc+0x6c>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d069      	beq.n	800c0ae <pvPortMalloc+0x146>
 800bfda:	4b42      	ldr	r3, [pc, #264]	; (800c0e4 <pvPortMalloc+0x17c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d864      	bhi.n	800c0ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfe4:	4b40      	ldr	r3, [pc, #256]	; (800c0e8 <pvPortMalloc+0x180>)
 800bfe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfe8:	4b3f      	ldr	r3, [pc, #252]	; (800c0e8 <pvPortMalloc+0x180>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfee:	e004      	b.n	800bffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	429a      	cmp	r2, r3
 800c002:	d903      	bls.n	800c00c <pvPortMalloc+0xa4>
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1f1      	bne.n	800bff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c00c:	4b33      	ldr	r3, [pc, #204]	; (800c0dc <pvPortMalloc+0x174>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c012:	429a      	cmp	r2, r3
 800c014:	d04b      	beq.n	800c0ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2208      	movs	r2, #8
 800c01c:	4413      	add	r3, r2
 800c01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	2308      	movs	r3, #8
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	429a      	cmp	r2, r3
 800c036:	d91f      	bls.n	800c078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4413      	add	r3, r2
 800c03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00a      	beq.n	800c060 <pvPortMalloc+0xf8>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	613b      	str	r3, [r7, #16]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	1ad2      	subs	r2, r2, r3
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c072:	69b8      	ldr	r0, [r7, #24]
 800c074:	f000 f8f8 	bl	800c268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c078:	4b1a      	ldr	r3, [pc, #104]	; (800c0e4 <pvPortMalloc+0x17c>)
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <pvPortMalloc+0x17c>)
 800c084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c086:	4b17      	ldr	r3, [pc, #92]	; (800c0e4 <pvPortMalloc+0x17c>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	4b18      	ldr	r3, [pc, #96]	; (800c0ec <pvPortMalloc+0x184>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d203      	bcs.n	800c09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c092:	4b14      	ldr	r3, [pc, #80]	; (800c0e4 <pvPortMalloc+0x17c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <pvPortMalloc+0x184>)
 800c098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <pvPortMalloc+0x178>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0ae:	f7fe fc9f 	bl	800a9f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	f003 0307 	and.w	r3, r3, #7
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00a      	beq.n	800c0d2 <pvPortMalloc+0x16a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	60fb      	str	r3, [r7, #12]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <pvPortMalloc+0x168>
	return pvReturn;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3728      	adds	r7, #40	; 0x28
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	200028c8 	.word	0x200028c8
 800c0e0:	200028d4 	.word	0x200028d4
 800c0e4:	200028cc 	.word	0x200028cc
 800c0e8:	200028c0 	.word	0x200028c0
 800c0ec:	200028d0 	.word	0x200028d0

0800c0f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d048      	beq.n	800c194 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c102:	2308      	movs	r3, #8
 800c104:	425b      	negs	r3, r3
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4413      	add	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	4b21      	ldr	r3, [pc, #132]	; (800c19c <vPortFree+0xac>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4013      	ands	r3, r2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10a      	bne.n	800c134 <vPortFree+0x44>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60fb      	str	r3, [r7, #12]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00a      	beq.n	800c152 <vPortFree+0x62>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60bb      	str	r3, [r7, #8]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <vPortFree+0xac>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4013      	ands	r3, r2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d019      	beq.n	800c194 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d115      	bne.n	800c194 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <vPortFree+0xac>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	43db      	mvns	r3, r3
 800c172:	401a      	ands	r2, r3
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c178:	f7fe fc2c 	bl	800a9d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <vPortFree+0xb0>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4413      	add	r3, r2
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <vPortFree+0xb0>)
 800c188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f000 f86c 	bl	800c268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c190:	f7fe fc2e 	bl	800a9f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	200028d4 	.word	0x200028d4
 800c1a0:	200028cc 	.word	0x200028cc

0800c1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <prvHeapInit+0xac>)
 800c1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <prvHeapInit+0xac>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	; (800c254 <prvHeapInit+0xb0>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <prvHeapInit+0xb0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0307 	bic.w	r3, r3, #7
 800c1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <prvHeapInit+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <prvHeapInit+0xb4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvHeapInit+0xb4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvHeapInit+0xb4>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <prvHeapInit+0xb8>)
 800c232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <prvHeapInit+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <prvHeapInit+0xc0>)
 800c23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	200014c0 	.word	0x200014c0
 800c254:	200028c0 	.word	0x200028c0
 800c258:	200028c8 	.word	0x200028c8
 800c25c:	200028d0 	.word	0x200028d0
 800c260:	200028cc 	.word	0x200028cc
 800c264:	200028d4 	.word	0x200028d4

0800c268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <prvInsertBlockIntoFreeList+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e002      	b.n	800c27c <prvInsertBlockIntoFreeList+0x14>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d8f7      	bhi.n	800c276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d108      	bne.n	800c2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d118      	bne.n	800c2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00d      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e008      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	200028c0 	.word	0x200028c0
 800c318:	200028c8 	.word	0x200028c8

0800c31c <__cvt>:
 800c31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c320:	ec55 4b10 	vmov	r4, r5, d0
 800c324:	2d00      	cmp	r5, #0
 800c326:	460e      	mov	r6, r1
 800c328:	4619      	mov	r1, r3
 800c32a:	462b      	mov	r3, r5
 800c32c:	bfbb      	ittet	lt
 800c32e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c332:	461d      	movlt	r5, r3
 800c334:	2300      	movge	r3, #0
 800c336:	232d      	movlt	r3, #45	; 0x2d
 800c338:	700b      	strb	r3, [r1, #0]
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c340:	4691      	mov	r9, r2
 800c342:	f023 0820 	bic.w	r8, r3, #32
 800c346:	bfbc      	itt	lt
 800c348:	4622      	movlt	r2, r4
 800c34a:	4614      	movlt	r4, r2
 800c34c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c350:	d005      	beq.n	800c35e <__cvt+0x42>
 800c352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c356:	d100      	bne.n	800c35a <__cvt+0x3e>
 800c358:	3601      	adds	r6, #1
 800c35a:	2102      	movs	r1, #2
 800c35c:	e000      	b.n	800c360 <__cvt+0x44>
 800c35e:	2103      	movs	r1, #3
 800c360:	ab03      	add	r3, sp, #12
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	ab02      	add	r3, sp, #8
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	ec45 4b10 	vmov	d0, r4, r5
 800c36c:	4653      	mov	r3, sl
 800c36e:	4632      	mov	r2, r6
 800c370:	f000 ffae 	bl	800d2d0 <_dtoa_r>
 800c374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c378:	4607      	mov	r7, r0
 800c37a:	d102      	bne.n	800c382 <__cvt+0x66>
 800c37c:	f019 0f01 	tst.w	r9, #1
 800c380:	d022      	beq.n	800c3c8 <__cvt+0xac>
 800c382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c386:	eb07 0906 	add.w	r9, r7, r6
 800c38a:	d110      	bne.n	800c3ae <__cvt+0x92>
 800c38c:	783b      	ldrb	r3, [r7, #0]
 800c38e:	2b30      	cmp	r3, #48	; 0x30
 800c390:	d10a      	bne.n	800c3a8 <__cvt+0x8c>
 800c392:	2200      	movs	r2, #0
 800c394:	2300      	movs	r3, #0
 800c396:	4620      	mov	r0, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f7f4 fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c39e:	b918      	cbnz	r0, 800c3a8 <__cvt+0x8c>
 800c3a0:	f1c6 0601 	rsb	r6, r6, #1
 800c3a4:	f8ca 6000 	str.w	r6, [sl]
 800c3a8:	f8da 3000 	ldr.w	r3, [sl]
 800c3ac:	4499      	add	r9, r3
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7f4 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3ba:	b108      	cbz	r0, 800c3c0 <__cvt+0xa4>
 800c3bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3c0:	2230      	movs	r2, #48	; 0x30
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	454b      	cmp	r3, r9
 800c3c6:	d307      	bcc.n	800c3d8 <__cvt+0xbc>
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3cc:	1bdb      	subs	r3, r3, r7
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	b004      	add	sp, #16
 800c3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d8:	1c59      	adds	r1, r3, #1
 800c3da:	9103      	str	r1, [sp, #12]
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	e7f0      	b.n	800c3c2 <__cvt+0xa6>

0800c3e0 <__exponent>:
 800c3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	bfb8      	it	lt
 800c3e8:	4249      	neglt	r1, r1
 800c3ea:	f803 2b02 	strb.w	r2, [r3], #2
 800c3ee:	bfb4      	ite	lt
 800c3f0:	222d      	movlt	r2, #45	; 0x2d
 800c3f2:	222b      	movge	r2, #43	; 0x2b
 800c3f4:	2909      	cmp	r1, #9
 800c3f6:	7042      	strb	r2, [r0, #1]
 800c3f8:	dd2a      	ble.n	800c450 <__exponent+0x70>
 800c3fa:	f10d 0207 	add.w	r2, sp, #7
 800c3fe:	4617      	mov	r7, r2
 800c400:	260a      	movs	r6, #10
 800c402:	4694      	mov	ip, r2
 800c404:	fb91 f5f6 	sdiv	r5, r1, r6
 800c408:	fb06 1415 	mls	r4, r6, r5, r1
 800c40c:	3430      	adds	r4, #48	; 0x30
 800c40e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c412:	460c      	mov	r4, r1
 800c414:	2c63      	cmp	r4, #99	; 0x63
 800c416:	f102 32ff 	add.w	r2, r2, #4294967295
 800c41a:	4629      	mov	r1, r5
 800c41c:	dcf1      	bgt.n	800c402 <__exponent+0x22>
 800c41e:	3130      	adds	r1, #48	; 0x30
 800c420:	f1ac 0402 	sub.w	r4, ip, #2
 800c424:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c428:	1c41      	adds	r1, r0, #1
 800c42a:	4622      	mov	r2, r4
 800c42c:	42ba      	cmp	r2, r7
 800c42e:	d30a      	bcc.n	800c446 <__exponent+0x66>
 800c430:	f10d 0209 	add.w	r2, sp, #9
 800c434:	eba2 020c 	sub.w	r2, r2, ip
 800c438:	42bc      	cmp	r4, r7
 800c43a:	bf88      	it	hi
 800c43c:	2200      	movhi	r2, #0
 800c43e:	4413      	add	r3, r2
 800c440:	1a18      	subs	r0, r3, r0
 800c442:	b003      	add	sp, #12
 800c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c446:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c44a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c44e:	e7ed      	b.n	800c42c <__exponent+0x4c>
 800c450:	2330      	movs	r3, #48	; 0x30
 800c452:	3130      	adds	r1, #48	; 0x30
 800c454:	7083      	strb	r3, [r0, #2]
 800c456:	70c1      	strb	r1, [r0, #3]
 800c458:	1d03      	adds	r3, r0, #4
 800c45a:	e7f1      	b.n	800c440 <__exponent+0x60>

0800c45c <_printf_float>:
 800c45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c460:	ed2d 8b02 	vpush	{d8}
 800c464:	b08d      	sub	sp, #52	; 0x34
 800c466:	460c      	mov	r4, r1
 800c468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c46c:	4616      	mov	r6, r2
 800c46e:	461f      	mov	r7, r3
 800c470:	4605      	mov	r5, r0
 800c472:	f000 fdc9 	bl	800d008 <_localeconv_r>
 800c476:	f8d0 a000 	ldr.w	sl, [r0]
 800c47a:	4650      	mov	r0, sl
 800c47c:	f7f3 ff00 	bl	8000280 <strlen>
 800c480:	2300      	movs	r3, #0
 800c482:	930a      	str	r3, [sp, #40]	; 0x28
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	9305      	str	r3, [sp, #20]
 800c488:	f8d8 3000 	ldr.w	r3, [r8]
 800c48c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	f103 0208 	add.w	r2, r3, #8
 800c49a:	f8c8 2000 	str.w	r2, [r8]
 800c49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4a6:	9307      	str	r3, [sp, #28]
 800c4a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4ac:	ee08 0a10 	vmov	s16, r0
 800c4b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4b8:	4b9e      	ldr	r3, [pc, #632]	; (800c734 <_printf_float+0x2d8>)
 800c4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c4be:	f7f4 fb3d 	bl	8000b3c <__aeabi_dcmpun>
 800c4c2:	bb88      	cbnz	r0, 800c528 <_printf_float+0xcc>
 800c4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4c8:	4b9a      	ldr	r3, [pc, #616]	; (800c734 <_printf_float+0x2d8>)
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ce:	f7f4 fb17 	bl	8000b00 <__aeabi_dcmple>
 800c4d2:	bb48      	cbnz	r0, 800c528 <_printf_float+0xcc>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	f7f4 fb06 	bl	8000aec <__aeabi_dcmplt>
 800c4e0:	b110      	cbz	r0, 800c4e8 <_printf_float+0x8c>
 800c4e2:	232d      	movs	r3, #45	; 0x2d
 800c4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4e8:	4a93      	ldr	r2, [pc, #588]	; (800c738 <_printf_float+0x2dc>)
 800c4ea:	4b94      	ldr	r3, [pc, #592]	; (800c73c <_printf_float+0x2e0>)
 800c4ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c4f0:	bf94      	ite	ls
 800c4f2:	4690      	movls	r8, r2
 800c4f4:	4698      	movhi	r8, r3
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	f023 0304 	bic.w	r3, r3, #4
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	f04f 0900 	mov.w	r9, #0
 800c506:	9700      	str	r7, [sp, #0]
 800c508:	4633      	mov	r3, r6
 800c50a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c50c:	4621      	mov	r1, r4
 800c50e:	4628      	mov	r0, r5
 800c510:	f000 f9da 	bl	800c8c8 <_printf_common>
 800c514:	3001      	adds	r0, #1
 800c516:	f040 8090 	bne.w	800c63a <_printf_float+0x1de>
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	b00d      	add	sp, #52	; 0x34
 800c520:	ecbd 8b02 	vpop	{d8}
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	4642      	mov	r2, r8
 800c52a:	464b      	mov	r3, r9
 800c52c:	4640      	mov	r0, r8
 800c52e:	4649      	mov	r1, r9
 800c530:	f7f4 fb04 	bl	8000b3c <__aeabi_dcmpun>
 800c534:	b140      	cbz	r0, 800c548 <_printf_float+0xec>
 800c536:	464b      	mov	r3, r9
 800c538:	2b00      	cmp	r3, #0
 800c53a:	bfbc      	itt	lt
 800c53c:	232d      	movlt	r3, #45	; 0x2d
 800c53e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c542:	4a7f      	ldr	r2, [pc, #508]	; (800c740 <_printf_float+0x2e4>)
 800c544:	4b7f      	ldr	r3, [pc, #508]	; (800c744 <_printf_float+0x2e8>)
 800c546:	e7d1      	b.n	800c4ec <_printf_float+0x90>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c54e:	9206      	str	r2, [sp, #24]
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	d13f      	bne.n	800c5d4 <_printf_float+0x178>
 800c554:	2306      	movs	r3, #6
 800c556:	6063      	str	r3, [r4, #4]
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	6861      	ldr	r1, [r4, #4]
 800c55c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c560:	2300      	movs	r3, #0
 800c562:	9303      	str	r3, [sp, #12]
 800c564:	ab0a      	add	r3, sp, #40	; 0x28
 800c566:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c56a:	ab09      	add	r3, sp, #36	; 0x24
 800c56c:	ec49 8b10 	vmov	d0, r8, r9
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	6022      	str	r2, [r4, #0]
 800c574:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c578:	4628      	mov	r0, r5
 800c57a:	f7ff fecf 	bl	800c31c <__cvt>
 800c57e:	9b06      	ldr	r3, [sp, #24]
 800c580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c582:	2b47      	cmp	r3, #71	; 0x47
 800c584:	4680      	mov	r8, r0
 800c586:	d108      	bne.n	800c59a <_printf_float+0x13e>
 800c588:	1cc8      	adds	r0, r1, #3
 800c58a:	db02      	blt.n	800c592 <_printf_float+0x136>
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	4299      	cmp	r1, r3
 800c590:	dd41      	ble.n	800c616 <_printf_float+0x1ba>
 800c592:	f1ab 0302 	sub.w	r3, fp, #2
 800c596:	fa5f fb83 	uxtb.w	fp, r3
 800c59a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c59e:	d820      	bhi.n	800c5e2 <_printf_float+0x186>
 800c5a0:	3901      	subs	r1, #1
 800c5a2:	465a      	mov	r2, fp
 800c5a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c5a8:	9109      	str	r1, [sp, #36]	; 0x24
 800c5aa:	f7ff ff19 	bl	800c3e0 <__exponent>
 800c5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5b0:	1813      	adds	r3, r2, r0
 800c5b2:	2a01      	cmp	r2, #1
 800c5b4:	4681      	mov	r9, r0
 800c5b6:	6123      	str	r3, [r4, #16]
 800c5b8:	dc02      	bgt.n	800c5c0 <_printf_float+0x164>
 800c5ba:	6822      	ldr	r2, [r4, #0]
 800c5bc:	07d2      	lsls	r2, r2, #31
 800c5be:	d501      	bpl.n	800c5c4 <_printf_float+0x168>
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d09c      	beq.n	800c506 <_printf_float+0xaa>
 800c5cc:	232d      	movs	r3, #45	; 0x2d
 800c5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d2:	e798      	b.n	800c506 <_printf_float+0xaa>
 800c5d4:	9a06      	ldr	r2, [sp, #24]
 800c5d6:	2a47      	cmp	r2, #71	; 0x47
 800c5d8:	d1be      	bne.n	800c558 <_printf_float+0xfc>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1bc      	bne.n	800c558 <_printf_float+0xfc>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e7b9      	b.n	800c556 <_printf_float+0xfa>
 800c5e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c5e6:	d118      	bne.n	800c61a <_printf_float+0x1be>
 800c5e8:	2900      	cmp	r1, #0
 800c5ea:	6863      	ldr	r3, [r4, #4]
 800c5ec:	dd0b      	ble.n	800c606 <_printf_float+0x1aa>
 800c5ee:	6121      	str	r1, [r4, #16]
 800c5f0:	b913      	cbnz	r3, 800c5f8 <_printf_float+0x19c>
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	07d0      	lsls	r0, r2, #31
 800c5f6:	d502      	bpl.n	800c5fe <_printf_float+0x1a2>
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	440b      	add	r3, r1
 800c5fc:	6123      	str	r3, [r4, #16]
 800c5fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800c600:	f04f 0900 	mov.w	r9, #0
 800c604:	e7de      	b.n	800c5c4 <_printf_float+0x168>
 800c606:	b913      	cbnz	r3, 800c60e <_printf_float+0x1b2>
 800c608:	6822      	ldr	r2, [r4, #0]
 800c60a:	07d2      	lsls	r2, r2, #31
 800c60c:	d501      	bpl.n	800c612 <_printf_float+0x1b6>
 800c60e:	3302      	adds	r3, #2
 800c610:	e7f4      	b.n	800c5fc <_printf_float+0x1a0>
 800c612:	2301      	movs	r3, #1
 800c614:	e7f2      	b.n	800c5fc <_printf_float+0x1a0>
 800c616:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c61c:	4299      	cmp	r1, r3
 800c61e:	db05      	blt.n	800c62c <_printf_float+0x1d0>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	6121      	str	r1, [r4, #16]
 800c624:	07d8      	lsls	r0, r3, #31
 800c626:	d5ea      	bpl.n	800c5fe <_printf_float+0x1a2>
 800c628:	1c4b      	adds	r3, r1, #1
 800c62a:	e7e7      	b.n	800c5fc <_printf_float+0x1a0>
 800c62c:	2900      	cmp	r1, #0
 800c62e:	bfd4      	ite	le
 800c630:	f1c1 0202 	rsble	r2, r1, #2
 800c634:	2201      	movgt	r2, #1
 800c636:	4413      	add	r3, r2
 800c638:	e7e0      	b.n	800c5fc <_printf_float+0x1a0>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	055a      	lsls	r2, r3, #21
 800c63e:	d407      	bmi.n	800c650 <_printf_float+0x1f4>
 800c640:	6923      	ldr	r3, [r4, #16]
 800c642:	4642      	mov	r2, r8
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	d12c      	bne.n	800c6a8 <_printf_float+0x24c>
 800c64e:	e764      	b.n	800c51a <_printf_float+0xbe>
 800c650:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c654:	f240 80e0 	bls.w	800c818 <_printf_float+0x3bc>
 800c658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c65c:	2200      	movs	r2, #0
 800c65e:	2300      	movs	r3, #0
 800c660:	f7f4 fa3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c664:	2800      	cmp	r0, #0
 800c666:	d034      	beq.n	800c6d2 <_printf_float+0x276>
 800c668:	4a37      	ldr	r2, [pc, #220]	; (800c748 <_printf_float+0x2ec>)
 800c66a:	2301      	movs	r3, #1
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f af51 	beq.w	800c51a <_printf_float+0xbe>
 800c678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c67c:	429a      	cmp	r2, r3
 800c67e:	db02      	blt.n	800c686 <_printf_float+0x22a>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	07d8      	lsls	r0, r3, #31
 800c684:	d510      	bpl.n	800c6a8 <_printf_float+0x24c>
 800c686:	ee18 3a10 	vmov	r3, s16
 800c68a:	4652      	mov	r2, sl
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	f43f af41 	beq.w	800c51a <_printf_float+0xbe>
 800c698:	f04f 0800 	mov.w	r8, #0
 800c69c:	f104 091a 	add.w	r9, r4, #26
 800c6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	4543      	cmp	r3, r8
 800c6a6:	dc09      	bgt.n	800c6bc <_printf_float+0x260>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	079b      	lsls	r3, r3, #30
 800c6ac:	f100 8107 	bmi.w	800c8be <_printf_float+0x462>
 800c6b0:	68e0      	ldr	r0, [r4, #12]
 800c6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6b4:	4298      	cmp	r0, r3
 800c6b6:	bfb8      	it	lt
 800c6b8:	4618      	movlt	r0, r3
 800c6ba:	e730      	b.n	800c51e <_printf_float+0xc2>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	464a      	mov	r2, r9
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	47b8      	blx	r7
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	f43f af27 	beq.w	800c51a <_printf_float+0xbe>
 800c6cc:	f108 0801 	add.w	r8, r8, #1
 800c6d0:	e7e6      	b.n	800c6a0 <_printf_float+0x244>
 800c6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dc39      	bgt.n	800c74c <_printf_float+0x2f0>
 800c6d8:	4a1b      	ldr	r2, [pc, #108]	; (800c748 <_printf_float+0x2ec>)
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f43f af19 	beq.w	800c51a <_printf_float+0xbe>
 800c6e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	d102      	bne.n	800c6f6 <_printf_float+0x29a>
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d5d8      	bpl.n	800c6a8 <_printf_float+0x24c>
 800c6f6:	ee18 3a10 	vmov	r3, s16
 800c6fa:	4652      	mov	r2, sl
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4628      	mov	r0, r5
 800c700:	47b8      	blx	r7
 800c702:	3001      	adds	r0, #1
 800c704:	f43f af09 	beq.w	800c51a <_printf_float+0xbe>
 800c708:	f04f 0900 	mov.w	r9, #0
 800c70c:	f104 0a1a 	add.w	sl, r4, #26
 800c710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c712:	425b      	negs	r3, r3
 800c714:	454b      	cmp	r3, r9
 800c716:	dc01      	bgt.n	800c71c <_printf_float+0x2c0>
 800c718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c71a:	e792      	b.n	800c642 <_printf_float+0x1e6>
 800c71c:	2301      	movs	r3, #1
 800c71e:	4652      	mov	r2, sl
 800c720:	4631      	mov	r1, r6
 800c722:	4628      	mov	r0, r5
 800c724:	47b8      	blx	r7
 800c726:	3001      	adds	r0, #1
 800c728:	f43f aef7 	beq.w	800c51a <_printf_float+0xbe>
 800c72c:	f109 0901 	add.w	r9, r9, #1
 800c730:	e7ee      	b.n	800c710 <_printf_float+0x2b4>
 800c732:	bf00      	nop
 800c734:	7fefffff 	.word	0x7fefffff
 800c738:	0800f2e8 	.word	0x0800f2e8
 800c73c:	0800f2ec 	.word	0x0800f2ec
 800c740:	0800f2f0 	.word	0x0800f2f0
 800c744:	0800f2f4 	.word	0x0800f2f4
 800c748:	0800f2f8 	.word	0x0800f2f8
 800c74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c74e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c750:	429a      	cmp	r2, r3
 800c752:	bfa8      	it	ge
 800c754:	461a      	movge	r2, r3
 800c756:	2a00      	cmp	r2, #0
 800c758:	4691      	mov	r9, r2
 800c75a:	dc37      	bgt.n	800c7cc <_printf_float+0x370>
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c764:	f104 021a 	add.w	r2, r4, #26
 800c768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	eba3 0309 	sub.w	r3, r3, r9
 800c770:	455b      	cmp	r3, fp
 800c772:	dc33      	bgt.n	800c7dc <_printf_float+0x380>
 800c774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c778:	429a      	cmp	r2, r3
 800c77a:	db3b      	blt.n	800c7f4 <_printf_float+0x398>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	07da      	lsls	r2, r3, #31
 800c780:	d438      	bmi.n	800c7f4 <_printf_float+0x398>
 800c782:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c786:	eba2 0903 	sub.w	r9, r2, r3
 800c78a:	9b05      	ldr	r3, [sp, #20]
 800c78c:	1ad2      	subs	r2, r2, r3
 800c78e:	4591      	cmp	r9, r2
 800c790:	bfa8      	it	ge
 800c792:	4691      	movge	r9, r2
 800c794:	f1b9 0f00 	cmp.w	r9, #0
 800c798:	dc35      	bgt.n	800c806 <_printf_float+0x3aa>
 800c79a:	f04f 0800 	mov.w	r8, #0
 800c79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7a2:	f104 0a1a 	add.w	sl, r4, #26
 800c7a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	eba3 0309 	sub.w	r3, r3, r9
 800c7b0:	4543      	cmp	r3, r8
 800c7b2:	f77f af79 	ble.w	800c6a8 <_printf_float+0x24c>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	4628      	mov	r0, r5
 800c7be:	47b8      	blx	r7
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	f43f aeaa 	beq.w	800c51a <_printf_float+0xbe>
 800c7c6:	f108 0801 	add.w	r8, r8, #1
 800c7ca:	e7ec      	b.n	800c7a6 <_printf_float+0x34a>
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	4642      	mov	r2, r8
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b8      	blx	r7
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d1c0      	bne.n	800c75c <_printf_float+0x300>
 800c7da:	e69e      	b.n	800c51a <_printf_float+0xbe>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	9205      	str	r2, [sp, #20]
 800c7e4:	47b8      	blx	r7
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f ae97 	beq.w	800c51a <_printf_float+0xbe>
 800c7ec:	9a05      	ldr	r2, [sp, #20]
 800c7ee:	f10b 0b01 	add.w	fp, fp, #1
 800c7f2:	e7b9      	b.n	800c768 <_printf_float+0x30c>
 800c7f4:	ee18 3a10 	vmov	r3, s16
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b8      	blx	r7
 800c800:	3001      	adds	r0, #1
 800c802:	d1be      	bne.n	800c782 <_printf_float+0x326>
 800c804:	e689      	b.n	800c51a <_printf_float+0xbe>
 800c806:	9a05      	ldr	r2, [sp, #20]
 800c808:	464b      	mov	r3, r9
 800c80a:	4442      	add	r2, r8
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	d1c1      	bne.n	800c79a <_printf_float+0x33e>
 800c816:	e680      	b.n	800c51a <_printf_float+0xbe>
 800c818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c81a:	2a01      	cmp	r2, #1
 800c81c:	dc01      	bgt.n	800c822 <_printf_float+0x3c6>
 800c81e:	07db      	lsls	r3, r3, #31
 800c820:	d53a      	bpl.n	800c898 <_printf_float+0x43c>
 800c822:	2301      	movs	r3, #1
 800c824:	4642      	mov	r2, r8
 800c826:	4631      	mov	r1, r6
 800c828:	4628      	mov	r0, r5
 800c82a:	47b8      	blx	r7
 800c82c:	3001      	adds	r0, #1
 800c82e:	f43f ae74 	beq.w	800c51a <_printf_float+0xbe>
 800c832:	ee18 3a10 	vmov	r3, s16
 800c836:	4652      	mov	r2, sl
 800c838:	4631      	mov	r1, r6
 800c83a:	4628      	mov	r0, r5
 800c83c:	47b8      	blx	r7
 800c83e:	3001      	adds	r0, #1
 800c840:	f43f ae6b 	beq.w	800c51a <_printf_float+0xbe>
 800c844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c850:	f7f4 f942 	bl	8000ad8 <__aeabi_dcmpeq>
 800c854:	b9d8      	cbnz	r0, 800c88e <_printf_float+0x432>
 800c856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c85a:	f108 0201 	add.w	r2, r8, #1
 800c85e:	4631      	mov	r1, r6
 800c860:	4628      	mov	r0, r5
 800c862:	47b8      	blx	r7
 800c864:	3001      	adds	r0, #1
 800c866:	d10e      	bne.n	800c886 <_printf_float+0x42a>
 800c868:	e657      	b.n	800c51a <_printf_float+0xbe>
 800c86a:	2301      	movs	r3, #1
 800c86c:	4652      	mov	r2, sl
 800c86e:	4631      	mov	r1, r6
 800c870:	4628      	mov	r0, r5
 800c872:	47b8      	blx	r7
 800c874:	3001      	adds	r0, #1
 800c876:	f43f ae50 	beq.w	800c51a <_printf_float+0xbe>
 800c87a:	f108 0801 	add.w	r8, r8, #1
 800c87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c880:	3b01      	subs	r3, #1
 800c882:	4543      	cmp	r3, r8
 800c884:	dcf1      	bgt.n	800c86a <_printf_float+0x40e>
 800c886:	464b      	mov	r3, r9
 800c888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c88c:	e6da      	b.n	800c644 <_printf_float+0x1e8>
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	f104 0a1a 	add.w	sl, r4, #26
 800c896:	e7f2      	b.n	800c87e <_printf_float+0x422>
 800c898:	2301      	movs	r3, #1
 800c89a:	4642      	mov	r2, r8
 800c89c:	e7df      	b.n	800c85e <_printf_float+0x402>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	464a      	mov	r2, r9
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b8      	blx	r7
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	f43f ae36 	beq.w	800c51a <_printf_float+0xbe>
 800c8ae:	f108 0801 	add.w	r8, r8, #1
 800c8b2:	68e3      	ldr	r3, [r4, #12]
 800c8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8b6:	1a5b      	subs	r3, r3, r1
 800c8b8:	4543      	cmp	r3, r8
 800c8ba:	dcf0      	bgt.n	800c89e <_printf_float+0x442>
 800c8bc:	e6f8      	b.n	800c6b0 <_printf_float+0x254>
 800c8be:	f04f 0800 	mov.w	r8, #0
 800c8c2:	f104 0919 	add.w	r9, r4, #25
 800c8c6:	e7f4      	b.n	800c8b2 <_printf_float+0x456>

0800c8c8 <_printf_common>:
 800c8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8cc:	4616      	mov	r6, r2
 800c8ce:	4699      	mov	r9, r3
 800c8d0:	688a      	ldr	r2, [r1, #8]
 800c8d2:	690b      	ldr	r3, [r1, #16]
 800c8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	bfb8      	it	lt
 800c8dc:	4613      	movlt	r3, r2
 800c8de:	6033      	str	r3, [r6, #0]
 800c8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	b10a      	cbz	r2, 800c8ee <_printf_common+0x26>
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	6033      	str	r3, [r6, #0]
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	0699      	lsls	r1, r3, #26
 800c8f2:	bf42      	ittt	mi
 800c8f4:	6833      	ldrmi	r3, [r6, #0]
 800c8f6:	3302      	addmi	r3, #2
 800c8f8:	6033      	strmi	r3, [r6, #0]
 800c8fa:	6825      	ldr	r5, [r4, #0]
 800c8fc:	f015 0506 	ands.w	r5, r5, #6
 800c900:	d106      	bne.n	800c910 <_printf_common+0x48>
 800c902:	f104 0a19 	add.w	sl, r4, #25
 800c906:	68e3      	ldr	r3, [r4, #12]
 800c908:	6832      	ldr	r2, [r6, #0]
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	dc26      	bgt.n	800c95e <_printf_common+0x96>
 800c910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c914:	1e13      	subs	r3, r2, #0
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	bf18      	it	ne
 800c91a:	2301      	movne	r3, #1
 800c91c:	0692      	lsls	r2, r2, #26
 800c91e:	d42b      	bmi.n	800c978 <_printf_common+0xb0>
 800c920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c924:	4649      	mov	r1, r9
 800c926:	4638      	mov	r0, r7
 800c928:	47c0      	blx	r8
 800c92a:	3001      	adds	r0, #1
 800c92c:	d01e      	beq.n	800c96c <_printf_common+0xa4>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	f003 0306 	and.w	r3, r3, #6
 800c936:	2b04      	cmp	r3, #4
 800c938:	bf02      	ittt	eq
 800c93a:	68e5      	ldreq	r5, [r4, #12]
 800c93c:	6833      	ldreq	r3, [r6, #0]
 800c93e:	1aed      	subeq	r5, r5, r3
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	bf0c      	ite	eq
 800c944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c948:	2500      	movne	r5, #0
 800c94a:	4293      	cmp	r3, r2
 800c94c:	bfc4      	itt	gt
 800c94e:	1a9b      	subgt	r3, r3, r2
 800c950:	18ed      	addgt	r5, r5, r3
 800c952:	2600      	movs	r6, #0
 800c954:	341a      	adds	r4, #26
 800c956:	42b5      	cmp	r5, r6
 800c958:	d11a      	bne.n	800c990 <_printf_common+0xc8>
 800c95a:	2000      	movs	r0, #0
 800c95c:	e008      	b.n	800c970 <_printf_common+0xa8>
 800c95e:	2301      	movs	r3, #1
 800c960:	4652      	mov	r2, sl
 800c962:	4649      	mov	r1, r9
 800c964:	4638      	mov	r0, r7
 800c966:	47c0      	blx	r8
 800c968:	3001      	adds	r0, #1
 800c96a:	d103      	bne.n	800c974 <_printf_common+0xac>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c974:	3501      	adds	r5, #1
 800c976:	e7c6      	b.n	800c906 <_printf_common+0x3e>
 800c978:	18e1      	adds	r1, r4, r3
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	2030      	movs	r0, #48	; 0x30
 800c97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c982:	4422      	add	r2, r4
 800c984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c98c:	3302      	adds	r3, #2
 800c98e:	e7c7      	b.n	800c920 <_printf_common+0x58>
 800c990:	2301      	movs	r3, #1
 800c992:	4622      	mov	r2, r4
 800c994:	4649      	mov	r1, r9
 800c996:	4638      	mov	r0, r7
 800c998:	47c0      	blx	r8
 800c99a:	3001      	adds	r0, #1
 800c99c:	d0e6      	beq.n	800c96c <_printf_common+0xa4>
 800c99e:	3601      	adds	r6, #1
 800c9a0:	e7d9      	b.n	800c956 <_printf_common+0x8e>
	...

0800c9a4 <_printf_i>:
 800c9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a8:	7e0f      	ldrb	r7, [r1, #24]
 800c9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9ac:	2f78      	cmp	r7, #120	; 0x78
 800c9ae:	4691      	mov	r9, r2
 800c9b0:	4680      	mov	r8, r0
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	469a      	mov	sl, r3
 800c9b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9ba:	d807      	bhi.n	800c9cc <_printf_i+0x28>
 800c9bc:	2f62      	cmp	r7, #98	; 0x62
 800c9be:	d80a      	bhi.n	800c9d6 <_printf_i+0x32>
 800c9c0:	2f00      	cmp	r7, #0
 800c9c2:	f000 80d4 	beq.w	800cb6e <_printf_i+0x1ca>
 800c9c6:	2f58      	cmp	r7, #88	; 0x58
 800c9c8:	f000 80c0 	beq.w	800cb4c <_printf_i+0x1a8>
 800c9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9d4:	e03a      	b.n	800ca4c <_printf_i+0xa8>
 800c9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9da:	2b15      	cmp	r3, #21
 800c9dc:	d8f6      	bhi.n	800c9cc <_printf_i+0x28>
 800c9de:	a101      	add	r1, pc, #4	; (adr r1, 800c9e4 <_printf_i+0x40>)
 800c9e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9e4:	0800ca3d 	.word	0x0800ca3d
 800c9e8:	0800ca51 	.word	0x0800ca51
 800c9ec:	0800c9cd 	.word	0x0800c9cd
 800c9f0:	0800c9cd 	.word	0x0800c9cd
 800c9f4:	0800c9cd 	.word	0x0800c9cd
 800c9f8:	0800c9cd 	.word	0x0800c9cd
 800c9fc:	0800ca51 	.word	0x0800ca51
 800ca00:	0800c9cd 	.word	0x0800c9cd
 800ca04:	0800c9cd 	.word	0x0800c9cd
 800ca08:	0800c9cd 	.word	0x0800c9cd
 800ca0c:	0800c9cd 	.word	0x0800c9cd
 800ca10:	0800cb55 	.word	0x0800cb55
 800ca14:	0800ca7d 	.word	0x0800ca7d
 800ca18:	0800cb0f 	.word	0x0800cb0f
 800ca1c:	0800c9cd 	.word	0x0800c9cd
 800ca20:	0800c9cd 	.word	0x0800c9cd
 800ca24:	0800cb77 	.word	0x0800cb77
 800ca28:	0800c9cd 	.word	0x0800c9cd
 800ca2c:	0800ca7d 	.word	0x0800ca7d
 800ca30:	0800c9cd 	.word	0x0800c9cd
 800ca34:	0800c9cd 	.word	0x0800c9cd
 800ca38:	0800cb17 	.word	0x0800cb17
 800ca3c:	682b      	ldr	r3, [r5, #0]
 800ca3e:	1d1a      	adds	r2, r3, #4
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	602a      	str	r2, [r5, #0]
 800ca44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e09f      	b.n	800cb90 <_printf_i+0x1ec>
 800ca50:	6820      	ldr	r0, [r4, #0]
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	0607      	lsls	r7, r0, #24
 800ca56:	f103 0104 	add.w	r1, r3, #4
 800ca5a:	6029      	str	r1, [r5, #0]
 800ca5c:	d501      	bpl.n	800ca62 <_printf_i+0xbe>
 800ca5e:	681e      	ldr	r6, [r3, #0]
 800ca60:	e003      	b.n	800ca6a <_printf_i+0xc6>
 800ca62:	0646      	lsls	r6, r0, #25
 800ca64:	d5fb      	bpl.n	800ca5e <_printf_i+0xba>
 800ca66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	da03      	bge.n	800ca76 <_printf_i+0xd2>
 800ca6e:	232d      	movs	r3, #45	; 0x2d
 800ca70:	4276      	negs	r6, r6
 800ca72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca76:	485a      	ldr	r0, [pc, #360]	; (800cbe0 <_printf_i+0x23c>)
 800ca78:	230a      	movs	r3, #10
 800ca7a:	e012      	b.n	800caa2 <_printf_i+0xfe>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	6820      	ldr	r0, [r4, #0]
 800ca80:	1d19      	adds	r1, r3, #4
 800ca82:	6029      	str	r1, [r5, #0]
 800ca84:	0605      	lsls	r5, r0, #24
 800ca86:	d501      	bpl.n	800ca8c <_printf_i+0xe8>
 800ca88:	681e      	ldr	r6, [r3, #0]
 800ca8a:	e002      	b.n	800ca92 <_printf_i+0xee>
 800ca8c:	0641      	lsls	r1, r0, #25
 800ca8e:	d5fb      	bpl.n	800ca88 <_printf_i+0xe4>
 800ca90:	881e      	ldrh	r6, [r3, #0]
 800ca92:	4853      	ldr	r0, [pc, #332]	; (800cbe0 <_printf_i+0x23c>)
 800ca94:	2f6f      	cmp	r7, #111	; 0x6f
 800ca96:	bf0c      	ite	eq
 800ca98:	2308      	moveq	r3, #8
 800ca9a:	230a      	movne	r3, #10
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caa2:	6865      	ldr	r5, [r4, #4]
 800caa4:	60a5      	str	r5, [r4, #8]
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	bfa2      	ittt	ge
 800caaa:	6821      	ldrge	r1, [r4, #0]
 800caac:	f021 0104 	bicge.w	r1, r1, #4
 800cab0:	6021      	strge	r1, [r4, #0]
 800cab2:	b90e      	cbnz	r6, 800cab8 <_printf_i+0x114>
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	d04b      	beq.n	800cb50 <_printf_i+0x1ac>
 800cab8:	4615      	mov	r5, r2
 800caba:	fbb6 f1f3 	udiv	r1, r6, r3
 800cabe:	fb03 6711 	mls	r7, r3, r1, r6
 800cac2:	5dc7      	ldrb	r7, [r0, r7]
 800cac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cac8:	4637      	mov	r7, r6
 800caca:	42bb      	cmp	r3, r7
 800cacc:	460e      	mov	r6, r1
 800cace:	d9f4      	bls.n	800caba <_printf_i+0x116>
 800cad0:	2b08      	cmp	r3, #8
 800cad2:	d10b      	bne.n	800caec <_printf_i+0x148>
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	07de      	lsls	r6, r3, #31
 800cad8:	d508      	bpl.n	800caec <_printf_i+0x148>
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	6861      	ldr	r1, [r4, #4]
 800cade:	4299      	cmp	r1, r3
 800cae0:	bfde      	ittt	le
 800cae2:	2330      	movle	r3, #48	; 0x30
 800cae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caec:	1b52      	subs	r2, r2, r5
 800caee:	6122      	str	r2, [r4, #16]
 800caf0:	f8cd a000 	str.w	sl, [sp]
 800caf4:	464b      	mov	r3, r9
 800caf6:	aa03      	add	r2, sp, #12
 800caf8:	4621      	mov	r1, r4
 800cafa:	4640      	mov	r0, r8
 800cafc:	f7ff fee4 	bl	800c8c8 <_printf_common>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d14a      	bne.n	800cb9a <_printf_i+0x1f6>
 800cb04:	f04f 30ff 	mov.w	r0, #4294967295
 800cb08:	b004      	add	sp, #16
 800cb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	f043 0320 	orr.w	r3, r3, #32
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	4833      	ldr	r0, [pc, #204]	; (800cbe4 <_printf_i+0x240>)
 800cb18:	2778      	movs	r7, #120	; 0x78
 800cb1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	6829      	ldr	r1, [r5, #0]
 800cb22:	061f      	lsls	r7, r3, #24
 800cb24:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb28:	d402      	bmi.n	800cb30 <_printf_i+0x18c>
 800cb2a:	065f      	lsls	r7, r3, #25
 800cb2c:	bf48      	it	mi
 800cb2e:	b2b6      	uxthmi	r6, r6
 800cb30:	07df      	lsls	r7, r3, #31
 800cb32:	bf48      	it	mi
 800cb34:	f043 0320 	orrmi.w	r3, r3, #32
 800cb38:	6029      	str	r1, [r5, #0]
 800cb3a:	bf48      	it	mi
 800cb3c:	6023      	strmi	r3, [r4, #0]
 800cb3e:	b91e      	cbnz	r6, 800cb48 <_printf_i+0x1a4>
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	f023 0320 	bic.w	r3, r3, #32
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	2310      	movs	r3, #16
 800cb4a:	e7a7      	b.n	800ca9c <_printf_i+0xf8>
 800cb4c:	4824      	ldr	r0, [pc, #144]	; (800cbe0 <_printf_i+0x23c>)
 800cb4e:	e7e4      	b.n	800cb1a <_printf_i+0x176>
 800cb50:	4615      	mov	r5, r2
 800cb52:	e7bd      	b.n	800cad0 <_printf_i+0x12c>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	6826      	ldr	r6, [r4, #0]
 800cb58:	6961      	ldr	r1, [r4, #20]
 800cb5a:	1d18      	adds	r0, r3, #4
 800cb5c:	6028      	str	r0, [r5, #0]
 800cb5e:	0635      	lsls	r5, r6, #24
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	d501      	bpl.n	800cb68 <_printf_i+0x1c4>
 800cb64:	6019      	str	r1, [r3, #0]
 800cb66:	e002      	b.n	800cb6e <_printf_i+0x1ca>
 800cb68:	0670      	lsls	r0, r6, #25
 800cb6a:	d5fb      	bpl.n	800cb64 <_printf_i+0x1c0>
 800cb6c:	8019      	strh	r1, [r3, #0]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	4615      	mov	r5, r2
 800cb74:	e7bc      	b.n	800caf0 <_printf_i+0x14c>
 800cb76:	682b      	ldr	r3, [r5, #0]
 800cb78:	1d1a      	adds	r2, r3, #4
 800cb7a:	602a      	str	r2, [r5, #0]
 800cb7c:	681d      	ldr	r5, [r3, #0]
 800cb7e:	6862      	ldr	r2, [r4, #4]
 800cb80:	2100      	movs	r1, #0
 800cb82:	4628      	mov	r0, r5
 800cb84:	f7f3 fb2c 	bl	80001e0 <memchr>
 800cb88:	b108      	cbz	r0, 800cb8e <_printf_i+0x1ea>
 800cb8a:	1b40      	subs	r0, r0, r5
 800cb8c:	6060      	str	r0, [r4, #4]
 800cb8e:	6863      	ldr	r3, [r4, #4]
 800cb90:	6123      	str	r3, [r4, #16]
 800cb92:	2300      	movs	r3, #0
 800cb94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb98:	e7aa      	b.n	800caf0 <_printf_i+0x14c>
 800cb9a:	6923      	ldr	r3, [r4, #16]
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	4649      	mov	r1, r9
 800cba0:	4640      	mov	r0, r8
 800cba2:	47d0      	blx	sl
 800cba4:	3001      	adds	r0, #1
 800cba6:	d0ad      	beq.n	800cb04 <_printf_i+0x160>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	079b      	lsls	r3, r3, #30
 800cbac:	d413      	bmi.n	800cbd6 <_printf_i+0x232>
 800cbae:	68e0      	ldr	r0, [r4, #12]
 800cbb0:	9b03      	ldr	r3, [sp, #12]
 800cbb2:	4298      	cmp	r0, r3
 800cbb4:	bfb8      	it	lt
 800cbb6:	4618      	movlt	r0, r3
 800cbb8:	e7a6      	b.n	800cb08 <_printf_i+0x164>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	4632      	mov	r2, r6
 800cbbe:	4649      	mov	r1, r9
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	47d0      	blx	sl
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d09d      	beq.n	800cb04 <_printf_i+0x160>
 800cbc8:	3501      	adds	r5, #1
 800cbca:	68e3      	ldr	r3, [r4, #12]
 800cbcc:	9903      	ldr	r1, [sp, #12]
 800cbce:	1a5b      	subs	r3, r3, r1
 800cbd0:	42ab      	cmp	r3, r5
 800cbd2:	dcf2      	bgt.n	800cbba <_printf_i+0x216>
 800cbd4:	e7eb      	b.n	800cbae <_printf_i+0x20a>
 800cbd6:	2500      	movs	r5, #0
 800cbd8:	f104 0619 	add.w	r6, r4, #25
 800cbdc:	e7f5      	b.n	800cbca <_printf_i+0x226>
 800cbde:	bf00      	nop
 800cbe0:	0800f2fa 	.word	0x0800f2fa
 800cbe4:	0800f30b 	.word	0x0800f30b

0800cbe8 <std>:
 800cbe8:	2300      	movs	r3, #0
 800cbea:	b510      	push	{r4, lr}
 800cbec:	4604      	mov	r4, r0
 800cbee:	e9c0 3300 	strd	r3, r3, [r0]
 800cbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbf6:	6083      	str	r3, [r0, #8]
 800cbf8:	8181      	strh	r1, [r0, #12]
 800cbfa:	6643      	str	r3, [r0, #100]	; 0x64
 800cbfc:	81c2      	strh	r2, [r0, #14]
 800cbfe:	6183      	str	r3, [r0, #24]
 800cc00:	4619      	mov	r1, r3
 800cc02:	2208      	movs	r2, #8
 800cc04:	305c      	adds	r0, #92	; 0x5c
 800cc06:	f000 f9f7 	bl	800cff8 <memset>
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <std+0x58>)
 800cc0c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <std+0x5c>)
 800cc10:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc12:	4b0d      	ldr	r3, [pc, #52]	; (800cc48 <std+0x60>)
 800cc14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc16:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <std+0x64>)
 800cc18:	6323      	str	r3, [r4, #48]	; 0x30
 800cc1a:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <std+0x68>)
 800cc1c:	6224      	str	r4, [r4, #32]
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d006      	beq.n	800cc30 <std+0x48>
 800cc22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cc26:	4294      	cmp	r4, r2
 800cc28:	d002      	beq.n	800cc30 <std+0x48>
 800cc2a:	33d0      	adds	r3, #208	; 0xd0
 800cc2c:	429c      	cmp	r4, r3
 800cc2e:	d105      	bne.n	800cc3c <std+0x54>
 800cc30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc38:	f000 bab0 	b.w	800d19c <__retarget_lock_init_recursive>
 800cc3c:	bd10      	pop	{r4, pc}
 800cc3e:	bf00      	nop
 800cc40:	0800ce49 	.word	0x0800ce49
 800cc44:	0800ce6b 	.word	0x0800ce6b
 800cc48:	0800cea3 	.word	0x0800cea3
 800cc4c:	0800cec7 	.word	0x0800cec7
 800cc50:	200028d8 	.word	0x200028d8

0800cc54 <stdio_exit_handler>:
 800cc54:	4a02      	ldr	r2, [pc, #8]	; (800cc60 <stdio_exit_handler+0xc>)
 800cc56:	4903      	ldr	r1, [pc, #12]	; (800cc64 <stdio_exit_handler+0x10>)
 800cc58:	4803      	ldr	r0, [pc, #12]	; (800cc68 <stdio_exit_handler+0x14>)
 800cc5a:	f000 b869 	b.w	800cd30 <_fwalk_sglue>
 800cc5e:	bf00      	nop
 800cc60:	2000009c 	.word	0x2000009c
 800cc64:	0800eb41 	.word	0x0800eb41
 800cc68:	200000a8 	.word	0x200000a8

0800cc6c <cleanup_stdio>:
 800cc6c:	6841      	ldr	r1, [r0, #4]
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <cleanup_stdio+0x34>)
 800cc70:	4299      	cmp	r1, r3
 800cc72:	b510      	push	{r4, lr}
 800cc74:	4604      	mov	r4, r0
 800cc76:	d001      	beq.n	800cc7c <cleanup_stdio+0x10>
 800cc78:	f001 ff62 	bl	800eb40 <_fflush_r>
 800cc7c:	68a1      	ldr	r1, [r4, #8]
 800cc7e:	4b09      	ldr	r3, [pc, #36]	; (800cca4 <cleanup_stdio+0x38>)
 800cc80:	4299      	cmp	r1, r3
 800cc82:	d002      	beq.n	800cc8a <cleanup_stdio+0x1e>
 800cc84:	4620      	mov	r0, r4
 800cc86:	f001 ff5b 	bl	800eb40 <_fflush_r>
 800cc8a:	68e1      	ldr	r1, [r4, #12]
 800cc8c:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <cleanup_stdio+0x3c>)
 800cc8e:	4299      	cmp	r1, r3
 800cc90:	d004      	beq.n	800cc9c <cleanup_stdio+0x30>
 800cc92:	4620      	mov	r0, r4
 800cc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc98:	f001 bf52 	b.w	800eb40 <_fflush_r>
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	bf00      	nop
 800cca0:	200028d8 	.word	0x200028d8
 800cca4:	20002940 	.word	0x20002940
 800cca8:	200029a8 	.word	0x200029a8

0800ccac <global_stdio_init.part.0>:
 800ccac:	b510      	push	{r4, lr}
 800ccae:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <global_stdio_init.part.0+0x30>)
 800ccb0:	4c0b      	ldr	r4, [pc, #44]	; (800cce0 <global_stdio_init.part.0+0x34>)
 800ccb2:	4a0c      	ldr	r2, [pc, #48]	; (800cce4 <global_stdio_init.part.0+0x38>)
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2104      	movs	r1, #4
 800ccbc:	f7ff ff94 	bl	800cbe8 <std>
 800ccc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	2109      	movs	r1, #9
 800ccc8:	f7ff ff8e 	bl	800cbe8 <std>
 800cccc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd6:	2112      	movs	r1, #18
 800ccd8:	f7ff bf86 	b.w	800cbe8 <std>
 800ccdc:	20002a10 	.word	0x20002a10
 800cce0:	200028d8 	.word	0x200028d8
 800cce4:	0800cc55 	.word	0x0800cc55

0800cce8 <__sfp_lock_acquire>:
 800cce8:	4801      	ldr	r0, [pc, #4]	; (800ccf0 <__sfp_lock_acquire+0x8>)
 800ccea:	f000 ba58 	b.w	800d19e <__retarget_lock_acquire_recursive>
 800ccee:	bf00      	nop
 800ccf0:	20002a19 	.word	0x20002a19

0800ccf4 <__sfp_lock_release>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__sfp_lock_release+0x8>)
 800ccf6:	f000 ba53 	b.w	800d1a0 <__retarget_lock_release_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20002a19 	.word	0x20002a19

0800cd00 <__sinit>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	4604      	mov	r4, r0
 800cd04:	f7ff fff0 	bl	800cce8 <__sfp_lock_acquire>
 800cd08:	6a23      	ldr	r3, [r4, #32]
 800cd0a:	b11b      	cbz	r3, 800cd14 <__sinit+0x14>
 800cd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd10:	f7ff bff0 	b.w	800ccf4 <__sfp_lock_release>
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <__sinit+0x28>)
 800cd16:	6223      	str	r3, [r4, #32]
 800cd18:	4b04      	ldr	r3, [pc, #16]	; (800cd2c <__sinit+0x2c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f5      	bne.n	800cd0c <__sinit+0xc>
 800cd20:	f7ff ffc4 	bl	800ccac <global_stdio_init.part.0>
 800cd24:	e7f2      	b.n	800cd0c <__sinit+0xc>
 800cd26:	bf00      	nop
 800cd28:	0800cc6d 	.word	0x0800cc6d
 800cd2c:	20002a10 	.word	0x20002a10

0800cd30 <_fwalk_sglue>:
 800cd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd34:	4607      	mov	r7, r0
 800cd36:	4688      	mov	r8, r1
 800cd38:	4614      	mov	r4, r2
 800cd3a:	2600      	movs	r6, #0
 800cd3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd40:	f1b9 0901 	subs.w	r9, r9, #1
 800cd44:	d505      	bpl.n	800cd52 <_fwalk_sglue+0x22>
 800cd46:	6824      	ldr	r4, [r4, #0]
 800cd48:	2c00      	cmp	r4, #0
 800cd4a:	d1f7      	bne.n	800cd3c <_fwalk_sglue+0xc>
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd52:	89ab      	ldrh	r3, [r5, #12]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d907      	bls.n	800cd68 <_fwalk_sglue+0x38>
 800cd58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	d003      	beq.n	800cd68 <_fwalk_sglue+0x38>
 800cd60:	4629      	mov	r1, r5
 800cd62:	4638      	mov	r0, r7
 800cd64:	47c0      	blx	r8
 800cd66:	4306      	orrs	r6, r0
 800cd68:	3568      	adds	r5, #104	; 0x68
 800cd6a:	e7e9      	b.n	800cd40 <_fwalk_sglue+0x10>

0800cd6c <iprintf>:
 800cd6c:	b40f      	push	{r0, r1, r2, r3}
 800cd6e:	b507      	push	{r0, r1, r2, lr}
 800cd70:	4906      	ldr	r1, [pc, #24]	; (800cd8c <iprintf+0x20>)
 800cd72:	ab04      	add	r3, sp, #16
 800cd74:	6808      	ldr	r0, [r1, #0]
 800cd76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd7a:	6881      	ldr	r1, [r0, #8]
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	f001 fd3f 	bl	800e800 <_vfiprintf_r>
 800cd82:	b003      	add	sp, #12
 800cd84:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd88:	b004      	add	sp, #16
 800cd8a:	4770      	bx	lr
 800cd8c:	200000f4 	.word	0x200000f4

0800cd90 <_puts_r>:
 800cd90:	6a03      	ldr	r3, [r0, #32]
 800cd92:	b570      	push	{r4, r5, r6, lr}
 800cd94:	6884      	ldr	r4, [r0, #8]
 800cd96:	4605      	mov	r5, r0
 800cd98:	460e      	mov	r6, r1
 800cd9a:	b90b      	cbnz	r3, 800cda0 <_puts_r+0x10>
 800cd9c:	f7ff ffb0 	bl	800cd00 <__sinit>
 800cda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda2:	07db      	lsls	r3, r3, #31
 800cda4:	d405      	bmi.n	800cdb2 <_puts_r+0x22>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	0598      	lsls	r0, r3, #22
 800cdaa:	d402      	bmi.n	800cdb2 <_puts_r+0x22>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f000 f9f6 	bl	800d19e <__retarget_lock_acquire_recursive>
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	0719      	lsls	r1, r3, #28
 800cdb6:	d513      	bpl.n	800cde0 <_puts_r+0x50>
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	b18b      	cbz	r3, 800cde0 <_puts_r+0x50>
 800cdbc:	3e01      	subs	r6, #1
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	b9e9      	cbnz	r1, 800ce06 <_puts_r+0x76>
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	da2e      	bge.n	800ce2c <_puts_r+0x9c>
 800cdce:	4622      	mov	r2, r4
 800cdd0:	210a      	movs	r1, #10
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 f87b 	bl	800cece <__swbuf_r>
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d007      	beq.n	800cdec <_puts_r+0x5c>
 800cddc:	250a      	movs	r5, #10
 800cdde:	e007      	b.n	800cdf0 <_puts_r+0x60>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4628      	mov	r0, r5
 800cde4:	f000 f8b0 	bl	800cf48 <__swsetup_r>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d0e7      	beq.n	800cdbc <_puts_r+0x2c>
 800cdec:	f04f 35ff 	mov.w	r5, #4294967295
 800cdf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdf2:	07da      	lsls	r2, r3, #31
 800cdf4:	d405      	bmi.n	800ce02 <_puts_r+0x72>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	059b      	lsls	r3, r3, #22
 800cdfa:	d402      	bmi.n	800ce02 <_puts_r+0x72>
 800cdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdfe:	f000 f9cf 	bl	800d1a0 <__retarget_lock_release_recursive>
 800ce02:	4628      	mov	r0, r5
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	da04      	bge.n	800ce14 <_puts_r+0x84>
 800ce0a:	69a2      	ldr	r2, [r4, #24]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	dc06      	bgt.n	800ce1e <_puts_r+0x8e>
 800ce10:	290a      	cmp	r1, #10
 800ce12:	d004      	beq.n	800ce1e <_puts_r+0x8e>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	6022      	str	r2, [r4, #0]
 800ce1a:	7019      	strb	r1, [r3, #0]
 800ce1c:	e7cf      	b.n	800cdbe <_puts_r+0x2e>
 800ce1e:	4622      	mov	r2, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f854 	bl	800cece <__swbuf_r>
 800ce26:	3001      	adds	r0, #1
 800ce28:	d1c9      	bne.n	800cdbe <_puts_r+0x2e>
 800ce2a:	e7df      	b.n	800cdec <_puts_r+0x5c>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	250a      	movs	r5, #10
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	6022      	str	r2, [r4, #0]
 800ce34:	701d      	strb	r5, [r3, #0]
 800ce36:	e7db      	b.n	800cdf0 <_puts_r+0x60>

0800ce38 <puts>:
 800ce38:	4b02      	ldr	r3, [pc, #8]	; (800ce44 <puts+0xc>)
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	f7ff bfa7 	b.w	800cd90 <_puts_r>
 800ce42:	bf00      	nop
 800ce44:	200000f4 	.word	0x200000f4

0800ce48 <__sread>:
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce50:	f000 f956 	bl	800d100 <_read_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	bfab      	itete	ge
 800ce58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce5c:	181b      	addge	r3, r3, r0
 800ce5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce62:	bfac      	ite	ge
 800ce64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce66:	81a3      	strhlt	r3, [r4, #12]
 800ce68:	bd10      	pop	{r4, pc}

0800ce6a <__swrite>:
 800ce6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6e:	461f      	mov	r7, r3
 800ce70:	898b      	ldrh	r3, [r1, #12]
 800ce72:	05db      	lsls	r3, r3, #23
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	4616      	mov	r6, r2
 800ce7a:	d505      	bpl.n	800ce88 <__swrite+0x1e>
 800ce7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce80:	2302      	movs	r3, #2
 800ce82:	2200      	movs	r2, #0
 800ce84:	f000 f92a 	bl	800d0dc <_lseek_r>
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce92:	81a3      	strh	r3, [r4, #12]
 800ce94:	4632      	mov	r2, r6
 800ce96:	463b      	mov	r3, r7
 800ce98:	4628      	mov	r0, r5
 800ce9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	f000 b941 	b.w	800d124 <_write_r>

0800cea2 <__sseek>:
 800cea2:	b510      	push	{r4, lr}
 800cea4:	460c      	mov	r4, r1
 800cea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceaa:	f000 f917 	bl	800d0dc <_lseek_r>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	bf15      	itete	ne
 800ceb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cebe:	81a3      	strheq	r3, [r4, #12]
 800cec0:	bf18      	it	ne
 800cec2:	81a3      	strhne	r3, [r4, #12]
 800cec4:	bd10      	pop	{r4, pc}

0800cec6 <__sclose>:
 800cec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceca:	f000 b8a1 	b.w	800d010 <_close_r>

0800cece <__swbuf_r>:
 800cece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced0:	460e      	mov	r6, r1
 800ced2:	4614      	mov	r4, r2
 800ced4:	4605      	mov	r5, r0
 800ced6:	b118      	cbz	r0, 800cee0 <__swbuf_r+0x12>
 800ced8:	6a03      	ldr	r3, [r0, #32]
 800ceda:	b90b      	cbnz	r3, 800cee0 <__swbuf_r+0x12>
 800cedc:	f7ff ff10 	bl	800cd00 <__sinit>
 800cee0:	69a3      	ldr	r3, [r4, #24]
 800cee2:	60a3      	str	r3, [r4, #8]
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	071a      	lsls	r2, r3, #28
 800cee8:	d525      	bpl.n	800cf36 <__swbuf_r+0x68>
 800ceea:	6923      	ldr	r3, [r4, #16]
 800ceec:	b31b      	cbz	r3, 800cf36 <__swbuf_r+0x68>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	6922      	ldr	r2, [r4, #16]
 800cef2:	1a98      	subs	r0, r3, r2
 800cef4:	6963      	ldr	r3, [r4, #20]
 800cef6:	b2f6      	uxtb	r6, r6
 800cef8:	4283      	cmp	r3, r0
 800cefa:	4637      	mov	r7, r6
 800cefc:	dc04      	bgt.n	800cf08 <__swbuf_r+0x3a>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	f001 fe1d 	bl	800eb40 <_fflush_r>
 800cf06:	b9e0      	cbnz	r0, 800cf42 <__swbuf_r+0x74>
 800cf08:	68a3      	ldr	r3, [r4, #8]
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	60a3      	str	r3, [r4, #8]
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	6022      	str	r2, [r4, #0]
 800cf14:	701e      	strb	r6, [r3, #0]
 800cf16:	6962      	ldr	r2, [r4, #20]
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d004      	beq.n	800cf28 <__swbuf_r+0x5a>
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	07db      	lsls	r3, r3, #31
 800cf22:	d506      	bpl.n	800cf32 <__swbuf_r+0x64>
 800cf24:	2e0a      	cmp	r6, #10
 800cf26:	d104      	bne.n	800cf32 <__swbuf_r+0x64>
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f001 fe08 	bl	800eb40 <_fflush_r>
 800cf30:	b938      	cbnz	r0, 800cf42 <__swbuf_r+0x74>
 800cf32:	4638      	mov	r0, r7
 800cf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf36:	4621      	mov	r1, r4
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f000 f805 	bl	800cf48 <__swsetup_r>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d0d5      	beq.n	800ceee <__swbuf_r+0x20>
 800cf42:	f04f 37ff 	mov.w	r7, #4294967295
 800cf46:	e7f4      	b.n	800cf32 <__swbuf_r+0x64>

0800cf48 <__swsetup_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4b2a      	ldr	r3, [pc, #168]	; (800cff4 <__swsetup_r+0xac>)
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	6818      	ldr	r0, [r3, #0]
 800cf50:	460c      	mov	r4, r1
 800cf52:	b118      	cbz	r0, 800cf5c <__swsetup_r+0x14>
 800cf54:	6a03      	ldr	r3, [r0, #32]
 800cf56:	b90b      	cbnz	r3, 800cf5c <__swsetup_r+0x14>
 800cf58:	f7ff fed2 	bl	800cd00 <__sinit>
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf62:	0718      	lsls	r0, r3, #28
 800cf64:	d422      	bmi.n	800cfac <__swsetup_r+0x64>
 800cf66:	06d9      	lsls	r1, r3, #27
 800cf68:	d407      	bmi.n	800cf7a <__swsetup_r+0x32>
 800cf6a:	2309      	movs	r3, #9
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf72:	81a3      	strh	r3, [r4, #12]
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	e034      	b.n	800cfe4 <__swsetup_r+0x9c>
 800cf7a:	0758      	lsls	r0, r3, #29
 800cf7c:	d512      	bpl.n	800cfa4 <__swsetup_r+0x5c>
 800cf7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf80:	b141      	cbz	r1, 800cf94 <__swsetup_r+0x4c>
 800cf82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf86:	4299      	cmp	r1, r3
 800cf88:	d002      	beq.n	800cf90 <__swsetup_r+0x48>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f000 ff92 	bl	800deb4 <_free_r>
 800cf90:	2300      	movs	r3, #0
 800cf92:	6363      	str	r3, [r4, #52]	; 0x34
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	6063      	str	r3, [r4, #4]
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	f043 0308 	orr.w	r3, r3, #8
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	6923      	ldr	r3, [r4, #16]
 800cfae:	b94b      	cbnz	r3, 800cfc4 <__swsetup_r+0x7c>
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfba:	d003      	beq.n	800cfc4 <__swsetup_r+0x7c>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f001 fe0c 	bl	800ebdc <__smakebuf_r>
 800cfc4:	89a0      	ldrh	r0, [r4, #12]
 800cfc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfca:	f010 0301 	ands.w	r3, r0, #1
 800cfce:	d00a      	beq.n	800cfe6 <__swsetup_r+0x9e>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	60a3      	str	r3, [r4, #8]
 800cfd4:	6963      	ldr	r3, [r4, #20]
 800cfd6:	425b      	negs	r3, r3
 800cfd8:	61a3      	str	r3, [r4, #24]
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	b943      	cbnz	r3, 800cff0 <__swsetup_r+0xa8>
 800cfde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cfe2:	d1c4      	bne.n	800cf6e <__swsetup_r+0x26>
 800cfe4:	bd38      	pop	{r3, r4, r5, pc}
 800cfe6:	0781      	lsls	r1, r0, #30
 800cfe8:	bf58      	it	pl
 800cfea:	6963      	ldrpl	r3, [r4, #20]
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	e7f4      	b.n	800cfda <__swsetup_r+0x92>
 800cff0:	2000      	movs	r0, #0
 800cff2:	e7f7      	b.n	800cfe4 <__swsetup_r+0x9c>
 800cff4:	200000f4 	.word	0x200000f4

0800cff8 <memset>:
 800cff8:	4402      	add	r2, r0
 800cffa:	4603      	mov	r3, r0
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d100      	bne.n	800d002 <memset+0xa>
 800d000:	4770      	bx	lr
 800d002:	f803 1b01 	strb.w	r1, [r3], #1
 800d006:	e7f9      	b.n	800cffc <memset+0x4>

0800d008 <_localeconv_r>:
 800d008:	4800      	ldr	r0, [pc, #0]	; (800d00c <_localeconv_r+0x4>)
 800d00a:	4770      	bx	lr
 800d00c:	200001e8 	.word	0x200001e8

0800d010 <_close_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_close_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f4 fd51 	bl	8001ac2 <_close>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_close_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_close_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20002a14 	.word	0x20002a14

0800d030 <_reclaim_reent>:
 800d030:	4b29      	ldr	r3, [pc, #164]	; (800d0d8 <_reclaim_reent+0xa8>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4283      	cmp	r3, r0
 800d036:	b570      	push	{r4, r5, r6, lr}
 800d038:	4604      	mov	r4, r0
 800d03a:	d04b      	beq.n	800d0d4 <_reclaim_reent+0xa4>
 800d03c:	69c3      	ldr	r3, [r0, #28]
 800d03e:	b143      	cbz	r3, 800d052 <_reclaim_reent+0x22>
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d144      	bne.n	800d0d0 <_reclaim_reent+0xa0>
 800d046:	69e3      	ldr	r3, [r4, #28]
 800d048:	6819      	ldr	r1, [r3, #0]
 800d04a:	b111      	cbz	r1, 800d052 <_reclaim_reent+0x22>
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 ff31 	bl	800deb4 <_free_r>
 800d052:	6961      	ldr	r1, [r4, #20]
 800d054:	b111      	cbz	r1, 800d05c <_reclaim_reent+0x2c>
 800d056:	4620      	mov	r0, r4
 800d058:	f000 ff2c 	bl	800deb4 <_free_r>
 800d05c:	69e1      	ldr	r1, [r4, #28]
 800d05e:	b111      	cbz	r1, 800d066 <_reclaim_reent+0x36>
 800d060:	4620      	mov	r0, r4
 800d062:	f000 ff27 	bl	800deb4 <_free_r>
 800d066:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d068:	b111      	cbz	r1, 800d070 <_reclaim_reent+0x40>
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 ff22 	bl	800deb4 <_free_r>
 800d070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d072:	b111      	cbz	r1, 800d07a <_reclaim_reent+0x4a>
 800d074:	4620      	mov	r0, r4
 800d076:	f000 ff1d 	bl	800deb4 <_free_r>
 800d07a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d07c:	b111      	cbz	r1, 800d084 <_reclaim_reent+0x54>
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 ff18 	bl	800deb4 <_free_r>
 800d084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d086:	b111      	cbz	r1, 800d08e <_reclaim_reent+0x5e>
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 ff13 	bl	800deb4 <_free_r>
 800d08e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d090:	b111      	cbz	r1, 800d098 <_reclaim_reent+0x68>
 800d092:	4620      	mov	r0, r4
 800d094:	f000 ff0e 	bl	800deb4 <_free_r>
 800d098:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d09a:	b111      	cbz	r1, 800d0a2 <_reclaim_reent+0x72>
 800d09c:	4620      	mov	r0, r4
 800d09e:	f000 ff09 	bl	800deb4 <_free_r>
 800d0a2:	6a23      	ldr	r3, [r4, #32]
 800d0a4:	b1b3      	cbz	r3, 800d0d4 <_reclaim_reent+0xa4>
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0ac:	4718      	bx	r3
 800d0ae:	5949      	ldr	r1, [r1, r5]
 800d0b0:	b941      	cbnz	r1, 800d0c4 <_reclaim_reent+0x94>
 800d0b2:	3504      	adds	r5, #4
 800d0b4:	69e3      	ldr	r3, [r4, #28]
 800d0b6:	2d80      	cmp	r5, #128	; 0x80
 800d0b8:	68d9      	ldr	r1, [r3, #12]
 800d0ba:	d1f8      	bne.n	800d0ae <_reclaim_reent+0x7e>
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fef9 	bl	800deb4 <_free_r>
 800d0c2:	e7c0      	b.n	800d046 <_reclaim_reent+0x16>
 800d0c4:	680e      	ldr	r6, [r1, #0]
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f000 fef4 	bl	800deb4 <_free_r>
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	e7ef      	b.n	800d0b0 <_reclaim_reent+0x80>
 800d0d0:	2500      	movs	r5, #0
 800d0d2:	e7ef      	b.n	800d0b4 <_reclaim_reent+0x84>
 800d0d4:	bd70      	pop	{r4, r5, r6, pc}
 800d0d6:	bf00      	nop
 800d0d8:	200000f4 	.word	0x200000f4

0800d0dc <_lseek_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_lseek_r+0x20>)
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f4 fd10 	bl	8001b10 <_lseek>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_lseek_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_lseek_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20002a14 	.word	0x20002a14

0800d100 <_read_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d07      	ldr	r5, [pc, #28]	; (800d120 <_read_r+0x20>)
 800d104:	4604      	mov	r4, r0
 800d106:	4608      	mov	r0, r1
 800d108:	4611      	mov	r1, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f4 fc9e 	bl	8001a50 <_read>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_read_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_read_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20002a14 	.word	0x20002a14

0800d124 <_write_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	; (800d144 <_write_r+0x20>)
 800d128:	4604      	mov	r4, r0
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7f4 fca9 	bl	8001a8a <_write>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_write_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_write_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	20002a14 	.word	0x20002a14

0800d148 <__errno>:
 800d148:	4b01      	ldr	r3, [pc, #4]	; (800d150 <__errno+0x8>)
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	200000f4 	.word	0x200000f4

0800d154 <__libc_init_array>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	4d0d      	ldr	r5, [pc, #52]	; (800d18c <__libc_init_array+0x38>)
 800d158:	4c0d      	ldr	r4, [pc, #52]	; (800d190 <__libc_init_array+0x3c>)
 800d15a:	1b64      	subs	r4, r4, r5
 800d15c:	10a4      	asrs	r4, r4, #2
 800d15e:	2600      	movs	r6, #0
 800d160:	42a6      	cmp	r6, r4
 800d162:	d109      	bne.n	800d178 <__libc_init_array+0x24>
 800d164:	4d0b      	ldr	r5, [pc, #44]	; (800d194 <__libc_init_array+0x40>)
 800d166:	4c0c      	ldr	r4, [pc, #48]	; (800d198 <__libc_init_array+0x44>)
 800d168:	f001 fe58 	bl	800ee1c <_init>
 800d16c:	1b64      	subs	r4, r4, r5
 800d16e:	10a4      	asrs	r4, r4, #2
 800d170:	2600      	movs	r6, #0
 800d172:	42a6      	cmp	r6, r4
 800d174:	d105      	bne.n	800d182 <__libc_init_array+0x2e>
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	f855 3b04 	ldr.w	r3, [r5], #4
 800d17c:	4798      	blx	r3
 800d17e:	3601      	adds	r6, #1
 800d180:	e7ee      	b.n	800d160 <__libc_init_array+0xc>
 800d182:	f855 3b04 	ldr.w	r3, [r5], #4
 800d186:	4798      	blx	r3
 800d188:	3601      	adds	r6, #1
 800d18a:	e7f2      	b.n	800d172 <__libc_init_array+0x1e>
 800d18c:	0800f65c 	.word	0x0800f65c
 800d190:	0800f65c 	.word	0x0800f65c
 800d194:	0800f65c 	.word	0x0800f65c
 800d198:	0800f660 	.word	0x0800f660

0800d19c <__retarget_lock_init_recursive>:
 800d19c:	4770      	bx	lr

0800d19e <__retarget_lock_acquire_recursive>:
 800d19e:	4770      	bx	lr

0800d1a0 <__retarget_lock_release_recursive>:
 800d1a0:	4770      	bx	lr

0800d1a2 <memcpy>:
 800d1a2:	440a      	add	r2, r1
 800d1a4:	4291      	cmp	r1, r2
 800d1a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1aa:	d100      	bne.n	800d1ae <memcpy+0xc>
 800d1ac:	4770      	bx	lr
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1b8:	4291      	cmp	r1, r2
 800d1ba:	d1f9      	bne.n	800d1b0 <memcpy+0xe>
 800d1bc:	bd10      	pop	{r4, pc}

0800d1be <quorem>:
 800d1be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c2:	6903      	ldr	r3, [r0, #16]
 800d1c4:	690c      	ldr	r4, [r1, #16]
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	db7e      	blt.n	800d2ca <quorem+0x10c>
 800d1cc:	3c01      	subs	r4, #1
 800d1ce:	f101 0814 	add.w	r8, r1, #20
 800d1d2:	f100 0514 	add.w	r5, r0, #20
 800d1d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1f4:	d331      	bcc.n	800d25a <quorem+0x9c>
 800d1f6:	f04f 0e00 	mov.w	lr, #0
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	46ac      	mov	ip, r5
 800d1fe:	46f2      	mov	sl, lr
 800d200:	f850 2b04 	ldr.w	r2, [r0], #4
 800d204:	b293      	uxth	r3, r2
 800d206:	fb06 e303 	mla	r3, r6, r3, lr
 800d20a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d20e:	0c1a      	lsrs	r2, r3, #16
 800d210:	b29b      	uxth	r3, r3
 800d212:	ebaa 0303 	sub.w	r3, sl, r3
 800d216:	f8dc a000 	ldr.w	sl, [ip]
 800d21a:	fa13 f38a 	uxtah	r3, r3, sl
 800d21e:	fb06 220e 	mla	r2, r6, lr, r2
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	9b00      	ldr	r3, [sp, #0]
 800d226:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d22a:	b292      	uxth	r2, r2
 800d22c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d234:	f8bd 3000 	ldrh.w	r3, [sp]
 800d238:	4581      	cmp	r9, r0
 800d23a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d23e:	f84c 3b04 	str.w	r3, [ip], #4
 800d242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d246:	d2db      	bcs.n	800d200 <quorem+0x42>
 800d248:	f855 300b 	ldr.w	r3, [r5, fp]
 800d24c:	b92b      	cbnz	r3, 800d25a <quorem+0x9c>
 800d24e:	9b01      	ldr	r3, [sp, #4]
 800d250:	3b04      	subs	r3, #4
 800d252:	429d      	cmp	r5, r3
 800d254:	461a      	mov	r2, r3
 800d256:	d32c      	bcc.n	800d2b2 <quorem+0xf4>
 800d258:	613c      	str	r4, [r7, #16]
 800d25a:	4638      	mov	r0, r7
 800d25c:	f001 f9a6 	bl	800e5ac <__mcmp>
 800d260:	2800      	cmp	r0, #0
 800d262:	db22      	blt.n	800d2aa <quorem+0xec>
 800d264:	3601      	adds	r6, #1
 800d266:	4629      	mov	r1, r5
 800d268:	2000      	movs	r0, #0
 800d26a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d26e:	f8d1 c000 	ldr.w	ip, [r1]
 800d272:	b293      	uxth	r3, r2
 800d274:	1ac3      	subs	r3, r0, r3
 800d276:	0c12      	lsrs	r2, r2, #16
 800d278:	fa13 f38c 	uxtah	r3, r3, ip
 800d27c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d284:	b29b      	uxth	r3, r3
 800d286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d28a:	45c1      	cmp	r9, r8
 800d28c:	f841 3b04 	str.w	r3, [r1], #4
 800d290:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d294:	d2e9      	bcs.n	800d26a <quorem+0xac>
 800d296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d29a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d29e:	b922      	cbnz	r2, 800d2aa <quorem+0xec>
 800d2a0:	3b04      	subs	r3, #4
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	d30a      	bcc.n	800d2be <quorem+0x100>
 800d2a8:	613c      	str	r4, [r7, #16]
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	b003      	add	sp, #12
 800d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b2:	6812      	ldr	r2, [r2, #0]
 800d2b4:	3b04      	subs	r3, #4
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	d1ce      	bne.n	800d258 <quorem+0x9a>
 800d2ba:	3c01      	subs	r4, #1
 800d2bc:	e7c9      	b.n	800d252 <quorem+0x94>
 800d2be:	6812      	ldr	r2, [r2, #0]
 800d2c0:	3b04      	subs	r3, #4
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	d1f0      	bne.n	800d2a8 <quorem+0xea>
 800d2c6:	3c01      	subs	r4, #1
 800d2c8:	e7eb      	b.n	800d2a2 <quorem+0xe4>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	e7ee      	b.n	800d2ac <quorem+0xee>
	...

0800d2d0 <_dtoa_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	ed2d 8b04 	vpush	{d8-d9}
 800d2d8:	69c5      	ldr	r5, [r0, #28]
 800d2da:	b093      	sub	sp, #76	; 0x4c
 800d2dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d2e0:	ec57 6b10 	vmov	r6, r7, d0
 800d2e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2e8:	9107      	str	r1, [sp, #28]
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d2ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d2f0:	b975      	cbnz	r5, 800d310 <_dtoa_r+0x40>
 800d2f2:	2010      	movs	r0, #16
 800d2f4:	f000 fe2a 	bl	800df4c <malloc>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	61e0      	str	r0, [r4, #28]
 800d2fc:	b920      	cbnz	r0, 800d308 <_dtoa_r+0x38>
 800d2fe:	4bae      	ldr	r3, [pc, #696]	; (800d5b8 <_dtoa_r+0x2e8>)
 800d300:	21ef      	movs	r1, #239	; 0xef
 800d302:	48ae      	ldr	r0, [pc, #696]	; (800d5bc <_dtoa_r+0x2ec>)
 800d304:	f001 fcd8 	bl	800ecb8 <__assert_func>
 800d308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d30c:	6005      	str	r5, [r0, #0]
 800d30e:	60c5      	str	r5, [r0, #12]
 800d310:	69e3      	ldr	r3, [r4, #28]
 800d312:	6819      	ldr	r1, [r3, #0]
 800d314:	b151      	cbz	r1, 800d32c <_dtoa_r+0x5c>
 800d316:	685a      	ldr	r2, [r3, #4]
 800d318:	604a      	str	r2, [r1, #4]
 800d31a:	2301      	movs	r3, #1
 800d31c:	4093      	lsls	r3, r2
 800d31e:	608b      	str	r3, [r1, #8]
 800d320:	4620      	mov	r0, r4
 800d322:	f000 ff07 	bl	800e134 <_Bfree>
 800d326:	69e3      	ldr	r3, [r4, #28]
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	1e3b      	subs	r3, r7, #0
 800d32e:	bfbb      	ittet	lt
 800d330:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d334:	9303      	strlt	r3, [sp, #12]
 800d336:	2300      	movge	r3, #0
 800d338:	2201      	movlt	r2, #1
 800d33a:	bfac      	ite	ge
 800d33c:	f8c8 3000 	strge.w	r3, [r8]
 800d340:	f8c8 2000 	strlt.w	r2, [r8]
 800d344:	4b9e      	ldr	r3, [pc, #632]	; (800d5c0 <_dtoa_r+0x2f0>)
 800d346:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d34a:	ea33 0308 	bics.w	r3, r3, r8
 800d34e:	d11b      	bne.n	800d388 <_dtoa_r+0xb8>
 800d350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d352:	f242 730f 	movw	r3, #9999	; 0x270f
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d35c:	4333      	orrs	r3, r6
 800d35e:	f000 8593 	beq.w	800de88 <_dtoa_r+0xbb8>
 800d362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d364:	b963      	cbnz	r3, 800d380 <_dtoa_r+0xb0>
 800d366:	4b97      	ldr	r3, [pc, #604]	; (800d5c4 <_dtoa_r+0x2f4>)
 800d368:	e027      	b.n	800d3ba <_dtoa_r+0xea>
 800d36a:	4b97      	ldr	r3, [pc, #604]	; (800d5c8 <_dtoa_r+0x2f8>)
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	3308      	adds	r3, #8
 800d370:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	9800      	ldr	r0, [sp, #0]
 800d376:	b013      	add	sp, #76	; 0x4c
 800d378:	ecbd 8b04 	vpop	{d8-d9}
 800d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d380:	4b90      	ldr	r3, [pc, #576]	; (800d5c4 <_dtoa_r+0x2f4>)
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	3303      	adds	r3, #3
 800d386:	e7f3      	b.n	800d370 <_dtoa_r+0xa0>
 800d388:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d38c:	2200      	movs	r2, #0
 800d38e:	ec51 0b17 	vmov	r0, r1, d7
 800d392:	eeb0 8a47 	vmov.f32	s16, s14
 800d396:	eef0 8a67 	vmov.f32	s17, s15
 800d39a:	2300      	movs	r3, #0
 800d39c:	f7f3 fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3a0:	4681      	mov	r9, r0
 800d3a2:	b160      	cbz	r0, 800d3be <_dtoa_r+0xee>
 800d3a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 8568 	beq.w	800de82 <_dtoa_r+0xbb2>
 800d3b2:	4b86      	ldr	r3, [pc, #536]	; (800d5cc <_dtoa_r+0x2fc>)
 800d3b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	e7da      	b.n	800d374 <_dtoa_r+0xa4>
 800d3be:	aa10      	add	r2, sp, #64	; 0x40
 800d3c0:	a911      	add	r1, sp, #68	; 0x44
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d3c8:	eef0 0a68 	vmov.f32	s1, s17
 800d3cc:	f001 f994 	bl	800e6f8 <__d2b>
 800d3d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d3d4:	4682      	mov	sl, r0
 800d3d6:	2d00      	cmp	r5, #0
 800d3d8:	d07f      	beq.n	800d4da <_dtoa_r+0x20a>
 800d3da:	ee18 3a90 	vmov	r3, s17
 800d3de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d3e6:	ec51 0b18 	vmov	r0, r1, d8
 800d3ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	4b75      	ldr	r3, [pc, #468]	; (800d5d0 <_dtoa_r+0x300>)
 800d3fc:	f7f2 ff4c 	bl	8000298 <__aeabi_dsub>
 800d400:	a367      	add	r3, pc, #412	; (adr r3, 800d5a0 <_dtoa_r+0x2d0>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f7f3 f8ff 	bl	8000608 <__aeabi_dmul>
 800d40a:	a367      	add	r3, pc, #412	; (adr r3, 800d5a8 <_dtoa_r+0x2d8>)
 800d40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d410:	f7f2 ff44 	bl	800029c <__adddf3>
 800d414:	4606      	mov	r6, r0
 800d416:	4628      	mov	r0, r5
 800d418:	460f      	mov	r7, r1
 800d41a:	f7f3 f88b 	bl	8000534 <__aeabi_i2d>
 800d41e:	a364      	add	r3, pc, #400	; (adr r3, 800d5b0 <_dtoa_r+0x2e0>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f3 f8f0 	bl	8000608 <__aeabi_dmul>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	4630      	mov	r0, r6
 800d42e:	4639      	mov	r1, r7
 800d430:	f7f2 ff34 	bl	800029c <__adddf3>
 800d434:	4606      	mov	r6, r0
 800d436:	460f      	mov	r7, r1
 800d438:	f7f3 fb96 	bl	8000b68 <__aeabi_d2iz>
 800d43c:	2200      	movs	r2, #0
 800d43e:	4683      	mov	fp, r0
 800d440:	2300      	movs	r3, #0
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	f7f3 fb51 	bl	8000aec <__aeabi_dcmplt>
 800d44a:	b148      	cbz	r0, 800d460 <_dtoa_r+0x190>
 800d44c:	4658      	mov	r0, fp
 800d44e:	f7f3 f871 	bl	8000534 <__aeabi_i2d>
 800d452:	4632      	mov	r2, r6
 800d454:	463b      	mov	r3, r7
 800d456:	f7f3 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d45a:	b908      	cbnz	r0, 800d460 <_dtoa_r+0x190>
 800d45c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d460:	f1bb 0f16 	cmp.w	fp, #22
 800d464:	d857      	bhi.n	800d516 <_dtoa_r+0x246>
 800d466:	4b5b      	ldr	r3, [pc, #364]	; (800d5d4 <_dtoa_r+0x304>)
 800d468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	ec51 0b18 	vmov	r0, r1, d8
 800d474:	f7f3 fb3a 	bl	8000aec <__aeabi_dcmplt>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d04e      	beq.n	800d51a <_dtoa_r+0x24a>
 800d47c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d480:	2300      	movs	r3, #0
 800d482:	930c      	str	r3, [sp, #48]	; 0x30
 800d484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d486:	1b5b      	subs	r3, r3, r5
 800d488:	1e5a      	subs	r2, r3, #1
 800d48a:	bf45      	ittet	mi
 800d48c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d490:	9305      	strmi	r3, [sp, #20]
 800d492:	2300      	movpl	r3, #0
 800d494:	2300      	movmi	r3, #0
 800d496:	9206      	str	r2, [sp, #24]
 800d498:	bf54      	ite	pl
 800d49a:	9305      	strpl	r3, [sp, #20]
 800d49c:	9306      	strmi	r3, [sp, #24]
 800d49e:	f1bb 0f00 	cmp.w	fp, #0
 800d4a2:	db3c      	blt.n	800d51e <_dtoa_r+0x24e>
 800d4a4:	9b06      	ldr	r3, [sp, #24]
 800d4a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d4aa:	445b      	add	r3, fp
 800d4ac:	9306      	str	r3, [sp, #24]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	9308      	str	r3, [sp, #32]
 800d4b2:	9b07      	ldr	r3, [sp, #28]
 800d4b4:	2b09      	cmp	r3, #9
 800d4b6:	d868      	bhi.n	800d58a <_dtoa_r+0x2ba>
 800d4b8:	2b05      	cmp	r3, #5
 800d4ba:	bfc4      	itt	gt
 800d4bc:	3b04      	subgt	r3, #4
 800d4be:	9307      	strgt	r3, [sp, #28]
 800d4c0:	9b07      	ldr	r3, [sp, #28]
 800d4c2:	f1a3 0302 	sub.w	r3, r3, #2
 800d4c6:	bfcc      	ite	gt
 800d4c8:	2500      	movgt	r5, #0
 800d4ca:	2501      	movle	r5, #1
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	f200 8085 	bhi.w	800d5dc <_dtoa_r+0x30c>
 800d4d2:	e8df f003 	tbb	[pc, r3]
 800d4d6:	3b2e      	.short	0x3b2e
 800d4d8:	5839      	.short	0x5839
 800d4da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d4de:	441d      	add	r5, r3
 800d4e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d4e4:	2b20      	cmp	r3, #32
 800d4e6:	bfc1      	itttt	gt
 800d4e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800d4f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d4f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d4f8:	bfd6      	itet	le
 800d4fa:	f1c3 0320 	rsble	r3, r3, #32
 800d4fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800d502:	fa06 f003 	lslle.w	r0, r6, r3
 800d506:	f7f3 f805 	bl	8000514 <__aeabi_ui2d>
 800d50a:	2201      	movs	r2, #1
 800d50c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d510:	3d01      	subs	r5, #1
 800d512:	920e      	str	r2, [sp, #56]	; 0x38
 800d514:	e76f      	b.n	800d3f6 <_dtoa_r+0x126>
 800d516:	2301      	movs	r3, #1
 800d518:	e7b3      	b.n	800d482 <_dtoa_r+0x1b2>
 800d51a:	900c      	str	r0, [sp, #48]	; 0x30
 800d51c:	e7b2      	b.n	800d484 <_dtoa_r+0x1b4>
 800d51e:	9b05      	ldr	r3, [sp, #20]
 800d520:	eba3 030b 	sub.w	r3, r3, fp
 800d524:	9305      	str	r3, [sp, #20]
 800d526:	f1cb 0300 	rsb	r3, fp, #0
 800d52a:	9308      	str	r3, [sp, #32]
 800d52c:	2300      	movs	r3, #0
 800d52e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d530:	e7bf      	b.n	800d4b2 <_dtoa_r+0x1e2>
 800d532:	2300      	movs	r3, #0
 800d534:	9309      	str	r3, [sp, #36]	; 0x24
 800d536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dc52      	bgt.n	800d5e2 <_dtoa_r+0x312>
 800d53c:	2301      	movs	r3, #1
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	9304      	str	r3, [sp, #16]
 800d542:	461a      	mov	r2, r3
 800d544:	920a      	str	r2, [sp, #40]	; 0x28
 800d546:	e00b      	b.n	800d560 <_dtoa_r+0x290>
 800d548:	2301      	movs	r3, #1
 800d54a:	e7f3      	b.n	800d534 <_dtoa_r+0x264>
 800d54c:	2300      	movs	r3, #0
 800d54e:	9309      	str	r3, [sp, #36]	; 0x24
 800d550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d552:	445b      	add	r3, fp
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	3301      	adds	r3, #1
 800d558:	2b01      	cmp	r3, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	bfb8      	it	lt
 800d55e:	2301      	movlt	r3, #1
 800d560:	69e0      	ldr	r0, [r4, #28]
 800d562:	2100      	movs	r1, #0
 800d564:	2204      	movs	r2, #4
 800d566:	f102 0614 	add.w	r6, r2, #20
 800d56a:	429e      	cmp	r6, r3
 800d56c:	d93d      	bls.n	800d5ea <_dtoa_r+0x31a>
 800d56e:	6041      	str	r1, [r0, #4]
 800d570:	4620      	mov	r0, r4
 800d572:	f000 fd9f 	bl	800e0b4 <_Balloc>
 800d576:	9000      	str	r0, [sp, #0]
 800d578:	2800      	cmp	r0, #0
 800d57a:	d139      	bne.n	800d5f0 <_dtoa_r+0x320>
 800d57c:	4b16      	ldr	r3, [pc, #88]	; (800d5d8 <_dtoa_r+0x308>)
 800d57e:	4602      	mov	r2, r0
 800d580:	f240 11af 	movw	r1, #431	; 0x1af
 800d584:	e6bd      	b.n	800d302 <_dtoa_r+0x32>
 800d586:	2301      	movs	r3, #1
 800d588:	e7e1      	b.n	800d54e <_dtoa_r+0x27e>
 800d58a:	2501      	movs	r5, #1
 800d58c:	2300      	movs	r3, #0
 800d58e:	9307      	str	r3, [sp, #28]
 800d590:	9509      	str	r5, [sp, #36]	; 0x24
 800d592:	f04f 33ff 	mov.w	r3, #4294967295
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	9304      	str	r3, [sp, #16]
 800d59a:	2200      	movs	r2, #0
 800d59c:	2312      	movs	r3, #18
 800d59e:	e7d1      	b.n	800d544 <_dtoa_r+0x274>
 800d5a0:	636f4361 	.word	0x636f4361
 800d5a4:	3fd287a7 	.word	0x3fd287a7
 800d5a8:	8b60c8b3 	.word	0x8b60c8b3
 800d5ac:	3fc68a28 	.word	0x3fc68a28
 800d5b0:	509f79fb 	.word	0x509f79fb
 800d5b4:	3fd34413 	.word	0x3fd34413
 800d5b8:	0800f329 	.word	0x0800f329
 800d5bc:	0800f340 	.word	0x0800f340
 800d5c0:	7ff00000 	.word	0x7ff00000
 800d5c4:	0800f325 	.word	0x0800f325
 800d5c8:	0800f31c 	.word	0x0800f31c
 800d5cc:	0800f2f9 	.word	0x0800f2f9
 800d5d0:	3ff80000 	.word	0x3ff80000
 800d5d4:	0800f430 	.word	0x0800f430
 800d5d8:	0800f398 	.word	0x0800f398
 800d5dc:	2301      	movs	r3, #1
 800d5de:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e0:	e7d7      	b.n	800d592 <_dtoa_r+0x2c2>
 800d5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	9304      	str	r3, [sp, #16]
 800d5e8:	e7ba      	b.n	800d560 <_dtoa_r+0x290>
 800d5ea:	3101      	adds	r1, #1
 800d5ec:	0052      	lsls	r2, r2, #1
 800d5ee:	e7ba      	b.n	800d566 <_dtoa_r+0x296>
 800d5f0:	69e3      	ldr	r3, [r4, #28]
 800d5f2:	9a00      	ldr	r2, [sp, #0]
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	9b04      	ldr	r3, [sp, #16]
 800d5f8:	2b0e      	cmp	r3, #14
 800d5fa:	f200 80a8 	bhi.w	800d74e <_dtoa_r+0x47e>
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	f000 80a5 	beq.w	800d74e <_dtoa_r+0x47e>
 800d604:	f1bb 0f00 	cmp.w	fp, #0
 800d608:	dd38      	ble.n	800d67c <_dtoa_r+0x3ac>
 800d60a:	4bc0      	ldr	r3, [pc, #768]	; (800d90c <_dtoa_r+0x63c>)
 800d60c:	f00b 020f 	and.w	r2, fp, #15
 800d610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d614:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d618:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d61c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d620:	d019      	beq.n	800d656 <_dtoa_r+0x386>
 800d622:	4bbb      	ldr	r3, [pc, #748]	; (800d910 <_dtoa_r+0x640>)
 800d624:	ec51 0b18 	vmov	r0, r1, d8
 800d628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d62c:	f7f3 f916 	bl	800085c <__aeabi_ddiv>
 800d630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d634:	f008 080f 	and.w	r8, r8, #15
 800d638:	2503      	movs	r5, #3
 800d63a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d910 <_dtoa_r+0x640>
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	d10a      	bne.n	800d65a <_dtoa_r+0x38a>
 800d644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	f7f3 f906 	bl	800085c <__aeabi_ddiv>
 800d650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d654:	e02b      	b.n	800d6ae <_dtoa_r+0x3de>
 800d656:	2502      	movs	r5, #2
 800d658:	e7ef      	b.n	800d63a <_dtoa_r+0x36a>
 800d65a:	f018 0f01 	tst.w	r8, #1
 800d65e:	d008      	beq.n	800d672 <_dtoa_r+0x3a2>
 800d660:	4630      	mov	r0, r6
 800d662:	4639      	mov	r1, r7
 800d664:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d668:	f7f2 ffce 	bl	8000608 <__aeabi_dmul>
 800d66c:	3501      	adds	r5, #1
 800d66e:	4606      	mov	r6, r0
 800d670:	460f      	mov	r7, r1
 800d672:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d676:	f109 0908 	add.w	r9, r9, #8
 800d67a:	e7e0      	b.n	800d63e <_dtoa_r+0x36e>
 800d67c:	f000 809f 	beq.w	800d7be <_dtoa_r+0x4ee>
 800d680:	f1cb 0600 	rsb	r6, fp, #0
 800d684:	4ba1      	ldr	r3, [pc, #644]	; (800d90c <_dtoa_r+0x63c>)
 800d686:	4fa2      	ldr	r7, [pc, #648]	; (800d910 <_dtoa_r+0x640>)
 800d688:	f006 020f 	and.w	r2, r6, #15
 800d68c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	ec51 0b18 	vmov	r0, r1, d8
 800d698:	f7f2 ffb6 	bl	8000608 <__aeabi_dmul>
 800d69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6a0:	1136      	asrs	r6, r6, #4
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2502      	movs	r5, #2
 800d6a6:	2e00      	cmp	r6, #0
 800d6a8:	d17e      	bne.n	800d7a8 <_dtoa_r+0x4d8>
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1d0      	bne.n	800d650 <_dtoa_r+0x380>
 800d6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 8084 	beq.w	800d7c2 <_dtoa_r+0x4f2>
 800d6ba:	4b96      	ldr	r3, [pc, #600]	; (800d914 <_dtoa_r+0x644>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f3 fa13 	bl	8000aec <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d07b      	beq.n	800d7c2 <_dtoa_r+0x4f2>
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d078      	beq.n	800d7c2 <_dtoa_r+0x4f2>
 800d6d0:	9b01      	ldr	r3, [sp, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	dd39      	ble.n	800d74a <_dtoa_r+0x47a>
 800d6d6:	4b90      	ldr	r3, [pc, #576]	; (800d918 <_dtoa_r+0x648>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	4640      	mov	r0, r8
 800d6dc:	4649      	mov	r1, r9
 800d6de:	f7f2 ff93 	bl	8000608 <__aeabi_dmul>
 800d6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e6:	9e01      	ldr	r6, [sp, #4]
 800d6e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d6ec:	3501      	adds	r5, #1
 800d6ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f7f2 ff1e 	bl	8000534 <__aeabi_i2d>
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	464b      	mov	r3, r9
 800d6fc:	f7f2 ff84 	bl	8000608 <__aeabi_dmul>
 800d700:	4b86      	ldr	r3, [pc, #536]	; (800d91c <_dtoa_r+0x64c>)
 800d702:	2200      	movs	r2, #0
 800d704:	f7f2 fdca 	bl	800029c <__adddf3>
 800d708:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d710:	9303      	str	r3, [sp, #12]
 800d712:	2e00      	cmp	r6, #0
 800d714:	d158      	bne.n	800d7c8 <_dtoa_r+0x4f8>
 800d716:	4b82      	ldr	r3, [pc, #520]	; (800d920 <_dtoa_r+0x650>)
 800d718:	2200      	movs	r2, #0
 800d71a:	4640      	mov	r0, r8
 800d71c:	4649      	mov	r1, r9
 800d71e:	f7f2 fdbb 	bl	8000298 <__aeabi_dsub>
 800d722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d726:	4680      	mov	r8, r0
 800d728:	4689      	mov	r9, r1
 800d72a:	f7f3 f9fd 	bl	8000b28 <__aeabi_dcmpgt>
 800d72e:	2800      	cmp	r0, #0
 800d730:	f040 8296 	bne.w	800dc60 <_dtoa_r+0x990>
 800d734:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d738:	4640      	mov	r0, r8
 800d73a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d73e:	4649      	mov	r1, r9
 800d740:	f7f3 f9d4 	bl	8000aec <__aeabi_dcmplt>
 800d744:	2800      	cmp	r0, #0
 800d746:	f040 8289 	bne.w	800dc5c <_dtoa_r+0x98c>
 800d74a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d750:	2b00      	cmp	r3, #0
 800d752:	f2c0 814e 	blt.w	800d9f2 <_dtoa_r+0x722>
 800d756:	f1bb 0f0e 	cmp.w	fp, #14
 800d75a:	f300 814a 	bgt.w	800d9f2 <_dtoa_r+0x722>
 800d75e:	4b6b      	ldr	r3, [pc, #428]	; (800d90c <_dtoa_r+0x63c>)
 800d760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d764:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f280 80dc 	bge.w	800d928 <_dtoa_r+0x658>
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	f300 80d8 	bgt.w	800d928 <_dtoa_r+0x658>
 800d778:	f040 826f 	bne.w	800dc5a <_dtoa_r+0x98a>
 800d77c:	4b68      	ldr	r3, [pc, #416]	; (800d920 <_dtoa_r+0x650>)
 800d77e:	2200      	movs	r2, #0
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	f7f2 ff40 	bl	8000608 <__aeabi_dmul>
 800d788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d78c:	f7f3 f9c2 	bl	8000b14 <__aeabi_dcmpge>
 800d790:	9e04      	ldr	r6, [sp, #16]
 800d792:	4637      	mov	r7, r6
 800d794:	2800      	cmp	r0, #0
 800d796:	f040 8245 	bne.w	800dc24 <_dtoa_r+0x954>
 800d79a:	9d00      	ldr	r5, [sp, #0]
 800d79c:	2331      	movs	r3, #49	; 0x31
 800d79e:	f805 3b01 	strb.w	r3, [r5], #1
 800d7a2:	f10b 0b01 	add.w	fp, fp, #1
 800d7a6:	e241      	b.n	800dc2c <_dtoa_r+0x95c>
 800d7a8:	07f2      	lsls	r2, r6, #31
 800d7aa:	d505      	bpl.n	800d7b8 <_dtoa_r+0x4e8>
 800d7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7b0:	f7f2 ff2a 	bl	8000608 <__aeabi_dmul>
 800d7b4:	3501      	adds	r5, #1
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	1076      	asrs	r6, r6, #1
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	e773      	b.n	800d6a6 <_dtoa_r+0x3d6>
 800d7be:	2502      	movs	r5, #2
 800d7c0:	e775      	b.n	800d6ae <_dtoa_r+0x3de>
 800d7c2:	9e04      	ldr	r6, [sp, #16]
 800d7c4:	465f      	mov	r7, fp
 800d7c6:	e792      	b.n	800d6ee <_dtoa_r+0x41e>
 800d7c8:	9900      	ldr	r1, [sp, #0]
 800d7ca:	4b50      	ldr	r3, [pc, #320]	; (800d90c <_dtoa_r+0x63c>)
 800d7cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7d0:	4431      	add	r1, r6
 800d7d2:	9102      	str	r1, [sp, #8]
 800d7d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7d6:	eeb0 9a47 	vmov.f32	s18, s14
 800d7da:	eef0 9a67 	vmov.f32	s19, s15
 800d7de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d7e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	d044      	beq.n	800d874 <_dtoa_r+0x5a4>
 800d7ea:	494e      	ldr	r1, [pc, #312]	; (800d924 <_dtoa_r+0x654>)
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	f7f3 f835 	bl	800085c <__aeabi_ddiv>
 800d7f2:	ec53 2b19 	vmov	r2, r3, d9
 800d7f6:	f7f2 fd4f 	bl	8000298 <__aeabi_dsub>
 800d7fa:	9d00      	ldr	r5, [sp, #0]
 800d7fc:	ec41 0b19 	vmov	d9, r0, r1
 800d800:	4649      	mov	r1, r9
 800d802:	4640      	mov	r0, r8
 800d804:	f7f3 f9b0 	bl	8000b68 <__aeabi_d2iz>
 800d808:	4606      	mov	r6, r0
 800d80a:	f7f2 fe93 	bl	8000534 <__aeabi_i2d>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4640      	mov	r0, r8
 800d814:	4649      	mov	r1, r9
 800d816:	f7f2 fd3f 	bl	8000298 <__aeabi_dsub>
 800d81a:	3630      	adds	r6, #48	; 0x30
 800d81c:	f805 6b01 	strb.w	r6, [r5], #1
 800d820:	ec53 2b19 	vmov	r2, r3, d9
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	f7f3 f960 	bl	8000aec <__aeabi_dcmplt>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d164      	bne.n	800d8fa <_dtoa_r+0x62a>
 800d830:	4642      	mov	r2, r8
 800d832:	464b      	mov	r3, r9
 800d834:	4937      	ldr	r1, [pc, #220]	; (800d914 <_dtoa_r+0x644>)
 800d836:	2000      	movs	r0, #0
 800d838:	f7f2 fd2e 	bl	8000298 <__aeabi_dsub>
 800d83c:	ec53 2b19 	vmov	r2, r3, d9
 800d840:	f7f3 f954 	bl	8000aec <__aeabi_dcmplt>
 800d844:	2800      	cmp	r0, #0
 800d846:	f040 80b6 	bne.w	800d9b6 <_dtoa_r+0x6e6>
 800d84a:	9b02      	ldr	r3, [sp, #8]
 800d84c:	429d      	cmp	r5, r3
 800d84e:	f43f af7c 	beq.w	800d74a <_dtoa_r+0x47a>
 800d852:	4b31      	ldr	r3, [pc, #196]	; (800d918 <_dtoa_r+0x648>)
 800d854:	ec51 0b19 	vmov	r0, r1, d9
 800d858:	2200      	movs	r2, #0
 800d85a:	f7f2 fed5 	bl	8000608 <__aeabi_dmul>
 800d85e:	4b2e      	ldr	r3, [pc, #184]	; (800d918 <_dtoa_r+0x648>)
 800d860:	ec41 0b19 	vmov	d9, r0, r1
 800d864:	2200      	movs	r2, #0
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f2 fecd 	bl	8000608 <__aeabi_dmul>
 800d86e:	4680      	mov	r8, r0
 800d870:	4689      	mov	r9, r1
 800d872:	e7c5      	b.n	800d800 <_dtoa_r+0x530>
 800d874:	ec51 0b17 	vmov	r0, r1, d7
 800d878:	f7f2 fec6 	bl	8000608 <__aeabi_dmul>
 800d87c:	9b02      	ldr	r3, [sp, #8]
 800d87e:	9d00      	ldr	r5, [sp, #0]
 800d880:	930f      	str	r3, [sp, #60]	; 0x3c
 800d882:	ec41 0b19 	vmov	d9, r0, r1
 800d886:	4649      	mov	r1, r9
 800d888:	4640      	mov	r0, r8
 800d88a:	f7f3 f96d 	bl	8000b68 <__aeabi_d2iz>
 800d88e:	4606      	mov	r6, r0
 800d890:	f7f2 fe50 	bl	8000534 <__aeabi_i2d>
 800d894:	3630      	adds	r6, #48	; 0x30
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f2 fcfb 	bl	8000298 <__aeabi_dsub>
 800d8a2:	f805 6b01 	strb.w	r6, [r5], #1
 800d8a6:	9b02      	ldr	r3, [sp, #8]
 800d8a8:	429d      	cmp	r5, r3
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	f04f 0200 	mov.w	r2, #0
 800d8b2:	d124      	bne.n	800d8fe <_dtoa_r+0x62e>
 800d8b4:	4b1b      	ldr	r3, [pc, #108]	; (800d924 <_dtoa_r+0x654>)
 800d8b6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ba:	f7f2 fcef 	bl	800029c <__adddf3>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f3 f92f 	bl	8000b28 <__aeabi_dcmpgt>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d173      	bne.n	800d9b6 <_dtoa_r+0x6e6>
 800d8ce:	ec53 2b19 	vmov	r2, r3, d9
 800d8d2:	4914      	ldr	r1, [pc, #80]	; (800d924 <_dtoa_r+0x654>)
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f7f2 fcdf 	bl	8000298 <__aeabi_dsub>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	4640      	mov	r0, r8
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	f7f3 f903 	bl	8000aec <__aeabi_dcmplt>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	f43f af2f 	beq.w	800d74a <_dtoa_r+0x47a>
 800d8ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d8ee:	1e6b      	subs	r3, r5, #1
 800d8f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d8f6:	2b30      	cmp	r3, #48	; 0x30
 800d8f8:	d0f8      	beq.n	800d8ec <_dtoa_r+0x61c>
 800d8fa:	46bb      	mov	fp, r7
 800d8fc:	e04a      	b.n	800d994 <_dtoa_r+0x6c4>
 800d8fe:	4b06      	ldr	r3, [pc, #24]	; (800d918 <_dtoa_r+0x648>)
 800d900:	f7f2 fe82 	bl	8000608 <__aeabi_dmul>
 800d904:	4680      	mov	r8, r0
 800d906:	4689      	mov	r9, r1
 800d908:	e7bd      	b.n	800d886 <_dtoa_r+0x5b6>
 800d90a:	bf00      	nop
 800d90c:	0800f430 	.word	0x0800f430
 800d910:	0800f408 	.word	0x0800f408
 800d914:	3ff00000 	.word	0x3ff00000
 800d918:	40240000 	.word	0x40240000
 800d91c:	401c0000 	.word	0x401c0000
 800d920:	40140000 	.word	0x40140000
 800d924:	3fe00000 	.word	0x3fe00000
 800d928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d92c:	9d00      	ldr	r5, [sp, #0]
 800d92e:	4642      	mov	r2, r8
 800d930:	464b      	mov	r3, r9
 800d932:	4630      	mov	r0, r6
 800d934:	4639      	mov	r1, r7
 800d936:	f7f2 ff91 	bl	800085c <__aeabi_ddiv>
 800d93a:	f7f3 f915 	bl	8000b68 <__aeabi_d2iz>
 800d93e:	9001      	str	r0, [sp, #4]
 800d940:	f7f2 fdf8 	bl	8000534 <__aeabi_i2d>
 800d944:	4642      	mov	r2, r8
 800d946:	464b      	mov	r3, r9
 800d948:	f7f2 fe5e 	bl	8000608 <__aeabi_dmul>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4630      	mov	r0, r6
 800d952:	4639      	mov	r1, r7
 800d954:	f7f2 fca0 	bl	8000298 <__aeabi_dsub>
 800d958:	9e01      	ldr	r6, [sp, #4]
 800d95a:	9f04      	ldr	r7, [sp, #16]
 800d95c:	3630      	adds	r6, #48	; 0x30
 800d95e:	f805 6b01 	strb.w	r6, [r5], #1
 800d962:	9e00      	ldr	r6, [sp, #0]
 800d964:	1bae      	subs	r6, r5, r6
 800d966:	42b7      	cmp	r7, r6
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	d134      	bne.n	800d9d8 <_dtoa_r+0x708>
 800d96e:	f7f2 fc95 	bl	800029c <__adddf3>
 800d972:	4642      	mov	r2, r8
 800d974:	464b      	mov	r3, r9
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	f7f3 f8d5 	bl	8000b28 <__aeabi_dcmpgt>
 800d97e:	b9c8      	cbnz	r0, 800d9b4 <_dtoa_r+0x6e4>
 800d980:	4642      	mov	r2, r8
 800d982:	464b      	mov	r3, r9
 800d984:	4630      	mov	r0, r6
 800d986:	4639      	mov	r1, r7
 800d988:	f7f3 f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d98c:	b110      	cbz	r0, 800d994 <_dtoa_r+0x6c4>
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	07db      	lsls	r3, r3, #31
 800d992:	d40f      	bmi.n	800d9b4 <_dtoa_r+0x6e4>
 800d994:	4651      	mov	r1, sl
 800d996:	4620      	mov	r0, r4
 800d998:	f000 fbcc 	bl	800e134 <_Bfree>
 800d99c:	2300      	movs	r3, #0
 800d99e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9a0:	702b      	strb	r3, [r5, #0]
 800d9a2:	f10b 0301 	add.w	r3, fp, #1
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f43f ace2 	beq.w	800d374 <_dtoa_r+0xa4>
 800d9b0:	601d      	str	r5, [r3, #0]
 800d9b2:	e4df      	b.n	800d374 <_dtoa_r+0xa4>
 800d9b4:	465f      	mov	r7, fp
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	461d      	mov	r5, r3
 800d9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9be:	2a39      	cmp	r2, #57	; 0x39
 800d9c0:	d106      	bne.n	800d9d0 <_dtoa_r+0x700>
 800d9c2:	9a00      	ldr	r2, [sp, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d1f7      	bne.n	800d9b8 <_dtoa_r+0x6e8>
 800d9c8:	9900      	ldr	r1, [sp, #0]
 800d9ca:	2230      	movs	r2, #48	; 0x30
 800d9cc:	3701      	adds	r7, #1
 800d9ce:	700a      	strb	r2, [r1, #0]
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	3201      	adds	r2, #1
 800d9d4:	701a      	strb	r2, [r3, #0]
 800d9d6:	e790      	b.n	800d8fa <_dtoa_r+0x62a>
 800d9d8:	4ba3      	ldr	r3, [pc, #652]	; (800dc68 <_dtoa_r+0x998>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f7f2 fe14 	bl	8000608 <__aeabi_dmul>
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	460f      	mov	r7, r1
 800d9e8:	f7f3 f876 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d09e      	beq.n	800d92e <_dtoa_r+0x65e>
 800d9f0:	e7d0      	b.n	800d994 <_dtoa_r+0x6c4>
 800d9f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f4:	2a00      	cmp	r2, #0
 800d9f6:	f000 80ca 	beq.w	800db8e <_dtoa_r+0x8be>
 800d9fa:	9a07      	ldr	r2, [sp, #28]
 800d9fc:	2a01      	cmp	r2, #1
 800d9fe:	f300 80ad 	bgt.w	800db5c <_dtoa_r+0x88c>
 800da02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da04:	2a00      	cmp	r2, #0
 800da06:	f000 80a5 	beq.w	800db54 <_dtoa_r+0x884>
 800da0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800da0e:	9e08      	ldr	r6, [sp, #32]
 800da10:	9d05      	ldr	r5, [sp, #20]
 800da12:	9a05      	ldr	r2, [sp, #20]
 800da14:	441a      	add	r2, r3
 800da16:	9205      	str	r2, [sp, #20]
 800da18:	9a06      	ldr	r2, [sp, #24]
 800da1a:	2101      	movs	r1, #1
 800da1c:	441a      	add	r2, r3
 800da1e:	4620      	mov	r0, r4
 800da20:	9206      	str	r2, [sp, #24]
 800da22:	f000 fc3d 	bl	800e2a0 <__i2b>
 800da26:	4607      	mov	r7, r0
 800da28:	b165      	cbz	r5, 800da44 <_dtoa_r+0x774>
 800da2a:	9b06      	ldr	r3, [sp, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd09      	ble.n	800da44 <_dtoa_r+0x774>
 800da30:	42ab      	cmp	r3, r5
 800da32:	9a05      	ldr	r2, [sp, #20]
 800da34:	bfa8      	it	ge
 800da36:	462b      	movge	r3, r5
 800da38:	1ad2      	subs	r2, r2, r3
 800da3a:	9205      	str	r2, [sp, #20]
 800da3c:	9a06      	ldr	r2, [sp, #24]
 800da3e:	1aed      	subs	r5, r5, r3
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	9306      	str	r3, [sp, #24]
 800da44:	9b08      	ldr	r3, [sp, #32]
 800da46:	b1f3      	cbz	r3, 800da86 <_dtoa_r+0x7b6>
 800da48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 80a3 	beq.w	800db96 <_dtoa_r+0x8c6>
 800da50:	2e00      	cmp	r6, #0
 800da52:	dd10      	ble.n	800da76 <_dtoa_r+0x7a6>
 800da54:	4639      	mov	r1, r7
 800da56:	4632      	mov	r2, r6
 800da58:	4620      	mov	r0, r4
 800da5a:	f000 fce1 	bl	800e420 <__pow5mult>
 800da5e:	4652      	mov	r2, sl
 800da60:	4601      	mov	r1, r0
 800da62:	4607      	mov	r7, r0
 800da64:	4620      	mov	r0, r4
 800da66:	f000 fc31 	bl	800e2cc <__multiply>
 800da6a:	4651      	mov	r1, sl
 800da6c:	4680      	mov	r8, r0
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fb60 	bl	800e134 <_Bfree>
 800da74:	46c2      	mov	sl, r8
 800da76:	9b08      	ldr	r3, [sp, #32]
 800da78:	1b9a      	subs	r2, r3, r6
 800da7a:	d004      	beq.n	800da86 <_dtoa_r+0x7b6>
 800da7c:	4651      	mov	r1, sl
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 fcce 	bl	800e420 <__pow5mult>
 800da84:	4682      	mov	sl, r0
 800da86:	2101      	movs	r1, #1
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 fc09 	bl	800e2a0 <__i2b>
 800da8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da90:	2b00      	cmp	r3, #0
 800da92:	4606      	mov	r6, r0
 800da94:	f340 8081 	ble.w	800db9a <_dtoa_r+0x8ca>
 800da98:	461a      	mov	r2, r3
 800da9a:	4601      	mov	r1, r0
 800da9c:	4620      	mov	r0, r4
 800da9e:	f000 fcbf 	bl	800e420 <__pow5mult>
 800daa2:	9b07      	ldr	r3, [sp, #28]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	4606      	mov	r6, r0
 800daa8:	dd7a      	ble.n	800dba0 <_dtoa_r+0x8d0>
 800daaa:	f04f 0800 	mov.w	r8, #0
 800daae:	6933      	ldr	r3, [r6, #16]
 800dab0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dab4:	6918      	ldr	r0, [r3, #16]
 800dab6:	f000 fba5 	bl	800e204 <__hi0bits>
 800daba:	f1c0 0020 	rsb	r0, r0, #32
 800dabe:	9b06      	ldr	r3, [sp, #24]
 800dac0:	4418      	add	r0, r3
 800dac2:	f010 001f 	ands.w	r0, r0, #31
 800dac6:	f000 8094 	beq.w	800dbf2 <_dtoa_r+0x922>
 800daca:	f1c0 0320 	rsb	r3, r0, #32
 800dace:	2b04      	cmp	r3, #4
 800dad0:	f340 8085 	ble.w	800dbde <_dtoa_r+0x90e>
 800dad4:	9b05      	ldr	r3, [sp, #20]
 800dad6:	f1c0 001c 	rsb	r0, r0, #28
 800dada:	4403      	add	r3, r0
 800dadc:	9305      	str	r3, [sp, #20]
 800dade:	9b06      	ldr	r3, [sp, #24]
 800dae0:	4403      	add	r3, r0
 800dae2:	4405      	add	r5, r0
 800dae4:	9306      	str	r3, [sp, #24]
 800dae6:	9b05      	ldr	r3, [sp, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	dd05      	ble.n	800daf8 <_dtoa_r+0x828>
 800daec:	4651      	mov	r1, sl
 800daee:	461a      	mov	r2, r3
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fcef 	bl	800e4d4 <__lshift>
 800daf6:	4682      	mov	sl, r0
 800daf8:	9b06      	ldr	r3, [sp, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	dd05      	ble.n	800db0a <_dtoa_r+0x83a>
 800dafe:	4631      	mov	r1, r6
 800db00:	461a      	mov	r2, r3
 800db02:	4620      	mov	r0, r4
 800db04:	f000 fce6 	bl	800e4d4 <__lshift>
 800db08:	4606      	mov	r6, r0
 800db0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d072      	beq.n	800dbf6 <_dtoa_r+0x926>
 800db10:	4631      	mov	r1, r6
 800db12:	4650      	mov	r0, sl
 800db14:	f000 fd4a 	bl	800e5ac <__mcmp>
 800db18:	2800      	cmp	r0, #0
 800db1a:	da6c      	bge.n	800dbf6 <_dtoa_r+0x926>
 800db1c:	2300      	movs	r3, #0
 800db1e:	4651      	mov	r1, sl
 800db20:	220a      	movs	r2, #10
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fb28 	bl	800e178 <__multadd>
 800db28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db2e:	4682      	mov	sl, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 81b0 	beq.w	800de96 <_dtoa_r+0xbc6>
 800db36:	2300      	movs	r3, #0
 800db38:	4639      	mov	r1, r7
 800db3a:	220a      	movs	r2, #10
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 fb1b 	bl	800e178 <__multadd>
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	4607      	mov	r7, r0
 800db48:	f300 8096 	bgt.w	800dc78 <_dtoa_r+0x9a8>
 800db4c:	9b07      	ldr	r3, [sp, #28]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	dc59      	bgt.n	800dc06 <_dtoa_r+0x936>
 800db52:	e091      	b.n	800dc78 <_dtoa_r+0x9a8>
 800db54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db5a:	e758      	b.n	800da0e <_dtoa_r+0x73e>
 800db5c:	9b04      	ldr	r3, [sp, #16]
 800db5e:	1e5e      	subs	r6, r3, #1
 800db60:	9b08      	ldr	r3, [sp, #32]
 800db62:	42b3      	cmp	r3, r6
 800db64:	bfbf      	itttt	lt
 800db66:	9b08      	ldrlt	r3, [sp, #32]
 800db68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800db6a:	9608      	strlt	r6, [sp, #32]
 800db6c:	1af3      	sublt	r3, r6, r3
 800db6e:	bfb4      	ite	lt
 800db70:	18d2      	addlt	r2, r2, r3
 800db72:	1b9e      	subge	r6, r3, r6
 800db74:	9b04      	ldr	r3, [sp, #16]
 800db76:	bfbc      	itt	lt
 800db78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800db7a:	2600      	movlt	r6, #0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	bfb7      	itett	lt
 800db80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800db84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800db88:	1a9d      	sublt	r5, r3, r2
 800db8a:	2300      	movlt	r3, #0
 800db8c:	e741      	b.n	800da12 <_dtoa_r+0x742>
 800db8e:	9e08      	ldr	r6, [sp, #32]
 800db90:	9d05      	ldr	r5, [sp, #20]
 800db92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db94:	e748      	b.n	800da28 <_dtoa_r+0x758>
 800db96:	9a08      	ldr	r2, [sp, #32]
 800db98:	e770      	b.n	800da7c <_dtoa_r+0x7ac>
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	dc19      	bgt.n	800dbd4 <_dtoa_r+0x904>
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	b9bb      	cbnz	r3, 800dbd4 <_dtoa_r+0x904>
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbaa:	b99b      	cbnz	r3, 800dbd4 <_dtoa_r+0x904>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbb2:	0d1b      	lsrs	r3, r3, #20
 800dbb4:	051b      	lsls	r3, r3, #20
 800dbb6:	b183      	cbz	r3, 800dbda <_dtoa_r+0x90a>
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	9305      	str	r3, [sp, #20]
 800dbbe:	9b06      	ldr	r3, [sp, #24]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	9306      	str	r3, [sp, #24]
 800dbc4:	f04f 0801 	mov.w	r8, #1
 800dbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f47f af6f 	bne.w	800daae <_dtoa_r+0x7de>
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	e774      	b.n	800dabe <_dtoa_r+0x7ee>
 800dbd4:	f04f 0800 	mov.w	r8, #0
 800dbd8:	e7f6      	b.n	800dbc8 <_dtoa_r+0x8f8>
 800dbda:	4698      	mov	r8, r3
 800dbdc:	e7f4      	b.n	800dbc8 <_dtoa_r+0x8f8>
 800dbde:	d082      	beq.n	800dae6 <_dtoa_r+0x816>
 800dbe0:	9a05      	ldr	r2, [sp, #20]
 800dbe2:	331c      	adds	r3, #28
 800dbe4:	441a      	add	r2, r3
 800dbe6:	9205      	str	r2, [sp, #20]
 800dbe8:	9a06      	ldr	r2, [sp, #24]
 800dbea:	441a      	add	r2, r3
 800dbec:	441d      	add	r5, r3
 800dbee:	9206      	str	r2, [sp, #24]
 800dbf0:	e779      	b.n	800dae6 <_dtoa_r+0x816>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	e7f4      	b.n	800dbe0 <_dtoa_r+0x910>
 800dbf6:	9b04      	ldr	r3, [sp, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	dc37      	bgt.n	800dc6c <_dtoa_r+0x99c>
 800dbfc:	9b07      	ldr	r3, [sp, #28]
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	dd34      	ble.n	800dc6c <_dtoa_r+0x99c>
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	9b01      	ldr	r3, [sp, #4]
 800dc08:	b963      	cbnz	r3, 800dc24 <_dtoa_r+0x954>
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	2205      	movs	r2, #5
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 fab2 	bl	800e178 <__multadd>
 800dc14:	4601      	mov	r1, r0
 800dc16:	4606      	mov	r6, r0
 800dc18:	4650      	mov	r0, sl
 800dc1a:	f000 fcc7 	bl	800e5ac <__mcmp>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f73f adbb 	bgt.w	800d79a <_dtoa_r+0x4ca>
 800dc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc26:	9d00      	ldr	r5, [sp, #0]
 800dc28:	ea6f 0b03 	mvn.w	fp, r3
 800dc2c:	f04f 0800 	mov.w	r8, #0
 800dc30:	4631      	mov	r1, r6
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 fa7e 	bl	800e134 <_Bfree>
 800dc38:	2f00      	cmp	r7, #0
 800dc3a:	f43f aeab 	beq.w	800d994 <_dtoa_r+0x6c4>
 800dc3e:	f1b8 0f00 	cmp.w	r8, #0
 800dc42:	d005      	beq.n	800dc50 <_dtoa_r+0x980>
 800dc44:	45b8      	cmp	r8, r7
 800dc46:	d003      	beq.n	800dc50 <_dtoa_r+0x980>
 800dc48:	4641      	mov	r1, r8
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 fa72 	bl	800e134 <_Bfree>
 800dc50:	4639      	mov	r1, r7
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 fa6e 	bl	800e134 <_Bfree>
 800dc58:	e69c      	b.n	800d994 <_dtoa_r+0x6c4>
 800dc5a:	2600      	movs	r6, #0
 800dc5c:	4637      	mov	r7, r6
 800dc5e:	e7e1      	b.n	800dc24 <_dtoa_r+0x954>
 800dc60:	46bb      	mov	fp, r7
 800dc62:	4637      	mov	r7, r6
 800dc64:	e599      	b.n	800d79a <_dtoa_r+0x4ca>
 800dc66:	bf00      	nop
 800dc68:	40240000 	.word	0x40240000
 800dc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 80c8 	beq.w	800de04 <_dtoa_r+0xb34>
 800dc74:	9b04      	ldr	r3, [sp, #16]
 800dc76:	9301      	str	r3, [sp, #4]
 800dc78:	2d00      	cmp	r5, #0
 800dc7a:	dd05      	ble.n	800dc88 <_dtoa_r+0x9b8>
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 fc27 	bl	800e4d4 <__lshift>
 800dc86:	4607      	mov	r7, r0
 800dc88:	f1b8 0f00 	cmp.w	r8, #0
 800dc8c:	d05b      	beq.n	800dd46 <_dtoa_r+0xa76>
 800dc8e:	6879      	ldr	r1, [r7, #4]
 800dc90:	4620      	mov	r0, r4
 800dc92:	f000 fa0f 	bl	800e0b4 <_Balloc>
 800dc96:	4605      	mov	r5, r0
 800dc98:	b928      	cbnz	r0, 800dca6 <_dtoa_r+0x9d6>
 800dc9a:	4b83      	ldr	r3, [pc, #524]	; (800dea8 <_dtoa_r+0xbd8>)
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dca2:	f7ff bb2e 	b.w	800d302 <_dtoa_r+0x32>
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	3202      	adds	r2, #2
 800dcaa:	0092      	lsls	r2, r2, #2
 800dcac:	f107 010c 	add.w	r1, r7, #12
 800dcb0:	300c      	adds	r0, #12
 800dcb2:	f7ff fa76 	bl	800d1a2 <memcpy>
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f000 fc0a 	bl	800e4d4 <__lshift>
 800dcc0:	9b00      	ldr	r3, [sp, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	9304      	str	r3, [sp, #16]
 800dcc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcca:	4413      	add	r3, r2
 800dccc:	9308      	str	r3, [sp, #32]
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	46b8      	mov	r8, r7
 800dcd6:	9306      	str	r3, [sp, #24]
 800dcd8:	4607      	mov	r7, r0
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	4631      	mov	r1, r6
 800dcde:	3b01      	subs	r3, #1
 800dce0:	4650      	mov	r0, sl
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	f7ff fa6b 	bl	800d1be <quorem>
 800dce8:	4641      	mov	r1, r8
 800dcea:	9002      	str	r0, [sp, #8]
 800dcec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	f000 fc5b 	bl	800e5ac <__mcmp>
 800dcf6:	463a      	mov	r2, r7
 800dcf8:	9005      	str	r0, [sp, #20]
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f000 fc71 	bl	800e5e4 <__mdiff>
 800dd02:	68c2      	ldr	r2, [r0, #12]
 800dd04:	4605      	mov	r5, r0
 800dd06:	bb02      	cbnz	r2, 800dd4a <_dtoa_r+0xa7a>
 800dd08:	4601      	mov	r1, r0
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	f000 fc4e 	bl	800e5ac <__mcmp>
 800dd10:	4602      	mov	r2, r0
 800dd12:	4629      	mov	r1, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	9209      	str	r2, [sp, #36]	; 0x24
 800dd18:	f000 fa0c 	bl	800e134 <_Bfree>
 800dd1c:	9b07      	ldr	r3, [sp, #28]
 800dd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd20:	9d04      	ldr	r5, [sp, #16]
 800dd22:	ea43 0102 	orr.w	r1, r3, r2
 800dd26:	9b06      	ldr	r3, [sp, #24]
 800dd28:	4319      	orrs	r1, r3
 800dd2a:	d110      	bne.n	800dd4e <_dtoa_r+0xa7e>
 800dd2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dd30:	d029      	beq.n	800dd86 <_dtoa_r+0xab6>
 800dd32:	9b05      	ldr	r3, [sp, #20]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	dd02      	ble.n	800dd3e <_dtoa_r+0xa6e>
 800dd38:	9b02      	ldr	r3, [sp, #8]
 800dd3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dd3e:	9b01      	ldr	r3, [sp, #4]
 800dd40:	f883 9000 	strb.w	r9, [r3]
 800dd44:	e774      	b.n	800dc30 <_dtoa_r+0x960>
 800dd46:	4638      	mov	r0, r7
 800dd48:	e7ba      	b.n	800dcc0 <_dtoa_r+0x9f0>
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	e7e1      	b.n	800dd12 <_dtoa_r+0xa42>
 800dd4e:	9b05      	ldr	r3, [sp, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	db04      	blt.n	800dd5e <_dtoa_r+0xa8e>
 800dd54:	9907      	ldr	r1, [sp, #28]
 800dd56:	430b      	orrs	r3, r1
 800dd58:	9906      	ldr	r1, [sp, #24]
 800dd5a:	430b      	orrs	r3, r1
 800dd5c:	d120      	bne.n	800dda0 <_dtoa_r+0xad0>
 800dd5e:	2a00      	cmp	r2, #0
 800dd60:	dded      	ble.n	800dd3e <_dtoa_r+0xa6e>
 800dd62:	4651      	mov	r1, sl
 800dd64:	2201      	movs	r2, #1
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fbb4 	bl	800e4d4 <__lshift>
 800dd6c:	4631      	mov	r1, r6
 800dd6e:	4682      	mov	sl, r0
 800dd70:	f000 fc1c 	bl	800e5ac <__mcmp>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dc03      	bgt.n	800dd80 <_dtoa_r+0xab0>
 800dd78:	d1e1      	bne.n	800dd3e <_dtoa_r+0xa6e>
 800dd7a:	f019 0f01 	tst.w	r9, #1
 800dd7e:	d0de      	beq.n	800dd3e <_dtoa_r+0xa6e>
 800dd80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dd84:	d1d8      	bne.n	800dd38 <_dtoa_r+0xa68>
 800dd86:	9a01      	ldr	r2, [sp, #4]
 800dd88:	2339      	movs	r3, #57	; 0x39
 800dd8a:	7013      	strb	r3, [r2, #0]
 800dd8c:	462b      	mov	r3, r5
 800dd8e:	461d      	mov	r5, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd96:	2a39      	cmp	r2, #57	; 0x39
 800dd98:	d06c      	beq.n	800de74 <_dtoa_r+0xba4>
 800dd9a:	3201      	adds	r2, #1
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	e747      	b.n	800dc30 <_dtoa_r+0x960>
 800dda0:	2a00      	cmp	r2, #0
 800dda2:	dd07      	ble.n	800ddb4 <_dtoa_r+0xae4>
 800dda4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dda8:	d0ed      	beq.n	800dd86 <_dtoa_r+0xab6>
 800ddaa:	9a01      	ldr	r2, [sp, #4]
 800ddac:	f109 0301 	add.w	r3, r9, #1
 800ddb0:	7013      	strb	r3, [r2, #0]
 800ddb2:	e73d      	b.n	800dc30 <_dtoa_r+0x960>
 800ddb4:	9b04      	ldr	r3, [sp, #16]
 800ddb6:	9a08      	ldr	r2, [sp, #32]
 800ddb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d043      	beq.n	800de48 <_dtoa_r+0xb78>
 800ddc0:	4651      	mov	r1, sl
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	220a      	movs	r2, #10
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f9d6 	bl	800e178 <__multadd>
 800ddcc:	45b8      	cmp	r8, r7
 800ddce:	4682      	mov	sl, r0
 800ddd0:	f04f 0300 	mov.w	r3, #0
 800ddd4:	f04f 020a 	mov.w	r2, #10
 800ddd8:	4641      	mov	r1, r8
 800ddda:	4620      	mov	r0, r4
 800dddc:	d107      	bne.n	800ddee <_dtoa_r+0xb1e>
 800ddde:	f000 f9cb 	bl	800e178 <__multadd>
 800dde2:	4680      	mov	r8, r0
 800dde4:	4607      	mov	r7, r0
 800dde6:	9b04      	ldr	r3, [sp, #16]
 800dde8:	3301      	adds	r3, #1
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	e775      	b.n	800dcda <_dtoa_r+0xa0a>
 800ddee:	f000 f9c3 	bl	800e178 <__multadd>
 800ddf2:	4639      	mov	r1, r7
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f000 f9bc 	bl	800e178 <__multadd>
 800de00:	4607      	mov	r7, r0
 800de02:	e7f0      	b.n	800dde6 <_dtoa_r+0xb16>
 800de04:	9b04      	ldr	r3, [sp, #16]
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	9d00      	ldr	r5, [sp, #0]
 800de0a:	4631      	mov	r1, r6
 800de0c:	4650      	mov	r0, sl
 800de0e:	f7ff f9d6 	bl	800d1be <quorem>
 800de12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800de16:	9b00      	ldr	r3, [sp, #0]
 800de18:	f805 9b01 	strb.w	r9, [r5], #1
 800de1c:	1aea      	subs	r2, r5, r3
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	4293      	cmp	r3, r2
 800de22:	dd07      	ble.n	800de34 <_dtoa_r+0xb64>
 800de24:	4651      	mov	r1, sl
 800de26:	2300      	movs	r3, #0
 800de28:	220a      	movs	r2, #10
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 f9a4 	bl	800e178 <__multadd>
 800de30:	4682      	mov	sl, r0
 800de32:	e7ea      	b.n	800de0a <_dtoa_r+0xb3a>
 800de34:	9b01      	ldr	r3, [sp, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	bfc8      	it	gt
 800de3a:	461d      	movgt	r5, r3
 800de3c:	9b00      	ldr	r3, [sp, #0]
 800de3e:	bfd8      	it	le
 800de40:	2501      	movle	r5, #1
 800de42:	441d      	add	r5, r3
 800de44:	f04f 0800 	mov.w	r8, #0
 800de48:	4651      	mov	r1, sl
 800de4a:	2201      	movs	r2, #1
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fb41 	bl	800e4d4 <__lshift>
 800de52:	4631      	mov	r1, r6
 800de54:	4682      	mov	sl, r0
 800de56:	f000 fba9 	bl	800e5ac <__mcmp>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	dc96      	bgt.n	800dd8c <_dtoa_r+0xabc>
 800de5e:	d102      	bne.n	800de66 <_dtoa_r+0xb96>
 800de60:	f019 0f01 	tst.w	r9, #1
 800de64:	d192      	bne.n	800dd8c <_dtoa_r+0xabc>
 800de66:	462b      	mov	r3, r5
 800de68:	461d      	mov	r5, r3
 800de6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de6e:	2a30      	cmp	r2, #48	; 0x30
 800de70:	d0fa      	beq.n	800de68 <_dtoa_r+0xb98>
 800de72:	e6dd      	b.n	800dc30 <_dtoa_r+0x960>
 800de74:	9a00      	ldr	r2, [sp, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d189      	bne.n	800dd8e <_dtoa_r+0xabe>
 800de7a:	f10b 0b01 	add.w	fp, fp, #1
 800de7e:	2331      	movs	r3, #49	; 0x31
 800de80:	e796      	b.n	800ddb0 <_dtoa_r+0xae0>
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <_dtoa_r+0xbdc>)
 800de84:	f7ff ba99 	b.w	800d3ba <_dtoa_r+0xea>
 800de88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f47f aa6d 	bne.w	800d36a <_dtoa_r+0x9a>
 800de90:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <_dtoa_r+0xbe0>)
 800de92:	f7ff ba92 	b.w	800d3ba <_dtoa_r+0xea>
 800de96:	9b01      	ldr	r3, [sp, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	dcb5      	bgt.n	800de08 <_dtoa_r+0xb38>
 800de9c:	9b07      	ldr	r3, [sp, #28]
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	f73f aeb1 	bgt.w	800dc06 <_dtoa_r+0x936>
 800dea4:	e7b0      	b.n	800de08 <_dtoa_r+0xb38>
 800dea6:	bf00      	nop
 800dea8:	0800f398 	.word	0x0800f398
 800deac:	0800f2f8 	.word	0x0800f2f8
 800deb0:	0800f31c 	.word	0x0800f31c

0800deb4 <_free_r>:
 800deb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deb6:	2900      	cmp	r1, #0
 800deb8:	d044      	beq.n	800df44 <_free_r+0x90>
 800deba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800debe:	9001      	str	r0, [sp, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f1a1 0404 	sub.w	r4, r1, #4
 800dec6:	bfb8      	it	lt
 800dec8:	18e4      	addlt	r4, r4, r3
 800deca:	f000 f8e7 	bl	800e09c <__malloc_lock>
 800dece:	4a1e      	ldr	r2, [pc, #120]	; (800df48 <_free_r+0x94>)
 800ded0:	9801      	ldr	r0, [sp, #4]
 800ded2:	6813      	ldr	r3, [r2, #0]
 800ded4:	b933      	cbnz	r3, 800dee4 <_free_r+0x30>
 800ded6:	6063      	str	r3, [r4, #4]
 800ded8:	6014      	str	r4, [r2, #0]
 800deda:	b003      	add	sp, #12
 800dedc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dee0:	f000 b8e2 	b.w	800e0a8 <__malloc_unlock>
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d908      	bls.n	800defa <_free_r+0x46>
 800dee8:	6825      	ldr	r5, [r4, #0]
 800deea:	1961      	adds	r1, r4, r5
 800deec:	428b      	cmp	r3, r1
 800deee:	bf01      	itttt	eq
 800def0:	6819      	ldreq	r1, [r3, #0]
 800def2:	685b      	ldreq	r3, [r3, #4]
 800def4:	1949      	addeq	r1, r1, r5
 800def6:	6021      	streq	r1, [r4, #0]
 800def8:	e7ed      	b.n	800ded6 <_free_r+0x22>
 800defa:	461a      	mov	r2, r3
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	b10b      	cbz	r3, 800df04 <_free_r+0x50>
 800df00:	42a3      	cmp	r3, r4
 800df02:	d9fa      	bls.n	800defa <_free_r+0x46>
 800df04:	6811      	ldr	r1, [r2, #0]
 800df06:	1855      	adds	r5, r2, r1
 800df08:	42a5      	cmp	r5, r4
 800df0a:	d10b      	bne.n	800df24 <_free_r+0x70>
 800df0c:	6824      	ldr	r4, [r4, #0]
 800df0e:	4421      	add	r1, r4
 800df10:	1854      	adds	r4, r2, r1
 800df12:	42a3      	cmp	r3, r4
 800df14:	6011      	str	r1, [r2, #0]
 800df16:	d1e0      	bne.n	800deda <_free_r+0x26>
 800df18:	681c      	ldr	r4, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	6053      	str	r3, [r2, #4]
 800df1e:	440c      	add	r4, r1
 800df20:	6014      	str	r4, [r2, #0]
 800df22:	e7da      	b.n	800deda <_free_r+0x26>
 800df24:	d902      	bls.n	800df2c <_free_r+0x78>
 800df26:	230c      	movs	r3, #12
 800df28:	6003      	str	r3, [r0, #0]
 800df2a:	e7d6      	b.n	800deda <_free_r+0x26>
 800df2c:	6825      	ldr	r5, [r4, #0]
 800df2e:	1961      	adds	r1, r4, r5
 800df30:	428b      	cmp	r3, r1
 800df32:	bf04      	itt	eq
 800df34:	6819      	ldreq	r1, [r3, #0]
 800df36:	685b      	ldreq	r3, [r3, #4]
 800df38:	6063      	str	r3, [r4, #4]
 800df3a:	bf04      	itt	eq
 800df3c:	1949      	addeq	r1, r1, r5
 800df3e:	6021      	streq	r1, [r4, #0]
 800df40:	6054      	str	r4, [r2, #4]
 800df42:	e7ca      	b.n	800deda <_free_r+0x26>
 800df44:	b003      	add	sp, #12
 800df46:	bd30      	pop	{r4, r5, pc}
 800df48:	20002a1c 	.word	0x20002a1c

0800df4c <malloc>:
 800df4c:	4b02      	ldr	r3, [pc, #8]	; (800df58 <malloc+0xc>)
 800df4e:	4601      	mov	r1, r0
 800df50:	6818      	ldr	r0, [r3, #0]
 800df52:	f000 b823 	b.w	800df9c <_malloc_r>
 800df56:	bf00      	nop
 800df58:	200000f4 	.word	0x200000f4

0800df5c <sbrk_aligned>:
 800df5c:	b570      	push	{r4, r5, r6, lr}
 800df5e:	4e0e      	ldr	r6, [pc, #56]	; (800df98 <sbrk_aligned+0x3c>)
 800df60:	460c      	mov	r4, r1
 800df62:	6831      	ldr	r1, [r6, #0]
 800df64:	4605      	mov	r5, r0
 800df66:	b911      	cbnz	r1, 800df6e <sbrk_aligned+0x12>
 800df68:	f000 fe96 	bl	800ec98 <_sbrk_r>
 800df6c:	6030      	str	r0, [r6, #0]
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f000 fe91 	bl	800ec98 <_sbrk_r>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	d00a      	beq.n	800df90 <sbrk_aligned+0x34>
 800df7a:	1cc4      	adds	r4, r0, #3
 800df7c:	f024 0403 	bic.w	r4, r4, #3
 800df80:	42a0      	cmp	r0, r4
 800df82:	d007      	beq.n	800df94 <sbrk_aligned+0x38>
 800df84:	1a21      	subs	r1, r4, r0
 800df86:	4628      	mov	r0, r5
 800df88:	f000 fe86 	bl	800ec98 <_sbrk_r>
 800df8c:	3001      	adds	r0, #1
 800df8e:	d101      	bne.n	800df94 <sbrk_aligned+0x38>
 800df90:	f04f 34ff 	mov.w	r4, #4294967295
 800df94:	4620      	mov	r0, r4
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	20002a20 	.word	0x20002a20

0800df9c <_malloc_r>:
 800df9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfa0:	1ccd      	adds	r5, r1, #3
 800dfa2:	f025 0503 	bic.w	r5, r5, #3
 800dfa6:	3508      	adds	r5, #8
 800dfa8:	2d0c      	cmp	r5, #12
 800dfaa:	bf38      	it	cc
 800dfac:	250c      	movcc	r5, #12
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	db01      	blt.n	800dfb8 <_malloc_r+0x1c>
 800dfb4:	42a9      	cmp	r1, r5
 800dfb6:	d905      	bls.n	800dfc4 <_malloc_r+0x28>
 800dfb8:	230c      	movs	r3, #12
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	2600      	movs	r6, #0
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e098 <_malloc_r+0xfc>
 800dfc8:	f000 f868 	bl	800e09c <__malloc_lock>
 800dfcc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfd0:	461c      	mov	r4, r3
 800dfd2:	bb5c      	cbnz	r4, 800e02c <_malloc_r+0x90>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4638      	mov	r0, r7
 800dfd8:	f7ff ffc0 	bl	800df5c <sbrk_aligned>
 800dfdc:	1c43      	adds	r3, r0, #1
 800dfde:	4604      	mov	r4, r0
 800dfe0:	d155      	bne.n	800e08e <_malloc_r+0xf2>
 800dfe2:	f8d8 4000 	ldr.w	r4, [r8]
 800dfe6:	4626      	mov	r6, r4
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	d145      	bne.n	800e078 <_malloc_r+0xdc>
 800dfec:	2c00      	cmp	r4, #0
 800dfee:	d048      	beq.n	800e082 <_malloc_r+0xe6>
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	4631      	mov	r1, r6
 800dff4:	4638      	mov	r0, r7
 800dff6:	eb04 0903 	add.w	r9, r4, r3
 800dffa:	f000 fe4d 	bl	800ec98 <_sbrk_r>
 800dffe:	4581      	cmp	r9, r0
 800e000:	d13f      	bne.n	800e082 <_malloc_r+0xe6>
 800e002:	6821      	ldr	r1, [r4, #0]
 800e004:	1a6d      	subs	r5, r5, r1
 800e006:	4629      	mov	r1, r5
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff ffa7 	bl	800df5c <sbrk_aligned>
 800e00e:	3001      	adds	r0, #1
 800e010:	d037      	beq.n	800e082 <_malloc_r+0xe6>
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	442b      	add	r3, r5
 800e016:	6023      	str	r3, [r4, #0]
 800e018:	f8d8 3000 	ldr.w	r3, [r8]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d038      	beq.n	800e092 <_malloc_r+0xf6>
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	42a2      	cmp	r2, r4
 800e024:	d12b      	bne.n	800e07e <_malloc_r+0xe2>
 800e026:	2200      	movs	r2, #0
 800e028:	605a      	str	r2, [r3, #4]
 800e02a:	e00f      	b.n	800e04c <_malloc_r+0xb0>
 800e02c:	6822      	ldr	r2, [r4, #0]
 800e02e:	1b52      	subs	r2, r2, r5
 800e030:	d41f      	bmi.n	800e072 <_malloc_r+0xd6>
 800e032:	2a0b      	cmp	r2, #11
 800e034:	d917      	bls.n	800e066 <_malloc_r+0xca>
 800e036:	1961      	adds	r1, r4, r5
 800e038:	42a3      	cmp	r3, r4
 800e03a:	6025      	str	r5, [r4, #0]
 800e03c:	bf18      	it	ne
 800e03e:	6059      	strne	r1, [r3, #4]
 800e040:	6863      	ldr	r3, [r4, #4]
 800e042:	bf08      	it	eq
 800e044:	f8c8 1000 	streq.w	r1, [r8]
 800e048:	5162      	str	r2, [r4, r5]
 800e04a:	604b      	str	r3, [r1, #4]
 800e04c:	4638      	mov	r0, r7
 800e04e:	f104 060b 	add.w	r6, r4, #11
 800e052:	f000 f829 	bl	800e0a8 <__malloc_unlock>
 800e056:	f026 0607 	bic.w	r6, r6, #7
 800e05a:	1d23      	adds	r3, r4, #4
 800e05c:	1af2      	subs	r2, r6, r3
 800e05e:	d0ae      	beq.n	800dfbe <_malloc_r+0x22>
 800e060:	1b9b      	subs	r3, r3, r6
 800e062:	50a3      	str	r3, [r4, r2]
 800e064:	e7ab      	b.n	800dfbe <_malloc_r+0x22>
 800e066:	42a3      	cmp	r3, r4
 800e068:	6862      	ldr	r2, [r4, #4]
 800e06a:	d1dd      	bne.n	800e028 <_malloc_r+0x8c>
 800e06c:	f8c8 2000 	str.w	r2, [r8]
 800e070:	e7ec      	b.n	800e04c <_malloc_r+0xb0>
 800e072:	4623      	mov	r3, r4
 800e074:	6864      	ldr	r4, [r4, #4]
 800e076:	e7ac      	b.n	800dfd2 <_malloc_r+0x36>
 800e078:	4634      	mov	r4, r6
 800e07a:	6876      	ldr	r6, [r6, #4]
 800e07c:	e7b4      	b.n	800dfe8 <_malloc_r+0x4c>
 800e07e:	4613      	mov	r3, r2
 800e080:	e7cc      	b.n	800e01c <_malloc_r+0x80>
 800e082:	230c      	movs	r3, #12
 800e084:	603b      	str	r3, [r7, #0]
 800e086:	4638      	mov	r0, r7
 800e088:	f000 f80e 	bl	800e0a8 <__malloc_unlock>
 800e08c:	e797      	b.n	800dfbe <_malloc_r+0x22>
 800e08e:	6025      	str	r5, [r4, #0]
 800e090:	e7dc      	b.n	800e04c <_malloc_r+0xb0>
 800e092:	605b      	str	r3, [r3, #4]
 800e094:	deff      	udf	#255	; 0xff
 800e096:	bf00      	nop
 800e098:	20002a1c 	.word	0x20002a1c

0800e09c <__malloc_lock>:
 800e09c:	4801      	ldr	r0, [pc, #4]	; (800e0a4 <__malloc_lock+0x8>)
 800e09e:	f7ff b87e 	b.w	800d19e <__retarget_lock_acquire_recursive>
 800e0a2:	bf00      	nop
 800e0a4:	20002a18 	.word	0x20002a18

0800e0a8 <__malloc_unlock>:
 800e0a8:	4801      	ldr	r0, [pc, #4]	; (800e0b0 <__malloc_unlock+0x8>)
 800e0aa:	f7ff b879 	b.w	800d1a0 <__retarget_lock_release_recursive>
 800e0ae:	bf00      	nop
 800e0b0:	20002a18 	.word	0x20002a18

0800e0b4 <_Balloc>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	69c6      	ldr	r6, [r0, #28]
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	b976      	cbnz	r6, 800e0dc <_Balloc+0x28>
 800e0be:	2010      	movs	r0, #16
 800e0c0:	f7ff ff44 	bl	800df4c <malloc>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	61e0      	str	r0, [r4, #28]
 800e0c8:	b920      	cbnz	r0, 800e0d4 <_Balloc+0x20>
 800e0ca:	4b18      	ldr	r3, [pc, #96]	; (800e12c <_Balloc+0x78>)
 800e0cc:	4818      	ldr	r0, [pc, #96]	; (800e130 <_Balloc+0x7c>)
 800e0ce:	216b      	movs	r1, #107	; 0x6b
 800e0d0:	f000 fdf2 	bl	800ecb8 <__assert_func>
 800e0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0d8:	6006      	str	r6, [r0, #0]
 800e0da:	60c6      	str	r6, [r0, #12]
 800e0dc:	69e6      	ldr	r6, [r4, #28]
 800e0de:	68f3      	ldr	r3, [r6, #12]
 800e0e0:	b183      	cbz	r3, 800e104 <_Balloc+0x50>
 800e0e2:	69e3      	ldr	r3, [r4, #28]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0ea:	b9b8      	cbnz	r0, 800e11c <_Balloc+0x68>
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800e0f2:	1d72      	adds	r2, r6, #5
 800e0f4:	0092      	lsls	r2, r2, #2
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fdfc 	bl	800ecf4 <_calloc_r>
 800e0fc:	b160      	cbz	r0, 800e118 <_Balloc+0x64>
 800e0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e102:	e00e      	b.n	800e122 <_Balloc+0x6e>
 800e104:	2221      	movs	r2, #33	; 0x21
 800e106:	2104      	movs	r1, #4
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fdf3 	bl	800ecf4 <_calloc_r>
 800e10e:	69e3      	ldr	r3, [r4, #28]
 800e110:	60f0      	str	r0, [r6, #12]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e4      	bne.n	800e0e2 <_Balloc+0x2e>
 800e118:	2000      	movs	r0, #0
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	6802      	ldr	r2, [r0, #0]
 800e11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e122:	2300      	movs	r3, #0
 800e124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e128:	e7f7      	b.n	800e11a <_Balloc+0x66>
 800e12a:	bf00      	nop
 800e12c:	0800f329 	.word	0x0800f329
 800e130:	0800f3a9 	.word	0x0800f3a9

0800e134 <_Bfree>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	69c6      	ldr	r6, [r0, #28]
 800e138:	4605      	mov	r5, r0
 800e13a:	460c      	mov	r4, r1
 800e13c:	b976      	cbnz	r6, 800e15c <_Bfree+0x28>
 800e13e:	2010      	movs	r0, #16
 800e140:	f7ff ff04 	bl	800df4c <malloc>
 800e144:	4602      	mov	r2, r0
 800e146:	61e8      	str	r0, [r5, #28]
 800e148:	b920      	cbnz	r0, 800e154 <_Bfree+0x20>
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <_Bfree+0x3c>)
 800e14c:	4809      	ldr	r0, [pc, #36]	; (800e174 <_Bfree+0x40>)
 800e14e:	218f      	movs	r1, #143	; 0x8f
 800e150:	f000 fdb2 	bl	800ecb8 <__assert_func>
 800e154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e158:	6006      	str	r6, [r0, #0]
 800e15a:	60c6      	str	r6, [r0, #12]
 800e15c:	b13c      	cbz	r4, 800e16e <_Bfree+0x3a>
 800e15e:	69eb      	ldr	r3, [r5, #28]
 800e160:	6862      	ldr	r2, [r4, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e168:	6021      	str	r1, [r4, #0]
 800e16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e16e:	bd70      	pop	{r4, r5, r6, pc}
 800e170:	0800f329 	.word	0x0800f329
 800e174:	0800f3a9 	.word	0x0800f3a9

0800e178 <__multadd>:
 800e178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e17c:	690d      	ldr	r5, [r1, #16]
 800e17e:	4607      	mov	r7, r0
 800e180:	460c      	mov	r4, r1
 800e182:	461e      	mov	r6, r3
 800e184:	f101 0c14 	add.w	ip, r1, #20
 800e188:	2000      	movs	r0, #0
 800e18a:	f8dc 3000 	ldr.w	r3, [ip]
 800e18e:	b299      	uxth	r1, r3
 800e190:	fb02 6101 	mla	r1, r2, r1, r6
 800e194:	0c1e      	lsrs	r6, r3, #16
 800e196:	0c0b      	lsrs	r3, r1, #16
 800e198:	fb02 3306 	mla	r3, r2, r6, r3
 800e19c:	b289      	uxth	r1, r1
 800e19e:	3001      	adds	r0, #1
 800e1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1a4:	4285      	cmp	r5, r0
 800e1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800e1aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1ae:	dcec      	bgt.n	800e18a <__multadd+0x12>
 800e1b0:	b30e      	cbz	r6, 800e1f6 <__multadd+0x7e>
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	42ab      	cmp	r3, r5
 800e1b6:	dc19      	bgt.n	800e1ec <__multadd+0x74>
 800e1b8:	6861      	ldr	r1, [r4, #4]
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	3101      	adds	r1, #1
 800e1be:	f7ff ff79 	bl	800e0b4 <_Balloc>
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	b928      	cbnz	r0, 800e1d2 <__multadd+0x5a>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b0c      	ldr	r3, [pc, #48]	; (800e1fc <__multadd+0x84>)
 800e1ca:	480d      	ldr	r0, [pc, #52]	; (800e200 <__multadd+0x88>)
 800e1cc:	21ba      	movs	r1, #186	; 0xba
 800e1ce:	f000 fd73 	bl	800ecb8 <__assert_func>
 800e1d2:	6922      	ldr	r2, [r4, #16]
 800e1d4:	3202      	adds	r2, #2
 800e1d6:	f104 010c 	add.w	r1, r4, #12
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	300c      	adds	r0, #12
 800e1de:	f7fe ffe0 	bl	800d1a2 <memcpy>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff ffa5 	bl	800e134 <_Bfree>
 800e1ea:	4644      	mov	r4, r8
 800e1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1f0:	3501      	adds	r5, #1
 800e1f2:	615e      	str	r6, [r3, #20]
 800e1f4:	6125      	str	r5, [r4, #16]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1fc:	0800f398 	.word	0x0800f398
 800e200:	0800f3a9 	.word	0x0800f3a9

0800e204 <__hi0bits>:
 800e204:	0c03      	lsrs	r3, r0, #16
 800e206:	041b      	lsls	r3, r3, #16
 800e208:	b9d3      	cbnz	r3, 800e240 <__hi0bits+0x3c>
 800e20a:	0400      	lsls	r0, r0, #16
 800e20c:	2310      	movs	r3, #16
 800e20e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e212:	bf04      	itt	eq
 800e214:	0200      	lsleq	r0, r0, #8
 800e216:	3308      	addeq	r3, #8
 800e218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e21c:	bf04      	itt	eq
 800e21e:	0100      	lsleq	r0, r0, #4
 800e220:	3304      	addeq	r3, #4
 800e222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e226:	bf04      	itt	eq
 800e228:	0080      	lsleq	r0, r0, #2
 800e22a:	3302      	addeq	r3, #2
 800e22c:	2800      	cmp	r0, #0
 800e22e:	db05      	blt.n	800e23c <__hi0bits+0x38>
 800e230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e234:	f103 0301 	add.w	r3, r3, #1
 800e238:	bf08      	it	eq
 800e23a:	2320      	moveq	r3, #32
 800e23c:	4618      	mov	r0, r3
 800e23e:	4770      	bx	lr
 800e240:	2300      	movs	r3, #0
 800e242:	e7e4      	b.n	800e20e <__hi0bits+0xa>

0800e244 <__lo0bits>:
 800e244:	6803      	ldr	r3, [r0, #0]
 800e246:	f013 0207 	ands.w	r2, r3, #7
 800e24a:	d00c      	beq.n	800e266 <__lo0bits+0x22>
 800e24c:	07d9      	lsls	r1, r3, #31
 800e24e:	d422      	bmi.n	800e296 <__lo0bits+0x52>
 800e250:	079a      	lsls	r2, r3, #30
 800e252:	bf49      	itett	mi
 800e254:	085b      	lsrmi	r3, r3, #1
 800e256:	089b      	lsrpl	r3, r3, #2
 800e258:	6003      	strmi	r3, [r0, #0]
 800e25a:	2201      	movmi	r2, #1
 800e25c:	bf5c      	itt	pl
 800e25e:	6003      	strpl	r3, [r0, #0]
 800e260:	2202      	movpl	r2, #2
 800e262:	4610      	mov	r0, r2
 800e264:	4770      	bx	lr
 800e266:	b299      	uxth	r1, r3
 800e268:	b909      	cbnz	r1, 800e26e <__lo0bits+0x2a>
 800e26a:	0c1b      	lsrs	r3, r3, #16
 800e26c:	2210      	movs	r2, #16
 800e26e:	b2d9      	uxtb	r1, r3
 800e270:	b909      	cbnz	r1, 800e276 <__lo0bits+0x32>
 800e272:	3208      	adds	r2, #8
 800e274:	0a1b      	lsrs	r3, r3, #8
 800e276:	0719      	lsls	r1, r3, #28
 800e278:	bf04      	itt	eq
 800e27a:	091b      	lsreq	r3, r3, #4
 800e27c:	3204      	addeq	r2, #4
 800e27e:	0799      	lsls	r1, r3, #30
 800e280:	bf04      	itt	eq
 800e282:	089b      	lsreq	r3, r3, #2
 800e284:	3202      	addeq	r2, #2
 800e286:	07d9      	lsls	r1, r3, #31
 800e288:	d403      	bmi.n	800e292 <__lo0bits+0x4e>
 800e28a:	085b      	lsrs	r3, r3, #1
 800e28c:	f102 0201 	add.w	r2, r2, #1
 800e290:	d003      	beq.n	800e29a <__lo0bits+0x56>
 800e292:	6003      	str	r3, [r0, #0]
 800e294:	e7e5      	b.n	800e262 <__lo0bits+0x1e>
 800e296:	2200      	movs	r2, #0
 800e298:	e7e3      	b.n	800e262 <__lo0bits+0x1e>
 800e29a:	2220      	movs	r2, #32
 800e29c:	e7e1      	b.n	800e262 <__lo0bits+0x1e>
	...

0800e2a0 <__i2b>:
 800e2a0:	b510      	push	{r4, lr}
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	f7ff ff05 	bl	800e0b4 <_Balloc>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	b928      	cbnz	r0, 800e2ba <__i2b+0x1a>
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <__i2b+0x24>)
 800e2b0:	4805      	ldr	r0, [pc, #20]	; (800e2c8 <__i2b+0x28>)
 800e2b2:	f240 1145 	movw	r1, #325	; 0x145
 800e2b6:	f000 fcff 	bl	800ecb8 <__assert_func>
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	6144      	str	r4, [r0, #20]
 800e2be:	6103      	str	r3, [r0, #16]
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0800f398 	.word	0x0800f398
 800e2c8:	0800f3a9 	.word	0x0800f3a9

0800e2cc <__multiply>:
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d0:	4691      	mov	r9, r2
 800e2d2:	690a      	ldr	r2, [r1, #16]
 800e2d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	bfb8      	it	lt
 800e2dc:	460b      	movlt	r3, r1
 800e2de:	460c      	mov	r4, r1
 800e2e0:	bfbc      	itt	lt
 800e2e2:	464c      	movlt	r4, r9
 800e2e4:	4699      	movlt	r9, r3
 800e2e6:	6927      	ldr	r7, [r4, #16]
 800e2e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2ec:	68a3      	ldr	r3, [r4, #8]
 800e2ee:	6861      	ldr	r1, [r4, #4]
 800e2f0:	eb07 060a 	add.w	r6, r7, sl
 800e2f4:	42b3      	cmp	r3, r6
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	bfb8      	it	lt
 800e2fa:	3101      	addlt	r1, #1
 800e2fc:	f7ff feda 	bl	800e0b4 <_Balloc>
 800e300:	b930      	cbnz	r0, 800e310 <__multiply+0x44>
 800e302:	4602      	mov	r2, r0
 800e304:	4b44      	ldr	r3, [pc, #272]	; (800e418 <__multiply+0x14c>)
 800e306:	4845      	ldr	r0, [pc, #276]	; (800e41c <__multiply+0x150>)
 800e308:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e30c:	f000 fcd4 	bl	800ecb8 <__assert_func>
 800e310:	f100 0514 	add.w	r5, r0, #20
 800e314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e318:	462b      	mov	r3, r5
 800e31a:	2200      	movs	r2, #0
 800e31c:	4543      	cmp	r3, r8
 800e31e:	d321      	bcc.n	800e364 <__multiply+0x98>
 800e320:	f104 0314 	add.w	r3, r4, #20
 800e324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e328:	f109 0314 	add.w	r3, r9, #20
 800e32c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e330:	9202      	str	r2, [sp, #8]
 800e332:	1b3a      	subs	r2, r7, r4
 800e334:	3a15      	subs	r2, #21
 800e336:	f022 0203 	bic.w	r2, r2, #3
 800e33a:	3204      	adds	r2, #4
 800e33c:	f104 0115 	add.w	r1, r4, #21
 800e340:	428f      	cmp	r7, r1
 800e342:	bf38      	it	cc
 800e344:	2204      	movcc	r2, #4
 800e346:	9201      	str	r2, [sp, #4]
 800e348:	9a02      	ldr	r2, [sp, #8]
 800e34a:	9303      	str	r3, [sp, #12]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d80c      	bhi.n	800e36a <__multiply+0x9e>
 800e350:	2e00      	cmp	r6, #0
 800e352:	dd03      	ble.n	800e35c <__multiply+0x90>
 800e354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d05b      	beq.n	800e414 <__multiply+0x148>
 800e35c:	6106      	str	r6, [r0, #16]
 800e35e:	b005      	add	sp, #20
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e364:	f843 2b04 	str.w	r2, [r3], #4
 800e368:	e7d8      	b.n	800e31c <__multiply+0x50>
 800e36a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e36e:	f1ba 0f00 	cmp.w	sl, #0
 800e372:	d024      	beq.n	800e3be <__multiply+0xf2>
 800e374:	f104 0e14 	add.w	lr, r4, #20
 800e378:	46a9      	mov	r9, r5
 800e37a:	f04f 0c00 	mov.w	ip, #0
 800e37e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e382:	f8d9 1000 	ldr.w	r1, [r9]
 800e386:	fa1f fb82 	uxth.w	fp, r2
 800e38a:	b289      	uxth	r1, r1
 800e38c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e394:	f8d9 2000 	ldr.w	r2, [r9]
 800e398:	4461      	add	r1, ip
 800e39a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e39e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3a6:	b289      	uxth	r1, r1
 800e3a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3ac:	4577      	cmp	r7, lr
 800e3ae:	f849 1b04 	str.w	r1, [r9], #4
 800e3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3b6:	d8e2      	bhi.n	800e37e <__multiply+0xb2>
 800e3b8:	9a01      	ldr	r2, [sp, #4]
 800e3ba:	f845 c002 	str.w	ip, [r5, r2]
 800e3be:	9a03      	ldr	r2, [sp, #12]
 800e3c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	f1b9 0f00 	cmp.w	r9, #0
 800e3ca:	d021      	beq.n	800e410 <__multiply+0x144>
 800e3cc:	6829      	ldr	r1, [r5, #0]
 800e3ce:	f104 0c14 	add.w	ip, r4, #20
 800e3d2:	46ae      	mov	lr, r5
 800e3d4:	f04f 0a00 	mov.w	sl, #0
 800e3d8:	f8bc b000 	ldrh.w	fp, [ip]
 800e3dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3e0:	fb09 220b 	mla	r2, r9, fp, r2
 800e3e4:	4452      	add	r2, sl
 800e3e6:	b289      	uxth	r1, r1
 800e3e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3ec:	f84e 1b04 	str.w	r1, [lr], #4
 800e3f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3f8:	f8be 1000 	ldrh.w	r1, [lr]
 800e3fc:	fb09 110a 	mla	r1, r9, sl, r1
 800e400:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e404:	4567      	cmp	r7, ip
 800e406:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e40a:	d8e5      	bhi.n	800e3d8 <__multiply+0x10c>
 800e40c:	9a01      	ldr	r2, [sp, #4]
 800e40e:	50a9      	str	r1, [r5, r2]
 800e410:	3504      	adds	r5, #4
 800e412:	e799      	b.n	800e348 <__multiply+0x7c>
 800e414:	3e01      	subs	r6, #1
 800e416:	e79b      	b.n	800e350 <__multiply+0x84>
 800e418:	0800f398 	.word	0x0800f398
 800e41c:	0800f3a9 	.word	0x0800f3a9

0800e420 <__pow5mult>:
 800e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e424:	4615      	mov	r5, r2
 800e426:	f012 0203 	ands.w	r2, r2, #3
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	d007      	beq.n	800e440 <__pow5mult+0x20>
 800e430:	4c25      	ldr	r4, [pc, #148]	; (800e4c8 <__pow5mult+0xa8>)
 800e432:	3a01      	subs	r2, #1
 800e434:	2300      	movs	r3, #0
 800e436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43a:	f7ff fe9d 	bl	800e178 <__multadd>
 800e43e:	4607      	mov	r7, r0
 800e440:	10ad      	asrs	r5, r5, #2
 800e442:	d03d      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e444:	69f4      	ldr	r4, [r6, #28]
 800e446:	b97c      	cbnz	r4, 800e468 <__pow5mult+0x48>
 800e448:	2010      	movs	r0, #16
 800e44a:	f7ff fd7f 	bl	800df4c <malloc>
 800e44e:	4602      	mov	r2, r0
 800e450:	61f0      	str	r0, [r6, #28]
 800e452:	b928      	cbnz	r0, 800e460 <__pow5mult+0x40>
 800e454:	4b1d      	ldr	r3, [pc, #116]	; (800e4cc <__pow5mult+0xac>)
 800e456:	481e      	ldr	r0, [pc, #120]	; (800e4d0 <__pow5mult+0xb0>)
 800e458:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e45c:	f000 fc2c 	bl	800ecb8 <__assert_func>
 800e460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e464:	6004      	str	r4, [r0, #0]
 800e466:	60c4      	str	r4, [r0, #12]
 800e468:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e46c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e470:	b94c      	cbnz	r4, 800e486 <__pow5mult+0x66>
 800e472:	f240 2171 	movw	r1, #625	; 0x271
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff12 	bl	800e2a0 <__i2b>
 800e47c:	2300      	movs	r3, #0
 800e47e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e482:	4604      	mov	r4, r0
 800e484:	6003      	str	r3, [r0, #0]
 800e486:	f04f 0900 	mov.w	r9, #0
 800e48a:	07eb      	lsls	r3, r5, #31
 800e48c:	d50a      	bpl.n	800e4a4 <__pow5mult+0x84>
 800e48e:	4639      	mov	r1, r7
 800e490:	4622      	mov	r2, r4
 800e492:	4630      	mov	r0, r6
 800e494:	f7ff ff1a 	bl	800e2cc <__multiply>
 800e498:	4639      	mov	r1, r7
 800e49a:	4680      	mov	r8, r0
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fe49 	bl	800e134 <_Bfree>
 800e4a2:	4647      	mov	r7, r8
 800e4a4:	106d      	asrs	r5, r5, #1
 800e4a6:	d00b      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	b938      	cbnz	r0, 800e4bc <__pow5mult+0x9c>
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7ff ff0b 	bl	800e2cc <__multiply>
 800e4b6:	6020      	str	r0, [r4, #0]
 800e4b8:	f8c0 9000 	str.w	r9, [r0]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	e7e4      	b.n	800e48a <__pow5mult+0x6a>
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	bf00      	nop
 800e4c8:	0800f4f8 	.word	0x0800f4f8
 800e4cc:	0800f329 	.word	0x0800f329
 800e4d0:	0800f3a9 	.word	0x0800f3a9

0800e4d4 <__lshift>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	6849      	ldr	r1, [r1, #4]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4ec:	f108 0601 	add.w	r6, r8, #1
 800e4f0:	42b3      	cmp	r3, r6
 800e4f2:	db0b      	blt.n	800e50c <__lshift+0x38>
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff fddd 	bl	800e0b4 <_Balloc>
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	b948      	cbnz	r0, 800e512 <__lshift+0x3e>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b28      	ldr	r3, [pc, #160]	; (800e5a4 <__lshift+0xd0>)
 800e502:	4829      	ldr	r0, [pc, #164]	; (800e5a8 <__lshift+0xd4>)
 800e504:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e508:	f000 fbd6 	bl	800ecb8 <__assert_func>
 800e50c:	3101      	adds	r1, #1
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	e7ee      	b.n	800e4f0 <__lshift+0x1c>
 800e512:	2300      	movs	r3, #0
 800e514:	f100 0114 	add.w	r1, r0, #20
 800e518:	f100 0210 	add.w	r2, r0, #16
 800e51c:	4618      	mov	r0, r3
 800e51e:	4553      	cmp	r3, sl
 800e520:	db33      	blt.n	800e58a <__lshift+0xb6>
 800e522:	6920      	ldr	r0, [r4, #16]
 800e524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	f019 091f 	ands.w	r9, r9, #31
 800e530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e538:	d02b      	beq.n	800e592 <__lshift+0xbe>
 800e53a:	f1c9 0e20 	rsb	lr, r9, #32
 800e53e:	468a      	mov	sl, r1
 800e540:	2200      	movs	r2, #0
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	fa00 f009 	lsl.w	r0, r0, r9
 800e548:	4310      	orrs	r0, r2
 800e54a:	f84a 0b04 	str.w	r0, [sl], #4
 800e54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e552:	459c      	cmp	ip, r3
 800e554:	fa22 f20e 	lsr.w	r2, r2, lr
 800e558:	d8f3      	bhi.n	800e542 <__lshift+0x6e>
 800e55a:	ebac 0304 	sub.w	r3, ip, r4
 800e55e:	3b15      	subs	r3, #21
 800e560:	f023 0303 	bic.w	r3, r3, #3
 800e564:	3304      	adds	r3, #4
 800e566:	f104 0015 	add.w	r0, r4, #21
 800e56a:	4584      	cmp	ip, r0
 800e56c:	bf38      	it	cc
 800e56e:	2304      	movcc	r3, #4
 800e570:	50ca      	str	r2, [r1, r3]
 800e572:	b10a      	cbz	r2, 800e578 <__lshift+0xa4>
 800e574:	f108 0602 	add.w	r6, r8, #2
 800e578:	3e01      	subs	r6, #1
 800e57a:	4638      	mov	r0, r7
 800e57c:	612e      	str	r6, [r5, #16]
 800e57e:	4621      	mov	r1, r4
 800e580:	f7ff fdd8 	bl	800e134 <_Bfree>
 800e584:	4628      	mov	r0, r5
 800e586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e58e:	3301      	adds	r3, #1
 800e590:	e7c5      	b.n	800e51e <__lshift+0x4a>
 800e592:	3904      	subs	r1, #4
 800e594:	f853 2b04 	ldr.w	r2, [r3], #4
 800e598:	f841 2f04 	str.w	r2, [r1, #4]!
 800e59c:	459c      	cmp	ip, r3
 800e59e:	d8f9      	bhi.n	800e594 <__lshift+0xc0>
 800e5a0:	e7ea      	b.n	800e578 <__lshift+0xa4>
 800e5a2:	bf00      	nop
 800e5a4:	0800f398 	.word	0x0800f398
 800e5a8:	0800f3a9 	.word	0x0800f3a9

0800e5ac <__mcmp>:
 800e5ac:	b530      	push	{r4, r5, lr}
 800e5ae:	6902      	ldr	r2, [r0, #16]
 800e5b0:	690c      	ldr	r4, [r1, #16]
 800e5b2:	1b12      	subs	r2, r2, r4
 800e5b4:	d10e      	bne.n	800e5d4 <__mcmp+0x28>
 800e5b6:	f100 0314 	add.w	r3, r0, #20
 800e5ba:	3114      	adds	r1, #20
 800e5bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5cc:	42a5      	cmp	r5, r4
 800e5ce:	d003      	beq.n	800e5d8 <__mcmp+0x2c>
 800e5d0:	d305      	bcc.n	800e5de <__mcmp+0x32>
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	bd30      	pop	{r4, r5, pc}
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	d3f3      	bcc.n	800e5c4 <__mcmp+0x18>
 800e5dc:	e7fa      	b.n	800e5d4 <__mcmp+0x28>
 800e5de:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e2:	e7f7      	b.n	800e5d4 <__mcmp+0x28>

0800e5e4 <__mdiff>:
 800e5e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	4690      	mov	r8, r2
 800e5f2:	f7ff ffdb 	bl	800e5ac <__mcmp>
 800e5f6:	1e05      	subs	r5, r0, #0
 800e5f8:	d110      	bne.n	800e61c <__mdiff+0x38>
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff fd59 	bl	800e0b4 <_Balloc>
 800e602:	b930      	cbnz	r0, 800e612 <__mdiff+0x2e>
 800e604:	4b3a      	ldr	r3, [pc, #232]	; (800e6f0 <__mdiff+0x10c>)
 800e606:	4602      	mov	r2, r0
 800e608:	f240 2137 	movw	r1, #567	; 0x237
 800e60c:	4839      	ldr	r0, [pc, #228]	; (800e6f4 <__mdiff+0x110>)
 800e60e:	f000 fb53 	bl	800ecb8 <__assert_func>
 800e612:	2301      	movs	r3, #1
 800e614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61c:	bfa4      	itt	ge
 800e61e:	4643      	movge	r3, r8
 800e620:	46a0      	movge	r8, r4
 800e622:	4630      	mov	r0, r6
 800e624:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e628:	bfa6      	itte	ge
 800e62a:	461c      	movge	r4, r3
 800e62c:	2500      	movge	r5, #0
 800e62e:	2501      	movlt	r5, #1
 800e630:	f7ff fd40 	bl	800e0b4 <_Balloc>
 800e634:	b920      	cbnz	r0, 800e640 <__mdiff+0x5c>
 800e636:	4b2e      	ldr	r3, [pc, #184]	; (800e6f0 <__mdiff+0x10c>)
 800e638:	4602      	mov	r2, r0
 800e63a:	f240 2145 	movw	r1, #581	; 0x245
 800e63e:	e7e5      	b.n	800e60c <__mdiff+0x28>
 800e640:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e644:	6926      	ldr	r6, [r4, #16]
 800e646:	60c5      	str	r5, [r0, #12]
 800e648:	f104 0914 	add.w	r9, r4, #20
 800e64c:	f108 0514 	add.w	r5, r8, #20
 800e650:	f100 0e14 	add.w	lr, r0, #20
 800e654:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e658:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e65c:	f108 0210 	add.w	r2, r8, #16
 800e660:	46f2      	mov	sl, lr
 800e662:	2100      	movs	r1, #0
 800e664:	f859 3b04 	ldr.w	r3, [r9], #4
 800e668:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e66c:	fa11 f88b 	uxtah	r8, r1, fp
 800e670:	b299      	uxth	r1, r3
 800e672:	0c1b      	lsrs	r3, r3, #16
 800e674:	eba8 0801 	sub.w	r8, r8, r1
 800e678:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e67c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e680:	fa1f f888 	uxth.w	r8, r8
 800e684:	1419      	asrs	r1, r3, #16
 800e686:	454e      	cmp	r6, r9
 800e688:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e68c:	f84a 3b04 	str.w	r3, [sl], #4
 800e690:	d8e8      	bhi.n	800e664 <__mdiff+0x80>
 800e692:	1b33      	subs	r3, r6, r4
 800e694:	3b15      	subs	r3, #21
 800e696:	f023 0303 	bic.w	r3, r3, #3
 800e69a:	3304      	adds	r3, #4
 800e69c:	3415      	adds	r4, #21
 800e69e:	42a6      	cmp	r6, r4
 800e6a0:	bf38      	it	cc
 800e6a2:	2304      	movcc	r3, #4
 800e6a4:	441d      	add	r5, r3
 800e6a6:	4473      	add	r3, lr
 800e6a8:	469e      	mov	lr, r3
 800e6aa:	462e      	mov	r6, r5
 800e6ac:	4566      	cmp	r6, ip
 800e6ae:	d30e      	bcc.n	800e6ce <__mdiff+0xea>
 800e6b0:	f10c 0203 	add.w	r2, ip, #3
 800e6b4:	1b52      	subs	r2, r2, r5
 800e6b6:	f022 0203 	bic.w	r2, r2, #3
 800e6ba:	3d03      	subs	r5, #3
 800e6bc:	45ac      	cmp	ip, r5
 800e6be:	bf38      	it	cc
 800e6c0:	2200      	movcc	r2, #0
 800e6c2:	4413      	add	r3, r2
 800e6c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e6c8:	b17a      	cbz	r2, 800e6ea <__mdiff+0x106>
 800e6ca:	6107      	str	r7, [r0, #16]
 800e6cc:	e7a4      	b.n	800e618 <__mdiff+0x34>
 800e6ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6d2:	fa11 f288 	uxtah	r2, r1, r8
 800e6d6:	1414      	asrs	r4, r2, #16
 800e6d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6dc:	b292      	uxth	r2, r2
 800e6de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6e2:	f84e 2b04 	str.w	r2, [lr], #4
 800e6e6:	1421      	asrs	r1, r4, #16
 800e6e8:	e7e0      	b.n	800e6ac <__mdiff+0xc8>
 800e6ea:	3f01      	subs	r7, #1
 800e6ec:	e7ea      	b.n	800e6c4 <__mdiff+0xe0>
 800e6ee:	bf00      	nop
 800e6f0:	0800f398 	.word	0x0800f398
 800e6f4:	0800f3a9 	.word	0x0800f3a9

0800e6f8 <__d2b>:
 800e6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6fc:	460f      	mov	r7, r1
 800e6fe:	2101      	movs	r1, #1
 800e700:	ec59 8b10 	vmov	r8, r9, d0
 800e704:	4616      	mov	r6, r2
 800e706:	f7ff fcd5 	bl	800e0b4 <_Balloc>
 800e70a:	4604      	mov	r4, r0
 800e70c:	b930      	cbnz	r0, 800e71c <__d2b+0x24>
 800e70e:	4602      	mov	r2, r0
 800e710:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <__d2b+0xac>)
 800e712:	4825      	ldr	r0, [pc, #148]	; (800e7a8 <__d2b+0xb0>)
 800e714:	f240 310f 	movw	r1, #783	; 0x30f
 800e718:	f000 face 	bl	800ecb8 <__assert_func>
 800e71c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e724:	bb2d      	cbnz	r5, 800e772 <__d2b+0x7a>
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	f1b8 0300 	subs.w	r3, r8, #0
 800e72c:	d026      	beq.n	800e77c <__d2b+0x84>
 800e72e:	4668      	mov	r0, sp
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	f7ff fd87 	bl	800e244 <__lo0bits>
 800e736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e73a:	b1e8      	cbz	r0, 800e778 <__d2b+0x80>
 800e73c:	f1c0 0320 	rsb	r3, r0, #32
 800e740:	fa02 f303 	lsl.w	r3, r2, r3
 800e744:	430b      	orrs	r3, r1
 800e746:	40c2      	lsrs	r2, r0
 800e748:	6163      	str	r3, [r4, #20]
 800e74a:	9201      	str	r2, [sp, #4]
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	61a3      	str	r3, [r4, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	bf14      	ite	ne
 800e754:	2202      	movne	r2, #2
 800e756:	2201      	moveq	r2, #1
 800e758:	6122      	str	r2, [r4, #16]
 800e75a:	b1bd      	cbz	r5, 800e78c <__d2b+0x94>
 800e75c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e760:	4405      	add	r5, r0
 800e762:	603d      	str	r5, [r7, #0]
 800e764:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e768:	6030      	str	r0, [r6, #0]
 800e76a:	4620      	mov	r0, r4
 800e76c:	b003      	add	sp, #12
 800e76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e776:	e7d6      	b.n	800e726 <__d2b+0x2e>
 800e778:	6161      	str	r1, [r4, #20]
 800e77a:	e7e7      	b.n	800e74c <__d2b+0x54>
 800e77c:	a801      	add	r0, sp, #4
 800e77e:	f7ff fd61 	bl	800e244 <__lo0bits>
 800e782:	9b01      	ldr	r3, [sp, #4]
 800e784:	6163      	str	r3, [r4, #20]
 800e786:	3020      	adds	r0, #32
 800e788:	2201      	movs	r2, #1
 800e78a:	e7e5      	b.n	800e758 <__d2b+0x60>
 800e78c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e794:	6038      	str	r0, [r7, #0]
 800e796:	6918      	ldr	r0, [r3, #16]
 800e798:	f7ff fd34 	bl	800e204 <__hi0bits>
 800e79c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7a0:	e7e2      	b.n	800e768 <__d2b+0x70>
 800e7a2:	bf00      	nop
 800e7a4:	0800f398 	.word	0x0800f398
 800e7a8:	0800f3a9 	.word	0x0800f3a9

0800e7ac <__sfputc_r>:
 800e7ac:	6893      	ldr	r3, [r2, #8]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	b410      	push	{r4}
 800e7b4:	6093      	str	r3, [r2, #8]
 800e7b6:	da08      	bge.n	800e7ca <__sfputc_r+0x1e>
 800e7b8:	6994      	ldr	r4, [r2, #24]
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	db01      	blt.n	800e7c2 <__sfputc_r+0x16>
 800e7be:	290a      	cmp	r1, #10
 800e7c0:	d103      	bne.n	800e7ca <__sfputc_r+0x1e>
 800e7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c6:	f7fe bb82 	b.w	800cece <__swbuf_r>
 800e7ca:	6813      	ldr	r3, [r2, #0]
 800e7cc:	1c58      	adds	r0, r3, #1
 800e7ce:	6010      	str	r0, [r2, #0]
 800e7d0:	7019      	strb	r1, [r3, #0]
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7d8:	4770      	bx	lr

0800e7da <__sfputs_r>:
 800e7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7dc:	4606      	mov	r6, r0
 800e7de:	460f      	mov	r7, r1
 800e7e0:	4614      	mov	r4, r2
 800e7e2:	18d5      	adds	r5, r2, r3
 800e7e4:	42ac      	cmp	r4, r5
 800e7e6:	d101      	bne.n	800e7ec <__sfputs_r+0x12>
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e007      	b.n	800e7fc <__sfputs_r+0x22>
 800e7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f0:	463a      	mov	r2, r7
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f7ff ffda 	bl	800e7ac <__sfputc_r>
 800e7f8:	1c43      	adds	r3, r0, #1
 800e7fa:	d1f3      	bne.n	800e7e4 <__sfputs_r+0xa>
 800e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e800 <_vfiprintf_r>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	460d      	mov	r5, r1
 800e806:	b09d      	sub	sp, #116	; 0x74
 800e808:	4614      	mov	r4, r2
 800e80a:	4698      	mov	r8, r3
 800e80c:	4606      	mov	r6, r0
 800e80e:	b118      	cbz	r0, 800e818 <_vfiprintf_r+0x18>
 800e810:	6a03      	ldr	r3, [r0, #32]
 800e812:	b90b      	cbnz	r3, 800e818 <_vfiprintf_r+0x18>
 800e814:	f7fe fa74 	bl	800cd00 <__sinit>
 800e818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e81a:	07d9      	lsls	r1, r3, #31
 800e81c:	d405      	bmi.n	800e82a <_vfiprintf_r+0x2a>
 800e81e:	89ab      	ldrh	r3, [r5, #12]
 800e820:	059a      	lsls	r2, r3, #22
 800e822:	d402      	bmi.n	800e82a <_vfiprintf_r+0x2a>
 800e824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e826:	f7fe fcba 	bl	800d19e <__retarget_lock_acquire_recursive>
 800e82a:	89ab      	ldrh	r3, [r5, #12]
 800e82c:	071b      	lsls	r3, r3, #28
 800e82e:	d501      	bpl.n	800e834 <_vfiprintf_r+0x34>
 800e830:	692b      	ldr	r3, [r5, #16]
 800e832:	b99b      	cbnz	r3, 800e85c <_vfiprintf_r+0x5c>
 800e834:	4629      	mov	r1, r5
 800e836:	4630      	mov	r0, r6
 800e838:	f7fe fb86 	bl	800cf48 <__swsetup_r>
 800e83c:	b170      	cbz	r0, 800e85c <_vfiprintf_r+0x5c>
 800e83e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e840:	07dc      	lsls	r4, r3, #31
 800e842:	d504      	bpl.n	800e84e <_vfiprintf_r+0x4e>
 800e844:	f04f 30ff 	mov.w	r0, #4294967295
 800e848:	b01d      	add	sp, #116	; 0x74
 800e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84e:	89ab      	ldrh	r3, [r5, #12]
 800e850:	0598      	lsls	r0, r3, #22
 800e852:	d4f7      	bmi.n	800e844 <_vfiprintf_r+0x44>
 800e854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e856:	f7fe fca3 	bl	800d1a0 <__retarget_lock_release_recursive>
 800e85a:	e7f3      	b.n	800e844 <_vfiprintf_r+0x44>
 800e85c:	2300      	movs	r3, #0
 800e85e:	9309      	str	r3, [sp, #36]	; 0x24
 800e860:	2320      	movs	r3, #32
 800e862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e866:	f8cd 800c 	str.w	r8, [sp, #12]
 800e86a:	2330      	movs	r3, #48	; 0x30
 800e86c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ea20 <_vfiprintf_r+0x220>
 800e870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e874:	f04f 0901 	mov.w	r9, #1
 800e878:	4623      	mov	r3, r4
 800e87a:	469a      	mov	sl, r3
 800e87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e880:	b10a      	cbz	r2, 800e886 <_vfiprintf_r+0x86>
 800e882:	2a25      	cmp	r2, #37	; 0x25
 800e884:	d1f9      	bne.n	800e87a <_vfiprintf_r+0x7a>
 800e886:	ebba 0b04 	subs.w	fp, sl, r4
 800e88a:	d00b      	beq.n	800e8a4 <_vfiprintf_r+0xa4>
 800e88c:	465b      	mov	r3, fp
 800e88e:	4622      	mov	r2, r4
 800e890:	4629      	mov	r1, r5
 800e892:	4630      	mov	r0, r6
 800e894:	f7ff ffa1 	bl	800e7da <__sfputs_r>
 800e898:	3001      	adds	r0, #1
 800e89a:	f000 80a9 	beq.w	800e9f0 <_vfiprintf_r+0x1f0>
 800e89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8a0:	445a      	add	r2, fp
 800e8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 80a1 	beq.w	800e9f0 <_vfiprintf_r+0x1f0>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b8:	f10a 0a01 	add.w	sl, sl, #1
 800e8bc:	9304      	str	r3, [sp, #16]
 800e8be:	9307      	str	r3, [sp, #28]
 800e8c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e8c6:	4654      	mov	r4, sl
 800e8c8:	2205      	movs	r2, #5
 800e8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ce:	4854      	ldr	r0, [pc, #336]	; (800ea20 <_vfiprintf_r+0x220>)
 800e8d0:	f7f1 fc86 	bl	80001e0 <memchr>
 800e8d4:	9a04      	ldr	r2, [sp, #16]
 800e8d6:	b9d8      	cbnz	r0, 800e910 <_vfiprintf_r+0x110>
 800e8d8:	06d1      	lsls	r1, r2, #27
 800e8da:	bf44      	itt	mi
 800e8dc:	2320      	movmi	r3, #32
 800e8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8e2:	0713      	lsls	r3, r2, #28
 800e8e4:	bf44      	itt	mi
 800e8e6:	232b      	movmi	r3, #43	; 0x2b
 800e8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f2:	d015      	beq.n	800e920 <_vfiprintf_r+0x120>
 800e8f4:	9a07      	ldr	r2, [sp, #28]
 800e8f6:	4654      	mov	r4, sl
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f04f 0c0a 	mov.w	ip, #10
 800e8fe:	4621      	mov	r1, r4
 800e900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e904:	3b30      	subs	r3, #48	; 0x30
 800e906:	2b09      	cmp	r3, #9
 800e908:	d94d      	bls.n	800e9a6 <_vfiprintf_r+0x1a6>
 800e90a:	b1b0      	cbz	r0, 800e93a <_vfiprintf_r+0x13a>
 800e90c:	9207      	str	r2, [sp, #28]
 800e90e:	e014      	b.n	800e93a <_vfiprintf_r+0x13a>
 800e910:	eba0 0308 	sub.w	r3, r0, r8
 800e914:	fa09 f303 	lsl.w	r3, r9, r3
 800e918:	4313      	orrs	r3, r2
 800e91a:	9304      	str	r3, [sp, #16]
 800e91c:	46a2      	mov	sl, r4
 800e91e:	e7d2      	b.n	800e8c6 <_vfiprintf_r+0xc6>
 800e920:	9b03      	ldr	r3, [sp, #12]
 800e922:	1d19      	adds	r1, r3, #4
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	9103      	str	r1, [sp, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bfbb      	ittet	lt
 800e92c:	425b      	neglt	r3, r3
 800e92e:	f042 0202 	orrlt.w	r2, r2, #2
 800e932:	9307      	strge	r3, [sp, #28]
 800e934:	9307      	strlt	r3, [sp, #28]
 800e936:	bfb8      	it	lt
 800e938:	9204      	strlt	r2, [sp, #16]
 800e93a:	7823      	ldrb	r3, [r4, #0]
 800e93c:	2b2e      	cmp	r3, #46	; 0x2e
 800e93e:	d10c      	bne.n	800e95a <_vfiprintf_r+0x15a>
 800e940:	7863      	ldrb	r3, [r4, #1]
 800e942:	2b2a      	cmp	r3, #42	; 0x2a
 800e944:	d134      	bne.n	800e9b0 <_vfiprintf_r+0x1b0>
 800e946:	9b03      	ldr	r3, [sp, #12]
 800e948:	1d1a      	adds	r2, r3, #4
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	9203      	str	r2, [sp, #12]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	bfb8      	it	lt
 800e952:	f04f 33ff 	movlt.w	r3, #4294967295
 800e956:	3402      	adds	r4, #2
 800e958:	9305      	str	r3, [sp, #20]
 800e95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ea30 <_vfiprintf_r+0x230>
 800e95e:	7821      	ldrb	r1, [r4, #0]
 800e960:	2203      	movs	r2, #3
 800e962:	4650      	mov	r0, sl
 800e964:	f7f1 fc3c 	bl	80001e0 <memchr>
 800e968:	b138      	cbz	r0, 800e97a <_vfiprintf_r+0x17a>
 800e96a:	9b04      	ldr	r3, [sp, #16]
 800e96c:	eba0 000a 	sub.w	r0, r0, sl
 800e970:	2240      	movs	r2, #64	; 0x40
 800e972:	4082      	lsls	r2, r0
 800e974:	4313      	orrs	r3, r2
 800e976:	3401      	adds	r4, #1
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e97e:	4829      	ldr	r0, [pc, #164]	; (800ea24 <_vfiprintf_r+0x224>)
 800e980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e984:	2206      	movs	r2, #6
 800e986:	f7f1 fc2b 	bl	80001e0 <memchr>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d03f      	beq.n	800ea0e <_vfiprintf_r+0x20e>
 800e98e:	4b26      	ldr	r3, [pc, #152]	; (800ea28 <_vfiprintf_r+0x228>)
 800e990:	bb1b      	cbnz	r3, 800e9da <_vfiprintf_r+0x1da>
 800e992:	9b03      	ldr	r3, [sp, #12]
 800e994:	3307      	adds	r3, #7
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	3308      	adds	r3, #8
 800e99c:	9303      	str	r3, [sp, #12]
 800e99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a0:	443b      	add	r3, r7
 800e9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a4:	e768      	b.n	800e878 <_vfiprintf_r+0x78>
 800e9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	2001      	movs	r0, #1
 800e9ae:	e7a6      	b.n	800e8fe <_vfiprintf_r+0xfe>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	3401      	adds	r4, #1
 800e9b4:	9305      	str	r3, [sp, #20]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	f04f 0c0a 	mov.w	ip, #10
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9c2:	3a30      	subs	r2, #48	; 0x30
 800e9c4:	2a09      	cmp	r2, #9
 800e9c6:	d903      	bls.n	800e9d0 <_vfiprintf_r+0x1d0>
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0c6      	beq.n	800e95a <_vfiprintf_r+0x15a>
 800e9cc:	9105      	str	r1, [sp, #20]
 800e9ce:	e7c4      	b.n	800e95a <_vfiprintf_r+0x15a>
 800e9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e7f0      	b.n	800e9bc <_vfiprintf_r+0x1bc>
 800e9da:	ab03      	add	r3, sp, #12
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4b12      	ldr	r3, [pc, #72]	; (800ea2c <_vfiprintf_r+0x22c>)
 800e9e2:	a904      	add	r1, sp, #16
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f7fd fd39 	bl	800c45c <_printf_float>
 800e9ea:	4607      	mov	r7, r0
 800e9ec:	1c78      	adds	r0, r7, #1
 800e9ee:	d1d6      	bne.n	800e99e <_vfiprintf_r+0x19e>
 800e9f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f2:	07d9      	lsls	r1, r3, #31
 800e9f4:	d405      	bmi.n	800ea02 <_vfiprintf_r+0x202>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	059a      	lsls	r2, r3, #22
 800e9fa:	d402      	bmi.n	800ea02 <_vfiprintf_r+0x202>
 800e9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9fe:	f7fe fbcf 	bl	800d1a0 <__retarget_lock_release_recursive>
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	065b      	lsls	r3, r3, #25
 800ea06:	f53f af1d 	bmi.w	800e844 <_vfiprintf_r+0x44>
 800ea0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea0c:	e71c      	b.n	800e848 <_vfiprintf_r+0x48>
 800ea0e:	ab03      	add	r3, sp, #12
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	462a      	mov	r2, r5
 800ea14:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <_vfiprintf_r+0x22c>)
 800ea16:	a904      	add	r1, sp, #16
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f7fd ffc3 	bl	800c9a4 <_printf_i>
 800ea1e:	e7e4      	b.n	800e9ea <_vfiprintf_r+0x1ea>
 800ea20:	0800f504 	.word	0x0800f504
 800ea24:	0800f50e 	.word	0x0800f50e
 800ea28:	0800c45d 	.word	0x0800c45d
 800ea2c:	0800e7db 	.word	0x0800e7db
 800ea30:	0800f50a 	.word	0x0800f50a

0800ea34 <__sflush_r>:
 800ea34:	898a      	ldrh	r2, [r1, #12]
 800ea36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	0710      	lsls	r0, r2, #28
 800ea3e:	460c      	mov	r4, r1
 800ea40:	d458      	bmi.n	800eaf4 <__sflush_r+0xc0>
 800ea42:	684b      	ldr	r3, [r1, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	dc05      	bgt.n	800ea54 <__sflush_r+0x20>
 800ea48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	dc02      	bgt.n	800ea54 <__sflush_r+0x20>
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	d0f9      	beq.n	800ea4e <__sflush_r+0x1a>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea60:	682f      	ldr	r7, [r5, #0]
 800ea62:	6a21      	ldr	r1, [r4, #32]
 800ea64:	602b      	str	r3, [r5, #0]
 800ea66:	d032      	beq.n	800eace <__sflush_r+0x9a>
 800ea68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	075a      	lsls	r2, r3, #29
 800ea6e:	d505      	bpl.n	800ea7c <__sflush_r+0x48>
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	1ac0      	subs	r0, r0, r3
 800ea74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea76:	b10b      	cbz	r3, 800ea7c <__sflush_r+0x48>
 800ea78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea7a:	1ac0      	subs	r0, r0, r3
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4602      	mov	r2, r0
 800ea80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea82:	6a21      	ldr	r1, [r4, #32]
 800ea84:	4628      	mov	r0, r5
 800ea86:	47b0      	blx	r6
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	d106      	bne.n	800ea9c <__sflush_r+0x68>
 800ea8e:	6829      	ldr	r1, [r5, #0]
 800ea90:	291d      	cmp	r1, #29
 800ea92:	d82b      	bhi.n	800eaec <__sflush_r+0xb8>
 800ea94:	4a29      	ldr	r2, [pc, #164]	; (800eb3c <__sflush_r+0x108>)
 800ea96:	410a      	asrs	r2, r1
 800ea98:	07d6      	lsls	r6, r2, #31
 800ea9a:	d427      	bmi.n	800eaec <__sflush_r+0xb8>
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	6062      	str	r2, [r4, #4]
 800eaa0:	04d9      	lsls	r1, r3, #19
 800eaa2:	6922      	ldr	r2, [r4, #16]
 800eaa4:	6022      	str	r2, [r4, #0]
 800eaa6:	d504      	bpl.n	800eab2 <__sflush_r+0x7e>
 800eaa8:	1c42      	adds	r2, r0, #1
 800eaaa:	d101      	bne.n	800eab0 <__sflush_r+0x7c>
 800eaac:	682b      	ldr	r3, [r5, #0]
 800eaae:	b903      	cbnz	r3, 800eab2 <__sflush_r+0x7e>
 800eab0:	6560      	str	r0, [r4, #84]	; 0x54
 800eab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eab4:	602f      	str	r7, [r5, #0]
 800eab6:	2900      	cmp	r1, #0
 800eab8:	d0c9      	beq.n	800ea4e <__sflush_r+0x1a>
 800eaba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eabe:	4299      	cmp	r1, r3
 800eac0:	d002      	beq.n	800eac8 <__sflush_r+0x94>
 800eac2:	4628      	mov	r0, r5
 800eac4:	f7ff f9f6 	bl	800deb4 <_free_r>
 800eac8:	2000      	movs	r0, #0
 800eaca:	6360      	str	r0, [r4, #52]	; 0x34
 800eacc:	e7c0      	b.n	800ea50 <__sflush_r+0x1c>
 800eace:	2301      	movs	r3, #1
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b0      	blx	r6
 800ead4:	1c41      	adds	r1, r0, #1
 800ead6:	d1c8      	bne.n	800ea6a <__sflush_r+0x36>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0c5      	beq.n	800ea6a <__sflush_r+0x36>
 800eade:	2b1d      	cmp	r3, #29
 800eae0:	d001      	beq.n	800eae6 <__sflush_r+0xb2>
 800eae2:	2b16      	cmp	r3, #22
 800eae4:	d101      	bne.n	800eaea <__sflush_r+0xb6>
 800eae6:	602f      	str	r7, [r5, #0]
 800eae8:	e7b1      	b.n	800ea4e <__sflush_r+0x1a>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf0:	81a3      	strh	r3, [r4, #12]
 800eaf2:	e7ad      	b.n	800ea50 <__sflush_r+0x1c>
 800eaf4:	690f      	ldr	r7, [r1, #16]
 800eaf6:	2f00      	cmp	r7, #0
 800eaf8:	d0a9      	beq.n	800ea4e <__sflush_r+0x1a>
 800eafa:	0793      	lsls	r3, r2, #30
 800eafc:	680e      	ldr	r6, [r1, #0]
 800eafe:	bf08      	it	eq
 800eb00:	694b      	ldreq	r3, [r1, #20]
 800eb02:	600f      	str	r7, [r1, #0]
 800eb04:	bf18      	it	ne
 800eb06:	2300      	movne	r3, #0
 800eb08:	eba6 0807 	sub.w	r8, r6, r7
 800eb0c:	608b      	str	r3, [r1, #8]
 800eb0e:	f1b8 0f00 	cmp.w	r8, #0
 800eb12:	dd9c      	ble.n	800ea4e <__sflush_r+0x1a>
 800eb14:	6a21      	ldr	r1, [r4, #32]
 800eb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb18:	4643      	mov	r3, r8
 800eb1a:	463a      	mov	r2, r7
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	47b0      	blx	r6
 800eb20:	2800      	cmp	r0, #0
 800eb22:	dc06      	bgt.n	800eb32 <__sflush_r+0xfe>
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb2a:	81a3      	strh	r3, [r4, #12]
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb30:	e78e      	b.n	800ea50 <__sflush_r+0x1c>
 800eb32:	4407      	add	r7, r0
 800eb34:	eba8 0800 	sub.w	r8, r8, r0
 800eb38:	e7e9      	b.n	800eb0e <__sflush_r+0xda>
 800eb3a:	bf00      	nop
 800eb3c:	dfbffffe 	.word	0xdfbffffe

0800eb40 <_fflush_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	690b      	ldr	r3, [r1, #16]
 800eb44:	4605      	mov	r5, r0
 800eb46:	460c      	mov	r4, r1
 800eb48:	b913      	cbnz	r3, 800eb50 <_fflush_r+0x10>
 800eb4a:	2500      	movs	r5, #0
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	b118      	cbz	r0, 800eb5a <_fflush_r+0x1a>
 800eb52:	6a03      	ldr	r3, [r0, #32]
 800eb54:	b90b      	cbnz	r3, 800eb5a <_fflush_r+0x1a>
 800eb56:	f7fe f8d3 	bl	800cd00 <__sinit>
 800eb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0f3      	beq.n	800eb4a <_fflush_r+0xa>
 800eb62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb64:	07d0      	lsls	r0, r2, #31
 800eb66:	d404      	bmi.n	800eb72 <_fflush_r+0x32>
 800eb68:	0599      	lsls	r1, r3, #22
 800eb6a:	d402      	bmi.n	800eb72 <_fflush_r+0x32>
 800eb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb6e:	f7fe fb16 	bl	800d19e <__retarget_lock_acquire_recursive>
 800eb72:	4628      	mov	r0, r5
 800eb74:	4621      	mov	r1, r4
 800eb76:	f7ff ff5d 	bl	800ea34 <__sflush_r>
 800eb7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb7c:	07da      	lsls	r2, r3, #31
 800eb7e:	4605      	mov	r5, r0
 800eb80:	d4e4      	bmi.n	800eb4c <_fflush_r+0xc>
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	059b      	lsls	r3, r3, #22
 800eb86:	d4e1      	bmi.n	800eb4c <_fflush_r+0xc>
 800eb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb8a:	f7fe fb09 	bl	800d1a0 <__retarget_lock_release_recursive>
 800eb8e:	e7dd      	b.n	800eb4c <_fflush_r+0xc>

0800eb90 <__swhatbuf_r>:
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	b096      	sub	sp, #88	; 0x58
 800eb9c:	4615      	mov	r5, r2
 800eb9e:	461e      	mov	r6, r3
 800eba0:	da0d      	bge.n	800ebbe <__swhatbuf_r+0x2e>
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eba8:	f04f 0100 	mov.w	r1, #0
 800ebac:	bf0c      	ite	eq
 800ebae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ebb2:	2340      	movne	r3, #64	; 0x40
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	6031      	str	r1, [r6, #0]
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	b016      	add	sp, #88	; 0x58
 800ebbc:	bd70      	pop	{r4, r5, r6, pc}
 800ebbe:	466a      	mov	r2, sp
 800ebc0:	f000 f848 	bl	800ec54 <_fstat_r>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	dbec      	blt.n	800eba2 <__swhatbuf_r+0x12>
 800ebc8:	9901      	ldr	r1, [sp, #4]
 800ebca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ebce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ebd2:	4259      	negs	r1, r3
 800ebd4:	4159      	adcs	r1, r3
 800ebd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebda:	e7eb      	b.n	800ebb4 <__swhatbuf_r+0x24>

0800ebdc <__smakebuf_r>:
 800ebdc:	898b      	ldrh	r3, [r1, #12]
 800ebde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebe0:	079d      	lsls	r5, r3, #30
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	d507      	bpl.n	800ebf8 <__smakebuf_r+0x1c>
 800ebe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	6123      	str	r3, [r4, #16]
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	6163      	str	r3, [r4, #20]
 800ebf4:	b002      	add	sp, #8
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	ab01      	add	r3, sp, #4
 800ebfa:	466a      	mov	r2, sp
 800ebfc:	f7ff ffc8 	bl	800eb90 <__swhatbuf_r>
 800ec00:	9900      	ldr	r1, [sp, #0]
 800ec02:	4605      	mov	r5, r0
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff f9c9 	bl	800df9c <_malloc_r>
 800ec0a:	b948      	cbnz	r0, 800ec20 <__smakebuf_r+0x44>
 800ec0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec10:	059a      	lsls	r2, r3, #22
 800ec12:	d4ef      	bmi.n	800ebf4 <__smakebuf_r+0x18>
 800ec14:	f023 0303 	bic.w	r3, r3, #3
 800ec18:	f043 0302 	orr.w	r3, r3, #2
 800ec1c:	81a3      	strh	r3, [r4, #12]
 800ec1e:	e7e3      	b.n	800ebe8 <__smakebuf_r+0xc>
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	6020      	str	r0, [r4, #0]
 800ec24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec28:	81a3      	strh	r3, [r4, #12]
 800ec2a:	9b00      	ldr	r3, [sp, #0]
 800ec2c:	6163      	str	r3, [r4, #20]
 800ec2e:	9b01      	ldr	r3, [sp, #4]
 800ec30:	6120      	str	r0, [r4, #16]
 800ec32:	b15b      	cbz	r3, 800ec4c <__smakebuf_r+0x70>
 800ec34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f000 f81d 	bl	800ec78 <_isatty_r>
 800ec3e:	b128      	cbz	r0, 800ec4c <__smakebuf_r+0x70>
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	f023 0303 	bic.w	r3, r3, #3
 800ec46:	f043 0301 	orr.w	r3, r3, #1
 800ec4a:	81a3      	strh	r3, [r4, #12]
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	431d      	orrs	r5, r3
 800ec50:	81a5      	strh	r5, [r4, #12]
 800ec52:	e7cf      	b.n	800ebf4 <__smakebuf_r+0x18>

0800ec54 <_fstat_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	; (800ec74 <_fstat_r+0x20>)
 800ec58:	2300      	movs	r3, #0
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	4611      	mov	r1, r2
 800ec60:	602b      	str	r3, [r5, #0]
 800ec62:	f7f2 ff3a 	bl	8001ada <_fstat>
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	d102      	bne.n	800ec70 <_fstat_r+0x1c>
 800ec6a:	682b      	ldr	r3, [r5, #0]
 800ec6c:	b103      	cbz	r3, 800ec70 <_fstat_r+0x1c>
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	bd38      	pop	{r3, r4, r5, pc}
 800ec72:	bf00      	nop
 800ec74:	20002a14 	.word	0x20002a14

0800ec78 <_isatty_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d06      	ldr	r5, [pc, #24]	; (800ec94 <_isatty_r+0x1c>)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	f7f2 ff39 	bl	8001afa <_isatty>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_isatty_r+0x1a>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_isatty_r+0x1a>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	20002a14 	.word	0x20002a14

0800ec98 <_sbrk_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	4d06      	ldr	r5, [pc, #24]	; (800ecb4 <_sbrk_r+0x1c>)
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	4604      	mov	r4, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	602b      	str	r3, [r5, #0]
 800eca4:	f7f2 ff42 	bl	8001b2c <_sbrk>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	d102      	bne.n	800ecb2 <_sbrk_r+0x1a>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	b103      	cbz	r3, 800ecb2 <_sbrk_r+0x1a>
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	bd38      	pop	{r3, r4, r5, pc}
 800ecb4:	20002a14 	.word	0x20002a14

0800ecb8 <__assert_func>:
 800ecb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecba:	4614      	mov	r4, r2
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <__assert_func+0x2c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	68d8      	ldr	r0, [r3, #12]
 800ecc6:	b14c      	cbz	r4, 800ecdc <__assert_func+0x24>
 800ecc8:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <__assert_func+0x30>)
 800ecca:	9100      	str	r1, [sp, #0]
 800eccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecd0:	4906      	ldr	r1, [pc, #24]	; (800ecec <__assert_func+0x34>)
 800ecd2:	462b      	mov	r3, r5
 800ecd4:	f000 f844 	bl	800ed60 <fiprintf>
 800ecd8:	f000 f854 	bl	800ed84 <abort>
 800ecdc:	4b04      	ldr	r3, [pc, #16]	; (800ecf0 <__assert_func+0x38>)
 800ecde:	461c      	mov	r4, r3
 800ece0:	e7f3      	b.n	800ecca <__assert_func+0x12>
 800ece2:	bf00      	nop
 800ece4:	200000f4 	.word	0x200000f4
 800ece8:	0800f51f 	.word	0x0800f51f
 800ecec:	0800f52c 	.word	0x0800f52c
 800ecf0:	0800f55a 	.word	0x0800f55a

0800ecf4 <_calloc_r>:
 800ecf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecf6:	fba1 2402 	umull	r2, r4, r1, r2
 800ecfa:	b94c      	cbnz	r4, 800ed10 <_calloc_r+0x1c>
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	9201      	str	r2, [sp, #4]
 800ed00:	f7ff f94c 	bl	800df9c <_malloc_r>
 800ed04:	9a01      	ldr	r2, [sp, #4]
 800ed06:	4605      	mov	r5, r0
 800ed08:	b930      	cbnz	r0, 800ed18 <_calloc_r+0x24>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	b003      	add	sp, #12
 800ed0e:	bd30      	pop	{r4, r5, pc}
 800ed10:	220c      	movs	r2, #12
 800ed12:	6002      	str	r2, [r0, #0]
 800ed14:	2500      	movs	r5, #0
 800ed16:	e7f8      	b.n	800ed0a <_calloc_r+0x16>
 800ed18:	4621      	mov	r1, r4
 800ed1a:	f7fe f96d 	bl	800cff8 <memset>
 800ed1e:	e7f4      	b.n	800ed0a <_calloc_r+0x16>

0800ed20 <__ascii_mbtowc>:
 800ed20:	b082      	sub	sp, #8
 800ed22:	b901      	cbnz	r1, 800ed26 <__ascii_mbtowc+0x6>
 800ed24:	a901      	add	r1, sp, #4
 800ed26:	b142      	cbz	r2, 800ed3a <__ascii_mbtowc+0x1a>
 800ed28:	b14b      	cbz	r3, 800ed3e <__ascii_mbtowc+0x1e>
 800ed2a:	7813      	ldrb	r3, [r2, #0]
 800ed2c:	600b      	str	r3, [r1, #0]
 800ed2e:	7812      	ldrb	r2, [r2, #0]
 800ed30:	1e10      	subs	r0, r2, #0
 800ed32:	bf18      	it	ne
 800ed34:	2001      	movne	r0, #1
 800ed36:	b002      	add	sp, #8
 800ed38:	4770      	bx	lr
 800ed3a:	4610      	mov	r0, r2
 800ed3c:	e7fb      	b.n	800ed36 <__ascii_mbtowc+0x16>
 800ed3e:	f06f 0001 	mvn.w	r0, #1
 800ed42:	e7f8      	b.n	800ed36 <__ascii_mbtowc+0x16>

0800ed44 <__ascii_wctomb>:
 800ed44:	b149      	cbz	r1, 800ed5a <__ascii_wctomb+0x16>
 800ed46:	2aff      	cmp	r2, #255	; 0xff
 800ed48:	bf85      	ittet	hi
 800ed4a:	238a      	movhi	r3, #138	; 0x8a
 800ed4c:	6003      	strhi	r3, [r0, #0]
 800ed4e:	700a      	strbls	r2, [r1, #0]
 800ed50:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed54:	bf98      	it	ls
 800ed56:	2001      	movls	r0, #1
 800ed58:	4770      	bx	lr
 800ed5a:	4608      	mov	r0, r1
 800ed5c:	4770      	bx	lr
	...

0800ed60 <fiprintf>:
 800ed60:	b40e      	push	{r1, r2, r3}
 800ed62:	b503      	push	{r0, r1, lr}
 800ed64:	4601      	mov	r1, r0
 800ed66:	ab03      	add	r3, sp, #12
 800ed68:	4805      	ldr	r0, [pc, #20]	; (800ed80 <fiprintf+0x20>)
 800ed6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6e:	6800      	ldr	r0, [r0, #0]
 800ed70:	9301      	str	r3, [sp, #4]
 800ed72:	f7ff fd45 	bl	800e800 <_vfiprintf_r>
 800ed76:	b002      	add	sp, #8
 800ed78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed7c:	b003      	add	sp, #12
 800ed7e:	4770      	bx	lr
 800ed80:	200000f4 	.word	0x200000f4

0800ed84 <abort>:
 800ed84:	b508      	push	{r3, lr}
 800ed86:	2006      	movs	r0, #6
 800ed88:	f000 f82c 	bl	800ede4 <raise>
 800ed8c:	2001      	movs	r0, #1
 800ed8e:	f7f2 fe55 	bl	8001a3c <_exit>

0800ed92 <_raise_r>:
 800ed92:	291f      	cmp	r1, #31
 800ed94:	b538      	push	{r3, r4, r5, lr}
 800ed96:	4604      	mov	r4, r0
 800ed98:	460d      	mov	r5, r1
 800ed9a:	d904      	bls.n	800eda6 <_raise_r+0x14>
 800ed9c:	2316      	movs	r3, #22
 800ed9e:	6003      	str	r3, [r0, #0]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eda8:	b112      	cbz	r2, 800edb0 <_raise_r+0x1e>
 800edaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edae:	b94b      	cbnz	r3, 800edc4 <_raise_r+0x32>
 800edb0:	4620      	mov	r0, r4
 800edb2:	f000 f831 	bl	800ee18 <_getpid_r>
 800edb6:	462a      	mov	r2, r5
 800edb8:	4601      	mov	r1, r0
 800edba:	4620      	mov	r0, r4
 800edbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edc0:	f000 b818 	b.w	800edf4 <_kill_r>
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d00a      	beq.n	800edde <_raise_r+0x4c>
 800edc8:	1c59      	adds	r1, r3, #1
 800edca:	d103      	bne.n	800edd4 <_raise_r+0x42>
 800edcc:	2316      	movs	r3, #22
 800edce:	6003      	str	r3, [r0, #0]
 800edd0:	2001      	movs	r0, #1
 800edd2:	e7e7      	b.n	800eda4 <_raise_r+0x12>
 800edd4:	2400      	movs	r4, #0
 800edd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edda:	4628      	mov	r0, r5
 800eddc:	4798      	blx	r3
 800edde:	2000      	movs	r0, #0
 800ede0:	e7e0      	b.n	800eda4 <_raise_r+0x12>
	...

0800ede4 <raise>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	; (800edf0 <raise+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f7ff bfd2 	b.w	800ed92 <_raise_r>
 800edee:	bf00      	nop
 800edf0:	200000f4 	.word	0x200000f4

0800edf4 <_kill_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4d07      	ldr	r5, [pc, #28]	; (800ee14 <_kill_r+0x20>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	4611      	mov	r1, r2
 800ee00:	602b      	str	r3, [r5, #0]
 800ee02:	f7f2 fe0b 	bl	8001a1c <_kill>
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	d102      	bne.n	800ee10 <_kill_r+0x1c>
 800ee0a:	682b      	ldr	r3, [r5, #0]
 800ee0c:	b103      	cbz	r3, 800ee10 <_kill_r+0x1c>
 800ee0e:	6023      	str	r3, [r4, #0]
 800ee10:	bd38      	pop	{r3, r4, r5, pc}
 800ee12:	bf00      	nop
 800ee14:	20002a14 	.word	0x20002a14

0800ee18 <_getpid_r>:
 800ee18:	f7f2 bdf8 	b.w	8001a0c <_getpid>

0800ee1c <_init>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	bf00      	nop
 800ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee22:	bc08      	pop	{r3}
 800ee24:	469e      	mov	lr, r3
 800ee26:	4770      	bx	lr

0800ee28 <_fini>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	bf00      	nop
 800ee2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2e:	bc08      	pop	{r3}
 800ee30:	469e      	mov	lr, r3
 800ee32:	4770      	bx	lr
