
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca64  0800ca64  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca64  0800ca64  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca64  0800ca64  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca64  0800ca64  0001ca64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800ca6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          00002754  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000283c  2000283c  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fb71  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000491e  00000000  00000000  0003fd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001798  00000000  00000000  00044630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001238  00000000  00000000  00045dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ae  00000000  00000000  00047000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002017f  00000000  00000000  0006c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7790  00000000  00000000  0008c62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006820  00000000  00000000  00163dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c558 	.word	0x0800c558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	0800c558 	.word	0x0800c558

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <MX_FREERTOS_Init+0x6c>)
 8000286:	f008 f8f7 	bl	8008478 <osMutexNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <MX_FREERTOS_Init+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <MX_FREERTOS_Init+0x74>)
 8000292:	2100      	movs	r1, #0
 8000294:	4818      	ldr	r0, [pc, #96]	; (80002f8 <MX_FREERTOS_Init+0x78>)
 8000296:	f007 fe67 	bl	8007f68 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_FREERTOS_Init+0x7c>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <MX_FREERTOS_Init+0x80>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_FREERTOS_Init+0x84>)
 80002a6:	f007 fe5f 	bl	8007f68 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MX_FREERTOS_Init+0x88>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <MX_FREERTOS_Init+0x8c>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4816      	ldr	r0, [pc, #88]	; (8000310 <MX_FREERTOS_Init+0x90>)
 80002b6:	f007 fe57 	bl	8007f68 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <MX_FREERTOS_Init+0x94>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_FREERTOS_Init+0x98>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_FREERTOS_Init+0x9c>)
 80002c6:	f007 fe4f 	bl	8007f68 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <MX_FREERTOS_Init+0xa0>)
 80002ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <MX_FREERTOS_Init+0xa4>)
 80002d2:	f007 ffaf 	bl	8008234 <osEventFlagsNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_FREERTOS_Init+0xa8>)
 80002da:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_FREERTOS_Init+0xac>)
 80002de:	f007 ffa9 	bl	8008234 <osEventFlagsNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_FREERTOS_Init+0xb0>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	0800c9c8 	.word	0x0800c9c8
 80002f0:	20000114 	.word	0x20000114
 80002f4:	0800c938 	.word	0x0800c938
 80002f8:	08000335 	.word	0x08000335
 80002fc:	20000104 	.word	0x20000104
 8000300:	0800c95c 	.word	0x0800c95c
 8000304:	08000381 	.word	0x08000381
 8000308:	20000108 	.word	0x20000108
 800030c:	0800c980 	.word	0x0800c980
 8000310:	08000441 	.word	0x08000441
 8000314:	2000010c 	.word	0x2000010c
 8000318:	0800c9a4 	.word	0x0800c9a4
 800031c:	080004f5 	.word	0x080004f5
 8000320:	20000110 	.word	0x20000110
 8000324:	0800c9d8 	.word	0x0800c9d8
 8000328:	20000118 	.word	0x20000118
 800032c:	0800c9e8 	.word	0x0800c9e8
 8000330:	2000011c 	.word	0x2000011c

08000334 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <DefaultTask+0x3c>)
 800033e:	f001 fe69 	bl	8002014 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <DefaultTask+0x40>)
 8000344:	f001 fe80 	bl	8002048 <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask is Running\n");
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <DefaultTask+0x44>)
 800034a:	f00b fa37 	bl	800b7bc <puts>
	  osThreadSuspend(Automatic_ParkingHandle);
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <DefaultTask+0x48>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f007 fed8 	bl	8008108 <osThreadSuspend>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 8000358:	f007 feb0 	bl	80080bc <osThreadGetId>
 800035c:	4603      	mov	r3, r0
 800035e:	4618      	mov	r0, r3
 8000360:	f007 fed2 	bl	8008108 <osThreadSuspend>
    osDelay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f007 ff36 	bl	80081d8 <osDelay>
	  printf("DefaultTask is Running\n");
 800036c:	e7ec      	b.n	8000348 <DefaultTask+0x14>
 800036e:	bf00      	nop
 8000370:	20000058 	.word	0x20000058
 8000374:	20000048 	.word	0x20000048
 8000378:	0800c5e0 	.word	0x0800c5e0
 800037c:	20000110 	.word	0x20000110

08000380 <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT))
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <RTOS_Ultrasonics_Read+0x90>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f008 f83f 	bl	8008410 <osEventFlagsGet>
 8000392:	4603      	mov	r3, r0
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10c      	bne.n	80003b6 <RTOS_Ultrasonics_Read+0x36>
	  {
		  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 800039c:	481d      	ldr	r0, [pc, #116]	; (8000414 <RTOS_Ultrasonics_Read+0x94>)
 800039e:	f002 f9eb 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003a2:	481d      	ldr	r0, [pc, #116]	; (8000418 <RTOS_Ultrasonics_Read+0x98>)
 80003a4:	f002 f9e8 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003a8:	481c      	ldr	r0, [pc, #112]	; (800041c <RTOS_Ultrasonics_Read+0x9c>)
 80003aa:	f002 f9e5 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 80003ae:	481c      	ldr	r0, [pc, #112]	; (8000420 <RTOS_Ultrasonics_Read+0xa0>)
 80003b0:	f002 f9e2 	bl	8002778 <ECU_Ultrasonic_Read>
 80003b4:	e010      	b.n	80003d8 <RTOS_Ultrasonics_Read+0x58>
	  }
	  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) || (STD_ACTIVE << PARKING_SIDE_BIT))
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <RTOS_Ultrasonics_Read+0x90>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f008 f828 	bl	8008410 <osEventFlagsGet>
	  {
		  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 80003c0:	4818      	ldr	r0, [pc, #96]	; (8000424 <RTOS_Ultrasonics_Read+0xa4>)
 80003c2:	f002 f9d9 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003c6:	4814      	ldr	r0, [pc, #80]	; (8000418 <RTOS_Ultrasonics_Read+0x98>)
 80003c8:	f002 f9d6 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003cc:	4813      	ldr	r0, [pc, #76]	; (800041c <RTOS_Ultrasonics_Read+0x9c>)
 80003ce:	f002 f9d3 	bl	8002778 <ECU_Ultrasonic_Read>
		  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 80003d2:	4815      	ldr	r0, [pc, #84]	; (8000428 <RTOS_Ultrasonics_Read+0xa8>)
 80003d4:	f002 f9d0 	bl	8002778 <ECU_Ultrasonic_Read>
	  }

	  printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <RTOS_Ultrasonics_Read+0xac>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	4814      	ldr	r0, [pc, #80]	; (8000430 <RTOS_Ultrasonics_Read+0xb0>)
 80003e0:	f00b f986 	bl	800b6f0 <iprintf>
	  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <RTOS_Ultrasonics_Read+0xac>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4619      	mov	r1, r3
 80003ea:	4812      	ldr	r0, [pc, #72]	; (8000434 <RTOS_Ultrasonics_Read+0xb4>)
 80003ec:	f00b f980 	bl	800b6f0 <iprintf>
	  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <RTOS_Ultrasonics_Read+0xac>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4619      	mov	r1, r3
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <RTOS_Ultrasonics_Read+0xb8>)
 80003f8:	f00b f97a 	bl	800b6f0 <iprintf>
	  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
	  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
	  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <RTOS_Ultrasonics_Read+0xac>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4619      	mov	r1, r3
 8000402:	480e      	ldr	r0, [pc, #56]	; (800043c <RTOS_Ultrasonics_Read+0xbc>)
 8000404:	f00b f974 	bl	800b6f0 <iprintf>

    osDelay(90);
 8000408:	205a      	movs	r0, #90	; 0x5a
 800040a:	f007 fee5 	bl	80081d8 <osDelay>
	  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT))
 800040e:	e7bb      	b.n	8000388 <RTOS_Ultrasonics_Read+0x8>
 8000410:	20000118 	.word	0x20000118
 8000414:	20000018 	.word	0x20000018
 8000418:	20000000 	.word	0x20000000
 800041c:	2000003c 	.word	0x2000003c
 8000420:	2000000c 	.word	0x2000000c
 8000424:	20000030 	.word	0x20000030
 8000428:	20000024 	.word	0x20000024
 800042c:	20000498 	.word	0x20000498
 8000430:	0800c5f8 	.word	0x0800c5f8
 8000434:	0800c61c 	.word	0x0800c61c
 8000438:	0800c644 	.word	0x0800c644
 800043c:	0800c66c 	.word	0x0800c66c

08000440 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <RTOS_Car_Next_Step+0x9c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b57      	cmp	r3, #87	; 0x57
 800044e:	d116      	bne.n	800047e <RTOS_Car_Next_Step+0x3e>
		  //osMutexAcquire(Car_Conrol_ModeHandle, 10U);
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <RTOS_Car_Next_Step+0xa0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f007 ff3e 	bl	80082d8 <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <RTOS_Car_Next_Step+0xa0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f007 ff90 	bl	8008388 <osEventFlagsClear>
		  osThreadResume(Automatic_ParkingHandle);
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <RTOS_Car_Next_Step+0xa4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f007 fe7f 	bl	8008170 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 8000472:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <RTOS_Car_Next_Step+0xa8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f007 fe46 	bl	8008108 <osThreadSuspend>
 800047c:	e019      	b.n	80004b2 <RTOS_Car_Next_Step+0x72>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <RTOS_Car_Next_Step+0x9c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b55      	cmp	r3, #85	; 0x55
 8000484:	d115      	bne.n	80004b2 <RTOS_Car_Next_Step+0x72>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <RTOS_Car_Next_Step+0xa0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2101      	movs	r1, #1
 800048c:	4618      	mov	r0, r3
 800048e:	f007 ff23 	bl	80082d8 <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <RTOS_Car_Next_Step+0xa0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2102      	movs	r1, #2
 8000498:	4618      	mov	r0, r3
 800049a:	f007 ff1d 	bl	80082d8 <osEventFlagsSet>
		  osThreadResume(Automatic_ParkingHandle);
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <RTOS_Car_Next_Step+0xa4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f007 fe64 	bl	8008170 <osThreadResume>
		  osThreadSuspend(car_next_stepHandle);
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <RTOS_Car_Next_Step+0xa8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 fe2b 	bl	8008108 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_IDLE){
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <RTOS_Car_Next_Step+0xa0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f007 ffaa 	bl	8008410 <osEventFlagsGet>
 80004bc:	4603      	mov	r3, r0
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d106      	bne.n	80004d4 <RTOS_Car_Next_Step+0x94>
		  printf("Mobile Control Mode\n");
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <RTOS_Car_Next_Step+0xac>)
 80004c8:	f00b f978 	bl	800b7bc <puts>
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 80004cc:	4903      	ldr	r1, [pc, #12]	; (80004dc <RTOS_Car_Next_Step+0x9c>)
 80004ce:	4808      	ldr	r0, [pc, #32]	; (80004f0 <RTOS_Car_Next_Step+0xb0>)
 80004d0:	f001 fe80 	bl	80021d4 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(150);
 80004d4:	2096      	movs	r0, #150	; 0x96
 80004d6:	f007 fe7f 	bl	80081d8 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 80004da:	e7b5      	b.n	8000448 <RTOS_Car_Next_Step+0x8>
 80004dc:	20000064 	.word	0x20000064
 80004e0:	20000118 	.word	0x20000118
 80004e4:	20000110 	.word	0x20000110
 80004e8:	2000010c 	.word	0x2000010c
 80004ec:	0800c690 	.word	0x0800c690
 80004f0:	20000048 	.word	0x20000048

080004f4 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
	uint8_t rear_ultrasonic = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000504:	4b9a      	ldr	r3, [pc, #616]	; (8000770 <RTOS_Automatic_Parking+0x27c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b77      	cmp	r3, #119	; 0x77
 800050a:	d105      	bne.n	8000518 <RTOS_Automatic_Parking+0x24>
		  //osMutexRelease(Car_Conrol_ModeHandle);
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800050c:	4b99      	ldr	r3, [pc, #612]	; (8000774 <RTOS_Automatic_Parking+0x280>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f007 ff38 	bl	8008388 <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_ACTIVE)
 8000518:	4b96      	ldr	r3, [pc, #600]	; (8000774 <RTOS_Automatic_Parking+0x280>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f007 ff77 	bl	8008410 <osEventFlagsGet>
 8000522:	4603      	mov	r3, r0
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b01      	cmp	r3, #1
 800052a:	f040 8175 	bne.w	8000818 <RTOS_Automatic_Parking+0x324>
	  {
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 800052e:	4892      	ldr	r0, [pc, #584]	; (8000778 <RTOS_Automatic_Parking+0x284>)
 8000530:	f00b f944 	bl	800b7bc <puts>
		  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 8000534:	4991      	ldr	r1, [pc, #580]	; (800077c <RTOS_Automatic_Parking+0x288>)
 8000536:	4892      	ldr	r0, [pc, #584]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000538:	f001 fe2c 	bl	8002194 <ECU_Motor_ChangeSpeed>
		  /* Select Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT))
 800053c:	4b8d      	ldr	r3, [pc, #564]	; (8000774 <RTOS_Automatic_Parking+0x280>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f007 ff65 	bl	8008410 <osEventFlagsGet>
 8000546:	4603      	mov	r3, r0
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b00      	cmp	r3, #0
 800054e:	f040 8095 	bne.w	800067c <RTOS_Automatic_Parking+0x188>
		  {
			  printf("Park Right Side\n");
 8000552:	488c      	ldr	r0, [pc, #560]	; (8000784 <RTOS_Automatic_Parking+0x290>)
 8000554:	f00b f932 	bl	800b7bc <puts>
			  front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 8000558:	4b8b      	ldr	r3, [pc, #556]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 800055e:	4b8a      	ldr	r3, [pc, #552]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	73bb      	strb	r3, [r7, #14]
			  ECU_Motor_MoveForward(&moving_motor);
 8000564:	4886      	ldr	r0, [pc, #536]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000566:	f001 fef1 	bl	800234c <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 800056a:	e002      	b.n	8000572 <RTOS_Automatic_Parking+0x7e>
			  {
				  printf("Searching for Empty Slot\n");
 800056c:	4887      	ldr	r0, [pc, #540]	; (800078c <RTOS_Automatic_Parking+0x298>)
 800056e:	f00b f925 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 8000572:	4b85      	ldr	r3, [pc, #532]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	320c      	adds	r2, #12
 800057a:	4293      	cmp	r3, r2
 800057c:	d3f6      	bcc.n	800056c <RTOS_Automatic_Parking+0x78>
 800057e:	4b82      	ldr	r3, [pc, #520]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	7bba      	ldrb	r2, [r7, #14]
 8000584:	320c      	adds	r2, #12
 8000586:	4293      	cmp	r3, r2
 8000588:	d3f0      	bcc.n	800056c <RTOS_Automatic_Parking+0x78>
			  }
			  printf("Found the Empty Slot\n");
 800058a:	4881      	ldr	r0, [pc, #516]	; (8000790 <RTOS_Automatic_Parking+0x29c>)
 800058c:	f00b f916 	bl	800b7bc <puts>

			  /* Delay to let the car move Forward to half the car length */
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 8000590:	e002      	b.n	8000598 <RTOS_Automatic_Parking+0xa4>
			  {
				  printf("Center the car after Founding the Empty Slot\n");
 8000592:	4880      	ldr	r0, [pc, #512]	; (8000794 <RTOS_Automatic_Parking+0x2a0>)
 8000594:	f00b f912 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 8000598:	4b7b      	ldr	r3, [pc, #492]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	7bfa      	ldrb	r2, [r7, #15]
 800059e:	320c      	adds	r2, #12
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d8f6      	bhi.n	8000592 <RTOS_Automatic_Parking+0x9e>
 80005a4:	4b78      	ldr	r3, [pc, #480]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	7bba      	ldrb	r2, [r7, #14]
 80005aa:	320c      	adds	r2, #12
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d8f0      	bhi.n	8000592 <RTOS_Automatic_Parking+0x9e>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 80005b0:	4873      	ldr	r0, [pc, #460]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005b2:	f001 fefb 	bl	80023ac <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f002 fa4a 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80005bc:	4870      	ldr	r0, [pc, #448]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005be:	f001 ffed 	bl	800259c <ECU_Motor_Stop>
			  //HAL_Delay(100);
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80005c2:	4975      	ldr	r1, [pc, #468]	; (8000798 <RTOS_Automatic_Parking+0x2a4>)
 80005c4:	486e      	ldr	r0, [pc, #440]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005c6:	f001 fde5 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_MoveReverseRight(&moving_motor);
 80005ca:	486d      	ldr	r0, [pc, #436]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005cc:	f001 ff82 	bl	80024d4 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 25))
 80005d0:	e002      	b.n	80005d8 <RTOS_Automatic_Parking+0xe4>
			  {
				  printf("try to Park 1 Reverse Right\n");
 80005d2:	4872      	ldr	r0, [pc, #456]	; (800079c <RTOS_Automatic_Parking+0x2a8>)
 80005d4:	f00b f8f2 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 25))
 80005d8:	4b6b      	ldr	r3, [pc, #428]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	2b19      	cmp	r3, #25
 80005de:	d8f8      	bhi.n	80005d2 <RTOS_Automatic_Parking+0xde>
			  }

			  ECU_Motor_MoveForward(&moving_motor);
 80005e0:	4867      	ldr	r0, [pc, #412]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005e2:	f001 feb3 	bl	800234c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f002 fa32 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80005ec:	4864      	ldr	r0, [pc, #400]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005ee:	f001 ffd5 	bl	800259c <ECU_Motor_Stop>
			  //while(1){};
			  //HAL_Delay(100);
			  ECU_Motor_MoveReverseLeft(&moving_motor);
 80005f2:	4863      	ldr	r0, [pc, #396]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80005f4:	f001 ffa0 	bl	8002538 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 80005f8:	e002      	b.n	8000600 <RTOS_Automatic_Parking+0x10c>
			  {
				  printf("try to Park 2 Reverse Left\n");
 80005fa:	4869      	ldr	r0, [pc, #420]	; (80007a0 <RTOS_Automatic_Parking+0x2ac>)
 80005fc:	f00b f8de 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8000600:	4b61      	ldr	r3, [pc, #388]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d903      	bls.n	8000610 <RTOS_Automatic_Parking+0x11c>
 8000608:	4b5f      	ldr	r3, [pc, #380]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d8f4      	bhi.n	80005fa <RTOS_Automatic_Parking+0x106>
			  }
			  ECU_Motor_MoveForward(&moving_motor);
 8000610:	485b      	ldr	r0, [pc, #364]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000612:	f001 fe9b 	bl	800234c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000616:	2005      	movs	r0, #5
 8000618:	f002 fa1a 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 800061c:	4957      	ldr	r1, [pc, #348]	; (800077c <RTOS_Automatic_Parking+0x288>)
 800061e:	4858      	ldr	r0, [pc, #352]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000620:	f001 fdb8 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_Stop(&moving_motor);
 8000624:	4856      	ldr	r0, [pc, #344]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000626:	f001 ffb9 	bl	800259c <ECU_Motor_Stop>
			  ECU_Motor_MoveForwardRight(&moving_motor);
 800062a:	4855      	ldr	r0, [pc, #340]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800062c:	f001 feee 	bl	800240c <ECU_Motor_MoveForwardRight>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4))
 8000630:	e002      	b.n	8000638 <RTOS_Automatic_Parking+0x144>
			  {
				  printf("try to Park 3 Forward Right\n");
 8000632:	485c      	ldr	r0, [pc, #368]	; (80007a4 <RTOS_Automatic_Parking+0x2b0>)
 8000634:	f00b f8c2 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 4))
 8000638:	4b53      	ldr	r3, [pc, #332]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d8f8      	bhi.n	8000632 <RTOS_Automatic_Parking+0x13e>
 8000640:	4b51      	ldr	r3, [pc, #324]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2b04      	cmp	r3, #4
 8000646:	d8f4      	bhi.n	8000632 <RTOS_Automatic_Parking+0x13e>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 8000648:	484d      	ldr	r0, [pc, #308]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800064a:	f001 feaf 	bl	80023ac <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 800064e:	2005      	movs	r0, #5
 8000650:	f002 f9fe 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 8000654:	484a      	ldr	r0, [pc, #296]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000656:	f001 ffa1 	bl	800259c <ECU_Motor_Stop>

			  printf("Finally ... the car should be parked successfully by now\n");
 800065a:	4853      	ldr	r0, [pc, #332]	; (80007a8 <RTOS_Automatic_Parking+0x2b4>)
 800065c:	f00b f8ae 	bl	800b7bc <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000660:	4b44      	ldr	r3, [pc, #272]	; (8000774 <RTOS_Automatic_Parking+0x280>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fe8e 	bl	8008388 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 800066c:	494f      	ldr	r1, [pc, #316]	; (80007ac <RTOS_Automatic_Parking+0x2b8>)
 800066e:	4844      	ldr	r0, [pc, #272]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000670:	f001 fd90 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  Bluetooth_RX_Data = 'S';
 8000674:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <RTOS_Automatic_Parking+0x27c>)
 8000676:	2253      	movs	r2, #83	; 0x53
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e0c3      	b.n	8000804 <RTOS_Automatic_Parking+0x310>

		  }
		  /* Select Left Side to Park */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) || (STD_ACTIVE << PARKING_SIDE_BIT)){
 800067c:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <RTOS_Automatic_Parking+0x280>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f007 fec5 	bl	8008410 <osEventFlagsGet>
			  printf("Park Left Side\n");
 8000686:	484a      	ldr	r0, [pc, #296]	; (80007b0 <RTOS_Automatic_Parking+0x2bc>)
 8000688:	f00b f898 	bl	800b7bc <puts>
			  front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	73fb      	strb	r3, [r7, #15]
			  rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	73bb      	strb	r3, [r7, #14]
			  ECU_Motor_MoveForward(&moving_motor);
 8000698:	4839      	ldr	r0, [pc, #228]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800069a:	f001 fe57 	bl	800234c <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 800069e:	e002      	b.n	80006a6 <RTOS_Automatic_Parking+0x1b2>
			  {
				  printf("Searching for Empty Slot\n");
 80006a0:	483a      	ldr	r0, [pc, #232]	; (800078c <RTOS_Automatic_Parking+0x298>)
 80006a2:	f00b f88b 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 12)))
 80006a6:	4b38      	ldr	r3, [pc, #224]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	320c      	adds	r2, #12
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d3f6      	bcc.n	80006a0 <RTOS_Automatic_Parking+0x1ac>
 80006b2:	4b35      	ldr	r3, [pc, #212]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	7bba      	ldrb	r2, [r7, #14]
 80006b8:	320c      	adds	r2, #12
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d3f0      	bcc.n	80006a0 <RTOS_Automatic_Parking+0x1ac>
			  }
			  printf("Found the Empty Slot\n");
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <RTOS_Automatic_Parking+0x29c>)
 80006c0:	f00b f87c 	bl	800b7bc <puts>

			  /* Delay to let the car move Forward to half the car length */
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 80006c4:	e002      	b.n	80006cc <RTOS_Automatic_Parking+0x1d8>
			  {
				  printf("Center the car after Founding the Empty Slot\n");
 80006c6:	4833      	ldr	r0, [pc, #204]	; (8000794 <RTOS_Automatic_Parking+0x2a0>)
 80006c8:	f00b f878 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 12)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 12)))
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	320c      	adds	r2, #12
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d8f6      	bhi.n	80006c6 <RTOS_Automatic_Parking+0x1d2>
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	7bba      	ldrb	r2, [r7, #14]
 80006de:	320c      	adds	r2, #12
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d8f0      	bhi.n	80006c6 <RTOS_Automatic_Parking+0x1d2>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 80006e4:	4826      	ldr	r0, [pc, #152]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80006e6:	f001 fe61 	bl	80023ac <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f002 f9b0 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80006f0:	4823      	ldr	r0, [pc, #140]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80006f2:	f001 ff53 	bl	800259c <ECU_Motor_Stop>
			  //HAL_Delay(100);
			  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80006f6:	4928      	ldr	r1, [pc, #160]	; (8000798 <RTOS_Automatic_Parking+0x2a4>)
 80006f8:	4821      	ldr	r0, [pc, #132]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 80006fa:	f001 fd4b 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_MoveReverseLeft(&moving_motor);
 80006fe:	4820      	ldr	r0, [pc, #128]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000700:	f001 ff1a 	bl	8002538 <ECU_Motor_MoveReverseLeft>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 8000704:	e002      	b.n	800070c <RTOS_Automatic_Parking+0x218>
			  {
				  printf("try to Park 1 Reverse Left\n");
 8000706:	482b      	ldr	r0, [pc, #172]	; (80007b4 <RTOS_Automatic_Parking+0x2c0>)
 8000708:	f00b f858 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 15))
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	2b0c      	cmp	r3, #12
 8000712:	d903      	bls.n	800071c <RTOS_Automatic_Parking+0x228>
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d8f4      	bhi.n	8000706 <RTOS_Automatic_Parking+0x212>
			  }

			  ECU_Motor_MoveForward(&moving_motor);
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800071e:	f001 fe15 	bl	800234c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000722:	2005      	movs	r0, #5
 8000724:	f002 f994 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800072a:	f001 ff37 	bl	800259c <ECU_Motor_Stop>
			  //while(1){};
			  //HAL_Delay(100);
			  ECU_Motor_MoveReverseRight(&moving_motor);
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000730:	f001 fed0 	bl	80024d4 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 8000734:	e002      	b.n	800073c <RTOS_Automatic_Parking+0x248>
			  {
				  printf("try to Park 2 Reverse Right\n");
 8000736:	4820      	ldr	r0, [pc, #128]	; (80007b8 <RTOS_Automatic_Parking+0x2c4>)
 8000738:	f00b f840 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4))
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	2b04      	cmp	r3, #4
 8000742:	d903      	bls.n	800074c <RTOS_Automatic_Parking+0x258>
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <RTOS_Automatic_Parking+0x294>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d8f4      	bhi.n	8000736 <RTOS_Automatic_Parking+0x242>
			  }
			  ECU_Motor_MoveForward(&moving_motor);
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800074e:	f001 fdfd 	bl	800234c <ECU_Motor_MoveForward>
			  HAL_Delay(5);
 8000752:	2005      	movs	r0, #5
 8000754:	f002 f97c 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 8000758:	4908      	ldr	r1, [pc, #32]	; (800077c <RTOS_Automatic_Parking+0x288>)
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 800075c:	f001 fd1a 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  ECU_Motor_Stop(&moving_motor);
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000762:	f001 ff1b 	bl	800259c <ECU_Motor_Stop>
			  ECU_Motor_MoveForwardLeft(&moving_motor);
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <RTOS_Automatic_Parking+0x28c>)
 8000768:	f001 fe82 	bl	8002470 <ECU_Motor_MoveForwardLeft>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 800076c:	e029      	b.n	80007c2 <RTOS_Automatic_Parking+0x2ce>
 800076e:	bf00      	nop
 8000770:	20000064 	.word	0x20000064
 8000774:	20000118 	.word	0x20000118
 8000778:	0800c6a4 	.word	0x0800c6a4
 800077c:	20000070 	.word	0x20000070
 8000780:	20000048 	.word	0x20000048
 8000784:	0800c6f0 	.word	0x0800c6f0
 8000788:	20000498 	.word	0x20000498
 800078c:	0800c700 	.word	0x0800c700
 8000790:	0800c71c 	.word	0x0800c71c
 8000794:	0800c734 	.word	0x0800c734
 8000798:	20000078 	.word	0x20000078
 800079c:	0800c764 	.word	0x0800c764
 80007a0:	0800c780 	.word	0x0800c780
 80007a4:	0800c79c 	.word	0x0800c79c
 80007a8:	0800c7b8 	.word	0x0800c7b8
 80007ac:	20000068 	.word	0x20000068
 80007b0:	0800c7f4 	.word	0x0800c7f4
 80007b4:	0800c804 	.word	0x0800c804
 80007b8:	0800c820 	.word	0x0800c820
			  {
				  printf("try to Park 3 Forward Left\n");
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <RTOS_Automatic_Parking+0x32c>)
 80007be:	f00a fffd 	bl	800b7bc <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 4))
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <RTOS_Automatic_Parking+0x330>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d8f8      	bhi.n	80007bc <RTOS_Automatic_Parking+0x2c8>
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <RTOS_Automatic_Parking+0x330>)
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d8f4      	bhi.n	80007bc <RTOS_Automatic_Parking+0x2c8>
			  }
			  ECU_Motor_MoveReverse(&moving_motor);
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <RTOS_Automatic_Parking+0x334>)
 80007d4:	f001 fdea 	bl	80023ac <ECU_Motor_MoveReverse>
			  HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f002 f939 	bl	8002a50 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <RTOS_Automatic_Parking+0x334>)
 80007e0:	f001 fedc 	bl	800259c <ECU_Motor_Stop>

			  printf("Finally ... the car should be parked successfully by now\n");
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <RTOS_Automatic_Parking+0x338>)
 80007e6:	f00a ffe9 	bl	800b7bc <puts>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <RTOS_Automatic_Parking+0x33c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fdc9 	bl	8008388 <osEventFlagsClear>
			  ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 80007f6:	490f      	ldr	r1, [pc, #60]	; (8000834 <RTOS_Automatic_Parking+0x340>)
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <RTOS_Automatic_Parking+0x334>)
 80007fa:	f001 fccb 	bl	8002194 <ECU_Motor_ChangeSpeed>
			  Bluetooth_RX_Data = 'S';
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <RTOS_Automatic_Parking+0x344>)
 8000800:	2253      	movs	r2, #83	; 0x53
 8000802:	701a      	strb	r2, [r3, #0]
		  }
		  else{/* DO NOTHING */}

		  osThreadResume(car_next_stepHandle);
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <RTOS_Automatic_Parking+0x348>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fcb1 	bl	8008170 <osThreadResume>
		  osThreadSuspend(Automatic_ParkingHandle);
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <RTOS_Automatic_Parking+0x34c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f007 fc78 	bl	8008108 <osThreadSuspend>
	  }
	  else{/* DO NOTHING */}
    osDelay(120000);
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <RTOS_Automatic_Parking+0x350>)
 800081a:	f007 fcdd 	bl	80081d8 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 800081e:	e671      	b.n	8000504 <RTOS_Automatic_Parking+0x10>
 8000820:	0800c83c 	.word	0x0800c83c
 8000824:	20000498 	.word	0x20000498
 8000828:	20000048 	.word	0x20000048
 800082c:	0800c7b8 	.word	0x0800c7b8
 8000830:	20000118 	.word	0x20000118
 8000834:	20000068 	.word	0x20000068
 8000838:	20000064 	.word	0x20000064
 800083c:	2000010c 	.word	0x2000010c
 8000840:	20000110 	.word	0x20000110
 8000844:	0001d4c0 	.word	0x0001d4c0

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b41      	ldr	r3, [pc, #260]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x11c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MX_GPIO_Init+0x11c>)
 800087c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_GPIO_Init+0x11c>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f002 fbca 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80008cc:	2200      	movs	r2, #0
 80008ce:	f643 4106 	movw	r1, #15366	; 0x3c06
 80008d2:	4825      	ldr	r0, [pc, #148]	; (8000968 <MX_GPIO_Init+0x120>)
 80008d4:	f002 fbc4 	bl	8003060 <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_GPIO_Init+0x124>)
 80008e0:	f002 fbbe 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <MX_GPIO_Init+0x124>)
 80008fc:	f002 fa26 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 8000900:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f002 fa16 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000920:	f643 4306 	movw	r3, #15366	; 0x3c06
 8000924:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x120>)
 800093a:	f002 fa07 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 800093e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x124>)
 8000958:	f002 f9f8 	bl	8002d4c <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400
 800096c:	48000800 	.word	0x48000800

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f002 f836 	bl	80029e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f81c 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f7ff ff64 	bl	8000848 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000980:	f000 fa96 	bl	8000eb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000984:	f000 fb64 	bl	8001050 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000988:	f000 fbfc 	bl	8001184 <MX_TIM3_Init>
  MX_TIM4_Init();
 800098c:	f000 fc96 	bl	80012bc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000990:	f000 fd30 	bl	80013f4 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000994:	f000 fdfe 	bl	8001594 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000998:	f000 fec4 	bl	8001724 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800099c:	f001 fa08 	bl	8001db0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80009a0:	f001 f9d6 	bl	8001d50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009a4:	f007 fa78 	bl	8007e98 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009a8:	f7ff fc6a 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009ac:	f007 faa8 	bl	8007f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x40>
	...

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0a6      	sub	sp, #152	; 0x98
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00a ffda 	bl	800b97c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2258      	movs	r2, #88	; 0x58
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00a ffcc 	bl	800b97c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fb47 	bl	8003090 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a08:	f000 f848 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fb86 	bl	8004138 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a32:	f000 f833 	bl	8000a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <SystemClock_Config+0xc0>)
 8000a38:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fdd3 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a68:	f000 f818 	bl	8000a9c <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3798      	adds	r7, #152	; 0x98
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	00f0300a 	.word	0x00f0300a

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f001 ffc1 	bl	8002a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40001000 	.word	0x40001000

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x4c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f002 f88f 	bl	8002c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <HAL_InitTick+0xe0>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_InitTick+0xe0>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	61d3      	str	r3, [r2, #28]
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <HAL_InitTick+0xe0>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 0210 	add.w	r2, r7, #16
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fd3a 	bl	80045a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3a:	f003 fcef 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 8000b3e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b42:	f003 fceb 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_InitTick+0xe4>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3b01      	subs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_InitTick+0xec>)
 8000b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b80:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b82:	f003 ff5f 	bl	8004a44 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11b      	bne.n	8000bcc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <HAL_InitTick+0xe8>)
 8000b96:	f003 ffad 	bl	8004af4 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d111      	bne.n	8000bcc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f002 f849 	bl	8002c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d808      	bhi.n	8000bc6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2036      	movs	r0, #54	; 0x36
 8000bba:	f002 f825 	bl	8002c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_InitTick+0xf0>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e002      	b.n	8000bcc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	20000120 	.word	0x20000120
 8000be4:	40001000 	.word	0x40001000
 8000be8:	20000080 	.word	0x20000080

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8000c1e:	2205      	movs	r2, #5
 8000c20:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8000c24:	f004 fc4a 	bl	80054bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000c2a:	f004 fc47 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200004b0 	.word	0x200004b0
 8000c38:	20000170 	.word	0x20000170
 8000c3c:	200002ec 	.word	0x200002ec

08000c40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <TIM1_CC_IRQHandler+0x14>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <TIM1_CC_IRQHandler+0x18>)
 8000c4c:	f004 fc36 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200004b0 	.word	0x200004b0
 8000c58:	20000170 	.word	0x20000170

08000c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <TIM2_IRQHandler+0x14>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <TIM2_IRQHandler+0x18>)
 8000c68:	f004 fc28 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200004b0 	.word	0x200004b0
 8000c74:	200001bc 	.word	0x200001bc

08000c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <TIM3_IRQHandler+0x14>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c82:	4803      	ldr	r0, [pc, #12]	; (8000c90 <TIM3_IRQHandler+0x18>)
 8000c84:	f004 fc1a 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200004b0 	.word	0x200004b0
 8000c90:	20000208 	.word	0x20000208

08000c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <TIM4_IRQHandler+0x14>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <TIM4_IRQHandler+0x18>)
 8000ca0:	f004 fc0c 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200004b0 	.word	0x200004b0
 8000cac:	20000254 	.word	0x20000254

08000cb0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <TIM8_CC_IRQHandler+0x14>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <TIM8_CC_IRQHandler+0x18>)
 8000cbc:	f004 fbfe 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200004b0 	.word	0x200004b0
 8000cc8:	200002a0 	.word	0x200002a0

08000ccc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <UART4_IRQHandler+0x10>)
 8000cd2:	f005 ff39 	bl	8006b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000384 	.word	0x20000384

08000ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM6_DAC_IRQHandler+0x10>)
 8000ce6:	f004 fbe9 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000120 	.word	0x20000120

08000cf4 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <Custom_ITM_sendChar_Ch0+0x48>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <Custom_ITM_sendChar_Ch0+0x48>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d16:	bf00      	nop
 8000d18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f8      	beq.n	8000d18 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000d26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000edfc 	.word	0xe000edfc
 8000d40:	e0000e00 	.word	0xe0000e00

08000d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
  }

  return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffab 	bl	8000cf4 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
  }
  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f00a fe38 	bl	800bac4 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20010000 	.word	0x20010000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	2000016c 	.word	0x2000016c
 8000e88:	20002840 	.word	0x20002840

08000e8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	; 0x78
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	222c      	movs	r2, #44	; 0x2c
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00a fd3f 	bl	800b97c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000efe:	4b52      	ldr	r3, [pc, #328]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f00:	4a52      	ldr	r2, [pc, #328]	; (800104c <MX_TIM1_Init+0x19c>)
 8000f02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000f04:	4b50      	ldr	r3, [pc, #320]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f10:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b48      	ldr	r3, [pc, #288]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f2a:	4847      	ldr	r0, [pc, #284]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f2c:	f003 fd8a 	bl	8004a44 <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f36:	f7ff fdb1 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f44:	4619      	mov	r1, r3
 8000f46:	4840      	ldr	r0, [pc, #256]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f48:	f004 fd88 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f52:	f7ff fda3 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f56:	483c      	ldr	r0, [pc, #240]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f58:	f003 fe3c 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000f62:	f7ff fd9b 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f66:	4838      	ldr	r0, [pc, #224]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f68:	f004 f83e 	bl	8004fe8 <HAL_TIM_IC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f72:	f7ff fd93 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f86:	4619      	mov	r1, r3
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <MX_TIM1_Init+0x198>)
 8000f8a:	f005 fc1b 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000f94:	f7ff fd82 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f98:	2360      	movs	r3, #96	; 0x60
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000f9c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_TIM1_Init+0x198>)
 8000fc0:	f004 fc38 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000fca:	f7ff fd67 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM1_Init+0x198>)
 8000fe8:	f004 fb87 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ff2:	f7ff fd53 	bl	8000a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM1_Init+0x198>)
 800102c:	f005 fc56 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001036:	f7ff fd31 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM1_Init+0x198>)
 800103c:	f000 fd74 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3778      	adds	r7, #120	; 0x78
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000170 	.word	0x20000170
 800104c:	40012c00 	.word	0x40012c00

08001050 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b092      	sub	sp, #72	; 0x48
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <MX_TIM2_Init+0x130>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <MX_TIM2_Init+0x130>)
 800109a:	2207      	movs	r2, #7
 800109c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_TIM2_Init+0x130>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <MX_TIM2_Init+0x130>)
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <MX_TIM2_Init+0x130>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_TIM2_Init+0x130>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b8:	4831      	ldr	r0, [pc, #196]	; (8001180 <MX_TIM2_Init+0x130>)
 80010ba:	f003 fcc3 	bl	8004a44 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010c4:	f7ff fcea 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d2:	4619      	mov	r1, r3
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <MX_TIM2_Init+0x130>)
 80010d6:	f004 fcc1 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010e0:	f7ff fcdc 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e4:	4826      	ldr	r0, [pc, #152]	; (8001180 <MX_TIM2_Init+0x130>)
 80010e6:	f003 fd75 	bl	8004bd4 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80010f0:	f7ff fcd4 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010f4:	4822      	ldr	r0, [pc, #136]	; (8001180 <MX_TIM2_Init+0x130>)
 80010f6:	f003 ff77 	bl	8004fe8 <HAL_TIM_IC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001100:	f7ff fccc 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001110:	4619      	mov	r1, r3
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <MX_TIM2_Init+0x130>)
 8001114:	f005 fb56 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800111e:	f7ff fcbd 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001126:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800112a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <MX_TIM2_Init+0x130>)
 800113e:	f004 fb79 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001148:	f7ff fca8 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM2_Init+0x130>)
 8001164:	f004 fac9 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800116e:	f7ff fc95 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM2_Init+0x130>)
 8001174:	f000 fcd8 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 8001178:	bf00      	nop
 800117a:	3748      	adds	r7, #72	; 0x48
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001bc 	.word	0x200001bc

08001184 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b092      	sub	sp, #72	; 0x48
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011c6:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <MX_TIM3_Init+0x134>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ea:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_TIM3_Init+0x130>)
 80011ec:	f003 fc2a 	bl	8004a44 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011f6:	f7ff fc51 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001204:	4619      	mov	r1, r3
 8001206:	482b      	ldr	r0, [pc, #172]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001208:	f004 fc28 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001212:	f7ff fc43 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001218:	f003 fcdc 	bl	8004bd4 <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001222:	f7ff fc3b 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001228:	f003 fede 	bl	8004fe8 <HAL_TIM_IC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001232:	f7ff fc33 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001242:	4619      	mov	r1, r3
 8001244:	481b      	ldr	r0, [pc, #108]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001246:	f005 fabd 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001250:	f7ff fc24 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001254:	2360      	movs	r3, #96	; 0x60
 8001256:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001258:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800125c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	4811      	ldr	r0, [pc, #68]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001270:	f004 fae0 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800127a:	f7ff fc0f 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001282:	2301      	movs	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	2204      	movs	r2, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0x130>)
 8001296:	f004 fa30 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80012a0:	f7ff fbfc 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0x130>)
 80012a6:	f000 fc3f 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 80012aa:	bf00      	nop
 80012ac:	3748      	adds	r7, #72	; 0x48
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000208 	.word	0x20000208
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b092      	sub	sp, #72	; 0x48
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <MX_TIM4_Init+0x130>)
 80012fe:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <MX_TIM4_Init+0x134>)
 8001300:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <MX_TIM4_Init+0x130>)
 8001304:	2207      	movs	r2, #7
 8001306:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <MX_TIM4_Init+0x130>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_TIM4_Init+0x130>)
 8001310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001314:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_TIM4_Init+0x130>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <MX_TIM4_Init+0x130>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001322:	4832      	ldr	r0, [pc, #200]	; (80013ec <MX_TIM4_Init+0x130>)
 8001324:	f003 fb8e 	bl	8004a44 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800132e:	f7ff fbb5 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800133c:	4619      	mov	r1, r3
 800133e:	482b      	ldr	r0, [pc, #172]	; (80013ec <MX_TIM4_Init+0x130>)
 8001340:	f004 fb8c 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800134a:	f7ff fba7 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <MX_TIM4_Init+0x130>)
 8001350:	f003 fc40 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800135a:	f7ff fb9f 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800135e:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_TIM4_Init+0x130>)
 8001360:	f003 fe42 	bl	8004fe8 <HAL_TIM_IC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800136a:	f7ff fb97 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_TIM4_Init+0x130>)
 800137e:	f005 fa21 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001388:	f7ff fb88 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138c:	2360      	movs	r3, #96	; 0x60
 800138e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001390:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001394:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_TIM4_Init+0x130>)
 80013a8:	f004 fa44 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 80013b2:	f7ff fb73 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	2204      	movs	r2, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM4_Init+0x130>)
 80013ce:	f004 f994 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 80013d8:	f7ff fb60 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM4_Init+0x130>)
 80013de:	f000 fba3 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3748      	adds	r7, #72	; 0x48
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000254 	.word	0x20000254
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09e      	sub	sp, #120	; 0x78
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	222c      	movs	r2, #44	; 0x2c
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00a fa9d 	bl	800b97c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001442:	4b52      	ldr	r3, [pc, #328]	; (800158c <MX_TIM8_Init+0x198>)
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <MX_TIM8_Init+0x19c>)
 8001446:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <MX_TIM8_Init+0x198>)
 800144a:	2207      	movs	r2, #7
 800144c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b4f      	ldr	r3, [pc, #316]	; (800158c <MX_TIM8_Init+0x198>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <MX_TIM8_Init+0x198>)
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <MX_TIM8_Init+0x198>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <MX_TIM8_Init+0x198>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <MX_TIM8_Init+0x198>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800146e:	4847      	ldr	r0, [pc, #284]	; (800158c <MX_TIM8_Init+0x198>)
 8001470:	f003 fae8 	bl	8004a44 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800147a:	f7ff fb0f 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001488:	4619      	mov	r1, r3
 800148a:	4840      	ldr	r0, [pc, #256]	; (800158c <MX_TIM8_Init+0x198>)
 800148c:	f004 fae6 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001496:	f7ff fb01 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <MX_TIM8_Init+0x198>)
 800149c:	f003 fb9a 	bl	8004bd4 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80014a6:	f7ff faf9 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80014aa:	4838      	ldr	r0, [pc, #224]	; (800158c <MX_TIM8_Init+0x198>)
 80014ac:	f003 fd9c 	bl	8004fe8 <HAL_TIM_IC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80014b6:	f7ff faf1 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014ca:	4619      	mov	r1, r3
 80014cc:	482f      	ldr	r0, [pc, #188]	; (800158c <MX_TIM8_Init+0x198>)
 80014ce:	f005 f979 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80014d8:	f7ff fae0 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80014e0:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4822      	ldr	r0, [pc, #136]	; (800158c <MX_TIM8_Init+0x198>)
 8001504:	f004 f996 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800150e:	f7ff fac5 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001516:	2301      	movs	r3, #1
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001526:	2204      	movs	r2, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM8_Init+0x198>)
 800152c:	f004 f8e5 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001536:	f7ff fab1 	bl	8000a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001552:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800155c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM8_Init+0x198>)
 8001570:	f005 f9b4 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800157a:	f7ff fa8f 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM8_Init+0x198>)
 8001580:	f000 fad2 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3778      	adds	r7, #120	; 0x78
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002a0 	.word	0x200002a0
 8001590:	40013400 	.word	0x40013400

08001594 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09e      	sub	sp, #120	; 0x78
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	222c      	movs	r2, #44	; 0x2c
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00a f9cd 	bl	800b97c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <MX_TIM15_Init+0x188>)
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <MX_TIM15_Init+0x18c>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <MX_TIM15_Init+0x188>)
 80015ea:	2207      	movs	r2, #7
 80015ec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <MX_TIM15_Init+0x188>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80015f4:	4b49      	ldr	r3, [pc, #292]	; (800171c <MX_TIM15_Init+0x188>)
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <MX_TIM15_Init+0x188>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <MX_TIM15_Init+0x188>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b44      	ldr	r3, [pc, #272]	; (800171c <MX_TIM15_Init+0x188>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800160e:	4843      	ldr	r0, [pc, #268]	; (800171c <MX_TIM15_Init+0x188>)
 8001610:	f003 fa18 	bl	8004a44 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800161a:	f7ff fa3f 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001628:	4619      	mov	r1, r3
 800162a:	483c      	ldr	r0, [pc, #240]	; (800171c <MX_TIM15_Init+0x188>)
 800162c:	f004 fa16 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8001636:	f7ff fa31 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800163a:	4838      	ldr	r0, [pc, #224]	; (800171c <MX_TIM15_Init+0x188>)
 800163c:	f003 faca 	bl	8004bd4 <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 8001646:	f7ff fa29 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800164a:	4834      	ldr	r0, [pc, #208]	; (800171c <MX_TIM15_Init+0x188>)
 800164c:	f003 fccc 	bl	8004fe8 <HAL_TIM_IC_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001656:	f7ff fa21 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001662:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001666:	4619      	mov	r1, r3
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <MX_TIM15_Init+0x188>)
 800166a:	f005 f8ab 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8001674:	f7ff fa12 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	; 0x60
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 800167c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <MX_TIM15_Init+0x188>)
 80016a0:	f004 f8c8 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80016aa:	f7ff f9f7 	bl	8000a9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <MX_TIM15_Init+0x188>)
 80016c8:	f004 f817 	bl	80056fa <HAL_TIM_IC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80016d2:	f7ff f9e3 	bl	8000a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM15_Init+0x188>)
 80016fe:	f005 f8ed 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 8001708:	f7ff f9c8 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM15_Init+0x188>)
 800170e:	f000 fa0b 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3778      	adds	r7, #120	; 0x78
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002ec 	.word	0x200002ec
 8001720:	40014000 	.word	0x40014000

08001724 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b092      	sub	sp, #72	; 0x48
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800172a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	222c      	movs	r2, #44	; 0x2c
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f00a f919 	bl	800b97c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <MX_TIM16_Init+0xec>)
 800174c:	4a31      	ldr	r2, [pc, #196]	; (8001814 <MX_TIM16_Init+0xf0>)
 800174e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <MX_TIM16_Init+0xec>)
 8001752:	2207      	movs	r2, #7
 8001754:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <MX_TIM16_Init+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <MX_TIM16_Init+0xec>)
 800175e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001762:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <MX_TIM16_Init+0xec>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <MX_TIM16_Init+0xec>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <MX_TIM16_Init+0xec>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001776:	4826      	ldr	r0, [pc, #152]	; (8001810 <MX_TIM16_Init+0xec>)
 8001778:	f003 f964 	bl	8004a44 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001782:	f7ff f98b 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001786:	4822      	ldr	r0, [pc, #136]	; (8001810 <MX_TIM16_Init+0xec>)
 8001788:	f003 fa24 	bl	8004bd4 <HAL_TIM_PWM_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001792:	f7ff f983 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001796:	2360      	movs	r3, #96	; 0x60
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800179a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4814      	ldr	r0, [pc, #80]	; (8001810 <MX_TIM16_Init+0xec>)
 80017be:	f004 f839 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80017c8:	f7ff f968 	bl	8000a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <MX_TIM16_Init+0xec>)
 80017f4:	f005 f872 	bl	80068dc <HAL_TIMEx_ConfigBreakDeadTime>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80017fe:	f7ff f94d 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <MX_TIM16_Init+0xec>)
 8001804:	f000 f990 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 8001808:	bf00      	nop
 800180a:	3748      	adds	r7, #72	; 0x48
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000338 	.word	0x20000338
 8001814:	40014400 	.word	0x40014400

08001818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	; 0x50
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4aa7      	ldr	r2, [pc, #668]	; (8001ad4 <HAL_TIM_Base_MspInit+0x2bc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d138      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	4ba7      	ldr	r3, [pc, #668]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4aa6      	ldr	r2, [pc, #664]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4ba4      	ldr	r3, [pc, #656]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4aa0      	ldr	r2, [pc, #640]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800186a:	2302      	movs	r3, #2
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800187a:	2302      	movs	r3, #2
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001882:	4619      	mov	r1, r3
 8001884:	4895      	ldr	r0, [pc, #596]	; (8001adc <HAL_TIM_Base_MspInit+0x2c4>)
 8001886:	f001 fa61 	bl	8002d4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	2018      	movs	r0, #24
 8001890:	f001 f9ba 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001894:	2018      	movs	r0, #24
 8001896:	f001 f9d3 	bl	8002c40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	201b      	movs	r0, #27
 80018a0:	f001 f9b2 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018a4:	201b      	movs	r0, #27
 80018a6:	f001 f9cb 	bl	8002c40 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80018aa:	e134      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b4:	d131      	bne.n	800191a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a87      	ldr	r2, [pc, #540]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a81      	ldr	r2, [pc, #516]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f6:	2301      	movs	r3, #1
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f001 fa22 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2105      	movs	r1, #5
 800190c:	201c      	movs	r0, #28
 800190e:	f001 f97b 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001912:	201c      	movs	r0, #28
 8001914:	f001 f994 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 8001918:	e0fd      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a70      	ldr	r2, [pc, #448]	; (8001ae0 <HAL_TIM_Base_MspInit+0x2c8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d131      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4a6b      	ldr	r2, [pc, #428]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	61d3      	str	r3, [r2, #28]
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4a65      	ldr	r2, [pc, #404]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001946:	6153      	str	r3, [r2, #20]
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001954:	2310      	movs	r3, #16
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001964:	2302      	movs	r3, #2
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f001 f9eb 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	201d      	movs	r0, #29
 800197c:	f001 f944 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001980:	201d      	movs	r0, #29
 8001982:	f001 f95d 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 8001986:	e0c6      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <HAL_TIM_Base_MspInit+0x2cc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d132      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a4a      	ldr	r2, [pc, #296]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80019d4:	230a      	movs	r3, #10
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f001 f9b3 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	201e      	movs	r0, #30
 80019ec:	f001 f90c 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019f0:	201e      	movs	r0, #30
 80019f2:	f001 f925 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 80019f6:	e08e      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_TIM_Base_MspInit+0x2d0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d130      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a42:	2304      	movs	r3, #4
 8001a44:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4823      	ldr	r0, [pc, #140]	; (8001adc <HAL_TIM_Base_MspInit+0x2c4>)
 8001a4e:	f001 f97d 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2105      	movs	r1, #5
 8001a56:	202e      	movs	r0, #46	; 0x2e
 8001a58:	f001 f8d6 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001a5c:	202e      	movs	r0, #46	; 0x2e
 8001a5e:	f001 f8ef 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 8001a62:	e058      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_TIM_Base_MspInit+0x2d4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d142      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_TIM_Base_MspInit+0x2c0>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <HAL_TIM_Base_MspInit+0x2d8>)
 8001abc:	f001 f946 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f001 f89f 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001aca:	2018      	movs	r0, #24
 8001acc:	f001 f8b8 	bl	8002c40 <HAL_NVIC_EnableIRQ>
}
 8001ad0:	e021      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800
 8001ae8:	40013400 	.word	0x40013400
 8001aec:	40014000 	.word	0x40014000
 8001af0:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_TIM_Base_MspInit+0x308>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10b      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_TIM_Base_MspInit+0x30c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_TIM_Base_MspInit+0x30c>)
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_TIM_Base_MspInit+0x30c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
}
 8001b16:	bf00      	nop
 8001b18:	3750      	adds	r7, #80	; 0x50
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a79      	ldr	r2, [pc, #484]	; (8001d2c <HAL_TIM_MspPostInit+0x204>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11c      	bne.n	8001b84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a78      	ldr	r2, [pc, #480]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b72:	2302      	movs	r3, #2
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	486d      	ldr	r0, [pc, #436]	; (8001d34 <HAL_TIM_MspPostInit+0x20c>)
 8001b7e:	f001 f8e5 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001b82:	e0cf      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d11d      	bne.n	8001bca <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc4:	f001 f8c2 	bl	8002d4c <HAL_GPIO_Init>
}
 8001bc8:	e0ac      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <HAL_TIM_MspPostInit+0x210>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d11d      	bne.n	8001c10 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bde:	6153      	str	r3, [r2, #20]
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f001 f89f 	bl	8002d4c <HAL_GPIO_Init>
}
 8001c0e:	e089      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <HAL_TIM_MspPostInit+0x214>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11e      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c44:	230a      	movs	r3, #10
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f001 f87b 	bl	8002d4c <HAL_GPIO_Init>
}
 8001c56:	e065      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <HAL_TIM_MspPostInit+0x218>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11c      	bne.n	8001c9c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c82:	2302      	movs	r3, #2
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	4827      	ldr	r0, [pc, #156]	; (8001d34 <HAL_TIM_MspPostInit+0x20c>)
 8001c96:	f001 f859 	bl	8002d4c <HAL_GPIO_Init>
}
 8001c9a:	e043      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <HAL_TIM_MspPostInit+0x21c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11d      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481b      	ldr	r0, [pc, #108]	; (8001d48 <HAL_TIM_MspPostInit+0x220>)
 8001cdc:	f001 f836 	bl	8002d4c <HAL_GPIO_Init>
}
 8001ce0:	e020      	b.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_TIM_MspPostInit+0x224>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf6:	6153      	str	r3, [r2, #20]
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_TIM_MspPostInit+0x208>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d04:	2310      	movs	r3, #16
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d14:	2301      	movs	r3, #1
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <HAL_TIM_MspPostInit+0x220>)
 8001d20:	f001 f814 	bl	8002d4c <HAL_GPIO_Init>
}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	; 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000800 	.word	0x48000800
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40013400 	.word	0x40013400
 8001d44:	40014000 	.word	0x40014000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	40014400 	.word	0x40014400

08001d50 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_UART4_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_UART4_Init+0x58>)
 8001d94:	f004 fe46 	bl	8006a24 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f7fe fe7d 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000384 	.word	0x20000384
 8001dac:	40004c00 	.word	0x40004c00

08001db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_USART2_UART_Init+0x5c>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001df4:	f004 fe16 	bl	8006a24 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dfe:	f7fe fe4d 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000040c 	.word	0x2000040c
 8001e0c:	40004400 	.word	0x40004400

08001e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a33      	ldr	r2, [pc, #204]	; (8001efc <HAL_UART_MspInit+0xec>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d131      	bne.n	8001e96 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a32      	ldr	r2, [pc, #200]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e54:	6153      	str	r3, [r2, #20]
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e74:	2305      	movs	r3, #5
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4821      	ldr	r0, [pc, #132]	; (8001f04 <HAL_UART_MspInit+0xf4>)
 8001e80:	f000 ff64 	bl	8002d4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2105      	movs	r1, #5
 8001e88:	2034      	movs	r0, #52	; 0x34
 8001e8a:	f000 febd 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e8e:	2034      	movs	r0, #52	; 0x34
 8001e90:	f000 fed6 	bl	8002c40 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e94:	e02d      	b.n	8001ef2 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_UART_MspInit+0xf8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d128      	bne.n	8001ef2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eaa:	61d3      	str	r3, [r2, #28]
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	6153      	str	r3, [r2, #20]
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_UART_MspInit+0xf0>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f000 ff2d 	bl	8002d4c <HAL_GPIO_Init>
}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	; 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40004c00 	.word	0x40004c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000800 	.word	0x48000800
 8001f08:	40004400 	.word	0x40004400

08001f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f10:	f7fe ffbc 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	; (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	; (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f009 fdc9 	bl	800bad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3e:	f7fe fd17 	bl	8000970 <main>

08001f42 <LoopForever>:

LoopForever:
    b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001f50:	0800ca6c 	.word	0x0800ca6c
  ldr r2, =_sbss
 8001f54:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001f58:	2000283c 	.word	0x2000283c

08001f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_2_IRQHandler>
	...

08001f60 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	printf("----------------------> is %c\n",temp);
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4827      	ldr	r0, [pc, #156]	; (800200c <HAL_UART_RxCpltCallback+0xac>)
 8001f70:	f009 fbbe 	bl	800b6f0 <iprintf>
	if( BLUETOOTH_CONDITION(temp) ){
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b46      	cmp	r3, #70	; 0x46
 8001f7a:	d037      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b42      	cmp	r3, #66	; 0x42
 8001f82:	d033      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b47      	cmp	r3, #71	; 0x47
 8001f8a:	d02f      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b49      	cmp	r3, #73	; 0x49
 8001f92:	d02b      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b48      	cmp	r3, #72	; 0x48
 8001f9a:	d027      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b4a      	cmp	r3, #74	; 0x4a
 8001fa2:	d023      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b52      	cmp	r3, #82	; 0x52
 8001faa:	d01f      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b4c      	cmp	r3, #76	; 0x4c
 8001fb2:	d01b      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b53      	cmp	r3, #83	; 0x53
 8001fba:	d017      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b23      	cmp	r3, #35	; 0x23
 8001fc2:	d013      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b40      	cmp	r3, #64	; 0x40
 8001fca:	d00f      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b21      	cmp	r3, #33	; 0x21
 8001fd2:	d00b      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b57      	cmp	r3, #87	; 0x57
 8001fda:	d007      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b55      	cmp	r3, #85	; 0x55
 8001fe2:	d003      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x8c>
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b77      	cmp	r3, #119	; 0x77
 8001fea:	d103      	bne.n	8001ff4 <HAL_UART_RxCpltCallback+0x94>
		Bluetooth_RX_Data = temp;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_UART_RxCpltCallback+0xb0>)
 8001ff2:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_UART_RxCpltCallback+0xa8>)
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f004 fd61 	bl	8006ac0 <HAL_UART_Receive_IT>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000494 	.word	0x20000494
 800200c:	0800c858 	.word	0x0800c858
 8002010:	20000064 	.word	0x20000064

08002014 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e009      	b.n	800203a <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	791b      	ldrb	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4904      	ldr	r1, [pc, #16]	; (8002044 <ECU_Bluetooth_ReciveData+0x30>)
 8002034:	f004 fd44 	bl	8006ac0 <HAL_UART_Receive_IT>

	return ECU_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000494 	.word	0x20000494

08002048 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07e      	b.n	800215c <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <ECU_Motor_GeneratePWM+0x34>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e045      	b.n	8002108 <ECU_Motor_GeneratePWM+0xc0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d10a      	bne.n	800209a <ECU_Motor_GeneratePWM+0x52>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	e036      	b.n	8002108 <ECU_Motor_GeneratePWM+0xc0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d10a      	bne.n	80020b8 <ECU_Motor_GeneratePWM+0x70>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e027      	b.n	8002108 <ECU_Motor_GeneratePWM+0xc0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d10a      	bne.n	80020d6 <ECU_Motor_GeneratePWM+0x8e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e018      	b.n	8002108 <ECU_Motor_GeneratePWM+0xc0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d10a      	bne.n	80020f4 <ECU_Motor_GeneratePWM+0xac>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e009      	b.n	8002108 <ECU_Motor_GeneratePWM+0xc0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e025      	b.n	800215c <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a13      	ldr	r2, [pc, #76]	; (8002164 <ECU_Motor_GeneratePWM+0x11c>)
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	edd3 7a03 	vldr	s15, [r3, #12]
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002144:	ee17 2a90 	vmov	r2, s15
 8002148:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f002 fd9f 	bl	8004c98 <HAL_TIM_PWM_Start>

	return ECU_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	000f4240 	.word	0x000f4240

08002168 <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e008      	b.n	800218c <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4619      	mov	r1, r3
 8002184:	4610      	mov	r0, r2
 8002186:	f002 fe93 	bl	8004eb0 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <ECU_Motor_ChangeSpeed+0x16>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffda 	bl	8002168 <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff3f 	bl	8002048 <ECU_Motor_GeneratePWM>

	return ECU_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <ECU_Motor_NextStep+0x16>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0a3      	b.n	8002336 <ECU_Motor_NextStep+0x162>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	3b21      	subs	r3, #33	; 0x21
 80021f4:	2b32      	cmp	r3, #50	; 0x32
 80021f6:	f200 8099 	bhi.w	800232c <ECU_Motor_NextStep+0x158>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <ECU_Motor_NextStep+0x2c>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002325 	.word	0x08002325
 8002204:	0800232d 	.word	0x0800232d
 8002208:	08002315 	.word	0x08002315
 800220c:	0800232d 	.word	0x0800232d
 8002210:	0800232d 	.word	0x0800232d
 8002214:	0800232d 	.word	0x0800232d
 8002218:	0800232d 	.word	0x0800232d
 800221c:	0800232d 	.word	0x0800232d
 8002220:	0800232d 	.word	0x0800232d
 8002224:	0800232d 	.word	0x0800232d
 8002228:	0800232d 	.word	0x0800232d
 800222c:	0800232d 	.word	0x0800232d
 8002230:	0800232d 	.word	0x0800232d
 8002234:	0800232d 	.word	0x0800232d
 8002238:	0800232d 	.word	0x0800232d
 800223c:	0800232d 	.word	0x0800232d
 8002240:	0800232d 	.word	0x0800232d
 8002244:	0800232d 	.word	0x0800232d
 8002248:	0800232d 	.word	0x0800232d
 800224c:	0800232d 	.word	0x0800232d
 8002250:	0800232d 	.word	0x0800232d
 8002254:	0800232d 	.word	0x0800232d
 8002258:	0800232d 	.word	0x0800232d
 800225c:	0800232d 	.word	0x0800232d
 8002260:	0800232d 	.word	0x0800232d
 8002264:	0800232d 	.word	0x0800232d
 8002268:	0800232d 	.word	0x0800232d
 800226c:	0800232d 	.word	0x0800232d
 8002270:	0800232d 	.word	0x0800232d
 8002274:	0800232d 	.word	0x0800232d
 8002278:	0800232d 	.word	0x0800232d
 800227c:	0800231d 	.word	0x0800231d
 8002280:	0800232d 	.word	0x0800232d
 8002284:	080022d5 	.word	0x080022d5
 8002288:	0800232d 	.word	0x0800232d
 800228c:	0800232d 	.word	0x0800232d
 8002290:	0800232d 	.word	0x0800232d
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022dd 	.word	0x080022dd
 800229c:	080022ed 	.word	0x080022ed
 80022a0:	080022e5 	.word	0x080022e5
 80022a4:	080022f5 	.word	0x080022f5
 80022a8:	0800232d 	.word	0x0800232d
 80022ac:	08002305 	.word	0x08002305
 80022b0:	0800232d 	.word	0x0800232d
 80022b4:	0800232d 	.word	0x0800232d
 80022b8:	0800232d 	.word	0x0800232d
 80022bc:	0800232d 	.word	0x0800232d
 80022c0:	0800232d 	.word	0x0800232d
 80022c4:	080022fd 	.word	0x080022fd
 80022c8:	0800230d 	.word	0x0800230d
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f83d 	bl	800234c <ECU_Motor_MoveForward>
 80022d2:	e02f      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f869 	bl	80023ac <ECU_Motor_MoveReverse>
 80022da:	e02b      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f8c7 	bl	8002470 <ECU_Motor_MoveForwardLeft>
 80022e2:	e027      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f891 	bl	800240c <ECU_Motor_MoveForwardRight>
 80022ea:	e023      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f923 	bl	8002538 <ECU_Motor_MoveReverseLeft>
 80022f2:	e01f      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8ed 	bl	80024d4 <ECU_Motor_MoveReverseRight>
 80022fa:	e01b      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f97f 	bl	8002600 <ECU_Motor_MoveRight>
 8002302:	e017      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9ab 	bl	8002660 <ECU_Motor_MoveLeft>
 800230a:	e013      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f945 	bl	800259c <ECU_Motor_Stop>
 8002312:	e00f      	b.n	8002334 <ECU_Motor_NextStep+0x160>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8002314:	490a      	ldr	r1, [pc, #40]	; (8002340 <ECU_Motor_NextStep+0x16c>)
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff3c 	bl	8002194 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800231c:	4909      	ldr	r1, [pc, #36]	; (8002344 <ECU_Motor_NextStep+0x170>)
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff38 	bl	8002194 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 8002324:	4908      	ldr	r1, [pc, #32]	; (8002348 <ECU_Motor_NextStep+0x174>)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff34 	bl	8002194 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (motor_obj); break;
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f935 	bl	800259c <ECU_Motor_Stop>
 8002332:	bf00      	nop
	}

	return ECU_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000068 	.word	0x20000068
 8002344:	20000070 	.word	0x20000070
 8002348:	20000078 	.word	0x20000078

0800234c <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e01d      	b.n	800239a <ECU_Motor_MoveForward+0x4e>
	}

	printf("Motor_MoveForward\n");
 800235e:	4811      	ldr	r0, [pc, #68]	; (80023a4 <ECU_Motor_MoveForward+0x58>)
 8002360:	f009 fa2c 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236a:	480f      	ldr	r0, [pc, #60]	; (80023a8 <ECU_Motor_MoveForward+0x5c>)
 800236c:	f000 fe78 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <ECU_Motor_MoveForward+0x5c>)
 8002378:	f000 fe72 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002386:	f000 fe6b 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002394:	f000 fe64 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	0800c878 	.word	0x0800c878
 80023a8:	48000800 	.word	0x48000800

080023ac <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e01d      	b.n	80023fa <ECU_Motor_MoveReverse+0x4e>
	}

	printf("MoveReverse\n");
 80023be:	4811      	ldr	r0, [pc, #68]	; (8002404 <ECU_Motor_MoveReverse+0x58>)
 80023c0:	f009 f9fc 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	480f      	ldr	r0, [pc, #60]	; (8002408 <ECU_Motor_MoveReverse+0x5c>)
 80023cc:	f000 fe48 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <ECU_Motor_MoveReverse+0x5c>)
 80023d8:	f000 fe42 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e6:	f000 fe3b 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f4:	f000 fe34 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	0800c88c 	.word	0x0800c88c
 8002408:	48000800 	.word	0x48000800

0800240c <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e020      	b.n	8002460 <ECU_Motor_MoveForwardRight+0x54>
	}

	printf("MoveForwardRight\n");
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <ECU_Motor_MoveForwardRight+0x5c>)
 8002420:	f009 f9cc 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242a:	4810      	ldr	r0, [pc, #64]	; (800246c <ECU_Motor_MoveForwardRight+0x60>)
 800242c:	f000 fe18 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <ECU_Motor_MoveForwardRight+0x60>)
 8002438:	f000 fe12 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f000 fb07 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f000 fe08 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245a:	f000 fe01 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0800c898 	.word	0x0800c898
 800246c:	48000800 	.word	0x48000800

08002470 <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e020      	b.n	80024c4 <ECU_Motor_MoveForwardLeft+0x54>
	}

	printf("MoveForwardLeft\n");
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <ECU_Motor_MoveForwardLeft+0x5c>)
 8002484:	f009 f99a 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248e:	4810      	ldr	r0, [pc, #64]	; (80024d0 <ECU_Motor_MoveForwardLeft+0x60>)
 8002490:	f000 fde6 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800249a:	480d      	ldr	r0, [pc, #52]	; (80024d0 <ECU_Motor_MoveForwardLeft+0x60>)
 800249c:	f000 fde0 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80024a0:	2064      	movs	r0, #100	; 0x64
 80024a2:	f000 fad5 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f000 fdd6 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024be:	f000 fdcf 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	0800c8ac 	.word	0x0800c8ac
 80024d0:	48000800 	.word	0x48000800

080024d4 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e020      	b.n	8002528 <ECU_Motor_MoveReverseRight+0x54>
	}

	printf("MoveReverseRight\n");
 80024e6:	4812      	ldr	r0, [pc, #72]	; (8002530 <ECU_Motor_MoveReverseRight+0x5c>)
 80024e8:	f009 f968 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f2:	4810      	ldr	r0, [pc, #64]	; (8002534 <ECU_Motor_MoveReverseRight+0x60>)
 80024f4:	f000 fdb4 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <ECU_Motor_MoveReverseRight+0x60>)
 8002500:	f000 fdae 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	f000 faa3 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f000 fda4 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002522:	f000 fd9d 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0800c8bc 	.word	0x0800c8bc
 8002534:	48000800 	.word	0x48000800

08002538 <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e020      	b.n	800258c <ECU_Motor_MoveReverseLeft+0x54>
	}

	printf("MoveReverseLeft\n");
 800254a:	4812      	ldr	r0, [pc, #72]	; (8002594 <ECU_Motor_MoveReverseLeft+0x5c>)
 800254c:	f009 f936 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002556:	4810      	ldr	r0, [pc, #64]	; (8002598 <ECU_Motor_MoveReverseLeft+0x60>)
 8002558:	f000 fd82 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002562:	480d      	ldr	r0, [pc, #52]	; (8002598 <ECU_Motor_MoveReverseLeft+0x60>)
 8002564:	f000 fd7c 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f000 fa71 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002578:	f000 fd72 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f000 fd6b 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	0800c8d0 	.word	0x0800c8d0
 8002598:	48000800 	.word	0x48000800

0800259c <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e020      	b.n	80025f0 <ECU_Motor_Stop+0x54>
	}

	printf("Stop\n");
 80025ae:	4812      	ldr	r0, [pc, #72]	; (80025f8 <ECU_Motor_Stop+0x5c>)
 80025b0:	f009 f904 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ba:	4810      	ldr	r0, [pc, #64]	; (80025fc <ECU_Motor_Stop+0x60>)
 80025bc:	f000 fd50 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <ECU_Motor_Stop+0x60>)
 80025c8:	f000 fd4a 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025cc:	2032      	movs	r0, #50	; 0x32
 80025ce:	f000 fa3f 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f000 fd40 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f000 fd39 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0800c8e0 	.word	0x0800c8e0
 80025fc:	48000800 	.word	0x48000800

08002600 <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e01d      	b.n	800264e <ECU_Motor_MoveRight+0x4e>
	}

	printf("MoveRight\n");
 8002612:	4811      	ldr	r0, [pc, #68]	; (8002658 <ECU_Motor_MoveRight+0x58>)
 8002614:	f009 f8d2 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261e:	480f      	ldr	r0, [pc, #60]	; (800265c <ECU_Motor_MoveRight+0x5c>)
 8002620:	f000 fd1e 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <ECU_Motor_MoveRight+0x5c>)
 800262c:	f000 fd18 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f000 fd11 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002648:	f000 fd0a 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	0800c8e8 	.word	0x0800c8e8
 800265c:	48000800 	.word	0x48000800

08002660 <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e01d      	b.n	80026ae <ECU_Motor_MoveLeft+0x4e>
	}

	printf("MoveLeft\n");
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <ECU_Motor_MoveLeft+0x58>)
 8002674:	f009 f8a2 	bl	800b7bc <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	480f      	ldr	r0, [pc, #60]	; (80026bc <ECU_Motor_MoveLeft+0x5c>)
 8002680:	f000 fcee 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268a:	480c      	ldr	r0, [pc, #48]	; (80026bc <ECU_Motor_MoveLeft+0x5c>)
 800268c:	f000 fce8 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f000 fce1 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a8:	f000 fcda 	bl	8003060 <HAL_GPIO_WritePin>

	return ECU_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800c8f4 	.word	0x0800c8f4
 80026bc:	48000800 	.word	0x48000800

080026c0 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7f1b      	ldrb	r3, [r3, #28]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d145      	bne.n	800275c <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d114      	bne.n	800270a <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f002 fbe4 	bl	8004eb0 <HAL_TIM_PWM_Stop>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_TIM_IC_CaptureCallback+0xac>)
 80026f2:	4413      	add	r3, r2
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80026fe:	440a      	add	r2, r1
 8002700:	4619      	mov	r1, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8e0 	bl	80028c8 <IC_first_Capture>
		}

	}
	else{/* Do Nothing */}

}
 8002708:	e028      	b.n	800275c <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d120      	bne.n	800275c <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_IC_CaptureCallback+0xac>)
 8002724:	1899      	adds	r1, r3, r2
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002730:	441a      	add	r2, r3
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	480e      	ldr	r0, [pc, #56]	; (8002774 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800273c:	4418      	add	r0, r3
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461c      	mov	r4, r3
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002748:	4423      	add	r3, r4
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4603      	mov	r3, r0
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8e4 	bl	800291c <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8002754:	2104      	movs	r1, #4
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f002 fdf2 	bl	8005340 <HAL_TIM_IC_Stop_IT>
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}
 8002764:	200004b0 	.word	0x200004b0
 8002768:	200004b4 	.word	0x200004b4
 800276c:	200004bc 	.word	0x200004bc
 8002770:	200004d4 	.word	0x200004d4
 8002774:	200004ec 	.word	0x200004ec

08002778 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 800278a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80027b4 <ECU_Ultrasonic_Read+0x3c>
 800278e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f810 	bl	80027b8 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f002 fc82 	bl	80050ac <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	3a83126f 	.word	0x3a83126f

080027b8 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e077      	b.n	80028c0 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <ECU_Ultrasonic_GenerateTrigger+0x36>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	e045      	b.n	800287a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d10a      	bne.n	800280c <ECU_Ultrasonic_GenerateTrigger+0x54>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e036      	b.n	800287a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d10a      	bne.n	800282a <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e027      	b.n	800287a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d10a      	bne.n	8002848 <ECU_Ultrasonic_GenerateTrigger+0x90>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e018      	b.n	800287a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b10      	cmp	r3, #16
 800284e:	d10a      	bne.n	8002866 <ECU_Ultrasonic_GenerateTrigger+0xae>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e009      	b.n	800287a <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e01e      	b.n	80028c0 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002896:	edd7 7a01 	vldr	s15, [r7, #4]
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a8:	ee17 2a90 	vmov	r2, s15
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f002 f9ed 	bl	8004c98 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80028d4:	2104      	movs	r1, #4
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f003 f98a 	bl	8005bf0 <HAL_TIM_ReadCapturedValue>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002900:	621a      	str	r2, [r3, #32]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800292a:	2104      	movs	r1, #4
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f003 f95f 	bl	8005bf0 <HAL_TIM_ReadCapturedValue>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d307      	bcc.n	800295c <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e011      	b.n	8002980 <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800296a:	33ff      	adds	r3, #255	; 0xff
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <IC_second_Capture+0xb8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	4619      	mov	r1, r3
 800297a:	4817      	ldr	r0, [pc, #92]	; (80029d8 <IC_second_Capture+0xbc>)
 800297c:	f008 feb8 	bl	800b6f0 <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80029dc <IC_second_Capture+0xc0>
 8002990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <IC_second_Capture+0xb8>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a0:	ee17 1a90 	vmov	r1, s15
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <IC_second_Capture+0xc4>)
 80029a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029be:	621a      	str	r2, [r3, #32]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a12      	ldr	r2, [r2, #32]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200004b0 	.word	0x200004b0
 80029d8:	0800c900 	.word	0x0800c900
 80029dc:	42680000 	.word	0x42680000
 80029e0:	20000498 	.word	0x20000498

080029e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_Init+0x28>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_Init+0x28>)
 80029ee:	f043 0310 	orr.w	r3, r3, #16
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 f8fc 	bl	8002bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fa:	200f      	movs	r0, #15
 80029fc:	f7fe f87c 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a00:	f7fe f852 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022000 	.word	0x40022000

08002a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000084 	.word	0x20000084
 8002a34:	20000504 	.word	0x20000504

08002a38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000504 	.word	0x20000504

08002a50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000084 	.word	0x20000084

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff4c 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1a:	f7ff ff61 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f7ff ffb1 	bl	8002b8c <NVIC_EncodePriority>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff80 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff54 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d008      	beq.n	8002c80 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2204      	movs	r2, #4
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e020      	b.n	8002cc2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 020e 	bic.w	r2, r2, #14
 8002c8e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d005      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e027      	b.n	8002d40 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020e 	bic.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
    } 
  }
  return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5a:	e160      	b.n	800301e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8152 	beq.w	8003018 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d005      	beq.n	8002d8c <HAL_GPIO_Init+0x40>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d130      	bne.n	8002dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0201 	and.w	r2, r3, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d017      	beq.n	8002e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d123      	bne.n	8002e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0203 	and.w	r2, r3, #3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80ac 	beq.w	8003018 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_GPIO_Init+0x2f0>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_GPIO_Init+0x2f0>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_GPIO_Init+0x2f0>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed8:	4a59      	ldr	r2, [pc, #356]	; (8003040 <HAL_GPIO_Init+0x2f4>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f02:	d025      	beq.n	8002f50 <HAL_GPIO_Init+0x204>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_GPIO_Init+0x2f8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01f      	beq.n	8002f4c <HAL_GPIO_Init+0x200>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <HAL_GPIO_Init+0x2fc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d019      	beq.n	8002f48 <HAL_GPIO_Init+0x1fc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_GPIO_Init+0x300>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_GPIO_Init+0x1f8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_GPIO_Init+0x304>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00d      	beq.n	8002f40 <HAL_GPIO_Init+0x1f4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_GPIO_Init+0x308>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x1f0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4a      	ldr	r2, [pc, #296]	; (8003058 <HAL_GPIO_Init+0x30c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_GPIO_Init+0x1ec>
 8002f34:	2306      	movs	r3, #6
 8002f36:	e00c      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f38:	2307      	movs	r3, #7
 8002f3a:	e00a      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	e008      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f40:	2304      	movs	r3, #4
 8002f42:	e006      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f44:	2303      	movs	r3, #3
 8002f46:	e004      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e002      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_GPIO_Init+0x206>
 8002f50:	2300      	movs	r3, #0
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	f002 0203 	and.w	r2, r2, #3
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	4093      	lsls	r3, r2
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f62:	4937      	ldr	r1, [pc, #220]	; (8003040 <HAL_GPIO_Init+0x2f4>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f70:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_GPIO_Init+0x310>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f94:	4a31      	ldr	r2, [pc, #196]	; (800305c <HAL_GPIO_Init+0x310>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_GPIO_Init+0x310>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_GPIO_Init+0x310>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_GPIO_Init+0x310>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_GPIO_Init+0x310>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_GPIO_Init+0x310>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_GPIO_Init+0x310>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f ae97 	bne.w	8002d5c <HAL_GPIO_Init+0x10>
  }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40021000 	.word	0x40021000
 8003040:	40010000 	.word	0x40010000
 8003044:	48000400 	.word	0x48000400
 8003048:	48000800 	.word	0x48000800
 800304c:	48000c00 	.word	0x48000c00
 8003050:	48001000 	.word	0x48001000
 8003054:	48001400 	.word	0x48001400
 8003058:	48001800 	.word	0x48001800
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003070:	787b      	ldrb	r3, [r7, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800307c:	e002      	b.n	8003084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003096:	af00      	add	r7, sp, #0
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f001 b83a 	b.w	800412a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 816f 	beq.w	80033aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030cc:	4bb5      	ldr	r3, [pc, #724]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d8:	4bb2      	ldr	r3, [pc, #712]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d15c      	bne.n	800319e <HAL_RCC_OscConfig+0x10e>
 80030e4:	4baf      	ldr	r3, [pc, #700]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d155      	bne.n	800319e <HAL_RCC_OscConfig+0x10e>
 80030f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003106:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0x94>
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e015      	b.n	8003150 <HAL_RCC_OscConfig+0xc0>
 8003124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003128:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003140:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800314c:	4b95      	ldr	r3, [pc, #596]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003154:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003158:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800315c:	fa92 f2a2 	rbit	r2, r2
 8003160:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003164:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f042 0220 	orr.w	r2, r2, #32
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f002 021f 	and.w	r2, r2, #31
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8111 	beq.w	80033a8 <HAL_RCC_OscConfig+0x318>
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8108 	bne.w	80033a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f000 bfc6 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x12e>
 80031b0:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7b      	ldr	r2, [pc, #492]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e036      	b.n	800322c <HAL_RCC_OscConfig+0x19c>
 80031be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x158>
 80031ce:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a74      	ldr	r2, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a71      	ldr	r2, [pc, #452]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e021      	b.n	800322c <HAL_RCC_OscConfig+0x19c>
 80031e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x184>
 80031fa:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a69      	ldr	r2, [pc, #420]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a66      	ldr	r2, [pc, #408]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0x19c>
 8003214:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a62      	ldr	r2, [pc, #392]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800322c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d059      	beq.n	80032f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff fbfc 	bl	8002a38 <HAL_GetTick>
 8003240:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003246:	f7ff fbf7 	bl	8002a38 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d902      	bls.n	800325c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	f000 bf67 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 800325c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003260:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003270:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d102      	bne.n	800328e <HAL_RCC_OscConfig+0x1fe>
 8003288:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x22a>
 800328e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003292:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80032a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80032c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80032c6:	fa92 f2a2 	rbit	r2, r2
 80032ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80032ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032d2:	fab2 f282 	clz	r2, r2
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f042 0220 	orr.w	r2, r2, #32
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f002 021f 	and.w	r2, r2, #31
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f202 	lsl.w	r2, r1, r2
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ab      	beq.n	8003246 <HAL_RCC_OscConfig+0x1b6>
 80032ee:	e05c      	b.n	80033aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7ff fba2 	bl	8002a38 <HAL_GetTick>
 80032f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fa:	f7ff fb9d 	bl	8002a38 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d902      	bls.n	8003310 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f000 bf0d 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003324:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0x2b2>
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x2de>
 8003342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003346:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800335e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_RCC_OscConfig+0x314>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003372:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003376:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800337a:	fa92 f2a2 	rbit	r2, r2
 800337e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003382:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ab      	bne.n	80032fa <HAL_RCC_OscConfig+0x26a>
 80033a2:	e002      	b.n	80033aa <HAL_RCC_OscConfig+0x31a>
 80033a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 817f 	beq.w	80036be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033c0:	4ba7      	ldr	r3, [pc, #668]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033cc:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d173      	bne.n	80034c0 <HAL_RCC_OscConfig+0x430>
 80033d8:	4ba1      	ldr	r3, [pc, #644]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d16c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x430>
 80033e6:	2302      	movs	r3, #2
 80033e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80033f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x386>
 8003410:	4b93      	ldr	r3, [pc, #588]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	e013      	b.n	800343e <HAL_RCC_OscConfig+0x3ae>
 8003416:	2302      	movs	r3, #2
 8003418:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800342e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800343a:	4b89      	ldr	r3, [pc, #548]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2202      	movs	r2, #2
 8003440:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003444:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003448:	fa92 f2a2 	rbit	r2, r2
 800344c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003450:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003454:	fab2 f282 	clz	r2, r2
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f042 0220 	orr.w	r2, r2, #32
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f002 021f 	and.w	r2, r2, #31
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCC_OscConfig+0x3f6>
 8003470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003474:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d002      	beq.n	8003486 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f000 be52 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003492:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	21f8      	movs	r1, #248	; 0xf8
 800349c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034a4:	fa91 f1a1 	rbit	r1, r1
 80034a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80034ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034b0:	fab1 f181 	clz	r1, r1
 80034b4:	b2c9      	uxtb	r1, r1
 80034b6:	408b      	lsls	r3, r1
 80034b8:	4969      	ldr	r1, [pc, #420]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e0fe      	b.n	80036be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8088 	beq.w	80035e2 <HAL_RCC_OscConfig+0x552>
 80034d2:	2301      	movs	r3, #1
 80034d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80034e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	2301      	movs	r3, #1
 80034fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7ff fa9b 	bl	8002a38 <HAL_GetTick>
 8003502:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7ff fa96 	bl	8002a38 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	f000 be06 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003530:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d102      	bne.n	800354e <HAL_RCC_OscConfig+0x4be>
 8003548:	4b45      	ldr	r3, [pc, #276]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	e013      	b.n	8003576 <HAL_RCC_OscConfig+0x4e6>
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003566:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2202      	movs	r2, #2
 8003578:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800357c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003588:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f042 0220 	orr.w	r2, r2, #32
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f002 021f 	and.w	r2, r2, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0af      	beq.n	8003508 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	21f8      	movs	r1, #248	; 0xf8
 80035be:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80035c6:	fa91 f1a1 	rbit	r1, r1
 80035ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80035ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80035d2:	fab1 f181 	clz	r1, r1
 80035d6:	b2c9      	uxtb	r1, r1
 80035d8:	408b      	lsls	r3, r1
 80035da:	4921      	ldr	r1, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e06d      	b.n	80036be <HAL_RCC_OscConfig+0x62e>
 80035e2:	2301      	movs	r3, #1
 80035e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80035f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7ff fa13 	bl	8002a38 <HAL_GetTick>
 8003612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003618:	f7ff fa0e 	bl	8002a38 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d902      	bls.n	800362e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	f000 bd7e 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 800362e:	2302      	movs	r3, #2
 8003630:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003640:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x5d4>
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <HAL_RCC_OscConfig+0x5d0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e016      	b.n	800368c <HAL_RCC_OscConfig+0x5fc>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	2302      	movs	r3, #2
 8003666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003676:	2302      	movs	r3, #2
 8003678:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800367c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003688:	4bbf      	ldr	r3, [pc, #764]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2202      	movs	r2, #2
 800368e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003692:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003696:	fa92 f2a2 	rbit	r2, r2
 800369a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800369e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036a2:	fab2 f282 	clz	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f042 0220 	orr.w	r2, r2, #32
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f002 021f 	and.w	r2, r2, #31
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f202 	lsl.w	r2, r1, r2
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ac      	bne.n	8003618 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8113 	beq.w	80038fa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d07c      	beq.n	80037de <HAL_RCC_OscConfig+0x74e>
 80036e4:	2301      	movs	r3, #1
 80036e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80036f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4ba2      	ldr	r3, [pc, #648]	; (800398c <HAL_RCC_OscConfig+0x8fc>)
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	461a      	mov	r2, r3
 800370a:	2301      	movs	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7ff f993 	bl	8002a38 <HAL_GetTick>
 8003712:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7ff f98e 	bl	8002a38 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d902      	bls.n	800372e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	f000 bcfe 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 800372e:	2302      	movs	r3, #2
 8003730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003740:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800374e:	2202      	movs	r2, #2
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	fa93 f2a3 	rbit	r2, r3
 8003760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003772:	2202      	movs	r2, #2
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003788:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800378c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 8003790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003796:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800379a:	2102      	movs	r1, #2
 800379c:	6019      	str	r1, [r3, #0]
 800379e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f1a3 	rbit	r1, r3
 80037ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037b4:	6019      	str	r1, [r3, #0]
  return result;
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d09d      	beq.n	8003718 <HAL_RCC_OscConfig+0x688>
 80037dc:	e08d      	b.n	80038fa <HAL_RCC_OscConfig+0x86a>
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003800:	601a      	str	r2, [r3, #0]
  return result;
 8003802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003806:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800380a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x8fc>)
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7ff f90a 	bl	8002a38 <HAL_GetTick>
 8003824:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382a:	f7ff f905 	bl	8002a38 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d902      	bls.n	8003840 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	f000 bc75 	b.w	800412a <HAL_RCC_OscConfig+0x109a>
 8003840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003844:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003850:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800386c:	2202      	movs	r2, #2
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003890:	2202      	movs	r2, #2
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003898:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038b8:	2102      	movs	r1, #2
 80038ba:	6019      	str	r1, [r3, #0]
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f1a3 	rbit	r1, r3
 80038ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038d2:	6019      	str	r1, [r3, #0]
  return result;
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d197      	bne.n	800382a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 81a5 	beq.w	8003c5a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	61d3      	str	r3, [r2, #28]
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_RCC_OscConfig+0x8f8>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003948:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCC_OscConfig+0x900>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d121      	bne.n	80039a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x900>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x900>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003968:	f7ff f866 	bl	8002a38 <HAL_GetTick>
 800396c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e010      	b.n	8003994 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7ff f861 	bl	8002a38 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d908      	bls.n	8003994 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e3d1      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	10908120 	.word	0x10908120
 8003990:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <HAL_RCC_OscConfig+0xb3c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0e8      	beq.n	8003972 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x92e>
 80039b0:	4b87      	ldr	r3, [pc, #540]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a86      	ldr	r2, [pc, #536]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6213      	str	r3, [r2, #32]
 80039bc:	e035      	b.n	8003a2a <HAL_RCC_OscConfig+0x99a>
 80039be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x958>
 80039ce:	4b80      	ldr	r3, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
 80039e6:	e020      	b.n	8003a2a <HAL_RCC_OscConfig+0x99a>
 80039e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x982>
 80039f8:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a74      	ldr	r2, [pc, #464]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a71      	ldr	r2, [pc, #452]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x99a>
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a6b      	ldr	r2, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8081 	beq.w	8003b3e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fffc 	bl	8002a38 <HAL_GetTick>
 8003a40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe fff7 	bl	8002a38 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e365      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a66:	2202      	movs	r2, #2
 8003a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aa4:	601a      	str	r2, [r3, #0]
  return result;
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_OscConfig+0xa3a>
 8003ac4:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	e013      	b.n	8003af2 <HAL_RCC_OscConfig+0xa62>
 8003aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ace:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ada:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003af6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003afa:	2102      	movs	r1, #2
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	fa92 f1a2 	rbit	r1, r2
 8003b0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b10:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b14:	6011      	str	r1, [r2, #0]
  return result;
 8003b16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b1a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	fab2 f282 	clz	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f002 021f 	and.w	r2, r2, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d084      	beq.n	8003a46 <HAL_RCC_OscConfig+0x9b6>
 8003b3c:	e083      	b.n	8003c46 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe ff7b 	bl	8002a38 <HAL_GetTick>
 8003b42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fe ff76 	bl	8002a38 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e2e4      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b68:	2202      	movs	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fa93 f2a3 	rbit	r2, r3
 8003b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ba6:	601a      	str	r2, [r3, #0]
  return result;
 8003ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xb44>
 8003bc6:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <HAL_RCC_OscConfig+0xb40>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	e017      	b.n	8003bfc <HAL_RCC_OscConfig+0xb6c>
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	fa93 f2a3 	rbit	r2, r3
 8003bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4bb3      	ldr	r3, [pc, #716]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c04:	2102      	movs	r1, #2
 8003c06:	6011      	str	r1, [r2, #0]
 8003c08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	fa92 f1a2 	rbit	r1, r2
 8003c16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c1a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c1e:	6011      	str	r1, [r2, #0]
  return result;
 8003c20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c24:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d180      	bne.n	8003b48 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c46:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b9e      	ldr	r3, [pc, #632]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4a9d      	ldr	r2, [pc, #628]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c58:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 825e 	beq.w	8004128 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c6c:	4b96      	ldr	r3, [pc, #600]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	f000 821f 	beq.w	80040b8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	f040 8170 	bne.w	8003f6c <HAL_RCC_OscConfig+0xedc>
 8003c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cb0:	601a      	str	r2, [r3, #0]
  return result;
 8003cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe feb1 	bl	8002a38 <HAL_GetTick>
 8003cd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe feac 	bl	8002a38 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e21c      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	fa93 f2a3 	rbit	r2, r3
 8003d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d14:	601a      	str	r2, [r3, #0]
  return result;
 8003d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_OscConfig+0xcaa>
 8003d34:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	e027      	b.n	8003d8a <HAL_RCC_OscConfig+0xcfa>
 8003d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d80:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d96:	6011      	str	r1, [r2, #0]
 8003d98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fa92 f1a2 	rbit	r1, r2
 8003da6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003daa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003dae:	6011      	str	r1, [r2, #0]
  return result;
 8003db0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003db4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d182      	bne.n	8003cdc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a19      	ldr	r1, [r3, #32]
 8003e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	492d      	ldr	r1, [pc, #180]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
 8003e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fa93 f2a3 	rbit	r2, r3
 8003e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e3c:	601a      	str	r2, [r3, #0]
  return result;
 8003e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e42:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e46:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fdeb 	bl	8002a38 <HAL_GetTick>
 8003e62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e66:	e009      	b.n	8003e7c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe fde6 	bl	8002a38 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e156      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ea0:	601a      	str	r2, [r3, #0]
  return result;
 8003ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003eaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0xe3c>
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <HAL_RCC_OscConfig+0xe38>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	e02a      	b.n	8003f1c <HAL_RCC_OscConfig+0xe8c>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ede:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	4b86      	ldr	r3, [pc, #536]	; (8004134 <HAL_RCC_OscConfig+0x10a4>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	fa92 f1a2 	rbit	r1, r2
 8003f38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f3c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f40:	6011      	str	r1, [r2, #0]
  return result;
 8003f42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f46:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f002 021f 	and.w	r2, r2, #31
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f43f af7f 	beq.w	8003e68 <HAL_RCC_OscConfig+0xdd8>
 8003f6a:	e0dd      	b.n	8004128 <HAL_RCC_OscConfig+0x1098>
 8003f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	fa93 f2a3 	rbit	r2, r3
 8003f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f90:	601a      	str	r2, [r3, #0]
  return result;
 8003f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f9a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	461a      	mov	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fd41 	bl	8002a38 <HAL_GetTick>
 8003fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fba:	e009      	b.n	8003fd0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe fd3c 	bl	8002a38 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0ac      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
 8003fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f2a3 	rbit	r2, r3
 8003fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ff4:	601a      	str	r2, [r3, #0]
  return result;
 8003ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ffe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <HAL_RCC_OscConfig+0xf8a>
 8004014:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_OscConfig+0x10a4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	e027      	b.n	800406a <HAL_RCC_OscConfig+0xfda>
 800401a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	fa93 f2a3 	rbit	r2, r3
 8004036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004044:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004052:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	fa93 f2a3 	rbit	r2, r3
 800405c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004060:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_RCC_OscConfig+0x10a4>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800406e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004072:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004076:	6011      	str	r1, [r2, #0]
 8004078:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800407c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	fa92 f1a2 	rbit	r1, r2
 8004086:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800408a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800408e:	6011      	str	r1, [r2, #0]
  return result;
 8004090:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004094:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	fab2 f282 	clz	r2, r2
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	f042 0220 	orr.w	r2, r2, #32
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	f002 021f 	and.w	r2, r2, #31
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d182      	bne.n	8003fbc <HAL_RCC_OscConfig+0xf2c>
 80040b6:	e037      	b.n	8004128 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e02e      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_OscConfig+0x10a4>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCC_OscConfig+0x10a4>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80040e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d117      	bne.n	8004124 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040f8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004100:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004108:	429a      	cmp	r2, r3
 800410a:	d10b      	bne.n	8004124 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800410c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000

08004138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b09e      	sub	sp, #120	; 0x78
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e162      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b90      	ldr	r3, [pc, #576]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d910      	bls.n	8004180 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0207 	bic.w	r2, r3, #7
 8004166:	498b      	ldr	r1, [pc, #556]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b89      	ldr	r3, [pc, #548]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e14a      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800418c:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	497f      	ldr	r1, [pc, #508]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80dc 	beq.w	8004364 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d13c      	bne.n	800422e <HAL_RCC_ClockConfig+0xf6>
 80041b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c4:	fab3 f383 	clz	r3, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d102      	bne.n	80041de <HAL_RCC_ClockConfig+0xa6>
 80041d8:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	e00f      	b.n	80041fe <HAL_RCC_ClockConfig+0xc6>
 80041de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	667b      	str	r3, [r7, #100]	; 0x64
 80041ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f0:	663b      	str	r3, [r7, #96]	; 0x60
 80041f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004202:	65ba      	str	r2, [r7, #88]	; 0x58
 8004204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004206:	fa92 f2a2 	rbit	r2, r2
 800420a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800420c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420e:	fab2 f282 	clz	r2, r2
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	f002 021f 	and.w	r2, r2, #31
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d17b      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0f3      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d13c      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x178>
 8004236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_RCC_ClockConfig+0x128>
 800425a:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	e00f      	b.n	8004280 <HAL_RCC_ClockConfig+0x148>
 8004260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004272:	643b      	str	r3, [r7, #64]	; 0x40
 8004274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427c:	4b46      	ldr	r3, [pc, #280]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004284:	63ba      	str	r2, [r7, #56]	; 0x38
 8004286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004288:	fa92 f2a2 	rbit	r2, r2
 800428c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800428e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004290:	fab2 f282 	clz	r2, r2
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	f042 0220 	orr.w	r2, r2, #32
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	f002 021f 	and.w	r2, r2, #31
 80042a0:	2101      	movs	r1, #1
 80042a2:	fa01 f202 	lsl.w	r2, r1, r2
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d13a      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b2      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
 80042b0:	2302      	movs	r3, #2
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1a0>
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	e00d      	b.n	80042f4 <HAL_RCC_ClockConfig+0x1bc>
 80042d8:	2302      	movs	r3, #2
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	2302      	movs	r3, #2
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2202      	movs	r2, #2
 80042f6:	61ba      	str	r2, [r7, #24]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	fa92 f2a2 	rbit	r2, r2
 80042fe:	617a      	str	r2, [r7, #20]
  return result;
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	fab2 f282 	clz	r2, r2
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	f042 0220 	orr.w	r2, r2, #32
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	f002 021f 	and.w	r2, r2, #31
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f202 	lsl.w	r2, r1, r2
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e079      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	491a      	ldr	r1, [pc, #104]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004334:	f7fe fb80 	bl	8002a38 <HAL_GetTick>
 8004338:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fe fb7c 	bl	8002a38 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e061      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_RCC_ClockConfig+0x260>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 020c 	and.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	429a      	cmp	r2, r3
 8004362:	d1eb      	bne.n	800433c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d214      	bcs.n	800439c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	4906      	ldr	r1, [pc, #24]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_ClockConfig+0x25c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e040      	b.n	8004416 <HAL_RCC_ClockConfig+0x2de>
 8004394:	40022000 	.word	0x40022000
 8004398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCC_ClockConfig+0x2e8>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	491a      	ldr	r1, [pc, #104]	; (8004420 <HAL_RCC_ClockConfig+0x2e8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <HAL_RCC_ClockConfig+0x2e8>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4912      	ldr	r1, [pc, #72]	; (8004420 <HAL_RCC_ClockConfig+0x2e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043da:	f000 f829 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043de:	4601      	mov	r1, r0
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_RCC_ClockConfig+0x2e8>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	22f0      	movs	r2, #240	; 0xf0
 80043ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	fa92 f2a2 	rbit	r2, r2
 80043f2:	60fa      	str	r2, [r7, #12]
  return result;
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	fab2 f282 	clz	r2, r2
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	40d3      	lsrs	r3, r2
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x2ec>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	fa21 f303 	lsr.w	r3, r1, r3
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCC_ClockConfig+0x2f0>)
 8004408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_RCC_ClockConfig+0x2f4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc fb72 	bl	8000af8 <HAL_InitTick>
  
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3778      	adds	r7, #120	; 0x78
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	0800c9f8 	.word	0x0800c9f8
 8004428:	20000060 	.word	0x20000060
 800442c:	20000080 	.word	0x20000080

08004430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b08b      	sub	sp, #44	; 0x2c
 8004434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x30>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0x36>
 800445e:	e03f      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004462:	623b      	str	r3, [r7, #32]
      break;
 8004464:	e03f      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800446c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004470:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	fa92 f2a2 	rbit	r2, r2
 8004478:	607a      	str	r2, [r7, #4]
  return result;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	fab2 f282 	clz	r2, r2
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	40d3      	lsrs	r3, r2
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	220f      	movs	r2, #15
 8004494:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	fa92 f2a2 	rbit	r2, r2
 800449c:	60fa      	str	r2, [r7, #12]
  return result;
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	fab2 f282 	clz	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	40d3      	lsrs	r3, r2
 80044a8:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b8:	4a0f      	ldr	r2, [pc, #60]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	e007      	b.n	80044da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044ca:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	623b      	str	r3, [r7, #32]
      break;
 80044de:	e002      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044e2:	623b      	str	r3, [r7, #32]
      break;
 80044e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e6:	6a3b      	ldr	r3, [r7, #32]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	372c      	adds	r7, #44	; 0x2c
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40021000 	.word	0x40021000
 80044f8:	007a1200 	.word	0x007a1200
 80044fc:	0800ca10 	.word	0x0800ca10
 8004500:	0800ca20 	.word	0x0800ca20

08004504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <HAL_RCC_GetHCLKFreq+0x14>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000060 	.word	0x20000060

0800451c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004522:	f7ff ffef 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004526:	4601      	mov	r1, r0
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004530:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004534:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	fa92 f2a2 	rbit	r2, r2
 800453c:	603a      	str	r2, [r7, #0]
  return result;
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	40d3      	lsrs	r3, r2
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_RCC_GetPCLK1Freq+0x40>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	0800ca08 	.word	0x0800ca08

08004560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004566:	f7ff ffcd 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 800456a:	4601      	mov	r1, r0
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004574:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	fa92 f2a2 	rbit	r2, r2
 8004580:	603a      	str	r2, [r7, #0]
  return result;
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	40d3      	lsrs	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	0800ca08 	.word	0x0800ca08

080045a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	220f      	movs	r2, #15
 80045b2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCC_GetClockConfig+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b092      	sub	sp, #72	; 0x48
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80d4 	beq.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004638:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	61d3      	str	r3, [r2, #28]
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b45      	ldr	r3, [pc, #276]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b42      	ldr	r3, [pc, #264]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fe f9e3 	bl	8002a38 <HAL_GetTick>
 8004672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fe f9df 	bl	8002a38 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d901      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1d6      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8084 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d07c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	461a      	mov	r2, r3
 80046de:	2301      	movs	r3, #1
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004706:	4a18      	ldr	r2, [pc, #96]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fe f98f 	bl	8002a38 <HAL_GetTick>
 800471a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fe f98b 	bl	8002a38 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e180      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004734:	2302      	movs	r3, #2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	2302      	movs	r3, #2
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
  return result;
 800474c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d108      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004762:	4b01      	ldr	r3, [pc, #4]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	e00d      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004768:	40021000 	.word	0x40021000
 800476c:	40007000 	.word	0x40007000
 8004770:	10908100 	.word	0x10908100
 8004774:	2302      	movs	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	4b9a      	ldr	r3, [pc, #616]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	613a      	str	r2, [r7, #16]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	fa92 f2a2 	rbit	r2, r2
 800478e:	60fa      	str	r2, [r7, #12]
  return result;
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f002 021f 	and.w	r2, r2, #31
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0b7      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047ae:	4b8f      	ldr	r3, [pc, #572]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	498c      	ldr	r1, [pc, #560]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c8:	4b88      	ldr	r3, [pc, #544]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4a87      	ldr	r2, [pc, #540]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e0:	4b82      	ldr	r3, [pc, #520]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f023 0203 	bic.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	497f      	ldr	r1, [pc, #508]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fe:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4978      	ldr	r1, [pc, #480]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800481c:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4970      	ldr	r1, [pc, #448]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800483a:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4969      	ldr	r1, [pc, #420]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004858:	4b64      	ldr	r3, [pc, #400]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	4961      	ldr	r1, [pc, #388]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004876:	4b5d      	ldr	r3, [pc, #372]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f023 0220 	bic.w	r2, r3, #32
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	495a      	ldr	r1, [pc, #360]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004894:	4b55      	ldr	r3, [pc, #340]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	4952      	ldr	r1, [pc, #328]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	494b      	ldr	r1, [pc, #300]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	4943      	ldr	r1, [pc, #268]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048ee:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	493c      	ldr	r1, [pc, #240]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800490c:	4b37      	ldr	r3, [pc, #220]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	4934      	ldr	r1, [pc, #208]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	492d      	ldr	r1, [pc, #180]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	4925      	ldr	r1, [pc, #148]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	491e      	ldr	r1, [pc, #120]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	4916      	ldr	r1, [pc, #88]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	490f      	ldr	r1, [pc, #60]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	4907      	ldr	r1, [pc, #28]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	4913      	ldr	r1, [pc, #76]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	490b      	ldr	r1, [pc, #44]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2e:	4904      	ldr	r1, [pc, #16]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3748      	adds	r7, #72	; 0x48
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e049      	b.n	8004aea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc fed4 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f001 f916 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e04f      	b.n	8004bac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01d      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d018      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0x76>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d115      	bne.n	8004b96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d015      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0xb4>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b82:	d011      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	e008      	b.n	8004ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40013400 	.word	0x40013400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40015000 	.word	0x40015000
 8004bd0:	00010007 	.word	0x00010007

08004bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e049      	b.n	8004c7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f841 	bl	8004c82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f001 f84e 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_TIM_PWM_Start+0x24>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e03c      	b.n	8004d36 <HAL_TIM_PWM_Start+0x9e>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d109      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0x3e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	e02f      	b.n	8004d36 <HAL_TIM_PWM_Start+0x9e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d109      	bne.n	8004cf0 <HAL_TIM_PWM_Start+0x58>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e022      	b.n	8004d36 <HAL_TIM_PWM_Start+0x9e>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d109      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x72>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e015      	b.n	8004d36 <HAL_TIM_PWM_Start+0x9e>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x8c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e008      	b.n	8004d36 <HAL_TIM_PWM_Start+0x9e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0a1      	b.n	8004e82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start+0xb6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	e023      	b.n	8004d96 <HAL_TIM_PWM_Start+0xfe>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0xc6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	e01b      	b.n	8004d96 <HAL_TIM_PWM_Start+0xfe>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0xd6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6c:	e013      	b.n	8004d96 <HAL_TIM_PWM_Start+0xfe>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0xe6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d7c:	e00b      	b.n	8004d96 <HAL_TIM_PWM_Start+0xfe>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start+0xf6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d8c:	e003      	b.n	8004d96 <HAL_TIM_PWM_Start+0xfe>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fcea 	bl	8006778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a38      	ldr	r2, [pc, #224]	; (8004e8c <HAL_TIM_PWM_Start+0x1f4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_TIM_PWM_Start+0x148>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a37      	ldr	r2, [pc, #220]	; (8004e90 <HAL_TIM_PWM_Start+0x1f8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_TIM_PWM_Start+0x148>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <HAL_TIM_PWM_Start+0x1fc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_TIM_PWM_Start+0x148>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a34      	ldr	r2, [pc, #208]	; (8004e98 <HAL_TIM_PWM_Start+0x200>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_TIM_PWM_Start+0x148>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a32      	ldr	r2, [pc, #200]	; (8004e9c <HAL_TIM_PWM_Start+0x204>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_TIM_PWM_Start+0x148>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a31      	ldr	r2, [pc, #196]	; (8004ea0 <HAL_TIM_PWM_Start+0x208>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_PWM_Start+0x14c>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_PWM_Start+0x14e>
 8004de4:	2300      	movs	r3, #0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <HAL_TIM_PWM_Start+0x1f4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d018      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <HAL_TIM_PWM_Start+0x20c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_TIM_PWM_Start+0x210>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_TIM_PWM_Start+0x1f8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_TIM_PWM_Start+0x1fc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x1a8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_TIM_PWM_Start+0x208>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d115      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_TIM_PWM_Start+0x214>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d015      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x1e6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d011      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	e008      	b.n	8004e7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40015000 	.word	0x40015000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	00010007 	.word	0x00010007

08004eb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fc58 	bl	8006778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <HAL_TIM_PWM_Stop+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIM_PWM_Stop+0x54>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a3f      	ldr	r2, [pc, #252]	; (8004fd4 <HAL_TIM_PWM_Stop+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIM_PWM_Stop+0x54>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a3d      	ldr	r2, [pc, #244]	; (8004fd8 <HAL_TIM_PWM_Stop+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIM_PWM_Stop+0x54>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3c      	ldr	r2, [pc, #240]	; (8004fdc <HAL_TIM_PWM_Stop+0x12c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_PWM_Stop+0x54>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3a      	ldr	r2, [pc, #232]	; (8004fe0 <HAL_TIM_PWM_Stop+0x130>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_PWM_Stop+0x54>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a39      	ldr	r2, [pc, #228]	; (8004fe4 <HAL_TIM_PWM_Stop+0x134>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_PWM_Stop+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_PWM_Stop+0x5a>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d017      	beq.n	8004f3e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_TIM_PWM_Stop+0x8e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1a      	ldr	r2, [r3, #32]
 8004f24:	f240 4344 	movw	r3, #1092	; 0x444
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_PWM_Stop+0x8e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_TIM_PWM_Stop+0xbe>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	f240 4344 	movw	r3, #1092	; 0x444
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d107      	bne.n	8004f6e <HAL_TIM_PWM_Stop+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Stop+0xce>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	e023      	b.n	8004fc6 <HAL_TIM_PWM_Stop+0x116>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Stop+0xde>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	e01b      	b.n	8004fc6 <HAL_TIM_PWM_Stop+0x116>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Stop+0xee>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f9c:	e013      	b.n	8004fc6 <HAL_TIM_PWM_Stop+0x116>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Stop+0xfe>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fac:	e00b      	b.n	8004fc6 <HAL_TIM_PWM_Stop+0x116>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Stop+0x10e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	e003      	b.n	8004fc6 <HAL_TIM_PWM_Stop+0x116>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800
 8004fe4:	40015000 	.word	0x40015000

08004fe8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e049      	b.n	800508e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f841 	bl	8005096 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fe44 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_TIM_IC_Start_IT+0x1e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e023      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x66>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start_IT+0x2e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e01b      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x66>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0x3e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	e013      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x66>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start_IT+0x4e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x66>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d104      	bne.n	800510a <HAL_TIM_IC_Start_IT+0x5e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005106:	b2db      	uxtb	r3, r3
 8005108:	e003      	b.n	8005112 <HAL_TIM_IC_Start_IT+0x66>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005110:	b2db      	uxtb	r3, r3
 8005112:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_TIM_IC_Start_IT+0x78>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e013      	b.n	800514c <HAL_TIM_IC_Start_IT+0xa0>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d104      	bne.n	8005134 <HAL_TIM_IC_Start_IT+0x88>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e00b      	b.n	800514c <HAL_TIM_IC_Start_IT+0xa0>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b08      	cmp	r3, #8
 8005138:	d104      	bne.n	8005144 <HAL_TIM_IC_Start_IT+0x98>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e003      	b.n	800514c <HAL_TIM_IC_Start_IT+0xa0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800514a:	b2db      	uxtb	r3, r3
 800514c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800514e:	7bbb      	ldrb	r3, [r7, #14]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d102      	bne.n	800515a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005154:	7b7b      	ldrb	r3, [r7, #13]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0dd      	b.n	800531a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Start_IT+0xc2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	e023      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x10a>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Start_IT+0xd2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	e01b      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x10a>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Start_IT+0xe2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	e013      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x10a>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Start_IT+0xf2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519c:	e00b      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x10a>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0x102>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ac:	e003      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x10a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Start_IT+0x11a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c4:	e013      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x142>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Start_IT+0x12a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x142>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_IC_Start_IT+0x13a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e4:	e003      	b.n	80051ee <HAL_TIM_IC_Start_IT+0x142>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d841      	bhi.n	8005278 <HAL_TIM_IC_Start_IT+0x1cc>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_TIM_IC_Start_IT+0x150>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005279 	.word	0x08005279
 8005204:	08005279 	.word	0x08005279
 8005208:	08005279 	.word	0x08005279
 800520c:	08005243 	.word	0x08005243
 8005210:	08005279 	.word	0x08005279
 8005214:	08005279 	.word	0x08005279
 8005218:	08005279 	.word	0x08005279
 800521c:	08005255 	.word	0x08005255
 8005220:	08005279 	.word	0x08005279
 8005224:	08005279 	.word	0x08005279
 8005228:	08005279 	.word	0x08005279
 800522c:	08005267 	.word	0x08005267
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0202 	orr.w	r2, r2, #2
 800523e:	60da      	str	r2, [r3, #12]
      break;
 8005240:	e01d      	b.n	800527e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0204 	orr.w	r2, r2, #4
 8005250:	60da      	str	r2, [r3, #12]
      break;
 8005252:	e014      	b.n	800527e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	60da      	str	r2, [r3, #12]
      break;
 8005264:	e00b      	b.n	800527e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0210 	orr.w	r2, r2, #16
 8005274:	60da      	str	r2, [r3, #12]
      break;
 8005276:	e002      	b.n	800527e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	bf00      	nop
  }

  if (status == HAL_OK)
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d149      	bne.n	8005318 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fa73 	bl	8006778 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a23      	ldr	r2, [pc, #140]	; (8005324 <HAL_TIM_IC_Start_IT+0x278>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01d      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d018      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <HAL_TIM_IC_Start_IT+0x27c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_TIM_IC_Start_IT+0x280>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_TIM_IC_Start_IT+0x284>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_TIM_IC_Start_IT+0x288>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_TIM_IC_Start_IT+0x22c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_TIM_IC_Start_IT+0x28c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d115      	bne.n	8005304 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <HAL_TIM_IC_Start_IT+0x290>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d015      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x26a>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d011      	beq.n	8005316 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	e008      	b.n	8005316 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e000      	b.n	8005318 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005316:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40015000 	.word	0x40015000
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b0c      	cmp	r3, #12
 8005352:	d841      	bhi.n	80053d8 <HAL_TIM_IC_Stop_IT+0x98>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005391 	.word	0x08005391
 8005360:	080053d9 	.word	0x080053d9
 8005364:	080053d9 	.word	0x080053d9
 8005368:	080053d9 	.word	0x080053d9
 800536c:	080053a3 	.word	0x080053a3
 8005370:	080053d9 	.word	0x080053d9
 8005374:	080053d9 	.word	0x080053d9
 8005378:	080053d9 	.word	0x080053d9
 800537c:	080053b5 	.word	0x080053b5
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053d9 	.word	0x080053d9
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080053c7 	.word	0x080053c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0202 	bic.w	r2, r2, #2
 800539e:	60da      	str	r2, [r3, #12]
      break;
 80053a0:	e01d      	b.n	80053de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0204 	bic.w	r2, r2, #4
 80053b0:	60da      	str	r2, [r3, #12]
      break;
 80053b2:	e014      	b.n	80053de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0208 	bic.w	r2, r2, #8
 80053c2:	60da      	str	r2, [r3, #12]
      break;
 80053c4:	e00b      	b.n	80053de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0210 	bic.w	r2, r2, #16
 80053d4:	60da      	str	r2, [r3, #12]
      break;
 80053d6:	e002      	b.n	80053de <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      break;
 80053dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d166      	bne.n	80054b2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f9c3 	bl	8006778 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a1a      	ldr	r2, [r3, #32]
 80053f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_TIM_IC_Stop_IT+0xe2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f240 4344 	movw	r3, #1092	; 0x444
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IC_Stop_IT+0xe2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_TIM_IC_Stop_IT+0xf2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005430:	e023      	b.n	800547a <HAL_TIM_IC_Stop_IT+0x13a>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d104      	bne.n	8005442 <HAL_TIM_IC_Stop_IT+0x102>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	e01b      	b.n	800547a <HAL_TIM_IC_Stop_IT+0x13a>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Stop_IT+0x112>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005450:	e013      	b.n	800547a <HAL_TIM_IC_Stop_IT+0x13a>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d104      	bne.n	8005462 <HAL_TIM_IC_Stop_IT+0x122>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005460:	e00b      	b.n	800547a <HAL_TIM_IC_Stop_IT+0x13a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d104      	bne.n	8005472 <HAL_TIM_IC_Stop_IT+0x132>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005470:	e003      	b.n	800547a <HAL_TIM_IC_Stop_IT+0x13a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Stop_IT+0x14a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005488:	e013      	b.n	80054b2 <HAL_TIM_IC_Stop_IT+0x172>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Stop_IT+0x15a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_IC_Stop_IT+0x172>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d104      	bne.n	80054aa <HAL_TIM_IC_Stop_IT+0x16a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a8:	e003      	b.n	80054b2 <HAL_TIM_IC_Stop_IT+0x172>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d122      	bne.n	8005518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0202 	mvn.w	r2, #2
 80054e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fd f8de 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fbb6 	bl	8005c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fbbd 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b04      	cmp	r3, #4
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0204 	mvn.w	r2, #4
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd f8b4 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fb8c 	bl	8005c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb93 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b08      	cmp	r3, #8
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b08      	cmp	r3, #8
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0208 	mvn.w	r2, #8
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fd f88a 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fb62 	bl	8005c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fb69 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0210 	mvn.w	r2, #16
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2208      	movs	r2, #8
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fd f860 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fb38 	bl	8005c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb3f 	bl	8005c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10e      	bne.n	8005640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0201 	mvn.w	r2, #1
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fa1c 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d10e      	bne.n	800566c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d107      	bne.n	800566c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 f9c8 	bl	80069fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567a:	d10e      	bne.n	800569a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d107      	bne.n	800569a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 f9bb 	bl	8006a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b40      	cmp	r3, #64	; 0x40
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 faed 	bl	8005ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0220 	mvn.w	r2, #32
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f97b 	bl	80069e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005714:	2302      	movs	r3, #2
 8005716:	e088      	b.n	800582a <HAL_TIM_IC_ConfigChannel+0x130>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11b      	bne.n	800575e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005736:	f000 fe61 	bl	80063fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 020c 	bic.w	r2, r2, #12
 8005748:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	619a      	str	r2, [r3, #24]
 800575c:	e060      	b.n	8005820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d11c      	bne.n	800579e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005774:	f000 fedf 	bl	8006536 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005786:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6999      	ldr	r1, [r3, #24]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	619a      	str	r2, [r3, #24]
 800579c:	e040      	b.n	8005820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057b4:	f000 ff2c 	bl	8006610 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 020c 	bic.w	r2, r2, #12
 80057c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69d9      	ldr	r1, [r3, #28]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	61da      	str	r2, [r3, #28]
 80057da:	e021      	b.n	8005820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d11c      	bne.n	800581c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80057f2:	f000 ff49 	bl	8006688 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005804:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69d9      	ldr	r1, [r3, #28]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	021a      	lsls	r2, r3, #8
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	61da      	str	r2, [r3, #28]
 800581a:	e001      	b.n	8005820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ff      	b.n	8005a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b14      	cmp	r3, #20
 800585e:	f200 80f0 	bhi.w	8005a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	080058bd 	.word	0x080058bd
 800586c:	08005a43 	.word	0x08005a43
 8005870:	08005a43 	.word	0x08005a43
 8005874:	08005a43 	.word	0x08005a43
 8005878:	080058fd 	.word	0x080058fd
 800587c:	08005a43 	.word	0x08005a43
 8005880:	08005a43 	.word	0x08005a43
 8005884:	08005a43 	.word	0x08005a43
 8005888:	0800593f 	.word	0x0800593f
 800588c:	08005a43 	.word	0x08005a43
 8005890:	08005a43 	.word	0x08005a43
 8005894:	08005a43 	.word	0x08005a43
 8005898:	0800597f 	.word	0x0800597f
 800589c:	08005a43 	.word	0x08005a43
 80058a0:	08005a43 	.word	0x08005a43
 80058a4:	08005a43 	.word	0x08005a43
 80058a8:	080059c1 	.word	0x080059c1
 80058ac:	08005a43 	.word	0x08005a43
 80058b0:	08005a43 	.word	0x08005a43
 80058b4:	08005a43 	.word	0x08005a43
 80058b8:	08005a01 	.word	0x08005a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa94 	bl	8005df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0208 	orr.w	r2, r2, #8
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	619a      	str	r2, [r3, #24]
      break;
 80058fa:	e0a5      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fb0e 	bl	8005f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6999      	ldr	r1, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]
      break;
 800593c:	e084      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fb81 	bl	800604c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0208 	orr.w	r2, r2, #8
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	61da      	str	r2, [r3, #28]
      break;
 800597c:	e064      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fbf3 	bl	8006170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69d9      	ldr	r1, [r3, #28]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	61da      	str	r2, [r3, #28]
      break;
 80059be:	e043      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fc42 	bl	8006250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0204 	bic.w	r2, r2, #4
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059fe:	e023      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fc8c 	bl	8006324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a40:	e002      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
      break;
 8005a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b6      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0x18a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xd8>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	f000 8086 	beq.w	8005bd2 <HAL_TIM_ConfigClockSource+0x176>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xaa>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x11e>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xfe>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x13e>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b16:	f000 fe0f 	bl	8006738 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04f      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 fdf8 	bl	8006738 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 fcb6 	bl	80064d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fdc5 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fd12 	bl	80065b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	; 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fdb5 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fc96 	bl	80064d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fda5 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fd9c 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d831      	bhi.n	8005c68 <HAL_TIM_ReadCapturedValue+0x78>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c4b 	.word	0x08005c4b
 8005c20:	08005c69 	.word	0x08005c69
 8005c24:	08005c69 	.word	0x08005c69
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	60fb      	str	r3, [r7, #12]

      break;
 8005c48:	e00f      	b.n	8005c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	60fb      	str	r3, [r7, #12]

      break;
 8005c52:	e00a      	b.n	8005c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	60fb      	str	r3, [r7, #12]

      break;
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	60fb      	str	r3, [r7, #12]

      break;
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c68:	bf00      	nop
  }

  return tmpreg;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <TIM_Base_SetConfig+0x11c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d00f      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3f      	ldr	r2, [pc, #252]	; (8005dd4 <TIM_Base_SetConfig+0x120>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3e      	ldr	r2, [pc, #248]	; (8005dd8 <TIM_Base_SetConfig+0x124>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a3d      	ldr	r2, [pc, #244]	; (8005ddc <TIM_Base_SetConfig+0x128>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <TIM_Base_SetConfig+0x12c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a31      	ldr	r2, [pc, #196]	; (8005dd0 <TIM_Base_SetConfig+0x11c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d01b      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2e      	ldr	r2, [pc, #184]	; (8005dd4 <TIM_Base_SetConfig+0x120>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d017      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	; (8005dd8 <TIM_Base_SetConfig+0x124>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2c      	ldr	r2, [pc, #176]	; (8005ddc <TIM_Base_SetConfig+0x128>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <TIM_Base_SetConfig+0x130>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <TIM_Base_SetConfig+0x134>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <TIM_Base_SetConfig+0x138>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <TIM_Base_SetConfig+0x12c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d108      	bne.n	8005d60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <TIM_Base_SetConfig+0x11c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_Base_SetConfig+0x100>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <TIM_Base_SetConfig+0x128>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00f      	beq.n	8005db4 <TIM_Base_SetConfig+0x100>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <TIM_Base_SetConfig+0x130>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_Base_SetConfig+0x100>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a12      	ldr	r2, [pc, #72]	; (8005de8 <TIM_Base_SetConfig+0x134>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_Base_SetConfig+0x100>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <TIM_Base_SetConfig+0x138>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x100>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <TIM_Base_SetConfig+0x12c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40015000 	.word	0x40015000
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800

08005df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0201 	bic.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 0302 	bic.w	r3, r3, #2
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a30      	ldr	r2, [pc, #192]	; (8005f0c <TIM_OC1_SetConfig+0x11c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <TIM_OC1_SetConfig+0x88>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a2f      	ldr	r2, [pc, #188]	; (8005f10 <TIM_OC1_SetConfig+0x120>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_OC1_SetConfig+0x88>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <TIM_OC1_SetConfig+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC1_SetConfig+0x88>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <TIM_OC1_SetConfig+0x128>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC1_SetConfig+0x88>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <TIM_OC1_SetConfig+0x12c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC1_SetConfig+0x88>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <TIM_OC1_SetConfig+0x130>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10c      	bne.n	8005e92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0308 	bic.w	r3, r3, #8
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <TIM_OC1_SetConfig+0x11c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <TIM_OC1_SetConfig+0xd2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <TIM_OC1_SetConfig+0x120>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_OC1_SetConfig+0xd2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <TIM_OC1_SetConfig+0x124>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_OC1_SetConfig+0xd2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <TIM_OC1_SetConfig+0x128>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_OC1_SetConfig+0xd2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <TIM_OC1_SetConfig+0x12c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_OC1_SetConfig+0xd2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <TIM_OC1_SetConfig+0x130>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d111      	bne.n	8005ee6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	621a      	str	r2, [r3, #32]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40013400 	.word	0x40013400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40014400 	.word	0x40014400
 8005f1c:	40014800 	.word	0x40014800
 8005f20:	40015000 	.word	0x40015000

08005f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0210 	bic.w	r2, r3, #16
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 0320 	bic.w	r3, r3, #32
 8005f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <TIM_OC2_SetConfig+0x110>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_OC2_SetConfig+0x74>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a2b      	ldr	r2, [pc, #172]	; (8006038 <TIM_OC2_SetConfig+0x114>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC2_SetConfig+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a2a      	ldr	r2, [pc, #168]	; (800603c <TIM_OC2_SetConfig+0x118>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10d      	bne.n	8005fb4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <TIM_OC2_SetConfig+0x110>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <TIM_OC2_SetConfig+0xc0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <TIM_OC2_SetConfig+0x114>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_OC2_SetConfig+0xc0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <TIM_OC2_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_OC2_SetConfig+0xc0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <TIM_OC2_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_OC2_SetConfig+0xc0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <TIM_OC2_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC2_SetConfig+0xc0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <TIM_OC2_SetConfig+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40013400 	.word	0x40013400
 800603c:	40015000 	.word	0x40015000
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <TIM_OC3_SetConfig+0x10c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC3_SetConfig+0x72>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <TIM_OC3_SetConfig+0x110>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC3_SetConfig+0x72>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a29      	ldr	r2, [pc, #164]	; (8006160 <TIM_OC3_SetConfig+0x114>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10d      	bne.n	80060da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <TIM_OC3_SetConfig+0x10c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <TIM_OC3_SetConfig+0xbe>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1d      	ldr	r2, [pc, #116]	; (800615c <TIM_OC3_SetConfig+0x110>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <TIM_OC3_SetConfig+0xbe>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <TIM_OC3_SetConfig+0x118>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_OC3_SetConfig+0xbe>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <TIM_OC3_SetConfig+0x11c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_OC3_SetConfig+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1b      	ldr	r2, [pc, #108]	; (800616c <TIM_OC3_SetConfig+0x120>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC3_SetConfig+0xbe>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <TIM_OC3_SetConfig+0x114>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40015000 	.word	0x40015000
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800

08006170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	031b      	lsls	r3, r3, #12
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	; (8006238 <TIM_OC4_SetConfig+0xc8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <TIM_OC4_SetConfig+0x8c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a19      	ldr	r2, [pc, #100]	; (800623c <TIM_OC4_SetConfig+0xcc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00f      	beq.n	80061fc <TIM_OC4_SetConfig+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a18      	ldr	r2, [pc, #96]	; (8006240 <TIM_OC4_SetConfig+0xd0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00b      	beq.n	80061fc <TIM_OC4_SetConfig+0x8c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <TIM_OC4_SetConfig+0xd4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <TIM_OC4_SetConfig+0x8c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <TIM_OC4_SetConfig+0xd8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC4_SetConfig+0x8c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <TIM_OC4_SetConfig+0xdc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d109      	bne.n	8006210 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	019b      	lsls	r3, r3, #6
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40012c00 	.word	0x40012c00
 800623c:	40013400 	.word	0x40013400
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800
 800624c:	40015000 	.word	0x40015000

08006250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a19      	ldr	r2, [pc, #100]	; (800630c <TIM_OC5_SetConfig+0xbc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <TIM_OC5_SetConfig+0x82>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a18      	ldr	r2, [pc, #96]	; (8006310 <TIM_OC5_SetConfig+0xc0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00f      	beq.n	80062d2 <TIM_OC5_SetConfig+0x82>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a17      	ldr	r2, [pc, #92]	; (8006314 <TIM_OC5_SetConfig+0xc4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <TIM_OC5_SetConfig+0x82>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <TIM_OC5_SetConfig+0xc8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d007      	beq.n	80062d2 <TIM_OC5_SetConfig+0x82>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <TIM_OC5_SetConfig+0xcc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC5_SetConfig+0x82>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a14      	ldr	r2, [pc, #80]	; (8006320 <TIM_OC5_SetConfig+0xd0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d109      	bne.n	80062e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	40015000 	.word	0x40015000

08006324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800636a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	051b      	lsls	r3, r3, #20
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <TIM_OC6_SetConfig+0xc0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <TIM_OC6_SetConfig+0x84>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <TIM_OC6_SetConfig+0xc4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00f      	beq.n	80063a8 <TIM_OC6_SetConfig+0x84>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a18      	ldr	r2, [pc, #96]	; (80063ec <TIM_OC6_SetConfig+0xc8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00b      	beq.n	80063a8 <TIM_OC6_SetConfig+0x84>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <TIM_OC6_SetConfig+0xcc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_OC6_SetConfig+0x84>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <TIM_OC6_SetConfig+0xd0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC6_SetConfig+0x84>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <TIM_OC6_SetConfig+0xd4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d109      	bne.n	80063bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40015000 	.word	0x40015000

080063fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0201 	bic.w	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <TIM_TI1_SetConfig+0xc4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d017      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006430:	d013      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a23      	ldr	r2, [pc, #140]	; (80064c4 <TIM_TI1_SetConfig+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a22      	ldr	r2, [pc, #136]	; (80064c8 <TIM_TI1_SetConfig+0xcc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4a21      	ldr	r2, [pc, #132]	; (80064cc <TIM_TI1_SetConfig+0xd0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a20      	ldr	r2, [pc, #128]	; (80064d0 <TIM_TI1_SetConfig+0xd4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_TI1_SetConfig+0x5e>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <TIM_TI1_SetConfig+0xd8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <TIM_TI1_SetConfig+0x62>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <TIM_TI1_SetConfig+0x64>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e003      	b.n	800647e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	b2db      	uxtb	r3, r3
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f023 030a 	bic.w	r3, r3, #10
 8006498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f003 030a 	and.w	r3, r3, #10
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40015000 	.word	0x40015000

080064d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 030a 	bic.w	r3, r3, #10
 8006514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f023 0210 	bic.w	r2, r3, #16
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	b29b      	uxth	r3, r3
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006588:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f023 0210 	bic.w	r2, r3, #16
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	031b      	lsls	r3, r3, #12
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	621a      	str	r2, [r3, #32]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	b2db      	uxtb	r3, r3
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006660:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	031b      	lsls	r3, r3, #12
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80066da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	031b      	lsls	r3, r3, #12
 80066e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	f043 0307 	orr.w	r3, r3, #7
 8006724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2201      	movs	r2, #1
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	43db      	mvns	r3, r3
 800679a:	401a      	ands	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	431a      	orrs	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067d8:	2302      	movs	r3, #2
 80067da:	e06d      	b.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2d      	ldr	r2, [pc, #180]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d108      	bne.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006820:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d01d      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d018      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1c      	ldr	r2, [pc, #112]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006892:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40015000 	.word	0x40015000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40014000 	.word	0x40014000

080068dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e06a      	b.n	80069ce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a19      	ldr	r2, [pc, #100]	; (80069dc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d115      	bne.n	80069bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	051b      	lsls	r3, r3, #20
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40015000 	.word	0x40015000

080069e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e040      	b.n	8006ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb f9e2 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	; 0x24
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb76 	bl	8007154 <UART_SetConfig>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e022      	b.n	8006ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fd3e 	bl	80074fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fdc5 	bl	8007640 <UART_CheckIdleState>
 8006ab6:	4603      	mov	r3, r0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d132      	bne.n	8006b3e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_UART_Receive_IT+0x24>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e02b      	b.n	8006b40 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d018      	beq.n	8006b2e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	623b      	str	r3, [r7, #32]
 8006b1c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	69f9      	ldr	r1, [r7, #28]
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	461a      	mov	r2, r3
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fe93 	bl	8007860 <UART_Start_Receive_IT>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	e000      	b.n	8006b40 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b3e:	2302      	movs	r3, #2
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	; 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b0ba      	sub	sp, #232	; 0xe8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b72:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b76:	4013      	ands	r3, r2
 8006b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d115      	bne.n	8006bb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00f      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 82ab 	beq.w	80070fc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
      }
      return;
 8006bae:	e2a5      	b.n	80070fc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8117 	beq.w	8006de8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bca:	4b85      	ldr	r3, [pc, #532]	; (8006de0 <HAL_UART_IRQHandler+0x298>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 810a 	beq.w	8006de8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <HAL_UART_IRQHandler+0xbc>
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d011      	beq.n	8006c34 <HAL_UART_IRQHandler+0xec>
 8006c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2202      	movs	r2, #2
 8006c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2a:	f043 0204 	orr.w	r2, r3, #4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d011      	beq.n	8006c64 <HAL_UART_IRQHandler+0x11c>
 8006c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2204      	movs	r2, #4
 8006c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d017      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c96:	f043 0208 	orr.w	r2, r3, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d012      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x18a>
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00c      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8211 	beq.w	8007100 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d005      	beq.n	8006d2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04f      	beq.n	8006dca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fe5e 	bl	80079ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d141      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1d9      	bne.n	8006d3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d013      	beq.n	8006dba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <HAL_UART_IRQHandler+0x29c>)
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb ff95 	bl	8002cce <HAL_DMA_Abort_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	e00f      	b.n	8006dda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9b4 	bl	8007128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	e00b      	b.n	8006dda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9b0 	bl	8007128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	e007      	b.n	8006dda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9ac 	bl	8007128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006dd8:	e192      	b.n	8007100 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	bf00      	nop
    return;
 8006ddc:	e190      	b.n	8007100 <HAL_UART_IRQHandler+0x5b8>
 8006dde:	bf00      	nop
 8006de0:	04000120 	.word	0x04000120
 8006de4:	08007ab5 	.word	0x08007ab5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f040 814b 	bne.w	8007088 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8144 	beq.w	8007088 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 813d 	beq.w	8007088 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2210      	movs	r2, #16
 8006e14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	f040 80b5 	bne.w	8006f90 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 8164 	beq.w	8007104 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e46:	429a      	cmp	r2, r3
 8006e48:	f080 815c 	bcs.w	8007104 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	f000 8086 	beq.w	8006f6e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1da      	bne.n	8006e62 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ed0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e1      	bne.n	8006eac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e3      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fb fe77 	bl	8002c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8d7 	bl	800713c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8e:	e0b9      	b.n	8007104 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80ab 	beq.w	8007108 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80a6 	beq.w	8007108 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e4      	bne.n	8006fbc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	623b      	str	r3, [r7, #32]
   return(result);
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e3      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60fb      	str	r3, [r7, #12]
   return(result);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0310 	bic.w	r3, r3, #16
 8007052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	617b      	str	r3, [r7, #20]
   return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e4      	bne.n	800703e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800707a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f85b 	bl	800713c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007086:	e03f      	b.n	8007108 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <HAL_UART_IRQHandler+0x56a>
 8007094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 feea 	bl	8007e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070b0:	e02d      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01c      	beq.n	800710c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
    }
    return;
 80070da:	e017      	b.n	800710c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d012      	beq.n	800710e <HAL_UART_IRQHandler+0x5c6>
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fcf3 	bl	8007ae0 <UART_EndTransmit_IT>
    return;
 80070fa:	e008      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
      return;
 80070fc:	bf00      	nop
 80070fe:	e006      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007100:	bf00      	nop
 8007102:	e004      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007104:	bf00      	nop
 8007106:	e002      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <HAL_UART_IRQHandler+0x5c6>
    return;
 800710c:	bf00      	nop
  }

}
 800710e:	37e8      	adds	r7, #232	; 0xe8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b92      	ldr	r3, [pc, #584]	; (80073c8 <UART_SetConfig+0x274>)
 8007180:	4013      	ands	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	430b      	orrs	r3, r1
 800718a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a80      	ldr	r2, [pc, #512]	; (80073cc <UART_SetConfig+0x278>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d120      	bne.n	8007212 <UART_SetConfig+0xbe>
 80071d0:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <UART_SetConfig+0x27c>)
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d817      	bhi.n	800720c <UART_SetConfig+0xb8>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <UART_SetConfig+0x90>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071f5 	.word	0x080071f5
 80071e8:	08007201 	.word	0x08007201
 80071ec:	08007207 	.word	0x08007207
 80071f0:	080071fb 	.word	0x080071fb
 80071f4:	2301      	movs	r3, #1
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e0b5      	b.n	8007366 <UART_SetConfig+0x212>
 80071fa:	2302      	movs	r3, #2
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e0b2      	b.n	8007366 <UART_SetConfig+0x212>
 8007200:	2304      	movs	r3, #4
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e0af      	b.n	8007366 <UART_SetConfig+0x212>
 8007206:	2308      	movs	r3, #8
 8007208:	77fb      	strb	r3, [r7, #31]
 800720a:	e0ac      	b.n	8007366 <UART_SetConfig+0x212>
 800720c:	2310      	movs	r3, #16
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e0a9      	b.n	8007366 <UART_SetConfig+0x212>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a6f      	ldr	r2, [pc, #444]	; (80073d4 <UART_SetConfig+0x280>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d124      	bne.n	8007266 <UART_SetConfig+0x112>
 800721c:	4b6c      	ldr	r3, [pc, #432]	; (80073d0 <UART_SetConfig+0x27c>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007228:	d011      	beq.n	800724e <UART_SetConfig+0xfa>
 800722a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800722e:	d817      	bhi.n	8007260 <UART_SetConfig+0x10c>
 8007230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007234:	d011      	beq.n	800725a <UART_SetConfig+0x106>
 8007236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800723a:	d811      	bhi.n	8007260 <UART_SetConfig+0x10c>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <UART_SetConfig+0xf4>
 8007240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007244:	d006      	beq.n	8007254 <UART_SetConfig+0x100>
 8007246:	e00b      	b.n	8007260 <UART_SetConfig+0x10c>
 8007248:	2300      	movs	r3, #0
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e08b      	b.n	8007366 <UART_SetConfig+0x212>
 800724e:	2302      	movs	r3, #2
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e088      	b.n	8007366 <UART_SetConfig+0x212>
 8007254:	2304      	movs	r3, #4
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e085      	b.n	8007366 <UART_SetConfig+0x212>
 800725a:	2308      	movs	r3, #8
 800725c:	77fb      	strb	r3, [r7, #31]
 800725e:	e082      	b.n	8007366 <UART_SetConfig+0x212>
 8007260:	2310      	movs	r3, #16
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e07f      	b.n	8007366 <UART_SetConfig+0x212>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a5b      	ldr	r2, [pc, #364]	; (80073d8 <UART_SetConfig+0x284>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d124      	bne.n	80072ba <UART_SetConfig+0x166>
 8007270:	4b57      	ldr	r3, [pc, #348]	; (80073d0 <UART_SetConfig+0x27c>)
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800727c:	d011      	beq.n	80072a2 <UART_SetConfig+0x14e>
 800727e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007282:	d817      	bhi.n	80072b4 <UART_SetConfig+0x160>
 8007284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007288:	d011      	beq.n	80072ae <UART_SetConfig+0x15a>
 800728a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800728e:	d811      	bhi.n	80072b4 <UART_SetConfig+0x160>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <UART_SetConfig+0x148>
 8007294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007298:	d006      	beq.n	80072a8 <UART_SetConfig+0x154>
 800729a:	e00b      	b.n	80072b4 <UART_SetConfig+0x160>
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	e061      	b.n	8007366 <UART_SetConfig+0x212>
 80072a2:	2302      	movs	r3, #2
 80072a4:	77fb      	strb	r3, [r7, #31]
 80072a6:	e05e      	b.n	8007366 <UART_SetConfig+0x212>
 80072a8:	2304      	movs	r3, #4
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e05b      	b.n	8007366 <UART_SetConfig+0x212>
 80072ae:	2308      	movs	r3, #8
 80072b0:	77fb      	strb	r3, [r7, #31]
 80072b2:	e058      	b.n	8007366 <UART_SetConfig+0x212>
 80072b4:	2310      	movs	r3, #16
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e055      	b.n	8007366 <UART_SetConfig+0x212>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a47      	ldr	r2, [pc, #284]	; (80073dc <UART_SetConfig+0x288>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d124      	bne.n	800730e <UART_SetConfig+0x1ba>
 80072c4:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <UART_SetConfig+0x27c>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072d0:	d011      	beq.n	80072f6 <UART_SetConfig+0x1a2>
 80072d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072d6:	d817      	bhi.n	8007308 <UART_SetConfig+0x1b4>
 80072d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072dc:	d011      	beq.n	8007302 <UART_SetConfig+0x1ae>
 80072de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072e2:	d811      	bhi.n	8007308 <UART_SetConfig+0x1b4>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <UART_SetConfig+0x19c>
 80072e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ec:	d006      	beq.n	80072fc <UART_SetConfig+0x1a8>
 80072ee:	e00b      	b.n	8007308 <UART_SetConfig+0x1b4>
 80072f0:	2300      	movs	r3, #0
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e037      	b.n	8007366 <UART_SetConfig+0x212>
 80072f6:	2302      	movs	r3, #2
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	e034      	b.n	8007366 <UART_SetConfig+0x212>
 80072fc:	2304      	movs	r3, #4
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e031      	b.n	8007366 <UART_SetConfig+0x212>
 8007302:	2308      	movs	r3, #8
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e02e      	b.n	8007366 <UART_SetConfig+0x212>
 8007308:	2310      	movs	r3, #16
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e02b      	b.n	8007366 <UART_SetConfig+0x212>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a33      	ldr	r2, [pc, #204]	; (80073e0 <UART_SetConfig+0x28c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d124      	bne.n	8007362 <UART_SetConfig+0x20e>
 8007318:	4b2d      	ldr	r3, [pc, #180]	; (80073d0 <UART_SetConfig+0x27c>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007324:	d011      	beq.n	800734a <UART_SetConfig+0x1f6>
 8007326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800732a:	d817      	bhi.n	800735c <UART_SetConfig+0x208>
 800732c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007330:	d011      	beq.n	8007356 <UART_SetConfig+0x202>
 8007332:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007336:	d811      	bhi.n	800735c <UART_SetConfig+0x208>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <UART_SetConfig+0x1f0>
 800733c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007340:	d006      	beq.n	8007350 <UART_SetConfig+0x1fc>
 8007342:	e00b      	b.n	800735c <UART_SetConfig+0x208>
 8007344:	2300      	movs	r3, #0
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e00d      	b.n	8007366 <UART_SetConfig+0x212>
 800734a:	2302      	movs	r3, #2
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e00a      	b.n	8007366 <UART_SetConfig+0x212>
 8007350:	2304      	movs	r3, #4
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e007      	b.n	8007366 <UART_SetConfig+0x212>
 8007356:	2308      	movs	r3, #8
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	e004      	b.n	8007366 <UART_SetConfig+0x212>
 800735c:	2310      	movs	r3, #16
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e001      	b.n	8007366 <UART_SetConfig+0x212>
 8007362:	2310      	movs	r3, #16
 8007364:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736e:	d16b      	bne.n	8007448 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007370:	7ffb      	ldrb	r3, [r7, #31]
 8007372:	2b08      	cmp	r3, #8
 8007374:	d838      	bhi.n	80073e8 <UART_SetConfig+0x294>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <UART_SetConfig+0x228>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	080073a1 	.word	0x080073a1
 8007380:	080073a9 	.word	0x080073a9
 8007384:	080073b1 	.word	0x080073b1
 8007388:	080073e9 	.word	0x080073e9
 800738c:	080073b7 	.word	0x080073b7
 8007390:	080073e9 	.word	0x080073e9
 8007394:	080073e9 	.word	0x080073e9
 8007398:	080073e9 	.word	0x080073e9
 800739c:	080073bf 	.word	0x080073bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a0:	f7fd f8bc 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 80073a4:	61b8      	str	r0, [r7, #24]
        break;
 80073a6:	e024      	b.n	80073f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a8:	f7fd f8da 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 80073ac:	61b8      	str	r0, [r7, #24]
        break;
 80073ae:	e020      	b.n	80073f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <UART_SetConfig+0x290>)
 80073b2:	61bb      	str	r3, [r7, #24]
        break;
 80073b4:	e01d      	b.n	80073f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b6:	f7fd f83b 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80073ba:	61b8      	str	r0, [r7, #24]
        break;
 80073bc:	e019      	b.n	80073f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c2:	61bb      	str	r3, [r7, #24]
        break;
 80073c4:	e015      	b.n	80073f2 <UART_SetConfig+0x29e>
 80073c6:	bf00      	nop
 80073c8:	efff69f3 	.word	0xefff69f3
 80073cc:	40013800 	.word	0x40013800
 80073d0:	40021000 	.word	0x40021000
 80073d4:	40004400 	.word	0x40004400
 80073d8:	40004800 	.word	0x40004800
 80073dc:	40004c00 	.word	0x40004c00
 80073e0:	40005000 	.word	0x40005000
 80073e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	77bb      	strb	r3, [r7, #30]
        break;
 80073f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d073      	beq.n	80074e0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	005a      	lsls	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	441a      	add	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d916      	bls.n	8007442 <UART_SetConfig+0x2ee>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741a:	d212      	bcs.n	8007442 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f023 030f 	bic.w	r3, r3, #15
 8007424:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	b29a      	uxth	r2, r3
 8007432:	89fb      	ldrh	r3, [r7, #14]
 8007434:	4313      	orrs	r3, r2
 8007436:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	89fa      	ldrh	r2, [r7, #14]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	e04e      	b.n	80074e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	77bb      	strb	r3, [r7, #30]
 8007446:	e04b      	b.n	80074e0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007448:	7ffb      	ldrb	r3, [r7, #31]
 800744a:	2b08      	cmp	r3, #8
 800744c:	d827      	bhi.n	800749e <UART_SetConfig+0x34a>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x300>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	0800749f 	.word	0x0800749f
 8007464:	0800748f 	.word	0x0800748f
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
 8007474:	08007497 	.word	0x08007497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fd f850 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 800747c:	61b8      	str	r0, [r7, #24]
        break;
 800747e:	e013      	b.n	80074a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007480:	f7fd f86e 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 8007484:	61b8      	str	r0, [r7, #24]
        break;
 8007486:	e00f      	b.n	80074a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <UART_SetConfig+0x3a4>)
 800748a:	61bb      	str	r3, [r7, #24]
        break;
 800748c:	e00c      	b.n	80074a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fc ffcf 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8007492:	61b8      	str	r0, [r7, #24]
        break;
 8007494:	e008      	b.n	80074a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749a:	61bb      	str	r3, [r7, #24]
        break;
 800749c:	e004      	b.n	80074a8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	77bb      	strb	r3, [r7, #30]
        break;
 80074a6:	bf00      	nop
    }

    if (pclk != 0U)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d018      	beq.n	80074e0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085a      	lsrs	r2, r3, #1
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	441a      	add	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b0f      	cmp	r3, #15
 80074c6:	d909      	bls.n	80074dc <UART_SetConfig+0x388>
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ce:	d205      	bcs.n	80074dc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e001      	b.n	80074e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	007a1200 	.word	0x007a1200

080074fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fa:	d10a      	bne.n	8007612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b098      	sub	sp, #96	; 0x60
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007650:	f7fb f9f2 	bl	8002a38 <HAL_GetTick>
 8007654:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d12e      	bne.n	80076c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f88c 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
 800769e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e062      	b.n	8007788 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d149      	bne.n	8007764 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d8:	2200      	movs	r2, #0
 80076da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f856 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03c      	beq.n	8007764 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	623b      	str	r3, [r7, #32]
   return(result);
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007708:	633b      	str	r3, [r7, #48]	; 0x30
 800770a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800770e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	60fb      	str	r3, [r7, #12]
   return(result);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	64bb      	str	r3, [r7, #72]	; 0x48
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773c:	61fa      	str	r2, [r7, #28]
 800773e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	69b9      	ldr	r1, [r7, #24]
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	617b      	str	r3, [r7, #20]
   return(result);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e5      	bne.n	800771c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e011      	b.n	8007788 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3758      	adds	r7, #88	; 0x58
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	e049      	b.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d045      	beq.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077aa:	f7fb f945 	bl	8002a38 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d302      	bcc.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e048      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d031      	beq.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d110      	bne.n	8007802 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2208      	movs	r2, #8
 80077e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f8ff 	bl	80079ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2208      	movs	r2, #8
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e029      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800780c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007810:	d111      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f8e5 	bl	80079ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e00f      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4013      	ands	r3, r2
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	429a      	cmp	r2, r3
 8007852:	d0a6      	beq.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007860:	b480      	push	{r7}
 8007862:	b097      	sub	sp, #92	; 0x5c
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007892:	d10e      	bne.n	80078b2 <UART_Start_Receive_IT+0x52>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d105      	bne.n	80078a8 <UART_Start_Receive_IT+0x48>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80078a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078a6:	e02d      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22ff      	movs	r2, #255	; 0xff
 80078ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078b0:	e028      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <UART_Start_Receive_IT+0x76>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <UART_Start_Receive_IT+0x6c>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078ca:	e01b      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	227f      	movs	r2, #127	; 0x7f
 80078d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078d4:	e016      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078de:	d10d      	bne.n	80078fc <UART_Start_Receive_IT+0x9c>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d104      	bne.n	80078f2 <UART_Start_Receive_IT+0x92>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	227f      	movs	r2, #127	; 0x7f
 80078ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078f0:	e008      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	223f      	movs	r2, #63	; 0x3f
 80078f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078fa:	e003      	b.n	8007904 <UART_Start_Receive_IT+0xa4>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2222      	movs	r2, #34	; 0x22
 8007910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3308      	adds	r3, #8
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	657b      	str	r3, [r7, #84]	; 0x54
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007934:	64ba      	str	r2, [r7, #72]	; 0x48
 8007936:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800793a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e5      	bne.n	8007914 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007950:	d107      	bne.n	8007962 <UART_Start_Receive_IT+0x102>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <UART_Start_Receive_IT+0x184>)
 800795e:	669a      	str	r2, [r3, #104]	; 0x68
 8007960:	e002      	b.n	8007968 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <UART_Start_Receive_IT+0x188>)
 8007966:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d019      	beq.n	80079a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
 8007990:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <UART_Start_Receive_IT+0x110>
 80079a2:	e018      	b.n	80079d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	613b      	str	r3, [r7, #16]
   return(result);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f043 0320 	orr.w	r3, r3, #32
 80079b8:	653b      	str	r3, [r7, #80]	; 0x50
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c2:	623b      	str	r3, [r7, #32]
 80079c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	69f9      	ldr	r1, [r7, #28]
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e6      	bne.n	80079a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	375c      	adds	r7, #92	; 0x5c
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	08007cdd 	.word	0x08007cdd
 80079e8:	08007b35 	.word	0x08007b35

080079ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b095      	sub	sp, #84	; 0x54
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	643b      	str	r3, [r7, #64]	; 0x40
 8007a14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d118      	bne.n	8007a94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	647b      	str	r3, [r7, #68]	; 0x44
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6979      	ldr	r1, [r7, #20]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007aa8:	bf00      	nop
 8007aaa:	3754      	adds	r7, #84	; 0x54
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fb28 	bl	8007128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	613b      	str	r3, [r7, #16]
   return(result);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e6      	bne.n	8007ae8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff faf4 	bl	8007114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b2c:	bf00      	nop
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b09c      	sub	sp, #112	; 0x70
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4c:	2b22      	cmp	r3, #34	; 0x22
 8007b4e:	f040 80b9 	bne.w	8007cc4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b60:	b2d9      	uxtb	r1, r3
 8007b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 809c 	bne.w	8007cd4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e6      	bne.n	8007b9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	667b      	str	r3, [r7, #100]	; 0x64
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bee:	647a      	str	r2, [r7, #68]	; 0x44
 8007bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e5      	bne.n	8007bce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d018      	beq.n	8007c56 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	623b      	str	r3, [r7, #32]
   return(result);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c38:	663b      	str	r3, [r7, #96]	; 0x60
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c42:	633b      	str	r3, [r7, #48]	; 0x30
 8007c44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d12e      	bne.n	8007cbc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d103      	bne.n	8007cac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2210      	movs	r2, #16
 8007caa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff fa41 	bl	800713c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cba:	e00b      	b.n	8007cd4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fa f94f 	bl	8001f60 <HAL_UART_RxCpltCallback>
}
 8007cc2:	e007      	b.n	8007cd4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0208 	orr.w	r2, r2, #8
 8007cd2:	619a      	str	r2, [r3, #24]
}
 8007cd4:	bf00      	nop
 8007cd6:	3770      	adds	r7, #112	; 0x70
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b09c      	sub	sp, #112	; 0x70
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf4:	2b22      	cmp	r3, #34	; 0x22
 8007cf6:	f040 80b9 	bne.w	8007e6c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d12:	4013      	ands	r3, r2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	1c9a      	adds	r2, r3, #2
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 809c 	bne.w	8007e7c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d58:	667b      	str	r3, [r7, #100]	; 0x64
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
 8007d64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d96:	643a      	str	r2, [r7, #64]	; 0x40
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d12e      	bne.n	8007e64 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f023 0310 	bic.w	r3, r3, #16
 8007e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d103      	bne.n	8007e54 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2210      	movs	r2, #16
 8007e52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff f96d 	bl	800713c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e62:	e00b      	b.n	8007e7c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7fa f87b 	bl	8001f60 <HAL_UART_RxCpltCallback>
}
 8007e6a:	e007      	b.n	8007e7c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0208 	orr.w	r2, r2, #8
 8007e7a:	619a      	str	r2, [r3, #24]
}
 8007e7c:	bf00      	nop
 8007e7e:	3770      	adds	r7, #112	; 0x70
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9e:	f3ef 8305 	mrs	r3, IPSR
 8007ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10f      	bne.n	8007eca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	607b      	str	r3, [r7, #4]
  return(result);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <osKernelInitialize+0x32>
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <osKernelInitialize+0x64>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d109      	bne.n	8007ed2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007eca:	f06f 0305 	mvn.w	r3, #5
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e00c      	b.n	8007eec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <osKernelInitialize+0x64>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d105      	bne.n	8007ee6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <osKernelInitialize+0x64>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000508 	.word	0x20000508

08007f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f06:	f3ef 8305 	mrs	r3, IPSR
 8007f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f12:	f3ef 8310 	mrs	r3, PRIMASK
 8007f16:	607b      	str	r3, [r7, #4]
  return(result);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <osKernelStart+0x32>
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <osKernelStart+0x64>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d109      	bne.n	8007f3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f26:	f3ef 8311 	mrs	r3, BASEPRI
 8007f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007f32:	f06f 0305 	mvn.w	r3, #5
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e00e      	b.n	8007f58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <osKernelStart+0x64>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007f42:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <osKernelStart+0x64>)
 8007f44:	2202      	movs	r2, #2
 8007f46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007f48:	f001 fdfa 	bl	8009b40 <vTaskStartScheduler>
      stat = osOK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e002      	b.n	8007f58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007f58:	68fb      	ldr	r3, [r7, #12]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000508 	.word	0x20000508

08007f68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b092      	sub	sp, #72	; 0x48
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f78:	f3ef 8305 	mrs	r3, IPSR
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8094 	bne.w	80080ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f86:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 808d 	bne.w	80080ae <osThreadNew+0x146>
 8007f94:	4b48      	ldr	r3, [pc, #288]	; (80080b8 <osThreadNew+0x150>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d106      	bne.n	8007faa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007fa0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f040 8082 	bne.w	80080ae <osThreadNew+0x146>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d07e      	beq.n	80080ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007fb4:	2318      	movs	r3, #24
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007fb8:	2300      	movs	r3, #0
 8007fba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007fbc:	f107 031b 	add.w	r3, r7, #27
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d045      	beq.n	800805a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <osThreadNew+0x74>
        name = attr->name;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <osThreadNew+0x9a>
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	2b38      	cmp	r3, #56	; 0x38
 8007ff4:	d805      	bhi.n	8008002 <osThreadNew+0x9a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <osThreadNew+0x9e>
        return (NULL);
 8008002:	2300      	movs	r3, #0
 8008004:	e054      	b.n	80080b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	089b      	lsrs	r3, r3, #2
 8008014:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <osThreadNew+0xd4>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	2bab      	cmp	r3, #171	; 0xab
 8008024:	d90a      	bls.n	800803c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800802a:	2b00      	cmp	r3, #0
 800802c:	d006      	beq.n	800803c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <osThreadNew+0xd4>
        mem = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28
 800803a:	e010      	b.n	800805e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10c      	bne.n	800805e <osThreadNew+0xf6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d108      	bne.n	800805e <osThreadNew+0xf6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <osThreadNew+0xf6>
          mem = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
 8008058:	e001      	b.n	800805e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	2b01      	cmp	r3, #1
 8008062:	d110      	bne.n	8008086 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800806c:	9202      	str	r2, [sp, #8]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f001 fa6c 	bl	8009558 <xTaskCreateStatic>
 8008080:	4603      	mov	r3, r0
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e013      	b.n	80080ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	d110      	bne.n	80080ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	b29a      	uxth	r2, r3
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f001 fab6 	bl	8009610 <xTaskCreate>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d001      	beq.n	80080ae <osThreadNew+0x146>
          hTask = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080ae:	697b      	ldr	r3, [r7, #20]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	; 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000508 	.word	0x20000508

080080bc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c2:	f3ef 8305 	mrs	r3, IPSR
 80080c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80080c8:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10f      	bne.n	80080ee <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ce:	f3ef 8310 	mrs	r3, PRIMASK
 80080d2:	607b      	str	r3, [r7, #4]
  return(result);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <osThreadGetId+0x32>
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <osThreadGetId+0x48>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d108      	bne.n	80080f4 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080e2:	f3ef 8311 	mrs	r3, BASEPRI
 80080e6:	603b      	str	r3, [r7, #0]
  return(result);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <osThreadGetId+0x38>
    id = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	e002      	b.n	80080fa <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80080f4:	f002 f9ec 	bl	800a4d0 <xTaskGetCurrentTaskHandle>
 80080f8:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 80080fa:	68fb      	ldr	r3, [r7, #12]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000508 	.word	0x20000508

08008108 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008114:	f3ef 8305 	mrs	r3, IPSR
 8008118:	617b      	str	r3, [r7, #20]
  return(result);
 800811a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10f      	bne.n	8008140 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008120:	f3ef 8310 	mrs	r3, PRIMASK
 8008124:	613b      	str	r3, [r7, #16]
  return(result);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <osThreadSuspend+0x38>
 800812c:	4b0f      	ldr	r3, [pc, #60]	; (800816c <osThreadSuspend+0x64>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d109      	bne.n	8008148 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008134:	f3ef 8311 	mrs	r3, BASEPRI
 8008138:	60fb      	str	r3, [r7, #12]
  return(result);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008140:	f06f 0305 	mvn.w	r3, #5
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	e00b      	b.n	8008160 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d103      	bne.n	8008156 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800814e:	f06f 0303 	mvn.w	r3, #3
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e004      	b.n	8008160 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800815a:	69b8      	ldr	r0, [r7, #24]
 800815c:	f001 fbe0 	bl	8009920 <vTaskSuspend>
  }

  return (stat);
 8008160:	69fb      	ldr	r3, [r7, #28]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000508 	.word	0x20000508

08008170 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800817c:	f3ef 8305 	mrs	r3, IPSR
 8008180:	617b      	str	r3, [r7, #20]
  return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10f      	bne.n	80081a8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008188:	f3ef 8310 	mrs	r3, PRIMASK
 800818c:	613b      	str	r3, [r7, #16]
  return(result);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <osThreadResume+0x38>
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <osThreadResume+0x64>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d109      	bne.n	80081b0 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800819c:	f3ef 8311 	mrs	r3, BASEPRI
 80081a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <osThreadResume+0x40>
    stat = osErrorISR;
 80081a8:	f06f 0305 	mvn.w	r3, #5
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	e00b      	b.n	80081c8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <osThreadResume+0x4e>
    stat = osErrorParameter;
 80081b6:	f06f 0303 	mvn.w	r3, #3
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e004      	b.n	80081c8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80081c2:	69b8      	ldr	r0, [r7, #24]
 80081c4:	f001 fc5e 	bl	8009a84 <vTaskResume>
  }

  return (stat);
 80081c8:	69fb      	ldr	r3, [r7, #28]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000508 	.word	0x20000508

080081d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e0:	f3ef 8305 	mrs	r3, IPSR
 80081e4:	613b      	str	r3, [r7, #16]
  return(result);
 80081e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10f      	bne.n	800820c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ec:	f3ef 8310 	mrs	r3, PRIMASK
 80081f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <osDelay+0x34>
 80081f8:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <osDelay+0x58>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d109      	bne.n	8008214 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008200:	f3ef 8311 	mrs	r3, BASEPRI
 8008204:	60bb      	str	r3, [r7, #8]
  return(result);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <osDelay+0x3c>
    stat = osErrorISR;
 800820c:	f06f 0305 	mvn.w	r3, #5
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e007      	b.n	8008224 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <osDelay+0x4c>
      vTaskDelay(ticks);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fb4a 	bl	80098b8 <vTaskDelay>
    }
  }

  return (stat);
 8008224:	697b      	ldr	r3, [r7, #20]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000508 	.word	0x20000508

08008234 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800823c:	2300      	movs	r3, #0
 800823e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008240:	f3ef 8305 	mrs	r3, IPSR
 8008244:	617b      	str	r3, [r7, #20]
  return(result);
 8008246:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008248:	2b00      	cmp	r3, #0
 800824a:	d13d      	bne.n	80082c8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824c:	f3ef 8310 	mrs	r3, PRIMASK
 8008250:	613b      	str	r3, [r7, #16]
  return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d137      	bne.n	80082c8 <osEventFlagsNew+0x94>
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <osEventFlagsNew+0xa0>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d105      	bne.n	800826c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008260:	f3ef 8311 	mrs	r3, BASEPRI
 8008264:	60fb      	str	r3, [r7, #12]
  return(result);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d12d      	bne.n	80082c8 <osEventFlagsNew+0x94>
    mem = -1;
 800826c:	f04f 33ff 	mov.w	r3, #4294967295
 8008270:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d015      	beq.n	80082a4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <osEventFlagsNew+0x5a>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b1f      	cmp	r3, #31
 8008286:	d902      	bls.n	800828e <osEventFlagsNew+0x5a>
        mem = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e00c      	b.n	80082a8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d108      	bne.n	80082a8 <osEventFlagsNew+0x74>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <osEventFlagsNew+0x74>
          mem = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	61bb      	str	r3, [r7, #24]
 80082a2:	e001      	b.n	80082a8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d106      	bne.n	80082bc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f9ae 	bl	8008614 <xEventGroupCreateStatic>
 80082b8:	61f8      	str	r0, [r7, #28]
 80082ba:	e005      	b.n	80082c8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80082c2:	f000 f9de 	bl	8008682 <xEventGroupCreate>
 80082c6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80082c8:	69fb      	ldr	r3, [r7, #28]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000508 	.word	0x20000508

080082d8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <osEventFlagsSet+0x1e>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80082f6:	f06f 0303 	mvn.w	r3, #3
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	e03a      	b.n	8008374 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082fe:	f3ef 8305 	mrs	r3, IPSR
 8008302:	617b      	str	r3, [r7, #20]
  return(result);
 8008304:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10f      	bne.n	800832a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800830a:	f3ef 8310 	mrs	r3, PRIMASK
 800830e:	613b      	str	r3, [r7, #16]
  return(result);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <osEventFlagsSet+0x52>
 8008316:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <osEventFlagsSet+0xa8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d123      	bne.n	8008366 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800831e:	f3ef 8311 	mrs	r3, BASEPRI
 8008322:	60fb      	str	r3, [r7, #12]
  return(result);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01d      	beq.n	8008366 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	461a      	mov	r2, r3
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	69b8      	ldr	r0, [r7, #24]
 8008338:	f000 fad4 	bl	80088e4 <xEventGroupSetBitsFromISR>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8008342:	f06f 0302 	mvn.w	r3, #2
 8008346:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008348:	e013      	b.n	8008372 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00e      	beq.n	8008372 <osEventFlagsSet+0x9a>
 8008354:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <osEventFlagsSet+0xac>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008364:	e005      	b.n	8008372 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	69b8      	ldr	r0, [r7, #24]
 800836a:	f000 fa15 	bl	8008798 <xEventGroupSetBits>
 800836e:	61f8      	str	r0, [r7, #28]
 8008370:	e000      	b.n	8008374 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008372:	bf00      	nop
  }

  return (rflags);
 8008374:	69fb      	ldr	r3, [r7, #28]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000508 	.word	0x20000508
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <osEventFlagsClear+0x1e>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80083a6:	f06f 0303 	mvn.w	r3, #3
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	e029      	b.n	8008402 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ae:	f3ef 8305 	mrs	r3, IPSR
 80083b2:	617b      	str	r3, [r7, #20]
  return(result);
 80083b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10f      	bne.n	80083da <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ba:	f3ef 8310 	mrs	r3, PRIMASK
 80083be:	613b      	str	r3, [r7, #16]
  return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <osEventFlagsClear+0x52>
 80083c6:	4b11      	ldr	r3, [pc, #68]	; (800840c <osEventFlagsClear+0x84>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d114      	bne.n	80083f8 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083ce:	f3ef 8311 	mrs	r3, BASEPRI
 80083d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80083da:	69b8      	ldr	r0, [r7, #24]
 80083dc:	f000 f9b8 	bl	8008750 <xEventGroupGetBitsFromISR>
 80083e0:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	69b8      	ldr	r0, [r7, #24]
 80083e6:	f000 f99f 	bl	8008728 <xEventGroupClearBitsFromISR>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80083f0:	f06f 0302 	mvn.w	r3, #2
 80083f4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80083f6:	e004      	b.n	8008402 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f000 f95b 	bl	80086b6 <xEventGroupClearBits>
 8008400:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008402:	69fb      	ldr	r3, [r7, #28]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000508 	.word	0x20000508

08008410 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <osEventFlagsGet+0x18>
    rflags = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	e01f      	b.n	8008468 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008428:	f3ef 8305 	mrs	r3, IPSR
 800842c:	617b      	str	r3, [r7, #20]
  return(result);
 800842e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10f      	bne.n	8008454 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008434:	f3ef 8310 	mrs	r3, PRIMASK
 8008438:	613b      	str	r3, [r7, #16]
  return(result);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <osEventFlagsGet+0x44>
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <osEventFlagsGet+0x64>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d10a      	bne.n	800845e <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008448:	f3ef 8311 	mrs	r3, BASEPRI
 800844c:	60fb      	str	r3, [r7, #12]
  return(result);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008454:	69b8      	ldr	r0, [r7, #24]
 8008456:	f000 f97b 	bl	8008750 <xEventGroupGetBitsFromISR>
 800845a:	61f8      	str	r0, [r7, #28]
 800845c:	e004      	b.n	8008468 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800845e:	2100      	movs	r1, #0
 8008460:	69b8      	ldr	r0, [r7, #24]
 8008462:	f000 f928 	bl	80086b6 <xEventGroupClearBits>
 8008466:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008468:	69fb      	ldr	r3, [r7, #28]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000508 	.word	0x20000508

08008478 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008484:	f3ef 8305 	mrs	r3, IPSR
 8008488:	613b      	str	r3, [r7, #16]
  return(result);
 800848a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8085 	bne.w	800859c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008492:	f3ef 8310 	mrs	r3, PRIMASK
 8008496:	60fb      	str	r3, [r7, #12]
  return(result);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d17e      	bne.n	800859c <osMutexNew+0x124>
 800849e:	4b42      	ldr	r3, [pc, #264]	; (80085a8 <osMutexNew+0x130>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d105      	bne.n	80084b2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084a6:	f3ef 8311 	mrs	r3, BASEPRI
 80084aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d174      	bne.n	800859c <osMutexNew+0x124>
    if (attr != NULL) {
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	623b      	str	r3, [r7, #32]
 80084be:	e001      	b.n	80084c4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <osMutexNew+0x5c>
      rmtx = 1U;
 80084ce:	2301      	movs	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	e001      	b.n	80084d8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d15c      	bne.n	800859c <osMutexNew+0x124>
      mem = -1;
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d015      	beq.n	800851a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <osMutexNew+0x8c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b4f      	cmp	r3, #79	; 0x4f
 80084fc:	d902      	bls.n	8008504 <osMutexNew+0x8c>
          mem = 1;
 80084fe:	2301      	movs	r3, #1
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	e00c      	b.n	800851e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d108      	bne.n	800851e <osMutexNew+0xa6>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <osMutexNew+0xa6>
            mem = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	e001      	b.n	800851e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d112      	bne.n	800854a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4619      	mov	r1, r3
 8008530:	2004      	movs	r0, #4
 8008532:	f000 fc11 	bl	8008d58 <xQueueCreateMutexStatic>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
 8008538:	e016      	b.n	8008568 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	4619      	mov	r1, r3
 8008540:	2001      	movs	r0, #1
 8008542:	f000 fc09 	bl	8008d58 <xQueueCreateMutexStatic>
 8008546:	6278      	str	r0, [r7, #36]	; 0x24
 8008548:	e00e      	b.n	8008568 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008556:	2004      	movs	r0, #4
 8008558:	f000 fbe6 	bl	8008d28 <xQueueCreateMutex>
 800855c:	6278      	str	r0, [r7, #36]	; 0x24
 800855e:	e003      	b.n	8008568 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008560:	2001      	movs	r0, #1
 8008562:	f000 fbe1 	bl	8008d28 <xQueueCreateMutex>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <osMutexNew+0x110>
        if (attr != NULL) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <osMutexNew+0x104>
          name = attr->name;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e001      	b.n	8008580 <osMutexNew+0x108>
        } else {
          name = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008580:	6979      	ldr	r1, [r7, #20]
 8008582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008584:	f000 ff8a 	bl	800949c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <osMutexNew+0x124>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3728      	adds	r7, #40	; 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000508 	.word	0x20000508

080085ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a07      	ldr	r2, [pc, #28]	; (80085d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80085bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4a06      	ldr	r2, [pc, #24]	; (80085dc <vApplicationGetIdleTaskMemory+0x30>)
 80085c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2280      	movs	r2, #128	; 0x80
 80085c8:	601a      	str	r2, [r3, #0]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	2000050c 	.word	0x2000050c
 80085dc:	200005b8 	.word	0x200005b8

080085e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a07      	ldr	r2, [pc, #28]	; (800860c <vApplicationGetTimerTaskMemory+0x2c>)
 80085f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4a06      	ldr	r2, [pc, #24]	; (8008610 <vApplicationGetTimerTaskMemory+0x30>)
 80085f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085fe:	601a      	str	r2, [r3, #0]
}
 8008600:	bf00      	nop
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	200007b8 	.word	0x200007b8
 8008610:	20000864 	.word	0x20000864

08008614 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008638:	2320      	movs	r3, #32
 800863a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b20      	cmp	r3, #32
 8008640:	d00a      	beq.n	8008658 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60fb      	str	r3, [r7, #12]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	3304      	adds	r3, #4
 800866c:	4618      	mov	r0, r3
 800866e:	f000 f94d 	bl	800890c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2201      	movs	r2, #1
 8008676:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008678:	697b      	ldr	r3, [r7, #20]
	}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008688:	2020      	movs	r0, #32
 800868a:	f002 fd95 	bl	800b1b8 <pvPortMalloc>
 800868e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 f933 	bl	800890c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80086ac:	687b      	ldr	r3, [r7, #4]
	}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xEventGroupClearBits+0x2a>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60fb      	str	r3, [r7, #12]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <xEventGroupClearBits+0x4a>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60bb      	str	r3, [r7, #8]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008700:	f002 fc38 	bl	800af74 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008718:	f002 fc5c 	bl	800afd4 <vPortExitCritical>

	return uxReturn;
 800871c:	693b      	ldr	r3, [r7, #16]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8008732:	2300      	movs	r3, #0
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4804      	ldr	r0, [pc, #16]	; (800874c <xEventGroupClearBitsFromISR+0x24>)
 800873a:	f002 facb 	bl	800acd4 <xTimerPendFunctionCallFromISR>
 800873e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008740:	68fb      	ldr	r3, [r7, #12]
	}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	080088c9 	.word	0x080088c9

08008750 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008750:	b480      	push	{r7}
 8008752:	b089      	sub	sp, #36	; 0x24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800875c:	f3ef 8211 	mrs	r2, BASEPRI
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fa      	str	r2, [r7, #12]
 8008772:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008774:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008776:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008788:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800878a:	697b      	ldr	r3, [r7, #20]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3724      	adds	r7, #36	; 0x24
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	; 0x38
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80087a2:	2300      	movs	r3, #0
 80087a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xEventGroupSetBits+0x32>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	613b      	str	r3, [r7, #16]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <xEventGroupSetBits+0x52>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60fb      	str	r3, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	3304      	adds	r3, #4
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	3308      	adds	r3, #8
 80087f4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80087f6:	f001 fa13 	bl	8009c20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	431a      	orrs	r2, r3
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800880c:	e03c      	b.n	8008888 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008824:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800882c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d108      	bne.n	800884a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008844:	2301      	movs	r3, #1
 8008846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008848:	e008      	b.n	800885c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4013      	ands	r3, r2
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	429a      	cmp	r2, r3
 8008856:	d101      	bne.n	800885c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d010      	beq.n	8008884 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	4313      	orrs	r3, r2
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800887c:	4619      	mov	r1, r3
 800887e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008880:	f001 fc60 	bl	800a144 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	429a      	cmp	r2, r3
 800888e:	d1be      	bne.n	800880e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	43db      	mvns	r3, r3
 8008898:	401a      	ands	r2, r3
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800889e:	f001 f9cd 	bl	8009c3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	681b      	ldr	r3, [r3, #0]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3738      	adds	r7, #56	; 0x38
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ff6c 	bl	8008798 <xEventGroupSetBits>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff feee 	bl	80086b6 <xEventGroupClearBits>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	68f9      	ldr	r1, [r7, #12]
 80088f6:	4804      	ldr	r0, [pc, #16]	; (8008908 <xEventGroupSetBitsFromISR+0x24>)
 80088f8:	f002 f9ec 	bl	800acd4 <xTimerPendFunctionCallFromISR>
 80088fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80088fe:	697b      	ldr	r3, [r7, #20]
	}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	080088af 	.word	0x080088af

0800890c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f103 0208 	add.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f103 0208 	add.w	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f103 0208 	add.w	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d103      	bne.n	80089ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e00c      	b.n	80089e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3308      	adds	r3, #8
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e002      	b.n	80089dc <vListInsert+0x2e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d2f6      	bcs.n	80089d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6892      	ldr	r2, [r2, #8]
 8008a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6852      	ldr	r2, [r2, #4]
 8008a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d103      	bne.n	8008a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	1e5a      	subs	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <xQueueGenericReset+0x2a>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60bb      	str	r3, [r7, #8]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a9e:	f002 fa69 	bl	800af74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	441a      	add	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	68f9      	ldr	r1, [r7, #12]
 8008ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	22ff      	movs	r2, #255	; 0xff
 8008ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	22ff      	movs	r2, #255	; 0xff
 8008aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d114      	bne.n	8008b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fabb 	bl	800a07c <xTaskRemoveFromEventList>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <xQueueGenericReset+0xcc>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	e009      	b.n	8008b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff fef2 	bl	800890c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3324      	adds	r3, #36	; 0x24
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff feed 	bl	800890c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b32:	f002 fa4f 	bl	800afd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b36:	2301      	movs	r3, #1
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	; 0x38
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <xQueueGenericCreateStatic+0x52>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <xQueueGenericCreateStatic+0x56>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <xQueueGenericCreateStatic+0x58>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	623b      	str	r3, [r7, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <xQueueGenericCreateStatic+0x7e>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <xQueueGenericCreateStatic+0x82>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <xQueueGenericCreateStatic+0x84>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	61fb      	str	r3, [r7, #28]
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008be2:	2350      	movs	r3, #80	; 0x50
 8008be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b50      	cmp	r3, #80	; 0x50
 8008bea:	d00a      	beq.n	8008c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61bb      	str	r3, [r7, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f843 	bl	8008cae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3730      	adds	r7, #48	; 0x30
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b08a      	sub	sp, #40	; 0x28
 8008c36:	af02      	add	r7, sp, #8
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10a      	bne.n	8008c5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	613b      	str	r3, [r7, #16]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e004      	b.n	8008c72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	fb02 f303 	mul.w	r3, r2, r3
 8008c70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	3350      	adds	r3, #80	; 0x50
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 fa9e 	bl	800b1b8 <pvPortMalloc>
 8008c7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00f      	beq.n	8008ca4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	3350      	adds	r3, #80	; 0x50
 8008c88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c92:	79fa      	ldrb	r2, [r7, #7]
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f805 	bl	8008cae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3720      	adds	r7, #32
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	e002      	b.n	8008cd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cdc:	2101      	movs	r1, #1
 8008cde:	69b8      	ldr	r0, [r7, #24]
 8008ce0:	f7ff fec8 	bl	8008a74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d14:	2300      	movs	r3, #0
 8008d16:	2200      	movs	r2, #0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f838 	bl	8008d90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d32:	2301      	movs	r3, #1
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6939      	ldr	r1, [r7, #16]
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f7ff ff76 	bl	8008c32 <xQueueGenericCreate>
 8008d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff ffd3 	bl	8008cf4 <prvInitialiseMutex>

		return pxNewQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d64:	2301      	movs	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2200      	movs	r2, #0
 8008d74:	6939      	ldr	r1, [r7, #16]
 8008d76:	6978      	ldr	r0, [r7, #20]
 8008d78:	f7ff fee4 	bl	8008b44 <xQueueGenericCreateStatic>
 8008d7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff ffb8 	bl	8008cf4 <prvInitialiseMutex>

		return pxNewQueue;
 8008d84:	68fb      	ldr	r3, [r7, #12]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d103      	bne.n	8008dd0 <xQueueGenericSend+0x40>
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <xQueueGenericSend+0x44>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <xQueueGenericSend+0x46>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <xQueueGenericSend+0x60>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSend+0x6e>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <xQueueGenericSend+0x72>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericSend+0x74>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e1e:	f001 fb67 	bl	800a4f0 <xTaskGetSchedulerState>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <xQueueGenericSend+0x9e>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <xQueueGenericSend+0xa2>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e000      	b.n	8008e34 <xQueueGenericSend+0xa4>
 8008e32:	2300      	movs	r3, #0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	61fb      	str	r3, [r7, #28]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e4e:	f002 f891 	bl	800af74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d302      	bcc.n	8008e64 <xQueueGenericSend+0xd4>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d129      	bne.n	8008eb8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e6a:	f000 fa07 	bl	800927c <prvCopyDataToQueue>
 8008e6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d010      	beq.n	8008e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	3324      	adds	r3, #36	; 0x24
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 f8fd 	bl	800a07c <xTaskRemoveFromEventList>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e88:	4b3f      	ldr	r3, [pc, #252]	; (8008f88 <xQueueGenericSend+0x1f8>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	e00a      	b.n	8008eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ea0:	4b39      	ldr	r3, [pc, #228]	; (8008f88 <xQueueGenericSend+0x1f8>)
 8008ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008eb0:	f002 f890 	bl	800afd4 <vPortExitCritical>
				return pdPASS;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e063      	b.n	8008f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ebe:	f002 f889 	bl	800afd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e05c      	b.n	8008f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ecc:	f107 0314 	add.w	r3, r7, #20
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 f999 	bl	800a208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eda:	f002 f87b 	bl	800afd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ede:	f000 fe9f 	bl	8009c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee2:	f002 f847 	bl	800af74 <vPortEnterCritical>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d103      	bne.n	8008efc <xQueueGenericSend+0x16c>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d103      	bne.n	8008f12 <xQueueGenericSend+0x182>
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f12:	f002 f85f 	bl	800afd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f16:	1d3a      	adds	r2, r7, #4
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 f988 	bl	800a234 <xTaskCheckForTimeOut>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d124      	bne.n	8008f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2c:	f000 fa9e 	bl	800946c <prvIsQueueFull>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d018      	beq.n	8008f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	3310      	adds	r3, #16
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 f84c 	bl	8009fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f46:	f000 fa29 	bl	800939c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f4a:	f000 fe77 	bl	8009c3c <xTaskResumeAll>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f47f af7c 	bne.w	8008e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <xQueueGenericSend+0x1f8>)
 8008f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	e772      	b.n	8008e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6a:	f000 fa17 	bl	800939c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f6e:	f000 fe65 	bl	8009c3c <xTaskResumeAll>
 8008f72:	e76c      	b.n	8008e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f76:	f000 fa11 	bl	800939c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f7a:	f000 fe5f 	bl	8009c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f7e:	2300      	movs	r3, #0
		}
	}
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3738      	adds	r7, #56	; 0x38
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08e      	sub	sp, #56	; 0x38
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <xQueueGenericSendFromISR+0x3c>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <xQueueGenericSendFromISR+0x40>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <xQueueGenericSendFromISR+0x42>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	623b      	str	r3, [r7, #32]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d103      	bne.n	8008ff6 <xQueueGenericSendFromISR+0x6a>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSendFromISR+0x6e>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSendFromISR+0x70>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	61fb      	str	r3, [r7, #28]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009016:	f002 f88f 	bl	800b138 <vPortValidateInterruptPriority>
	__asm volatile
 800901a:	f3ef 8211 	mrs	r2, BASEPRI
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	61ba      	str	r2, [r7, #24]
 8009030:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009032:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	429a      	cmp	r2, r3
 8009040:	d302      	bcc.n	8009048 <xQueueGenericSendFromISR+0xbc>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d12c      	bne.n	80090a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009058:	f000 f910 	bl	800927c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800905c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d112      	bne.n	800908c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d016      	beq.n	800909c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	3324      	adds	r3, #36	; 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f802 	bl	800a07c <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00e      	beq.n	800909c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e007      	b.n	800909c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800908c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009090:	3301      	adds	r3, #1
 8009092:	b2db      	uxtb	r3, r3
 8009094:	b25a      	sxtb	r2, r3
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800909c:	2301      	movs	r3, #1
 800909e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80090a0:	e001      	b.n	80090a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f383 8811 	msr	BASEPRI, r3
}
 80090b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3738      	adds	r7, #56	; 0x38
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08c      	sub	sp, #48	; 0x30
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <xQueueReceive+0x30>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	623b      	str	r3, [r7, #32]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <xQueueReceive+0x3e>
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueReceive+0x42>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueReceive+0x44>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueReceive+0x5e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	61fb      	str	r3, [r7, #28]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800911a:	f001 f9e9 	bl	800a4f0 <xTaskGetSchedulerState>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xQueueReceive+0x6e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <xQueueReceive+0x72>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueReceive+0x74>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueReceive+0x8e>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	61bb      	str	r3, [r7, #24]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800914a:	f001 ff13 	bl	800af74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01f      	beq.n	800919a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915e:	f000 f8f7 	bl	8009350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ff80 	bl	800a07c <xTaskRemoveFromEventList>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009182:	4b3d      	ldr	r3, [pc, #244]	; (8009278 <xQueueReceive+0x1bc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009192:	f001 ff1f 	bl	800afd4 <vPortExitCritical>
				return pdPASS;
 8009196:	2301      	movs	r3, #1
 8009198:	e069      	b.n	800926e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091a0:	f001 ff18 	bl	800afd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e062      	b.n	800926e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ae:	f107 0310 	add.w	r3, r7, #16
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 f828 	bl	800a208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091b8:	2301      	movs	r3, #1
 80091ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091bc:	f001 ff0a 	bl	800afd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091c0:	f000 fd2e 	bl	8009c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091c4:	f001 fed6 	bl	800af74 <vPortEnterCritical>
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ce:	b25b      	sxtb	r3, r3
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d103      	bne.n	80091de <xQueueReceive+0x122>
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d103      	bne.n	80091f4 <xQueueReceive+0x138>
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091f4:	f001 feee 	bl	800afd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091f8:	1d3a      	adds	r2, r7, #4
 80091fa:	f107 0310 	add.w	r3, r7, #16
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f001 f817 	bl	800a234 <xTaskCheckForTimeOut>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d123      	bne.n	8009254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800920c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920e:	f000 f917 	bl	8009440 <prvIsQueueEmpty>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fedb 	bl	8009fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009228:	f000 f8b8 	bl	800939c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800922c:	f000 fd06 	bl	8009c3c <xTaskResumeAll>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d189      	bne.n	800914a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <xQueueReceive+0x1bc>)
 8009238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	e780      	b.n	800914a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924a:	f000 f8a7 	bl	800939c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800924e:	f000 fcf5 	bl	8009c3c <xTaskResumeAll>
 8009252:	e77a      	b.n	800914a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f000 f8a1 	bl	800939c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800925a:	f000 fcef 	bl	8009c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009260:	f000 f8ee 	bl	8009440 <prvIsQueueEmpty>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	f43f af6f 	beq.w	800914a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800926c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800926e:	4618      	mov	r0, r3
 8009270:	3730      	adds	r7, #48	; 0x30
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10d      	bne.n	80092b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d14d      	bne.n	800933e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f940 	bl	800a52c <xTaskPriorityDisinherit>
 80092ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	e043      	b.n	800933e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d119      	bne.n	80092f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6898      	ldr	r0, [r3, #8]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c4:	461a      	mov	r2, r3
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	f002 fc29 	bl	800bb1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d32b      	bcc.n	800933e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	609a      	str	r2, [r3, #8]
 80092ee:	e026      	b.n	800933e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68d8      	ldr	r0, [r3, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	461a      	mov	r2, r3
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	f002 fc0f 	bl	800bb1e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	425b      	negs	r3, r3
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d207      	bcs.n	800932c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	425b      	negs	r3, r3
 8009326:	441a      	add	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d105      	bne.n	800933e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	3b01      	subs	r3, #1
 800933c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009346:	697b      	ldr	r3, [r7, #20]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d018      	beq.n	8009394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	441a      	add	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	429a      	cmp	r2, r3
 800937a:	d303      	bcc.n	8009384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68d9      	ldr	r1, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	461a      	mov	r2, r3
 800938e:	6838      	ldr	r0, [r7, #0]
 8009390:	f002 fbc5 	bl	800bb1e <memcpy>
	}
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093a4:	f001 fde6 	bl	800af74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093b0:	e011      	b.n	80093d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d012      	beq.n	80093e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fe5c 	bl	800a07c <xTaskRemoveFromEventList>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093ca:	f000 ff95 	bl	800a2f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dce9      	bgt.n	80093b2 <prvUnlockQueue+0x16>
 80093de:	e000      	b.n	80093e2 <prvUnlockQueue+0x46>
					break;
 80093e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093ea:	f001 fdf3 	bl	800afd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ee:	f001 fdc1 	bl	800af74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093fa:	e011      	b.n	8009420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d012      	beq.n	800942a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3310      	adds	r3, #16
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fe37 	bl	800a07c <xTaskRemoveFromEventList>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009414:	f000 ff70 	bl	800a2f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	3b01      	subs	r3, #1
 800941c:	b2db      	uxtb	r3, r3
 800941e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009424:	2b00      	cmp	r3, #0
 8009426:	dce9      	bgt.n	80093fc <prvUnlockQueue+0x60>
 8009428:	e000      	b.n	800942c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800942a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	22ff      	movs	r2, #255	; 0xff
 8009430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009434:	f001 fdce 	bl	800afd4 <vPortExitCritical>
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009448:	f001 fd94 	bl	800af74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009454:	2301      	movs	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e001      	b.n	800945e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800945e:	f001 fdb9 	bl	800afd4 <vPortExitCritical>

	return xReturn;
 8009462:	68fb      	ldr	r3, [r7, #12]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009474:	f001 fd7e 	bl	800af74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	429a      	cmp	r2, r3
 8009482:	d102      	bne.n	800948a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e001      	b.n	800948e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948e:	f001 fda1 	bl	800afd4 <vPortExitCritical>

	return xReturn;
 8009492:	68fb      	ldr	r3, [r7, #12]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e014      	b.n	80094d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094ac:	4a0f      	ldr	r2, [pc, #60]	; (80094ec <vQueueAddToRegistry+0x50>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10b      	bne.n	80094d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094b8:	490c      	ldr	r1, [pc, #48]	; (80094ec <vQueueAddToRegistry+0x50>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094c2:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <vQueueAddToRegistry+0x50>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	4413      	add	r3, r2
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094ce:	e006      	b.n	80094de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b07      	cmp	r3, #7
 80094da:	d9e7      	bls.n	80094ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	20000c64 	.word	0x20000c64

080094f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009500:	f001 fd38 	bl	800af74 <vPortEnterCritical>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d103      	bne.n	800951a <vQueueWaitForMessageRestricted+0x2a>
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009520:	b25b      	sxtb	r3, r3
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d103      	bne.n	8009530 <vQueueWaitForMessageRestricted+0x40>
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009530:	f001 fd50 	bl	800afd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	2b00      	cmp	r3, #0
 800953a:	d106      	bne.n	800954a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	3324      	adds	r3, #36	; 0x24
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fd6d 	bl	800a024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800954a:	6978      	ldr	r0, [r7, #20]
 800954c:	f7ff ff26 	bl	800939c <prvUnlockQueue>
	}
 8009550:	bf00      	nop
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08e      	sub	sp, #56	; 0x38
 800955c:	af04      	add	r7, sp, #16
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <xTaskCreateStatic+0x2a>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	623b      	str	r3, [r7, #32]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xTaskCreateStatic+0x46>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	61fb      	str	r3, [r7, #28]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800959e:	23ac      	movs	r3, #172	; 0xac
 80095a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2bac      	cmp	r3, #172	; 0xac
 80095a6:	d00a      	beq.n	80095be <xTaskCreateStatic+0x66>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	61bb      	str	r3, [r7, #24]
}
 80095ba:	bf00      	nop
 80095bc:	e7fe      	b.n	80095bc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01e      	beq.n	8009602 <xTaskCreateStatic+0xaa>
 80095c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d01b      	beq.n	8009602 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095dc:	2300      	movs	r3, #0
 80095de:	9303      	str	r3, [sp, #12]
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	f107 0314 	add.w	r3, r7, #20
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f851 	bl	800969c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095fc:	f000 f8ec 	bl	80097d8 <prvAddNewTaskToReadyList>
 8009600:	e001      	b.n	8009606 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009606:	697b      	ldr	r3, [r7, #20]
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3728      	adds	r7, #40	; 0x28
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08c      	sub	sp, #48	; 0x30
 8009614:	af04      	add	r7, sp, #16
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	4613      	mov	r3, r2
 800961e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4618      	mov	r0, r3
 8009626:	f001 fdc7 	bl	800b1b8 <pvPortMalloc>
 800962a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00e      	beq.n	8009650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009632:	20ac      	movs	r0, #172	; 0xac
 8009634:	f001 fdc0 	bl	800b1b8 <pvPortMalloc>
 8009638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	631a      	str	r2, [r3, #48]	; 0x30
 8009646:	e005      	b.n	8009654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009648:	6978      	ldr	r0, [r7, #20]
 800964a:	f001 fe79 	bl	800b340 <vPortFree>
 800964e:	e001      	b.n	8009654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d017      	beq.n	800968a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009662:	88fa      	ldrh	r2, [r7, #6]
 8009664:	2300      	movs	r3, #0
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f80f 	bl	800969c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800967e:	69f8      	ldr	r0, [r7, #28]
 8009680:	f000 f8aa 	bl	80097d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009684:	2301      	movs	r3, #1
 8009686:	61bb      	str	r3, [r7, #24]
 8009688:	e002      	b.n	8009690 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800968a:	f04f 33ff 	mov.w	r3, #4294967295
 800968e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009690:	69bb      	ldr	r3, [r7, #24]
	}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	461a      	mov	r2, r3
 80096b4:	21a5      	movs	r1, #165	; 0xa5
 80096b6:	f002 f961 	bl	800b97c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096c4:	3b01      	subs	r3, #1
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	617b      	str	r3, [r7, #20]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e012      	b.n	8009720 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	3334      	adds	r3, #52	; 0x34
 800970a:	460a      	mov	r2, r1
 800970c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d006      	beq.n	8009728 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	3301      	adds	r3, #1
 800971e:	61fb      	str	r3, [r7, #28]
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	2b13      	cmp	r3, #19
 8009724:	d9e9      	bls.n	80096fa <prvInitialiseNewTask+0x5e>
 8009726:	e000      	b.n	800972a <prvInitialiseNewTask+0x8e>
		{
			break;
 8009728:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	2b37      	cmp	r3, #55	; 0x37
 8009736:	d901      	bls.n	800973c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009738:	2337      	movs	r3, #55	; 0x37
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009740:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009746:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	2200      	movs	r2, #0
 800974c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	3304      	adds	r3, #4
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff f8fa 	bl	800894c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	3318      	adds	r3, #24
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff f8f5 	bl	800894c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009766:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009776:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	2200      	movs	r2, #0
 8009784:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	3358      	adds	r3, #88	; 0x58
 800978c:	224c      	movs	r2, #76	; 0x4c
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f002 f8f3 	bl	800b97c <memset>
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	4a0c      	ldr	r2, [pc, #48]	; (80097cc <prvInitialiseNewTask+0x130>)
 800979a:	65da      	str	r2, [r3, #92]	; 0x5c
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	4a0c      	ldr	r2, [pc, #48]	; (80097d0 <prvInitialiseNewTask+0x134>)
 80097a0:	661a      	str	r2, [r3, #96]	; 0x60
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	4a0b      	ldr	r2, [pc, #44]	; (80097d4 <prvInitialiseNewTask+0x138>)
 80097a6:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	68f9      	ldr	r1, [r7, #12]
 80097ac:	69b8      	ldr	r0, [r7, #24]
 80097ae:	f001 fab1 	bl	800ad14 <pxPortInitialiseStack>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097c4:	bf00      	nop
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200026f0 	.word	0x200026f0
 80097d0:	20002758 	.word	0x20002758
 80097d4:	200027c0 	.word	0x200027c0

080097d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097e0:	f001 fbc8 	bl	800af74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097e4:	4b2d      	ldr	r3, [pc, #180]	; (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a2c      	ldr	r2, [pc, #176]	; (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ee:	4b2c      	ldr	r3, [pc, #176]	; (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d109      	bne.n	800980a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097f6:	4a2a      	ldr	r2, [pc, #168]	; (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097fc:	4b27      	ldr	r3, [pc, #156]	; (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d110      	bne.n	8009826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009804:	f000 fd9c 	bl	800a340 <prvInitialiseTaskLists>
 8009808:	e00d      	b.n	8009826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800980a:	4b26      	ldr	r3, [pc, #152]	; (80098a4 <prvAddNewTaskToReadyList+0xcc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009812:	4b23      	ldr	r3, [pc, #140]	; (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	429a      	cmp	r2, r3
 800981e:	d802      	bhi.n	8009826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009820:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009826:	4b20      	ldr	r3, [pc, #128]	; (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3301      	adds	r3, #1
 800982c:	4a1e      	ldr	r2, [pc, #120]	; (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 800982e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009830:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <prvAddNewTaskToReadyList+0xd4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d903      	bls.n	800984c <prvAddNewTaskToReadyList+0x74>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	4a18      	ldr	r2, [pc, #96]	; (80098ac <prvAddNewTaskToReadyList+0xd4>)
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <prvAddNewTaskToReadyList+0xd8>)
 800985a:	441a      	add	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f7ff f87f 	bl	8008966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009868:	f001 fbb4 	bl	800afd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800986c:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <prvAddNewTaskToReadyList+0xcc>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	429a      	cmp	r2, r3
 8009880:	d207      	bcs.n	8009892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009882:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <prvAddNewTaskToReadyList+0xdc>)
 8009884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20001178 	.word	0x20001178
 80098a0:	20000ca4 	.word	0x20000ca4
 80098a4:	20001184 	.word	0x20001184
 80098a8:	20001194 	.word	0x20001194
 80098ac:	20001180 	.word	0x20001180
 80098b0:	20000ca8 	.word	0x20000ca8
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d017      	beq.n	80098fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <vTaskDelay+0x60>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <vTaskDelay+0x30>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098e8:	f000 f99a 	bl	8009c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098ec:	2100      	movs	r1, #0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fe8a 	bl	800a608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098f4:	f000 f9a2 	bl	8009c3c <xTaskResumeAll>
 80098f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d107      	bne.n	8009910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009900:	4b06      	ldr	r3, [pc, #24]	; (800991c <vTaskDelay+0x64>)
 8009902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009906:	601a      	str	r2, [r3, #0]
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200011a0 	.word	0x200011a0
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009928:	f001 fb24 	bl	800af74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <vTaskSuspend+0x18>
 8009932:	4b30      	ldr	r3, [pc, #192]	; (80099f4 <vTaskSuspend+0xd4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	e000      	b.n	800993a <vTaskSuspend+0x1a>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3304      	adds	r3, #4
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff f86d 	bl	8008a20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3318      	adds	r3, #24
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff f864 	bl	8008a20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3304      	adds	r3, #4
 800995c:	4619      	mov	r1, r3
 800995e:	4826      	ldr	r0, [pc, #152]	; (80099f8 <vTaskSuspend+0xd8>)
 8009960:	f7ff f801 	bl	8008966 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b01      	cmp	r3, #1
 800996e:	d103      	bne.n	8009978 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009978:	f001 fb2c 	bl	800afd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800997c:	4b1f      	ldr	r3, [pc, #124]	; (80099fc <vTaskSuspend+0xdc>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009984:	f001 faf6 	bl	800af74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009988:	f000 fd7c 	bl	800a484 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800998c:	f001 fb22 	bl	800afd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009990:	4b18      	ldr	r3, [pc, #96]	; (80099f4 <vTaskSuspend+0xd4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	429a      	cmp	r2, r3
 8009998:	d127      	bne.n	80099ea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800999a:	4b18      	ldr	r3, [pc, #96]	; (80099fc <vTaskSuspend+0xdc>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d017      	beq.n	80099d2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80099a2:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <vTaskSuspend+0xe0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <vTaskSuspend+0xa0>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	60bb      	str	r3, [r7, #8]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80099c0:	4b10      	ldr	r3, [pc, #64]	; (8009a04 <vTaskSuspend+0xe4>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099d0:	e00b      	b.n	80099ea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <vTaskSuspend+0xd8>)
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <vTaskSuspend+0xe8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d103      	bne.n	80099e6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <vTaskSuspend+0xd4>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
	}
 80099e4:	e001      	b.n	80099ea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80099e6:	f000 fa95 	bl	8009f14 <vTaskSwitchContext>
	}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20000ca4 	.word	0x20000ca4
 80099f8:	20001164 	.word	0x20001164
 80099fc:	20001184 	.word	0x20001184
 8009a00:	200011a0 	.word	0x200011a0
 8009a04:	e000ed04 	.word	0xe000ed04
 8009a08:	20001178 	.word	0x20001178

08009a0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60fb      	str	r3, [r7, #12]
}
 8009a34:	bf00      	nop
 8009a36:	e7fe      	b.n	8009a36 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	4a0f      	ldr	r2, [pc, #60]	; (8009a7c <prvTaskIsTaskSuspended+0x70>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d101      	bne.n	8009a46 <prvTaskIsTaskSuspended+0x3a>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e000      	b.n	8009a48 <prvTaskIsTaskSuspended+0x3c>
 8009a46:	2300      	movs	r3, #0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00f      	beq.n	8009a6c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <prvTaskIsTaskSuspended+0x74>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00a      	beq.n	8009a6c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <prvTaskIsTaskSuspended+0x56>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <prvTaskIsTaskSuspended+0x58>
 8009a62:	2300      	movs	r3, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009a6e:	4618      	mov	r0, r3
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	20001164 	.word	0x20001164
 8009a80:	20001138 	.word	0x20001138

08009a84 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10a      	bne.n	8009aac <vTaskResume+0x28>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	60bb      	str	r3, [r7, #8]
}
 8009aa8:	bf00      	nop
 8009aaa:	e7fe      	b.n	8009aaa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d03a      	beq.n	8009b28 <vTaskResume+0xa4>
 8009ab2:	4b1f      	ldr	r3, [pc, #124]	; (8009b30 <vTaskResume+0xac>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d035      	beq.n	8009b28 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009abc:	f001 fa5a 	bl	800af74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff ffa3 	bl	8009a0c <prvTaskIsTaskSuspended>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d02b      	beq.n	8009b24 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe ffa5 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ada:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <vTaskResume+0xb0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d903      	bls.n	8009aea <vTaskResume+0x66>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	4a13      	ldr	r2, [pc, #76]	; (8009b34 <vTaskResume+0xb0>)
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <vTaskResume+0xb4>)
 8009af8:	441a      	add	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4619      	mov	r1, r3
 8009b00:	4610      	mov	r0, r2
 8009b02:	f7fe ff30 	bl	8008966 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0a:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <vTaskResume+0xac>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d307      	bcc.n	8009b24 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009b14:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <vTaskResume+0xb8>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009b24:	f001 fa56 	bl	800afd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20000ca4 	.word	0x20000ca4
 8009b34:	20001180 	.word	0x20001180
 8009b38:	20000ca8 	.word	0x20000ca8
 8009b3c:	e000ed04 	.word	0xe000ed04

08009b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b4e:	463a      	mov	r2, r7
 8009b50:	1d39      	adds	r1, r7, #4
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fd28 	bl	80085ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	9202      	str	r2, [sp, #8]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	460a      	mov	r2, r1
 8009b6e:	4924      	ldr	r1, [pc, #144]	; (8009c00 <vTaskStartScheduler+0xc0>)
 8009b70:	4824      	ldr	r0, [pc, #144]	; (8009c04 <vTaskStartScheduler+0xc4>)
 8009b72:	f7ff fcf1 	bl	8009558 <xTaskCreateStatic>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4a23      	ldr	r2, [pc, #140]	; (8009c08 <vTaskStartScheduler+0xc8>)
 8009b7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b7c:	4b22      	ldr	r3, [pc, #136]	; (8009c08 <vTaskStartScheduler+0xc8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
 8009b88:	e001      	b.n	8009b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d102      	bne.n	8009b9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b94:	f000 fd8c 	bl	800a6b0 <xTimerCreateTimerTask>
 8009b98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d11b      	bne.n	8009bd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <vTaskStartScheduler+0xcc>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3358      	adds	r3, #88	; 0x58
 8009bba:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <vTaskStartScheduler+0xd0>)
 8009bbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bbe:	4b15      	ldr	r3, [pc, #84]	; (8009c14 <vTaskStartScheduler+0xd4>)
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <vTaskStartScheduler+0xd8>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009bcc:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <vTaskStartScheduler+0xdc>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bd2:	f001 f92d 	bl	800ae30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bd6:	e00e      	b.n	8009bf6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bde:	d10a      	bne.n	8009bf6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <vTaskStartScheduler+0xb4>
}
 8009bf6:	bf00      	nop
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	0800c920 	.word	0x0800c920
 8009c04:	0800a311 	.word	0x0800a311
 8009c08:	2000119c 	.word	0x2000119c
 8009c0c:	20000ca4 	.word	0x20000ca4
 8009c10:	200000e4 	.word	0x200000e4
 8009c14:	20001198 	.word	0x20001198
 8009c18:	20001184 	.word	0x20001184
 8009c1c:	2000117c 	.word	0x2000117c

08009c20 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c24:	4b04      	ldr	r3, [pc, #16]	; (8009c38 <vTaskSuspendAll+0x18>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a03      	ldr	r2, [pc, #12]	; (8009c38 <vTaskSuspendAll+0x18>)
 8009c2c:	6013      	str	r3, [r2, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	200011a0 	.word	0x200011a0

08009c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c4a:	4b42      	ldr	r3, [pc, #264]	; (8009d54 <xTaskResumeAll+0x118>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	603b      	str	r3, [r7, #0]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c68:	f001 f984 	bl	800af74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c6c:	4b39      	ldr	r3, [pc, #228]	; (8009d54 <xTaskResumeAll+0x118>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	4a38      	ldr	r2, [pc, #224]	; (8009d54 <xTaskResumeAll+0x118>)
 8009c74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c76:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <xTaskResumeAll+0x118>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d162      	bne.n	8009d44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c7e:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <xTaskResumeAll+0x11c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d05e      	beq.n	8009d44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c86:	e02f      	b.n	8009ce8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c88:	4b34      	ldr	r3, [pc, #208]	; (8009d5c <xTaskResumeAll+0x120>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3318      	adds	r3, #24
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe fec3 	bl	8008a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe febe 	bl	8008a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	4b2d      	ldr	r3, [pc, #180]	; (8009d60 <xTaskResumeAll+0x124>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <xTaskResumeAll+0x7c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <xTaskResumeAll+0x124>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a27      	ldr	r2, [pc, #156]	; (8009d64 <xTaskResumeAll+0x128>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe fe49 	bl	8008966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b23      	ldr	r3, [pc, #140]	; (8009d68 <xTaskResumeAll+0x12c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ce2:	4b22      	ldr	r3, [pc, #136]	; (8009d6c <xTaskResumeAll+0x130>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ce8:	4b1c      	ldr	r3, [pc, #112]	; (8009d5c <xTaskResumeAll+0x120>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1cb      	bne.n	8009c88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cf6:	f000 fbc5 	bl	800a484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	; (8009d70 <xTaskResumeAll+0x134>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d010      	beq.n	8009d28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d06:	f000 f847 	bl	8009d98 <xTaskIncrementTick>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d10:	4b16      	ldr	r3, [pc, #88]	; (8009d6c <xTaskResumeAll+0x130>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f1      	bne.n	8009d06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009d22:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <xTaskResumeAll+0x134>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d28:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <xTaskResumeAll+0x130>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <xTaskResumeAll+0x138>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d44:	f001 f946 	bl	800afd4 <vPortExitCritical>

	return xAlreadyYielded;
 8009d48:	68bb      	ldr	r3, [r7, #8]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200011a0 	.word	0x200011a0
 8009d58:	20001178 	.word	0x20001178
 8009d5c:	20001138 	.word	0x20001138
 8009d60:	20001180 	.word	0x20001180
 8009d64:	20000ca8 	.word	0x20000ca8
 8009d68:	20000ca4 	.word	0x20000ca4
 8009d6c:	2000118c 	.word	0x2000118c
 8009d70:	20001188 	.word	0x20001188
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <xTaskGetTickCount+0x1c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d84:	687b      	ldr	r3, [r7, #4]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	2000117c 	.word	0x2000117c

08009d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da2:	4b51      	ldr	r3, [pc, #324]	; (8009ee8 <xTaskIncrementTick+0x150>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f040 808e 	bne.w	8009ec8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dac:	4b4f      	ldr	r3, [pc, #316]	; (8009eec <xTaskIncrementTick+0x154>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009db4:	4a4d      	ldr	r2, [pc, #308]	; (8009eec <xTaskIncrementTick+0x154>)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d120      	bne.n	8009e02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dc0:	4b4b      	ldr	r3, [pc, #300]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	603b      	str	r3, [r7, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <xTaskIncrementTick+0x46>
 8009de0:	4b43      	ldr	r3, [pc, #268]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	4b43      	ldr	r3, [pc, #268]	; (8009ef4 <xTaskIncrementTick+0x15c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a41      	ldr	r2, [pc, #260]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4a41      	ldr	r2, [pc, #260]	; (8009ef4 <xTaskIncrementTick+0x15c>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	4b40      	ldr	r3, [pc, #256]	; (8009ef8 <xTaskIncrementTick+0x160>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	4a3f      	ldr	r2, [pc, #252]	; (8009ef8 <xTaskIncrementTick+0x160>)
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	f000 fb41 	bl	800a484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e02:	4b3e      	ldr	r3, [pc, #248]	; (8009efc <xTaskIncrementTick+0x164>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d34e      	bcc.n	8009eaa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0c:	4b38      	ldr	r3, [pc, #224]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <xTaskIncrementTick+0x82>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <xTaskIncrementTick+0x84>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e20:	4b36      	ldr	r3, [pc, #216]	; (8009efc <xTaskIncrementTick+0x164>)
 8009e22:	f04f 32ff 	mov.w	r2, #4294967295
 8009e26:	601a      	str	r2, [r3, #0]
					break;
 8009e28:	e03f      	b.n	8009eaa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e2a:	4b31      	ldr	r3, [pc, #196]	; (8009ef0 <xTaskIncrementTick+0x158>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d203      	bcs.n	8009e4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e42:	4a2e      	ldr	r2, [pc, #184]	; (8009efc <xTaskIncrementTick+0x164>)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6013      	str	r3, [r2, #0]
						break;
 8009e48:	e02f      	b.n	8009eaa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fde6 	bl	8008a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3318      	adds	r3, #24
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fddd 	bl	8008a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6a:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <xTaskIncrementTick+0x168>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d903      	bls.n	8009e7a <xTaskIncrementTick+0xe2>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	4a22      	ldr	r2, [pc, #136]	; (8009f00 <xTaskIncrementTick+0x168>)
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4a1f      	ldr	r2, [pc, #124]	; (8009f04 <xTaskIncrementTick+0x16c>)
 8009e88:	441a      	add	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f7fe fd68 	bl	8008966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <xTaskIncrementTick+0x170>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d3b3      	bcc.n	8009e0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ea8:	e7b0      	b.n	8009e0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eaa:	4b17      	ldr	r3, [pc, #92]	; (8009f08 <xTaskIncrementTick+0x170>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb0:	4914      	ldr	r1, [pc, #80]	; (8009f04 <xTaskIncrementTick+0x16c>)
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d907      	bls.n	8009ed2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e004      	b.n	8009ed2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ec8:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <xTaskIncrementTick+0x174>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	4a0f      	ldr	r2, [pc, #60]	; (8009f0c <xTaskIncrementTick+0x174>)
 8009ed0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ed2:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <xTaskIncrementTick+0x178>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009eda:	2301      	movs	r3, #1
 8009edc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ede:	697b      	ldr	r3, [r7, #20]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	200011a0 	.word	0x200011a0
 8009eec:	2000117c 	.word	0x2000117c
 8009ef0:	20001130 	.word	0x20001130
 8009ef4:	20001134 	.word	0x20001134
 8009ef8:	20001190 	.word	0x20001190
 8009efc:	20001198 	.word	0x20001198
 8009f00:	20001180 	.word	0x20001180
 8009f04:	20000ca8 	.word	0x20000ca8
 8009f08:	20000ca4 	.word	0x20000ca4
 8009f0c:	20001188 	.word	0x20001188
 8009f10:	2000118c 	.word	0x2000118c

08009f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f1a:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <vTaskSwitchContext+0xb0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f22:	4b29      	ldr	r3, [pc, #164]	; (8009fc8 <vTaskSwitchContext+0xb4>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f28:	e046      	b.n	8009fb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f2a:	4b27      	ldr	r3, [pc, #156]	; (8009fc8 <vTaskSwitchContext+0xb4>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f30:	4b26      	ldr	r3, [pc, #152]	; (8009fcc <vTaskSwitchContext+0xb8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	e010      	b.n	8009f5a <vTaskSwitchContext+0x46>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <vTaskSwitchContext+0x3e>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	491d      	ldr	r1, [pc, #116]	; (8009fd0 <vTaskSwitchContext+0xbc>)
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0e4      	beq.n	8009f38 <vTaskSwitchContext+0x24>
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <vTaskSwitchContext+0xbc>)
 8009f7a:	4413      	add	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	605a      	str	r2, [r3, #4]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d104      	bne.n	8009f9e <vTaskSwitchContext+0x8a>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	605a      	str	r2, [r3, #4]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4a0b      	ldr	r2, [pc, #44]	; (8009fd4 <vTaskSwitchContext+0xc0>)
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <vTaskSwitchContext+0xb8>)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <vTaskSwitchContext+0xc0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3358      	adds	r3, #88	; 0x58
 8009fb4:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <vTaskSwitchContext+0xc4>)
 8009fb6:	6013      	str	r3, [r2, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	200011a0 	.word	0x200011a0
 8009fc8:	2000118c 	.word	0x2000118c
 8009fcc:	20001180 	.word	0x20001180
 8009fd0:	20000ca8 	.word	0x20000ca8
 8009fd4:	20000ca4 	.word	0x20000ca4
 8009fd8:	200000e4 	.word	0x200000e4

08009fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <vTaskPlaceOnEventList+0x44>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3318      	adds	r3, #24
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7fe fccf 	bl	80089ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a010:	2101      	movs	r1, #1
 800a012:	6838      	ldr	r0, [r7, #0]
 800a014:	f000 faf8 	bl	800a608 <prvAddCurrentTaskToDelayedList>
}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20000ca4 	.word	0x20000ca4

0800a024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	617b      	str	r3, [r7, #20]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <vTaskPlaceOnEventListRestricted+0x54>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3318      	adds	r3, #24
 800a052:	4619      	mov	r1, r3
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7fe fc86 	bl	8008966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a060:	f04f 33ff 	mov.w	r3, #4294967295
 800a064:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	68b8      	ldr	r0, [r7, #8]
 800a06a:	f000 facd 	bl	800a608 <prvAddCurrentTaskToDelayedList>
	}
 800a06e:	bf00      	nop
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000ca4 	.word	0x20000ca4

0800a07c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	60fb      	str	r3, [r7, #12]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	3318      	adds	r3, #24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fcb7 	bl	8008a20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0b2:	4b1e      	ldr	r3, [pc, #120]	; (800a12c <xTaskRemoveFromEventList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11d      	bne.n	800a0f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fcae 	bl	8008a20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4b19      	ldr	r3, [pc, #100]	; (800a130 <xTaskRemoveFromEventList+0xb4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d903      	bls.n	800a0d8 <xTaskRemoveFromEventList+0x5c>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4a16      	ldr	r2, [pc, #88]	; (800a130 <xTaskRemoveFromEventList+0xb4>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a13      	ldr	r2, [pc, #76]	; (800a134 <xTaskRemoveFromEventList+0xb8>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe fc39 	bl	8008966 <vListInsertEnd>
 800a0f4:	e005      	b.n	800a102 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3318      	adds	r3, #24
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	480e      	ldr	r0, [pc, #56]	; (800a138 <xTaskRemoveFromEventList+0xbc>)
 800a0fe:	f7fe fc32 	bl	8008966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <xTaskRemoveFromEventList+0xc0>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d905      	bls.n	800a11c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <xTaskRemoveFromEventList+0xc4>)
 800a116:	2201      	movs	r2, #1
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	e001      	b.n	800a120 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a120:	697b      	ldr	r3, [r7, #20]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	200011a0 	.word	0x200011a0
 800a130:	20001180 	.word	0x20001180
 800a134:	20000ca8 	.word	0x20000ca8
 800a138:	20001138 	.word	0x20001138
 800a13c:	20000ca4 	.word	0x20000ca4
 800a140:	2000118c 	.word	0x2000118c

0800a144 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a14e:	4b29      	ldr	r3, [pc, #164]	; (800a1f4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	613b      	str	r3, [r7, #16]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60fb      	str	r3, [r7, #12]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7fe fc41 	bl	8008a20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fc3c 	bl	8008a20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d903      	bls.n	800a1bc <vTaskRemoveFromUnorderedEventList+0x78>
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4a0f      	ldr	r2, [pc, #60]	; (800a1f8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4a0c      	ldr	r2, [pc, #48]	; (800a1fc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a1ca:	441a      	add	r2, r3
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f7fe fbc7 	bl	8008966 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	4b08      	ldr	r3, [pc, #32]	; (800a200 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d902      	bls.n	800a1ec <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a1e6:	4b07      	ldr	r3, [pc, #28]	; (800a204 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]
	}
}
 800a1ec:	bf00      	nop
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	200011a0 	.word	0x200011a0
 800a1f8:	20001180 	.word	0x20001180
 800a1fc:	20000ca8 	.word	0x20000ca8
 800a200:	20000ca4 	.word	0x20000ca4
 800a204:	2000118c 	.word	0x2000118c

0800a208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a210:	4b06      	ldr	r3, [pc, #24]	; (800a22c <vTaskInternalSetTimeOutState+0x24>)
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <vTaskInternalSetTimeOutState+0x28>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	20001190 	.word	0x20001190
 800a230:	2000117c 	.word	0x2000117c

0800a234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10a      	bne.n	800a25a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	613b      	str	r3, [r7, #16]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60fb      	str	r3, [r7, #12]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a276:	f000 fe7d 	bl	800af74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a27a:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <xTaskCheckForTimeOut+0xbc>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d102      	bne.n	800a29a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a294:	2300      	movs	r3, #0
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	e023      	b.n	800a2e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b15      	ldr	r3, [pc, #84]	; (800a2f4 <xTaskCheckForTimeOut+0xc0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d007      	beq.n	800a2b6 <xTaskCheckForTimeOut+0x82>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d302      	bcc.n	800a2b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e015      	b.n	800a2e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d20b      	bcs.n	800a2d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	1ad2      	subs	r2, r2, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff9b 	bl	800a208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	e004      	b.n	800a2e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2e2:	f000 fe77 	bl	800afd4 <vPortExitCritical>

	return xReturn;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	2000117c 	.word	0x2000117c
 800a2f4:	20001190 	.word	0x20001190

0800a2f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2fc:	4b03      	ldr	r3, [pc, #12]	; (800a30c <vTaskMissedYield+0x14>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
}
 800a302:	bf00      	nop
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	2000118c 	.word	0x2000118c

0800a310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a318:	f000 f852 	bl	800a3c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <prvIdleTask+0x28>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d9f9      	bls.n	800a318 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <prvIdleTask+0x2c>)
 800a326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a334:	e7f0      	b.n	800a318 <prvIdleTask+0x8>
 800a336:	bf00      	nop
 800a338:	20000ca8 	.word	0x20000ca8
 800a33c:	e000ed04 	.word	0xe000ed04

0800a340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a346:	2300      	movs	r3, #0
 800a348:	607b      	str	r3, [r7, #4]
 800a34a:	e00c      	b.n	800a366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4a12      	ldr	r2, [pc, #72]	; (800a3a0 <prvInitialiseTaskLists+0x60>)
 800a358:	4413      	add	r3, r2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fad6 	bl	800890c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3301      	adds	r3, #1
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b37      	cmp	r3, #55	; 0x37
 800a36a:	d9ef      	bls.n	800a34c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a36c:	480d      	ldr	r0, [pc, #52]	; (800a3a4 <prvInitialiseTaskLists+0x64>)
 800a36e:	f7fe facd 	bl	800890c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a372:	480d      	ldr	r0, [pc, #52]	; (800a3a8 <prvInitialiseTaskLists+0x68>)
 800a374:	f7fe faca 	bl	800890c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a378:	480c      	ldr	r0, [pc, #48]	; (800a3ac <prvInitialiseTaskLists+0x6c>)
 800a37a:	f7fe fac7 	bl	800890c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a37e:	480c      	ldr	r0, [pc, #48]	; (800a3b0 <prvInitialiseTaskLists+0x70>)
 800a380:	f7fe fac4 	bl	800890c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a384:	480b      	ldr	r0, [pc, #44]	; (800a3b4 <prvInitialiseTaskLists+0x74>)
 800a386:	f7fe fac1 	bl	800890c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a38a:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <prvInitialiseTaskLists+0x78>)
 800a38c:	4a05      	ldr	r2, [pc, #20]	; (800a3a4 <prvInitialiseTaskLists+0x64>)
 800a38e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a390:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <prvInitialiseTaskLists+0x7c>)
 800a392:	4a05      	ldr	r2, [pc, #20]	; (800a3a8 <prvInitialiseTaskLists+0x68>)
 800a394:	601a      	str	r2, [r3, #0]
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000ca8 	.word	0x20000ca8
 800a3a4:	20001108 	.word	0x20001108
 800a3a8:	2000111c 	.word	0x2000111c
 800a3ac:	20001138 	.word	0x20001138
 800a3b0:	2000114c 	.word	0x2000114c
 800a3b4:	20001164 	.word	0x20001164
 800a3b8:	20001130 	.word	0x20001130
 800a3bc:	20001134 	.word	0x20001134

0800a3c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3c6:	e019      	b.n	800a3fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3c8:	f000 fdd4 	bl	800af74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <prvCheckTasksWaitingTermination+0x50>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fb21 	bl	8008a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3de:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <prvCheckTasksWaitingTermination+0x54>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	4a0b      	ldr	r2, [pc, #44]	; (800a414 <prvCheckTasksWaitingTermination+0x54>)
 800a3e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <prvCheckTasksWaitingTermination+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <prvCheckTasksWaitingTermination+0x58>)
 800a3f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3f2:	f000 fdef 	bl	800afd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f810 	bl	800a41c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3fc:	4b06      	ldr	r3, [pc, #24]	; (800a418 <prvCheckTasksWaitingTermination+0x58>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e1      	bne.n	800a3c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000114c 	.word	0x2000114c
 800a414:	20001178 	.word	0x20001178
 800a418:	20001160 	.word	0x20001160

0800a41c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3358      	adds	r3, #88	; 0x58
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 fabf 	bl	800b9ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 ff7f 	bl	800b340 <vPortFree>
				vPortFree( pxTCB );
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 ff7c 	bl	800b340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a448:	e018      	b.n	800a47c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a450:	2b01      	cmp	r3, #1
 800a452:	d103      	bne.n	800a45c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 ff73 	bl	800b340 <vPortFree>
	}
 800a45a:	e00f      	b.n	800a47c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a462:	2b02      	cmp	r3, #2
 800a464:	d00a      	beq.n	800a47c <prvDeleteTCB+0x60>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <prvDeleteTCB+0x5e>
	}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <prvResetNextTaskUnblockTime+0x44>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <prvResetNextTaskUnblockTime+0x14>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <prvResetNextTaskUnblockTime+0x16>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <prvResetNextTaskUnblockTime+0x48>)
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4a6:	e008      	b.n	800a4ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <prvResetNextTaskUnblockTime+0x44>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	4a05      	ldr	r2, [pc, #20]	; (800a4cc <prvResetNextTaskUnblockTime+0x48>)
 800a4b8:	6013      	str	r3, [r2, #0]
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	20001130 	.word	0x20001130
 800a4cc:	20001198 	.word	0x20001198

0800a4d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <xTaskGetCurrentTaskHandle+0x1c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a4dc:	687b      	ldr	r3, [r7, #4]
	}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20000ca4 	.word	0x20000ca4

0800a4f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4f6:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <xTaskGetSchedulerState+0x34>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4fe:	2301      	movs	r3, #1
 800a500:	607b      	str	r3, [r7, #4]
 800a502:	e008      	b.n	800a516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a504:	4b08      	ldr	r3, [pc, #32]	; (800a528 <xTaskGetSchedulerState+0x38>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a50c:	2302      	movs	r3, #2
 800a50e:	607b      	str	r3, [r7, #4]
 800a510:	e001      	b.n	800a516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a516:	687b      	ldr	r3, [r7, #4]
	}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20001184 	.word	0x20001184
 800a528:	200011a0 	.word	0x200011a0

0800a52c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d056      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <xTaskPriorityDisinherit+0xd0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d00a      	beq.n	800a562 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	60fb      	str	r3, [r7, #12]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	60bb      	str	r3, [r7, #8]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a592:	429a      	cmp	r2, r3
 800a594:	d02c      	beq.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d128      	bne.n	800a5f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe fa3c 	bl	8008a20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <xTaskPriorityDisinherit+0xd4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d903      	bls.n	800a5d0 <xTaskPriorityDisinherit+0xa4>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	4a0c      	ldr	r2, [pc, #48]	; (800a600 <xTaskPriorityDisinherit+0xd4>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a09      	ldr	r2, [pc, #36]	; (800a604 <xTaskPriorityDisinherit+0xd8>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fe f9bd 	bl	8008966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f0:	697b      	ldr	r3, [r7, #20]
	}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000ca4 	.word	0x20000ca4
 800a600:	20001180 	.word	0x20001180
 800a604:	20000ca8 	.word	0x20000ca8

0800a608 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a612:	4b21      	ldr	r3, [pc, #132]	; (800a698 <prvAddCurrentTaskToDelayedList+0x90>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a618:	4b20      	ldr	r3, [pc, #128]	; (800a69c <prvAddCurrentTaskToDelayedList+0x94>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3304      	adds	r3, #4
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe f9fe 	bl	8008a20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d10a      	bne.n	800a642 <prvAddCurrentTaskToDelayedList+0x3a>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a632:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <prvAddCurrentTaskToDelayedList+0x94>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	4819      	ldr	r0, [pc, #100]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a63c:	f7fe f993 	bl	8008966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a640:	e026      	b.n	800a690 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4413      	add	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a64a:	4b14      	ldr	r3, [pc, #80]	; (800a69c <prvAddCurrentTaskToDelayedList+0x94>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	429a      	cmp	r2, r3
 800a658:	d209      	bcs.n	800a66e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65a:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <prvAddCurrentTaskToDelayedList+0x94>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3304      	adds	r3, #4
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f7fe f9a1 	bl	80089ae <vListInsert>
}
 800a66c:	e010      	b.n	800a690 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a66e:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <prvAddCurrentTaskToDelayedList+0x94>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3304      	adds	r3, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fe f997 	bl	80089ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	429a      	cmp	r2, r3
 800a688:	d202      	bcs.n	800a690 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a68a:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6013      	str	r3, [r2, #0]
}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	2000117c 	.word	0x2000117c
 800a69c:	20000ca4 	.word	0x20000ca4
 800a6a0:	20001164 	.word	0x20001164
 800a6a4:	20001134 	.word	0x20001134
 800a6a8:	20001130 	.word	0x20001130
 800a6ac:	20001198 	.word	0x20001198

0800a6b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	; 0x28
 800a6b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6ba:	f000 facb 	bl	800ac54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a6be:	4b1c      	ldr	r3, [pc, #112]	; (800a730 <xTimerCreateTimerTask+0x80>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d021      	beq.n	800a70a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6ce:	1d3a      	adds	r2, r7, #4
 800a6d0:	f107 0108 	add.w	r1, r7, #8
 800a6d4:	f107 030c 	add.w	r3, r7, #12
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd ff81 	bl	80085e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	9202      	str	r2, [sp, #8]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	460a      	mov	r2, r1
 800a6f0:	4910      	ldr	r1, [pc, #64]	; (800a734 <xTimerCreateTimerTask+0x84>)
 800a6f2:	4811      	ldr	r0, [pc, #68]	; (800a738 <xTimerCreateTimerTask+0x88>)
 800a6f4:	f7fe ff30 	bl	8009558 <xTaskCreateStatic>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	4a10      	ldr	r2, [pc, #64]	; (800a73c <xTimerCreateTimerTask+0x8c>)
 800a6fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <xTimerCreateTimerTask+0x8c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a706:	2301      	movs	r3, #1
 800a708:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	613b      	str	r3, [r7, #16]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a726:	697b      	ldr	r3, [r7, #20]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	200011d4 	.word	0x200011d4
 800a734:	0800c928 	.word	0x0800c928
 800a738:	0800a85d 	.word	0x0800a85d
 800a73c:	200011d8 	.word	0x200011d8

0800a740 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08a      	sub	sp, #40	; 0x28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a74e:	2300      	movs	r3, #0
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	623b      	str	r3, [r7, #32]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a76e:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <xTimerGenericCommand+0x98>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d02a      	beq.n	800a7cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b05      	cmp	r3, #5
 800a786:	dc18      	bgt.n	800a7ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a788:	f7ff feb2 	bl	800a4f0 <xTaskGetSchedulerState>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d109      	bne.n	800a7a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a792:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <xTimerGenericCommand+0x98>)
 800a794:	6818      	ldr	r0, [r3, #0]
 800a796:	f107 0110 	add.w	r1, r7, #16
 800a79a:	2300      	movs	r3, #0
 800a79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79e:	f7fe faf7 	bl	8008d90 <xQueueGenericSend>
 800a7a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a7a4:	e012      	b.n	800a7cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <xTimerGenericCommand+0x98>)
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f107 0110 	add.w	r1, r7, #16
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7fe faed 	bl	8008d90 <xQueueGenericSend>
 800a7b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a7b8:	e008      	b.n	800a7cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <xTimerGenericCommand+0x98>)
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f107 0110 	add.w	r1, r7, #16
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	f7fe fbe1 	bl	8008f8c <xQueueGenericSendFromISR>
 800a7ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3728      	adds	r7, #40	; 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200011d4 	.word	0x200011d4

0800a7dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7e6:	4b1c      	ldr	r3, [pc, #112]	; (800a858 <prvProcessExpiredTimer+0x7c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe f913 	bl	8008a20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d122      	bne.n	800a848 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	18d1      	adds	r1, r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	6978      	ldr	r0, [r7, #20]
 800a810:	f000 f8c8 	bl	800a9a4 <prvInsertTimerInActiveList>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d016      	beq.n	800a848 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a81a:	2300      	movs	r3, #0
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	2300      	movs	r3, #0
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	2100      	movs	r1, #0
 800a824:	6978      	ldr	r0, [r7, #20]
 800a826:	f7ff ff8b 	bl	800a740 <xTimerGenericCommand>
 800a82a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10a      	bne.n	800a848 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60fb      	str	r3, [r7, #12]
}
 800a844:	bf00      	nop
 800a846:	e7fe      	b.n	800a846 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	6978      	ldr	r0, [r7, #20]
 800a84e:	4798      	blx	r3
}
 800a850:	bf00      	nop
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	200011cc 	.word	0x200011cc

0800a85c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a864:	f107 0308 	add.w	r3, r7, #8
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 f857 	bl	800a91c <prvGetNextExpireTime>
 800a86e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f803 	bl	800a880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a87a:	f000 f8d5 	bl	800aa28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a87e:	e7f1      	b.n	800a864 <prvTimerTask+0x8>

0800a880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a88a:	f7ff f9c9 	bl	8009c20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	4618      	mov	r0, r3
 800a894:	f000 f866 	bl	800a964 <prvSampleTimeNow>
 800a898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d130      	bne.n	800a902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <prvProcessTimerOrBlockTask+0x3c>
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d806      	bhi.n	800a8bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8ae:	f7ff f9c5 	bl	8009c3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8b2:	68f9      	ldr	r1, [r7, #12]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ff91 	bl	800a7dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8ba:	e024      	b.n	800a906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d008      	beq.n	800a8d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8c2:	4b13      	ldr	r3, [pc, #76]	; (800a910 <prvProcessTimerOrBlockTask+0x90>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2301      	moveq	r3, #1
 800a8ce:	2300      	movne	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <prvProcessTimerOrBlockTask+0x94>)
 800a8d6:	6818      	ldr	r0, [r3, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f7fe fe05 	bl	80094f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8e6:	f7ff f9a9 	bl	8009c3c <xTaskResumeAll>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8f0:	4b09      	ldr	r3, [pc, #36]	; (800a918 <prvProcessTimerOrBlockTask+0x98>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
}
 800a900:	e001      	b.n	800a906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a902:	f7ff f99b 	bl	8009c3c <xTaskResumeAll>
}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	200011d0 	.word	0x200011d0
 800a914:	200011d4 	.word	0x200011d4
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a924:	4b0e      	ldr	r3, [pc, #56]	; (800a960 <prvGetNextExpireTime+0x44>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bf0c      	ite	eq
 800a92e:	2301      	moveq	r3, #1
 800a930:	2300      	movne	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d105      	bne.n	800a94e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a942:	4b07      	ldr	r3, [pc, #28]	; (800a960 <prvGetNextExpireTime+0x44>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e001      	b.n	800a952 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a952:	68fb      	ldr	r3, [r7, #12]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	200011cc 	.word	0x200011cc

0800a964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a96c:	f7ff fa04 	bl	8009d78 <xTaskGetTickCount>
 800a970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a972:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <prvSampleTimeNow+0x3c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d205      	bcs.n	800a988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a97c:	f000 f908 	bl	800ab90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	e002      	b.n	800a98e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a98e:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <prvSampleTimeNow+0x3c>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a994:	68fb      	ldr	r3, [r7, #12]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	200011dc 	.word	0x200011dc

0800a9a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d812      	bhi.n	800a9f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d302      	bcc.n	800a9de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	e01b      	b.n	800aa16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9de:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <prvInsertTimerInActiveList+0x7c>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fd ffe0 	bl	80089ae <vListInsert>
 800a9ee:	e012      	b.n	800aa16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d206      	bcs.n	800aa06 <prvInsertTimerInActiveList+0x62>
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d302      	bcc.n	800aa06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	e007      	b.n	800aa16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa06:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <prvInsertTimerInActiveList+0x80>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4610      	mov	r0, r2
 800aa12:	f7fd ffcc 	bl	80089ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa16:	697b      	ldr	r3, [r7, #20]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	200011d0 	.word	0x200011d0
 800aa24:	200011cc 	.word	0x200011cc

0800aa28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08e      	sub	sp, #56	; 0x38
 800aa2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa2e:	e09d      	b.n	800ab6c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da18      	bge.n	800aa68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa36:	1d3b      	adds	r3, r7, #4
 800aa38:	3304      	adds	r3, #4
 800aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	61fb      	str	r3, [r7, #28]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5e:	6850      	ldr	r0, [r2, #4]
 800aa60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa62:	6892      	ldr	r2, [r2, #8]
 800aa64:	4611      	mov	r1, r2
 800aa66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	db7e      	blt.n	800ab6c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fd ffce 	bl	8008a20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa84:	463b      	mov	r3, r7
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff ff6c 	bl	800a964 <prvSampleTimeNow>
 800aa8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b09      	cmp	r3, #9
 800aa92:	d86a      	bhi.n	800ab6a <prvProcessReceivedCommands+0x142>
 800aa94:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <prvProcessReceivedCommands+0x74>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800aac5 	.word	0x0800aac5
 800aaa0:	0800aac5 	.word	0x0800aac5
 800aaa4:	0800aac5 	.word	0x0800aac5
 800aaa8:	0800ab6d 	.word	0x0800ab6d
 800aaac:	0800ab21 	.word	0x0800ab21
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800aac5 	.word	0x0800aac5
 800aab8:	0800aac5 	.word	0x0800aac5
 800aabc:	0800ab6d 	.word	0x0800ab6d
 800aac0:	0800ab21 	.word	0x0800ab21
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	18d1      	adds	r1, r2, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad2:	f7ff ff67 	bl	800a9a4 <prvInsertTimerInActiveList>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d047      	beq.n	800ab6c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d13f      	bne.n	800ab6c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2100      	movs	r1, #0
 800aafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aafe:	f7ff fe1f 	bl	800a740 <xTimerGenericCommand>
 800ab02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d130      	bne.n	800ab6c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61bb      	str	r3, [r7, #24]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	617b      	str	r3, [r7, #20]
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	699a      	ldr	r2, [r3, #24]
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	18d1      	adds	r1, r2, r3
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab52:	f7ff ff27 	bl	800a9a4 <prvInsertTimerInActiveList>
					break;
 800ab56:	e009      	b.n	800ab6c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ab62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab64:	f000 fbec 	bl	800b340 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab68:	e000      	b.n	800ab6c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800ab6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab6c:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <prvProcessReceivedCommands+0x164>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	1d39      	adds	r1, r7, #4
 800ab72:	2200      	movs	r2, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe faa1 	bl	80090bc <xQueueReceive>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f47f af57 	bne.w	800aa30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3730      	adds	r7, #48	; 0x30
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	200011d4 	.word	0x200011d4

0800ab90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab96:	e045      	b.n	800ac24 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab98:	4b2c      	ldr	r3, [pc, #176]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aba2:	4b2a      	ldr	r3, [pc, #168]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3304      	adds	r3, #4
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fd ff35 	bl	8008a20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d12e      	bne.n	800ac24 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	4413      	add	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d90e      	bls.n	800abf6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abe4:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3304      	adds	r3, #4
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f7fd fedd 	bl	80089ae <vListInsert>
 800abf4:	e016      	b.n	800ac24 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abf6:	2300      	movs	r3, #0
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	2300      	movs	r3, #0
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	2100      	movs	r1, #0
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff fd9d 	bl	800a740 <xTimerGenericCommand>
 800ac06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	603b      	str	r3, [r7, #0]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac24:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1b4      	bne.n	800ab98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac2e:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac34:	4b06      	ldr	r3, [pc, #24]	; (800ac50 <prvSwitchTimerLists+0xc0>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a04      	ldr	r2, [pc, #16]	; (800ac4c <prvSwitchTimerLists+0xbc>)
 800ac3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac3c:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <prvSwitchTimerLists+0xc0>)
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6013      	str	r3, [r2, #0]
}
 800ac42:	bf00      	nop
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	200011cc 	.word	0x200011cc
 800ac50:	200011d0 	.word	0x200011d0

0800ac54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac5a:	f000 f98b 	bl	800af74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac5e:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <prvCheckForValidListAndQueue+0x60>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d120      	bne.n	800aca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac66:	4814      	ldr	r0, [pc, #80]	; (800acb8 <prvCheckForValidListAndQueue+0x64>)
 800ac68:	f7fd fe50 	bl	800890c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac6c:	4813      	ldr	r0, [pc, #76]	; (800acbc <prvCheckForValidListAndQueue+0x68>)
 800ac6e:	f7fd fe4d 	bl	800890c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac72:	4b13      	ldr	r3, [pc, #76]	; (800acc0 <prvCheckForValidListAndQueue+0x6c>)
 800ac74:	4a10      	ldr	r2, [pc, #64]	; (800acb8 <prvCheckForValidListAndQueue+0x64>)
 800ac76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac78:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <prvCheckForValidListAndQueue+0x70>)
 800ac7a:	4a10      	ldr	r2, [pc, #64]	; (800acbc <prvCheckForValidListAndQueue+0x68>)
 800ac7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac7e:	2300      	movs	r3, #0
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <prvCheckForValidListAndQueue+0x74>)
 800ac84:	4a11      	ldr	r2, [pc, #68]	; (800accc <prvCheckForValidListAndQueue+0x78>)
 800ac86:	2110      	movs	r1, #16
 800ac88:	200a      	movs	r0, #10
 800ac8a:	f7fd ff5b 	bl	8008b44 <xQueueGenericCreateStatic>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4a08      	ldr	r2, [pc, #32]	; (800acb4 <prvCheckForValidListAndQueue+0x60>)
 800ac92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <prvCheckForValidListAndQueue+0x60>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d005      	beq.n	800aca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <prvCheckForValidListAndQueue+0x60>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	490b      	ldr	r1, [pc, #44]	; (800acd0 <prvCheckForValidListAndQueue+0x7c>)
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fbfa 	bl	800949c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aca8:	f000 f994 	bl	800afd4 <vPortExitCritical>
}
 800acac:	bf00      	nop
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200011d4 	.word	0x200011d4
 800acb8:	200011a4 	.word	0x200011a4
 800acbc:	200011b8 	.word	0x200011b8
 800acc0:	200011cc 	.word	0x200011cc
 800acc4:	200011d0 	.word	0x200011d0
 800acc8:	20001280 	.word	0x20001280
 800accc:	200011e0 	.word	0x200011e0
 800acd0:	0800c930 	.word	0x0800c930

0800acd4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ace2:	f06f 0301 	mvn.w	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <xTimerPendFunctionCallFromISR+0x3c>)
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	f107 0114 	add.w	r1, r7, #20
 800acfc:	2300      	movs	r3, #0
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	f7fe f944 	bl	8008f8c <xQueueGenericSendFromISR>
 800ad04:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3728      	adds	r7, #40	; 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	200011d4 	.word	0x200011d4

0800ad14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3b04      	subs	r3, #4
 800ad24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3b04      	subs	r3, #4
 800ad32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f023 0201 	bic.w	r2, r3, #1
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3b04      	subs	r3, #4
 800ad42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad44:	4a0c      	ldr	r2, [pc, #48]	; (800ad78 <pxPortInitialiseStack+0x64>)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3b14      	subs	r3, #20
 800ad4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3b04      	subs	r3, #4
 800ad5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f06f 0202 	mvn.w	r2, #2
 800ad62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3b20      	subs	r3, #32
 800ad68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	0800ad7d 	.word	0x0800ad7d

0800ad7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <prvTaskExitError+0x54>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d00a      	beq.n	800ada6 <prvTaskExitError+0x2a>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	60fb      	str	r3, [r7, #12]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <prvTaskExitError+0x28>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60bb      	str	r3, [r7, #8]
}
 800adb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adba:	bf00      	nop
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0fc      	beq.n	800adbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	20000088 	.word	0x20000088
	...

0800ade0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <pxCurrentTCBConst2>)
 800ade2:	6819      	ldr	r1, [r3, #0]
 800ade4:	6808      	ldr	r0, [r1, #0]
 800ade6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adea:	f380 8809 	msr	PSP, r0
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f04f 0000 	mov.w	r0, #0
 800adf6:	f380 8811 	msr	BASEPRI, r0
 800adfa:	4770      	bx	lr
 800adfc:	f3af 8000 	nop.w

0800ae00 <pxCurrentTCBConst2>:
 800ae00:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop

0800ae08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae08:	4808      	ldr	r0, [pc, #32]	; (800ae2c <prvPortStartFirstTask+0x24>)
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	6800      	ldr	r0, [r0, #0]
 800ae0e:	f380 8808 	msr	MSP, r0
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f380 8814 	msr	CONTROL, r0
 800ae1a:	b662      	cpsie	i
 800ae1c:	b661      	cpsie	f
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	df00      	svc	0
 800ae28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae2a:	bf00      	nop
 800ae2c:	e000ed08 	.word	0xe000ed08

0800ae30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae36:	4b46      	ldr	r3, [pc, #280]	; (800af50 <xPortStartScheduler+0x120>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a46      	ldr	r2, [pc, #280]	; (800af54 <xPortStartScheduler+0x124>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d10a      	bne.n	800ae56 <xPortStartScheduler+0x26>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	613b      	str	r3, [r7, #16]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae56:	4b3e      	ldr	r3, [pc, #248]	; (800af50 <xPortStartScheduler+0x120>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a3f      	ldr	r2, [pc, #252]	; (800af58 <xPortStartScheduler+0x128>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10a      	bne.n	800ae76 <xPortStartScheduler+0x46>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	60fb      	str	r3, [r7, #12]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae76:	4b39      	ldr	r3, [pc, #228]	; (800af5c <xPortStartScheduler+0x12c>)
 800ae78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	22ff      	movs	r2, #255	; 0xff
 800ae86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	4b31      	ldr	r3, [pc, #196]	; (800af60 <xPortStartScheduler+0x130>)
 800ae9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae9e:	4b31      	ldr	r3, [pc, #196]	; (800af64 <xPortStartScheduler+0x134>)
 800aea0:	2207      	movs	r2, #7
 800aea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aea4:	e009      	b.n	800aeba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aea6:	4b2f      	ldr	r3, [pc, #188]	; (800af64 <xPortStartScheduler+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	4a2d      	ldr	r2, [pc, #180]	; (800af64 <xPortStartScheduler+0x134>)
 800aeae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec2:	2b80      	cmp	r3, #128	; 0x80
 800aec4:	d0ef      	beq.n	800aea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aec6:	4b27      	ldr	r3, [pc, #156]	; (800af64 <xPortStartScheduler+0x134>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f1c3 0307 	rsb	r3, r3, #7
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d00a      	beq.n	800aee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60bb      	str	r3, [r7, #8]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aee8:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <xPortStartScheduler+0x134>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <xPortStartScheduler+0x134>)
 800aef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aef2:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <xPortStartScheduler+0x134>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aefa:	4a1a      	ldr	r2, [pc, #104]	; (800af64 <xPortStartScheduler+0x134>)
 800aefc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af06:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xPortStartScheduler+0x138>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a17      	ldr	r2, [pc, #92]	; (800af68 <xPortStartScheduler+0x138>)
 800af0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <xPortStartScheduler+0x138>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a14      	ldr	r2, [pc, #80]	; (800af68 <xPortStartScheduler+0x138>)
 800af18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af1e:	f000 f8dd 	bl	800b0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <xPortStartScheduler+0x13c>)
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af28:	f000 f8fc 	bl	800b124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af2c:	4b10      	ldr	r3, [pc, #64]	; (800af70 <xPortStartScheduler+0x140>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a0f      	ldr	r2, [pc, #60]	; (800af70 <xPortStartScheduler+0x140>)
 800af32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af38:	f7ff ff66 	bl	800ae08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af3c:	f7fe ffea 	bl	8009f14 <vTaskSwitchContext>
	prvTaskExitError();
 800af40:	f7ff ff1c 	bl	800ad7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	e000ed00 	.word	0xe000ed00
 800af54:	410fc271 	.word	0x410fc271
 800af58:	410fc270 	.word	0x410fc270
 800af5c:	e000e400 	.word	0xe000e400
 800af60:	200012d0 	.word	0x200012d0
 800af64:	200012d4 	.word	0x200012d4
 800af68:	e000ed20 	.word	0xe000ed20
 800af6c:	20000088 	.word	0x20000088
 800af70:	e000ef34 	.word	0xe000ef34

0800af74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	607b      	str	r3, [r7, #4]
}
 800af8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <vPortEnterCritical+0x58>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <vPortEnterCritical+0x58>)
 800af96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af98:	4b0c      	ldr	r3, [pc, #48]	; (800afcc <vPortEnterCritical+0x58>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d10f      	bne.n	800afc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <vPortEnterCritical+0x5c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00a      	beq.n	800afc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	603b      	str	r3, [r7, #0]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <vPortEnterCritical+0x4a>
	}
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	20000088 	.word	0x20000088
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afda:	4b12      	ldr	r3, [pc, #72]	; (800b024 <vPortExitCritical+0x50>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <vPortExitCritical+0x24>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	607b      	str	r3, [r7, #4]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aff8:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <vPortExitCritical+0x50>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3b01      	subs	r3, #1
 800affe:	4a09      	ldr	r2, [pc, #36]	; (800b024 <vPortExitCritical+0x50>)
 800b000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <vPortExitCritical+0x50>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <vPortExitCritical+0x42>
 800b00a:	2300      	movs	r3, #0
 800b00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f383 8811 	msr	BASEPRI, r3
}
 800b014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000088 	.word	0x20000088
	...

0800b030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b030:	f3ef 8009 	mrs	r0, PSP
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	4b15      	ldr	r3, [pc, #84]	; (800b090 <pxCurrentTCBConst>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	f01e 0f10 	tst.w	lr, #16
 800b040:	bf08      	it	eq
 800b042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	6010      	str	r0, [r2, #0]
 800b04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b054:	f380 8811 	msr	BASEPRI, r0
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f7fe ff58 	bl	8009f14 <vTaskSwitchContext>
 800b064:	f04f 0000 	mov.w	r0, #0
 800b068:	f380 8811 	msr	BASEPRI, r0
 800b06c:	bc09      	pop	{r0, r3}
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	6808      	ldr	r0, [r1, #0]
 800b072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b076:	f01e 0f10 	tst.w	lr, #16
 800b07a:	bf08      	it	eq
 800b07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b080:	f380 8809 	msr	PSP, r0
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	f3af 8000 	nop.w

0800b090 <pxCurrentTCBConst>:
 800b090:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop

0800b098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0b2:	f7fe fe71 	bl	8009d98 <xTaskIncrementTick>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0bc:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <SysTick_Handler+0x40>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	f383 8811 	msr	BASEPRI, r3
}
 800b0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0e0:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <vPortSetupTimerInterrupt+0x34>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <vPortSetupTimerInterrupt+0x38>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <vPortSetupTimerInterrupt+0x3c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <vPortSetupTimerInterrupt+0x40>)
 800b0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f6:	099b      	lsrs	r3, r3, #6
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <vPortSetupTimerInterrupt+0x44>)
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <vPortSetupTimerInterrupt+0x34>)
 800b100:	2207      	movs	r2, #7
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	e000e010 	.word	0xe000e010
 800b114:	e000e018 	.word	0xe000e018
 800b118:	20000060 	.word	0x20000060
 800b11c:	10624dd3 	.word	0x10624dd3
 800b120:	e000e014 	.word	0xe000e014

0800b124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b134 <vPortEnableVFP+0x10>
 800b128:	6801      	ldr	r1, [r0, #0]
 800b12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b12e:	6001      	str	r1, [r0, #0]
 800b130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b132:	bf00      	nop
 800b134:	e000ed88 	.word	0xe000ed88

0800b138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b13e:	f3ef 8305 	mrs	r3, IPSR
 800b142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b0f      	cmp	r3, #15
 800b148:	d914      	bls.n	800b174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <vPortValidateInterruptPriority+0x70>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b154:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <vPortValidateInterruptPriority+0x74>)
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	7afa      	ldrb	r2, [r7, #11]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d20a      	bcs.n	800b174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	607b      	str	r3, [r7, #4]
}
 800b170:	bf00      	nop
 800b172:	e7fe      	b.n	800b172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b174:	4b0e      	ldr	r3, [pc, #56]	; (800b1b0 <vPortValidateInterruptPriority+0x78>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b17c:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <vPortValidateInterruptPriority+0x7c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d90a      	bls.n	800b19a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	603b      	str	r3, [r7, #0]
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <vPortValidateInterruptPriority+0x60>
	}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	e000e3f0 	.word	0xe000e3f0
 800b1ac:	200012d0 	.word	0x200012d0
 800b1b0:	e000ed0c 	.word	0xe000ed0c
 800b1b4:	200012d4 	.word	0x200012d4

0800b1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	; 0x28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1c4:	f7fe fd2c 	bl	8009c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1c8:	4b58      	ldr	r3, [pc, #352]	; (800b32c <pvPortMalloc+0x174>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1d0:	f000 f910 	bl	800b3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1d4:	4b56      	ldr	r3, [pc, #344]	; (800b330 <pvPortMalloc+0x178>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f040 808e 	bne.w	800b2fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01d      	beq.n	800b224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1e8:	2208      	movs	r2, #8
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d014      	beq.n	800b224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f023 0307 	bic.w	r3, r3, #7
 800b200:	3308      	adds	r3, #8
 800b202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f003 0307 	and.w	r3, r3, #7
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <pvPortMalloc+0x6c>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	617b      	str	r3, [r7, #20]
}
 800b220:	bf00      	nop
 800b222:	e7fe      	b.n	800b222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d069      	beq.n	800b2fe <pvPortMalloc+0x146>
 800b22a:	4b42      	ldr	r3, [pc, #264]	; (800b334 <pvPortMalloc+0x17c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	429a      	cmp	r2, r3
 800b232:	d864      	bhi.n	800b2fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b234:	4b40      	ldr	r3, [pc, #256]	; (800b338 <pvPortMalloc+0x180>)
 800b236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b238:	4b3f      	ldr	r3, [pc, #252]	; (800b338 <pvPortMalloc+0x180>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b23e:	e004      	b.n	800b24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d903      	bls.n	800b25c <pvPortMalloc+0xa4>
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1f1      	bne.n	800b240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b25c:	4b33      	ldr	r3, [pc, #204]	; (800b32c <pvPortMalloc+0x174>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b262:	429a      	cmp	r2, r3
 800b264:	d04b      	beq.n	800b2fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2208      	movs	r2, #8
 800b26c:	4413      	add	r3, r2
 800b26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	1ad2      	subs	r2, r2, r3
 800b280:	2308      	movs	r3, #8
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	429a      	cmp	r2, r3
 800b286:	d91f      	bls.n	800b2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	613b      	str	r3, [r7, #16]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	1ad2      	subs	r2, r2, r3
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2c2:	69b8      	ldr	r0, [r7, #24]
 800b2c4:	f000 f8f8 	bl	800b4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	; (800b334 <pvPortMalloc+0x17c>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <pvPortMalloc+0x17c>)
 800b2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2d6:	4b17      	ldr	r3, [pc, #92]	; (800b334 <pvPortMalloc+0x17c>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b18      	ldr	r3, [pc, #96]	; (800b33c <pvPortMalloc+0x184>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d203      	bcs.n	800b2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2e2:	4b14      	ldr	r3, [pc, #80]	; (800b334 <pvPortMalloc+0x17c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a15      	ldr	r2, [pc, #84]	; (800b33c <pvPortMalloc+0x184>)
 800b2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <pvPortMalloc+0x178>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2fe:	f7fe fc9d 	bl	8009c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <pvPortMalloc+0x16a>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	60fb      	str	r3, [r7, #12]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <pvPortMalloc+0x168>
	return pvReturn;
 800b322:	69fb      	ldr	r3, [r7, #28]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3728      	adds	r7, #40	; 0x28
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	200026e0 	.word	0x200026e0
 800b330:	200026ec 	.word	0x200026ec
 800b334:	200026e4 	.word	0x200026e4
 800b338:	200026d8 	.word	0x200026d8
 800b33c:	200026e8 	.word	0x200026e8

0800b340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d048      	beq.n	800b3e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b352:	2308      	movs	r3, #8
 800b354:	425b      	negs	r3, r3
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4413      	add	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	4b21      	ldr	r3, [pc, #132]	; (800b3ec <vPortFree+0xac>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4013      	ands	r3, r2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <vPortFree+0x44>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	60fb      	str	r3, [r7, #12]
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00a      	beq.n	800b3a2 <vPortFree+0x62>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	60bb      	str	r3, [r7, #8]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <vPortFree+0xac>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d019      	beq.n	800b3e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d115      	bne.n	800b3e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <vPortFree+0xac>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	401a      	ands	r2, r3
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3c8:	f7fe fc2a 	bl	8009c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <vPortFree+0xb0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	4a06      	ldr	r2, [pc, #24]	; (800b3f0 <vPortFree+0xb0>)
 800b3d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3da:	6938      	ldr	r0, [r7, #16]
 800b3dc:	f000 f86c 	bl	800b4b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b3e0:	f7fe fc2c 	bl	8009c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3e4:	bf00      	nop
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	200026ec 	.word	0x200026ec
 800b3f0:	200026e4 	.word	0x200026e4

0800b3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b400:	4b27      	ldr	r3, [pc, #156]	; (800b4a0 <prvHeapInit+0xac>)
 800b402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00c      	beq.n	800b428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0307 	bic.w	r3, r3, #7
 800b41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <prvHeapInit+0xac>)
 800b424:	4413      	add	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <prvHeapInit+0xb0>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <prvHeapInit+0xb0>)
 800b434:	2200      	movs	r2, #0
 800b436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	4413      	add	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b440:	2208      	movs	r2, #8
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0307 	bic.w	r3, r3, #7
 800b44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <prvHeapInit+0xb4>)
 800b454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <prvHeapInit+0xb4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <prvHeapInit+0xb4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <prvHeapInit+0xb4>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <prvHeapInit+0xb8>)
 800b482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <prvHeapInit+0xbc>)
 800b48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <prvHeapInit+0xc0>)
 800b48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	200012d8 	.word	0x200012d8
 800b4a4:	200026d8 	.word	0x200026d8
 800b4a8:	200026e0 	.word	0x200026e0
 800b4ac:	200026e8 	.word	0x200026e8
 800b4b0:	200026e4 	.word	0x200026e4
 800b4b4:	200026ec 	.word	0x200026ec

0800b4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4c0:	4b28      	ldr	r3, [pc, #160]	; (800b564 <prvInsertBlockIntoFreeList+0xac>)
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e002      	b.n	800b4cc <prvInsertBlockIntoFreeList+0x14>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d8f7      	bhi.n	800b4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d108      	bne.n	800b4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	441a      	add	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	441a      	add	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d118      	bne.n	800b540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b15      	ldr	r3, [pc, #84]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d00d      	beq.n	800b536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e008      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e003      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d002      	beq.n	800b556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	200026d8 	.word	0x200026d8
 800b568:	200026e0 	.word	0x200026e0

0800b56c <std>:
 800b56c:	2300      	movs	r3, #0
 800b56e:	b510      	push	{r4, lr}
 800b570:	4604      	mov	r4, r0
 800b572:	e9c0 3300 	strd	r3, r3, [r0]
 800b576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b57a:	6083      	str	r3, [r0, #8]
 800b57c:	8181      	strh	r1, [r0, #12]
 800b57e:	6643      	str	r3, [r0, #100]	; 0x64
 800b580:	81c2      	strh	r2, [r0, #14]
 800b582:	6183      	str	r3, [r0, #24]
 800b584:	4619      	mov	r1, r3
 800b586:	2208      	movs	r2, #8
 800b588:	305c      	adds	r0, #92	; 0x5c
 800b58a:	f000 f9f7 	bl	800b97c <memset>
 800b58e:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <std+0x58>)
 800b590:	6263      	str	r3, [r4, #36]	; 0x24
 800b592:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <std+0x5c>)
 800b594:	62a3      	str	r3, [r4, #40]	; 0x28
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <std+0x60>)
 800b598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b59a:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <std+0x64>)
 800b59c:	6323      	str	r3, [r4, #48]	; 0x30
 800b59e:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <std+0x68>)
 800b5a0:	6224      	str	r4, [r4, #32]
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	d006      	beq.n	800b5b4 <std+0x48>
 800b5a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b5aa:	4294      	cmp	r4, r2
 800b5ac:	d002      	beq.n	800b5b4 <std+0x48>
 800b5ae:	33d0      	adds	r3, #208	; 0xd0
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d105      	bne.n	800b5c0 <std+0x54>
 800b5b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5bc:	f000 baac 	b.w	800bb18 <__retarget_lock_init_recursive>
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800b7cd 	.word	0x0800b7cd
 800b5c8:	0800b7ef 	.word	0x0800b7ef
 800b5cc:	0800b827 	.word	0x0800b827
 800b5d0:	0800b84b 	.word	0x0800b84b
 800b5d4:	200026f0 	.word	0x200026f0

0800b5d8 <stdio_exit_handler>:
 800b5d8:	4a02      	ldr	r2, [pc, #8]	; (800b5e4 <stdio_exit_handler+0xc>)
 800b5da:	4903      	ldr	r1, [pc, #12]	; (800b5e8 <stdio_exit_handler+0x10>)
 800b5dc:	4803      	ldr	r0, [pc, #12]	; (800b5ec <stdio_exit_handler+0x14>)
 800b5de:	f000 b869 	b.w	800b6b4 <_fwalk_sglue>
 800b5e2:	bf00      	nop
 800b5e4:	2000008c 	.word	0x2000008c
 800b5e8:	0800c3e1 	.word	0x0800c3e1
 800b5ec:	20000098 	.word	0x20000098

0800b5f0 <cleanup_stdio>:
 800b5f0:	6841      	ldr	r1, [r0, #4]
 800b5f2:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <cleanup_stdio+0x34>)
 800b5f4:	4299      	cmp	r1, r3
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	d001      	beq.n	800b600 <cleanup_stdio+0x10>
 800b5fc:	f000 fef0 	bl	800c3e0 <_fflush_r>
 800b600:	68a1      	ldr	r1, [r4, #8]
 800b602:	4b09      	ldr	r3, [pc, #36]	; (800b628 <cleanup_stdio+0x38>)
 800b604:	4299      	cmp	r1, r3
 800b606:	d002      	beq.n	800b60e <cleanup_stdio+0x1e>
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fee9 	bl	800c3e0 <_fflush_r>
 800b60e:	68e1      	ldr	r1, [r4, #12]
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <cleanup_stdio+0x3c>)
 800b612:	4299      	cmp	r1, r3
 800b614:	d004      	beq.n	800b620 <cleanup_stdio+0x30>
 800b616:	4620      	mov	r0, r4
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f000 bee0 	b.w	800c3e0 <_fflush_r>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	200026f0 	.word	0x200026f0
 800b628:	20002758 	.word	0x20002758
 800b62c:	200027c0 	.word	0x200027c0

0800b630 <global_stdio_init.part.0>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <global_stdio_init.part.0+0x30>)
 800b634:	4c0b      	ldr	r4, [pc, #44]	; (800b664 <global_stdio_init.part.0+0x34>)
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <global_stdio_init.part.0+0x38>)
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	4620      	mov	r0, r4
 800b63c:	2200      	movs	r2, #0
 800b63e:	2104      	movs	r1, #4
 800b640:	f7ff ff94 	bl	800b56c <std>
 800b644:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b648:	2201      	movs	r2, #1
 800b64a:	2109      	movs	r1, #9
 800b64c:	f7ff ff8e 	bl	800b56c <std>
 800b650:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b654:	2202      	movs	r2, #2
 800b656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65a:	2112      	movs	r1, #18
 800b65c:	f7ff bf86 	b.w	800b56c <std>
 800b660:	20002828 	.word	0x20002828
 800b664:	200026f0 	.word	0x200026f0
 800b668:	0800b5d9 	.word	0x0800b5d9

0800b66c <__sfp_lock_acquire>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__sfp_lock_acquire+0x8>)
 800b66e:	f000 ba54 	b.w	800bb1a <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20002831 	.word	0x20002831

0800b678 <__sfp_lock_release>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__sfp_lock_release+0x8>)
 800b67a:	f000 ba4f 	b.w	800bb1c <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20002831 	.word	0x20002831

0800b684 <__sinit>:
 800b684:	b510      	push	{r4, lr}
 800b686:	4604      	mov	r4, r0
 800b688:	f7ff fff0 	bl	800b66c <__sfp_lock_acquire>
 800b68c:	6a23      	ldr	r3, [r4, #32]
 800b68e:	b11b      	cbz	r3, 800b698 <__sinit+0x14>
 800b690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b694:	f7ff bff0 	b.w	800b678 <__sfp_lock_release>
 800b698:	4b04      	ldr	r3, [pc, #16]	; (800b6ac <__sinit+0x28>)
 800b69a:	6223      	str	r3, [r4, #32]
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <__sinit+0x2c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f5      	bne.n	800b690 <__sinit+0xc>
 800b6a4:	f7ff ffc4 	bl	800b630 <global_stdio_init.part.0>
 800b6a8:	e7f2      	b.n	800b690 <__sinit+0xc>
 800b6aa:	bf00      	nop
 800b6ac:	0800b5f1 	.word	0x0800b5f1
 800b6b0:	20002828 	.word	0x20002828

0800b6b4 <_fwalk_sglue>:
 800b6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	4688      	mov	r8, r1
 800b6bc:	4614      	mov	r4, r2
 800b6be:	2600      	movs	r6, #0
 800b6c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6c4:	f1b9 0901 	subs.w	r9, r9, #1
 800b6c8:	d505      	bpl.n	800b6d6 <_fwalk_sglue+0x22>
 800b6ca:	6824      	ldr	r4, [r4, #0]
 800b6cc:	2c00      	cmp	r4, #0
 800b6ce:	d1f7      	bne.n	800b6c0 <_fwalk_sglue+0xc>
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d907      	bls.n	800b6ec <_fwalk_sglue+0x38>
 800b6dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	d003      	beq.n	800b6ec <_fwalk_sglue+0x38>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	47c0      	blx	r8
 800b6ea:	4306      	orrs	r6, r0
 800b6ec:	3568      	adds	r5, #104	; 0x68
 800b6ee:	e7e9      	b.n	800b6c4 <_fwalk_sglue+0x10>

0800b6f0 <iprintf>:
 800b6f0:	b40f      	push	{r0, r1, r2, r3}
 800b6f2:	b507      	push	{r0, r1, r2, lr}
 800b6f4:	4906      	ldr	r1, [pc, #24]	; (800b710 <iprintf+0x20>)
 800b6f6:	ab04      	add	r3, sp, #16
 800b6f8:	6808      	ldr	r0, [r1, #0]
 800b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fe:	6881      	ldr	r1, [r0, #8]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	f000 fb3d 	bl	800bd80 <_vfiprintf_r>
 800b706:	b003      	add	sp, #12
 800b708:	f85d eb04 	ldr.w	lr, [sp], #4
 800b70c:	b004      	add	sp, #16
 800b70e:	4770      	bx	lr
 800b710:	200000e4 	.word	0x200000e4

0800b714 <_puts_r>:
 800b714:	6a03      	ldr	r3, [r0, #32]
 800b716:	b570      	push	{r4, r5, r6, lr}
 800b718:	6884      	ldr	r4, [r0, #8]
 800b71a:	4605      	mov	r5, r0
 800b71c:	460e      	mov	r6, r1
 800b71e:	b90b      	cbnz	r3, 800b724 <_puts_r+0x10>
 800b720:	f7ff ffb0 	bl	800b684 <__sinit>
 800b724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b726:	07db      	lsls	r3, r3, #31
 800b728:	d405      	bmi.n	800b736 <_puts_r+0x22>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	0598      	lsls	r0, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_puts_r+0x22>
 800b730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b732:	f000 f9f2 	bl	800bb1a <__retarget_lock_acquire_recursive>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	0719      	lsls	r1, r3, #28
 800b73a:	d513      	bpl.n	800b764 <_puts_r+0x50>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	b18b      	cbz	r3, 800b764 <_puts_r+0x50>
 800b740:	3e01      	subs	r6, #1
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b748:	3b01      	subs	r3, #1
 800b74a:	60a3      	str	r3, [r4, #8]
 800b74c:	b9e9      	cbnz	r1, 800b78a <_puts_r+0x76>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da2e      	bge.n	800b7b0 <_puts_r+0x9c>
 800b752:	4622      	mov	r2, r4
 800b754:	210a      	movs	r1, #10
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f87b 	bl	800b852 <__swbuf_r>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d007      	beq.n	800b770 <_puts_r+0x5c>
 800b760:	250a      	movs	r5, #10
 800b762:	e007      	b.n	800b774 <_puts_r+0x60>
 800b764:	4621      	mov	r1, r4
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f8b0 	bl	800b8cc <__swsetup_r>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0e7      	beq.n	800b740 <_puts_r+0x2c>
 800b770:	f04f 35ff 	mov.w	r5, #4294967295
 800b774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b776:	07da      	lsls	r2, r3, #31
 800b778:	d405      	bmi.n	800b786 <_puts_r+0x72>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	059b      	lsls	r3, r3, #22
 800b77e:	d402      	bmi.n	800b786 <_puts_r+0x72>
 800b780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b782:	f000 f9cb 	bl	800bb1c <__retarget_lock_release_recursive>
 800b786:	4628      	mov	r0, r5
 800b788:	bd70      	pop	{r4, r5, r6, pc}
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	da04      	bge.n	800b798 <_puts_r+0x84>
 800b78e:	69a2      	ldr	r2, [r4, #24]
 800b790:	429a      	cmp	r2, r3
 800b792:	dc06      	bgt.n	800b7a2 <_puts_r+0x8e>
 800b794:	290a      	cmp	r1, #10
 800b796:	d004      	beq.n	800b7a2 <_puts_r+0x8e>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	1c5a      	adds	r2, r3, #1
 800b79c:	6022      	str	r2, [r4, #0]
 800b79e:	7019      	strb	r1, [r3, #0]
 800b7a0:	e7cf      	b.n	800b742 <_puts_r+0x2e>
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f000 f854 	bl	800b852 <__swbuf_r>
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d1c9      	bne.n	800b742 <_puts_r+0x2e>
 800b7ae:	e7df      	b.n	800b770 <_puts_r+0x5c>
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	250a      	movs	r5, #10
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	701d      	strb	r5, [r3, #0]
 800b7ba:	e7db      	b.n	800b774 <_puts_r+0x60>

0800b7bc <puts>:
 800b7bc:	4b02      	ldr	r3, [pc, #8]	; (800b7c8 <puts+0xc>)
 800b7be:	4601      	mov	r1, r0
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	f7ff bfa7 	b.w	800b714 <_puts_r>
 800b7c6:	bf00      	nop
 800b7c8:	200000e4 	.word	0x200000e4

0800b7cc <__sread>:
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d4:	f000 f952 	bl	800ba7c <_read_r>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	bfab      	itete	ge
 800b7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7de:	89a3      	ldrhlt	r3, [r4, #12]
 800b7e0:	181b      	addge	r3, r3, r0
 800b7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7e6:	bfac      	ite	ge
 800b7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7ea:	81a3      	strhlt	r3, [r4, #12]
 800b7ec:	bd10      	pop	{r4, pc}

0800b7ee <__swrite>:
 800b7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f2:	461f      	mov	r7, r3
 800b7f4:	898b      	ldrh	r3, [r1, #12]
 800b7f6:	05db      	lsls	r3, r3, #23
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	d505      	bpl.n	800b80c <__swrite+0x1e>
 800b800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b804:	2302      	movs	r3, #2
 800b806:	2200      	movs	r2, #0
 800b808:	f000 f926 	bl	800ba58 <_lseek_r>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	4632      	mov	r2, r6
 800b81a:	463b      	mov	r3, r7
 800b81c:	4628      	mov	r0, r5
 800b81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b822:	f000 b93d 	b.w	800baa0 <_write_r>

0800b826 <__sseek>:
 800b826:	b510      	push	{r4, lr}
 800b828:	460c      	mov	r4, r1
 800b82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82e:	f000 f913 	bl	800ba58 <_lseek_r>
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	bf15      	itete	ne
 800b838:	6560      	strne	r0, [r4, #84]	; 0x54
 800b83a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b83e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b842:	81a3      	strheq	r3, [r4, #12]
 800b844:	bf18      	it	ne
 800b846:	81a3      	strhne	r3, [r4, #12]
 800b848:	bd10      	pop	{r4, pc}

0800b84a <__sclose>:
 800b84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84e:	f000 b89d 	b.w	800b98c <_close_r>

0800b852 <__swbuf_r>:
 800b852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b854:	460e      	mov	r6, r1
 800b856:	4614      	mov	r4, r2
 800b858:	4605      	mov	r5, r0
 800b85a:	b118      	cbz	r0, 800b864 <__swbuf_r+0x12>
 800b85c:	6a03      	ldr	r3, [r0, #32]
 800b85e:	b90b      	cbnz	r3, 800b864 <__swbuf_r+0x12>
 800b860:	f7ff ff10 	bl	800b684 <__sinit>
 800b864:	69a3      	ldr	r3, [r4, #24]
 800b866:	60a3      	str	r3, [r4, #8]
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	071a      	lsls	r2, r3, #28
 800b86c:	d525      	bpl.n	800b8ba <__swbuf_r+0x68>
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	b31b      	cbz	r3, 800b8ba <__swbuf_r+0x68>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	6922      	ldr	r2, [r4, #16]
 800b876:	1a98      	subs	r0, r3, r2
 800b878:	6963      	ldr	r3, [r4, #20]
 800b87a:	b2f6      	uxtb	r6, r6
 800b87c:	4283      	cmp	r3, r0
 800b87e:	4637      	mov	r7, r6
 800b880:	dc04      	bgt.n	800b88c <__swbuf_r+0x3a>
 800b882:	4621      	mov	r1, r4
 800b884:	4628      	mov	r0, r5
 800b886:	f000 fdab 	bl	800c3e0 <_fflush_r>
 800b88a:	b9e0      	cbnz	r0, 800b8c6 <__swbuf_r+0x74>
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	3b01      	subs	r3, #1
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	701e      	strb	r6, [r3, #0]
 800b89a:	6962      	ldr	r2, [r4, #20]
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d004      	beq.n	800b8ac <__swbuf_r+0x5a>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	07db      	lsls	r3, r3, #31
 800b8a6:	d506      	bpl.n	800b8b6 <__swbuf_r+0x64>
 800b8a8:	2e0a      	cmp	r6, #10
 800b8aa:	d104      	bne.n	800b8b6 <__swbuf_r+0x64>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 fd96 	bl	800c3e0 <_fflush_r>
 800b8b4:	b938      	cbnz	r0, 800b8c6 <__swbuf_r+0x74>
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f000 f805 	bl	800b8cc <__swsetup_r>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0d5      	beq.n	800b872 <__swbuf_r+0x20>
 800b8c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ca:	e7f4      	b.n	800b8b6 <__swbuf_r+0x64>

0800b8cc <__swsetup_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4b2a      	ldr	r3, [pc, #168]	; (800b978 <__swsetup_r+0xac>)
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	b118      	cbz	r0, 800b8e0 <__swsetup_r+0x14>
 800b8d8:	6a03      	ldr	r3, [r0, #32]
 800b8da:	b90b      	cbnz	r3, 800b8e0 <__swsetup_r+0x14>
 800b8dc:	f7ff fed2 	bl	800b684 <__sinit>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8e6:	0718      	lsls	r0, r3, #28
 800b8e8:	d422      	bmi.n	800b930 <__swsetup_r+0x64>
 800b8ea:	06d9      	lsls	r1, r3, #27
 800b8ec:	d407      	bmi.n	800b8fe <__swsetup_r+0x32>
 800b8ee:	2309      	movs	r3, #9
 800b8f0:	602b      	str	r3, [r5, #0]
 800b8f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	e034      	b.n	800b968 <__swsetup_r+0x9c>
 800b8fe:	0758      	lsls	r0, r3, #29
 800b900:	d512      	bpl.n	800b928 <__swsetup_r+0x5c>
 800b902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b904:	b141      	cbz	r1, 800b918 <__swsetup_r+0x4c>
 800b906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b90a:	4299      	cmp	r1, r3
 800b90c:	d002      	beq.n	800b914 <__swsetup_r+0x48>
 800b90e:	4628      	mov	r0, r5
 800b910:	f000 f914 	bl	800bb3c <_free_r>
 800b914:	2300      	movs	r3, #0
 800b916:	6363      	str	r3, [r4, #52]	; 0x34
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	2300      	movs	r3, #0
 800b922:	6063      	str	r3, [r4, #4]
 800b924:	6923      	ldr	r3, [r4, #16]
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f043 0308 	orr.w	r3, r3, #8
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	b94b      	cbnz	r3, 800b948 <__swsetup_r+0x7c>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b93a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93e:	d003      	beq.n	800b948 <__swsetup_r+0x7c>
 800b940:	4621      	mov	r1, r4
 800b942:	4628      	mov	r0, r5
 800b944:	f000 fd9a 	bl	800c47c <__smakebuf_r>
 800b948:	89a0      	ldrh	r0, [r4, #12]
 800b94a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b94e:	f010 0301 	ands.w	r3, r0, #1
 800b952:	d00a      	beq.n	800b96a <__swsetup_r+0x9e>
 800b954:	2300      	movs	r3, #0
 800b956:	60a3      	str	r3, [r4, #8]
 800b958:	6963      	ldr	r3, [r4, #20]
 800b95a:	425b      	negs	r3, r3
 800b95c:	61a3      	str	r3, [r4, #24]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	b943      	cbnz	r3, 800b974 <__swsetup_r+0xa8>
 800b962:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b966:	d1c4      	bne.n	800b8f2 <__swsetup_r+0x26>
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	0781      	lsls	r1, r0, #30
 800b96c:	bf58      	it	pl
 800b96e:	6963      	ldrpl	r3, [r4, #20]
 800b970:	60a3      	str	r3, [r4, #8]
 800b972:	e7f4      	b.n	800b95e <__swsetup_r+0x92>
 800b974:	2000      	movs	r0, #0
 800b976:	e7f7      	b.n	800b968 <__swsetup_r+0x9c>
 800b978:	200000e4 	.word	0x200000e4

0800b97c <memset>:
 800b97c:	4402      	add	r2, r0
 800b97e:	4603      	mov	r3, r0
 800b980:	4293      	cmp	r3, r2
 800b982:	d100      	bne.n	800b986 <memset+0xa>
 800b984:	4770      	bx	lr
 800b986:	f803 1b01 	strb.w	r1, [r3], #1
 800b98a:	e7f9      	b.n	800b980 <memset+0x4>

0800b98c <_close_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d06      	ldr	r5, [pc, #24]	; (800b9a8 <_close_r+0x1c>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	602b      	str	r3, [r5, #0]
 800b998:	f7f5 fa0d 	bl	8000db6 <_close>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	d102      	bne.n	800b9a6 <_close_r+0x1a>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b103      	cbz	r3, 800b9a6 <_close_r+0x1a>
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	2000282c 	.word	0x2000282c

0800b9ac <_reclaim_reent>:
 800b9ac:	4b29      	ldr	r3, [pc, #164]	; (800ba54 <_reclaim_reent+0xa8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4283      	cmp	r3, r0
 800b9b2:	b570      	push	{r4, r5, r6, lr}
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	d04b      	beq.n	800ba50 <_reclaim_reent+0xa4>
 800b9b8:	69c3      	ldr	r3, [r0, #28]
 800b9ba:	b143      	cbz	r3, 800b9ce <_reclaim_reent+0x22>
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d144      	bne.n	800ba4c <_reclaim_reent+0xa0>
 800b9c2:	69e3      	ldr	r3, [r4, #28]
 800b9c4:	6819      	ldr	r1, [r3, #0]
 800b9c6:	b111      	cbz	r1, 800b9ce <_reclaim_reent+0x22>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 f8b7 	bl	800bb3c <_free_r>
 800b9ce:	6961      	ldr	r1, [r4, #20]
 800b9d0:	b111      	cbz	r1, 800b9d8 <_reclaim_reent+0x2c>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 f8b2 	bl	800bb3c <_free_r>
 800b9d8:	69e1      	ldr	r1, [r4, #28]
 800b9da:	b111      	cbz	r1, 800b9e2 <_reclaim_reent+0x36>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 f8ad 	bl	800bb3c <_free_r>
 800b9e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b9e4:	b111      	cbz	r1, 800b9ec <_reclaim_reent+0x40>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f8a8 	bl	800bb3c <_free_r>
 800b9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ee:	b111      	cbz	r1, 800b9f6 <_reclaim_reent+0x4a>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 f8a3 	bl	800bb3c <_free_r>
 800b9f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9f8:	b111      	cbz	r1, 800ba00 <_reclaim_reent+0x54>
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 f89e 	bl	800bb3c <_free_r>
 800ba00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba02:	b111      	cbz	r1, 800ba0a <_reclaim_reent+0x5e>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 f899 	bl	800bb3c <_free_r>
 800ba0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba0c:	b111      	cbz	r1, 800ba14 <_reclaim_reent+0x68>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 f894 	bl	800bb3c <_free_r>
 800ba14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ba16:	b111      	cbz	r1, 800ba1e <_reclaim_reent+0x72>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f88f 	bl	800bb3c <_free_r>
 800ba1e:	6a23      	ldr	r3, [r4, #32]
 800ba20:	b1b3      	cbz	r3, 800ba50 <_reclaim_reent+0xa4>
 800ba22:	4620      	mov	r0, r4
 800ba24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba28:	4718      	bx	r3
 800ba2a:	5949      	ldr	r1, [r1, r5]
 800ba2c:	b941      	cbnz	r1, 800ba40 <_reclaim_reent+0x94>
 800ba2e:	3504      	adds	r5, #4
 800ba30:	69e3      	ldr	r3, [r4, #28]
 800ba32:	2d80      	cmp	r5, #128	; 0x80
 800ba34:	68d9      	ldr	r1, [r3, #12]
 800ba36:	d1f8      	bne.n	800ba2a <_reclaim_reent+0x7e>
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 f87f 	bl	800bb3c <_free_r>
 800ba3e:	e7c0      	b.n	800b9c2 <_reclaim_reent+0x16>
 800ba40:	680e      	ldr	r6, [r1, #0]
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 f87a 	bl	800bb3c <_free_r>
 800ba48:	4631      	mov	r1, r6
 800ba4a:	e7ef      	b.n	800ba2c <_reclaim_reent+0x80>
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	e7ef      	b.n	800ba30 <_reclaim_reent+0x84>
 800ba50:	bd70      	pop	{r4, r5, r6, pc}
 800ba52:	bf00      	nop
 800ba54:	200000e4 	.word	0x200000e4

0800ba58 <_lseek_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	; (800ba78 <_lseek_r+0x20>)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4611      	mov	r1, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f5 f9cc 	bl	8000e04 <_lseek>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_lseek_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_lseek_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	2000282c 	.word	0x2000282c

0800ba7c <_read_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d07      	ldr	r5, [pc, #28]	; (800ba9c <_read_r+0x20>)
 800ba80:	4604      	mov	r4, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7f5 f95a 	bl	8000d44 <_read>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_read_r+0x1e>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_read_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	2000282c 	.word	0x2000282c

0800baa0 <_write_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d07      	ldr	r5, [pc, #28]	; (800bac0 <_write_r+0x20>)
 800baa4:	4604      	mov	r4, r0
 800baa6:	4608      	mov	r0, r1
 800baa8:	4611      	mov	r1, r2
 800baaa:	2200      	movs	r2, #0
 800baac:	602a      	str	r2, [r5, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	f7f5 f965 	bl	8000d7e <_write>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_write_r+0x1e>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_write_r+0x1e>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	2000282c 	.word	0x2000282c

0800bac4 <__errno>:
 800bac4:	4b01      	ldr	r3, [pc, #4]	; (800bacc <__errno+0x8>)
 800bac6:	6818      	ldr	r0, [r3, #0]
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200000e4 	.word	0x200000e4

0800bad0 <__libc_init_array>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4d0d      	ldr	r5, [pc, #52]	; (800bb08 <__libc_init_array+0x38>)
 800bad4:	4c0d      	ldr	r4, [pc, #52]	; (800bb0c <__libc_init_array+0x3c>)
 800bad6:	1b64      	subs	r4, r4, r5
 800bad8:	10a4      	asrs	r4, r4, #2
 800bada:	2600      	movs	r6, #0
 800badc:	42a6      	cmp	r6, r4
 800bade:	d109      	bne.n	800baf4 <__libc_init_array+0x24>
 800bae0:	4d0b      	ldr	r5, [pc, #44]	; (800bb10 <__libc_init_array+0x40>)
 800bae2:	4c0c      	ldr	r4, [pc, #48]	; (800bb14 <__libc_init_array+0x44>)
 800bae4:	f000 fd38 	bl	800c558 <_init>
 800bae8:	1b64      	subs	r4, r4, r5
 800baea:	10a4      	asrs	r4, r4, #2
 800baec:	2600      	movs	r6, #0
 800baee:	42a6      	cmp	r6, r4
 800baf0:	d105      	bne.n	800bafe <__libc_init_array+0x2e>
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf8:	4798      	blx	r3
 800bafa:	3601      	adds	r6, #1
 800bafc:	e7ee      	b.n	800badc <__libc_init_array+0xc>
 800bafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb02:	4798      	blx	r3
 800bb04:	3601      	adds	r6, #1
 800bb06:	e7f2      	b.n	800baee <__libc_init_array+0x1e>
 800bb08:	0800ca64 	.word	0x0800ca64
 800bb0c:	0800ca64 	.word	0x0800ca64
 800bb10:	0800ca64 	.word	0x0800ca64
 800bb14:	0800ca68 	.word	0x0800ca68

0800bb18 <__retarget_lock_init_recursive>:
 800bb18:	4770      	bx	lr

0800bb1a <__retarget_lock_acquire_recursive>:
 800bb1a:	4770      	bx	lr

0800bb1c <__retarget_lock_release_recursive>:
 800bb1c:	4770      	bx	lr

0800bb1e <memcpy>:
 800bb1e:	440a      	add	r2, r1
 800bb20:	4291      	cmp	r1, r2
 800bb22:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb26:	d100      	bne.n	800bb2a <memcpy+0xc>
 800bb28:	4770      	bx	lr
 800bb2a:	b510      	push	{r4, lr}
 800bb2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb34:	4291      	cmp	r1, r2
 800bb36:	d1f9      	bne.n	800bb2c <memcpy+0xe>
 800bb38:	bd10      	pop	{r4, pc}
	...

0800bb3c <_free_r>:
 800bb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	d044      	beq.n	800bbcc <_free_r+0x90>
 800bb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb46:	9001      	str	r0, [sp, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb4e:	bfb8      	it	lt
 800bb50:	18e4      	addlt	r4, r4, r3
 800bb52:	f000 f8df 	bl	800bd14 <__malloc_lock>
 800bb56:	4a1e      	ldr	r2, [pc, #120]	; (800bbd0 <_free_r+0x94>)
 800bb58:	9801      	ldr	r0, [sp, #4]
 800bb5a:	6813      	ldr	r3, [r2, #0]
 800bb5c:	b933      	cbnz	r3, 800bb6c <_free_r+0x30>
 800bb5e:	6063      	str	r3, [r4, #4]
 800bb60:	6014      	str	r4, [r2, #0]
 800bb62:	b003      	add	sp, #12
 800bb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb68:	f000 b8da 	b.w	800bd20 <__malloc_unlock>
 800bb6c:	42a3      	cmp	r3, r4
 800bb6e:	d908      	bls.n	800bb82 <_free_r+0x46>
 800bb70:	6825      	ldr	r5, [r4, #0]
 800bb72:	1961      	adds	r1, r4, r5
 800bb74:	428b      	cmp	r3, r1
 800bb76:	bf01      	itttt	eq
 800bb78:	6819      	ldreq	r1, [r3, #0]
 800bb7a:	685b      	ldreq	r3, [r3, #4]
 800bb7c:	1949      	addeq	r1, r1, r5
 800bb7e:	6021      	streq	r1, [r4, #0]
 800bb80:	e7ed      	b.n	800bb5e <_free_r+0x22>
 800bb82:	461a      	mov	r2, r3
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	b10b      	cbz	r3, 800bb8c <_free_r+0x50>
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	d9fa      	bls.n	800bb82 <_free_r+0x46>
 800bb8c:	6811      	ldr	r1, [r2, #0]
 800bb8e:	1855      	adds	r5, r2, r1
 800bb90:	42a5      	cmp	r5, r4
 800bb92:	d10b      	bne.n	800bbac <_free_r+0x70>
 800bb94:	6824      	ldr	r4, [r4, #0]
 800bb96:	4421      	add	r1, r4
 800bb98:	1854      	adds	r4, r2, r1
 800bb9a:	42a3      	cmp	r3, r4
 800bb9c:	6011      	str	r1, [r2, #0]
 800bb9e:	d1e0      	bne.n	800bb62 <_free_r+0x26>
 800bba0:	681c      	ldr	r4, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	6053      	str	r3, [r2, #4]
 800bba6:	440c      	add	r4, r1
 800bba8:	6014      	str	r4, [r2, #0]
 800bbaa:	e7da      	b.n	800bb62 <_free_r+0x26>
 800bbac:	d902      	bls.n	800bbb4 <_free_r+0x78>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	e7d6      	b.n	800bb62 <_free_r+0x26>
 800bbb4:	6825      	ldr	r5, [r4, #0]
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	428b      	cmp	r3, r1
 800bbba:	bf04      	itt	eq
 800bbbc:	6819      	ldreq	r1, [r3, #0]
 800bbbe:	685b      	ldreq	r3, [r3, #4]
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	bf04      	itt	eq
 800bbc4:	1949      	addeq	r1, r1, r5
 800bbc6:	6021      	streq	r1, [r4, #0]
 800bbc8:	6054      	str	r4, [r2, #4]
 800bbca:	e7ca      	b.n	800bb62 <_free_r+0x26>
 800bbcc:	b003      	add	sp, #12
 800bbce:	bd30      	pop	{r4, r5, pc}
 800bbd0:	20002834 	.word	0x20002834

0800bbd4 <sbrk_aligned>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4e0e      	ldr	r6, [pc, #56]	; (800bc10 <sbrk_aligned+0x3c>)
 800bbd8:	460c      	mov	r4, r1
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b911      	cbnz	r1, 800bbe6 <sbrk_aligned+0x12>
 800bbe0:	f000 fcaa 	bl	800c538 <_sbrk_r>
 800bbe4:	6030      	str	r0, [r6, #0]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 fca5 	bl	800c538 <_sbrk_r>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d00a      	beq.n	800bc08 <sbrk_aligned+0x34>
 800bbf2:	1cc4      	adds	r4, r0, #3
 800bbf4:	f024 0403 	bic.w	r4, r4, #3
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d007      	beq.n	800bc0c <sbrk_aligned+0x38>
 800bbfc:	1a21      	subs	r1, r4, r0
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f000 fc9a 	bl	800c538 <_sbrk_r>
 800bc04:	3001      	adds	r0, #1
 800bc06:	d101      	bne.n	800bc0c <sbrk_aligned+0x38>
 800bc08:	f04f 34ff 	mov.w	r4, #4294967295
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	20002838 	.word	0x20002838

0800bc14 <_malloc_r>:
 800bc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc18:	1ccd      	adds	r5, r1, #3
 800bc1a:	f025 0503 	bic.w	r5, r5, #3
 800bc1e:	3508      	adds	r5, #8
 800bc20:	2d0c      	cmp	r5, #12
 800bc22:	bf38      	it	cc
 800bc24:	250c      	movcc	r5, #12
 800bc26:	2d00      	cmp	r5, #0
 800bc28:	4607      	mov	r7, r0
 800bc2a:	db01      	blt.n	800bc30 <_malloc_r+0x1c>
 800bc2c:	42a9      	cmp	r1, r5
 800bc2e:	d905      	bls.n	800bc3c <_malloc_r+0x28>
 800bc30:	230c      	movs	r3, #12
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	2600      	movs	r6, #0
 800bc36:	4630      	mov	r0, r6
 800bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd10 <_malloc_r+0xfc>
 800bc40:	f000 f868 	bl	800bd14 <__malloc_lock>
 800bc44:	f8d8 3000 	ldr.w	r3, [r8]
 800bc48:	461c      	mov	r4, r3
 800bc4a:	bb5c      	cbnz	r4, 800bca4 <_malloc_r+0x90>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7ff ffc0 	bl	800bbd4 <sbrk_aligned>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	4604      	mov	r4, r0
 800bc58:	d155      	bne.n	800bd06 <_malloc_r+0xf2>
 800bc5a:	f8d8 4000 	ldr.w	r4, [r8]
 800bc5e:	4626      	mov	r6, r4
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	d145      	bne.n	800bcf0 <_malloc_r+0xdc>
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	d048      	beq.n	800bcfa <_malloc_r+0xe6>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	eb04 0903 	add.w	r9, r4, r3
 800bc72:	f000 fc61 	bl	800c538 <_sbrk_r>
 800bc76:	4581      	cmp	r9, r0
 800bc78:	d13f      	bne.n	800bcfa <_malloc_r+0xe6>
 800bc7a:	6821      	ldr	r1, [r4, #0]
 800bc7c:	1a6d      	subs	r5, r5, r1
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ffa7 	bl	800bbd4 <sbrk_aligned>
 800bc86:	3001      	adds	r0, #1
 800bc88:	d037      	beq.n	800bcfa <_malloc_r+0xe6>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	442b      	add	r3, r5
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	f8d8 3000 	ldr.w	r3, [r8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d038      	beq.n	800bd0a <_malloc_r+0xf6>
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	42a2      	cmp	r2, r4
 800bc9c:	d12b      	bne.n	800bcf6 <_malloc_r+0xe2>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	e00f      	b.n	800bcc4 <_malloc_r+0xb0>
 800bca4:	6822      	ldr	r2, [r4, #0]
 800bca6:	1b52      	subs	r2, r2, r5
 800bca8:	d41f      	bmi.n	800bcea <_malloc_r+0xd6>
 800bcaa:	2a0b      	cmp	r2, #11
 800bcac:	d917      	bls.n	800bcde <_malloc_r+0xca>
 800bcae:	1961      	adds	r1, r4, r5
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	6025      	str	r5, [r4, #0]
 800bcb4:	bf18      	it	ne
 800bcb6:	6059      	strne	r1, [r3, #4]
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	bf08      	it	eq
 800bcbc:	f8c8 1000 	streq.w	r1, [r8]
 800bcc0:	5162      	str	r2, [r4, r5]
 800bcc2:	604b      	str	r3, [r1, #4]
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f104 060b 	add.w	r6, r4, #11
 800bcca:	f000 f829 	bl	800bd20 <__malloc_unlock>
 800bcce:	f026 0607 	bic.w	r6, r6, #7
 800bcd2:	1d23      	adds	r3, r4, #4
 800bcd4:	1af2      	subs	r2, r6, r3
 800bcd6:	d0ae      	beq.n	800bc36 <_malloc_r+0x22>
 800bcd8:	1b9b      	subs	r3, r3, r6
 800bcda:	50a3      	str	r3, [r4, r2]
 800bcdc:	e7ab      	b.n	800bc36 <_malloc_r+0x22>
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	6862      	ldr	r2, [r4, #4]
 800bce2:	d1dd      	bne.n	800bca0 <_malloc_r+0x8c>
 800bce4:	f8c8 2000 	str.w	r2, [r8]
 800bce8:	e7ec      	b.n	800bcc4 <_malloc_r+0xb0>
 800bcea:	4623      	mov	r3, r4
 800bcec:	6864      	ldr	r4, [r4, #4]
 800bcee:	e7ac      	b.n	800bc4a <_malloc_r+0x36>
 800bcf0:	4634      	mov	r4, r6
 800bcf2:	6876      	ldr	r6, [r6, #4]
 800bcf4:	e7b4      	b.n	800bc60 <_malloc_r+0x4c>
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	e7cc      	b.n	800bc94 <_malloc_r+0x80>
 800bcfa:	230c      	movs	r3, #12
 800bcfc:	603b      	str	r3, [r7, #0]
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f000 f80e 	bl	800bd20 <__malloc_unlock>
 800bd04:	e797      	b.n	800bc36 <_malloc_r+0x22>
 800bd06:	6025      	str	r5, [r4, #0]
 800bd08:	e7dc      	b.n	800bcc4 <_malloc_r+0xb0>
 800bd0a:	605b      	str	r3, [r3, #4]
 800bd0c:	deff      	udf	#255	; 0xff
 800bd0e:	bf00      	nop
 800bd10:	20002834 	.word	0x20002834

0800bd14 <__malloc_lock>:
 800bd14:	4801      	ldr	r0, [pc, #4]	; (800bd1c <__malloc_lock+0x8>)
 800bd16:	f7ff bf00 	b.w	800bb1a <__retarget_lock_acquire_recursive>
 800bd1a:	bf00      	nop
 800bd1c:	20002830 	.word	0x20002830

0800bd20 <__malloc_unlock>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__malloc_unlock+0x8>)
 800bd22:	f7ff befb 	b.w	800bb1c <__retarget_lock_release_recursive>
 800bd26:	bf00      	nop
 800bd28:	20002830 	.word	0x20002830

0800bd2c <__sfputc_r>:
 800bd2c:	6893      	ldr	r3, [r2, #8]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	b410      	push	{r4}
 800bd34:	6093      	str	r3, [r2, #8]
 800bd36:	da08      	bge.n	800bd4a <__sfputc_r+0x1e>
 800bd38:	6994      	ldr	r4, [r2, #24]
 800bd3a:	42a3      	cmp	r3, r4
 800bd3c:	db01      	blt.n	800bd42 <__sfputc_r+0x16>
 800bd3e:	290a      	cmp	r1, #10
 800bd40:	d103      	bne.n	800bd4a <__sfputc_r+0x1e>
 800bd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd46:	f7ff bd84 	b.w	800b852 <__swbuf_r>
 800bd4a:	6813      	ldr	r3, [r2, #0]
 800bd4c:	1c58      	adds	r0, r3, #1
 800bd4e:	6010      	str	r0, [r2, #0]
 800bd50:	7019      	strb	r1, [r3, #0]
 800bd52:	4608      	mov	r0, r1
 800bd54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <__sfputs_r>:
 800bd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	4614      	mov	r4, r2
 800bd62:	18d5      	adds	r5, r2, r3
 800bd64:	42ac      	cmp	r4, r5
 800bd66:	d101      	bne.n	800bd6c <__sfputs_r+0x12>
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e007      	b.n	800bd7c <__sfputs_r+0x22>
 800bd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd70:	463a      	mov	r2, r7
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7ff ffda 	bl	800bd2c <__sfputc_r>
 800bd78:	1c43      	adds	r3, r0, #1
 800bd7a:	d1f3      	bne.n	800bd64 <__sfputs_r+0xa>
 800bd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd80 <_vfiprintf_r>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	460d      	mov	r5, r1
 800bd86:	b09d      	sub	sp, #116	; 0x74
 800bd88:	4614      	mov	r4, r2
 800bd8a:	4698      	mov	r8, r3
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	b118      	cbz	r0, 800bd98 <_vfiprintf_r+0x18>
 800bd90:	6a03      	ldr	r3, [r0, #32]
 800bd92:	b90b      	cbnz	r3, 800bd98 <_vfiprintf_r+0x18>
 800bd94:	f7ff fc76 	bl	800b684 <__sinit>
 800bd98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9a:	07d9      	lsls	r1, r3, #31
 800bd9c:	d405      	bmi.n	800bdaa <_vfiprintf_r+0x2a>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	059a      	lsls	r2, r3, #22
 800bda2:	d402      	bmi.n	800bdaa <_vfiprintf_r+0x2a>
 800bda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda6:	f7ff feb8 	bl	800bb1a <__retarget_lock_acquire_recursive>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	071b      	lsls	r3, r3, #28
 800bdae:	d501      	bpl.n	800bdb4 <_vfiprintf_r+0x34>
 800bdb0:	692b      	ldr	r3, [r5, #16]
 800bdb2:	b99b      	cbnz	r3, 800bddc <_vfiprintf_r+0x5c>
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7ff fd88 	bl	800b8cc <__swsetup_r>
 800bdbc:	b170      	cbz	r0, 800bddc <_vfiprintf_r+0x5c>
 800bdbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdc0:	07dc      	lsls	r4, r3, #31
 800bdc2:	d504      	bpl.n	800bdce <_vfiprintf_r+0x4e>
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	b01d      	add	sp, #116	; 0x74
 800bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdce:	89ab      	ldrh	r3, [r5, #12]
 800bdd0:	0598      	lsls	r0, r3, #22
 800bdd2:	d4f7      	bmi.n	800bdc4 <_vfiprintf_r+0x44>
 800bdd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdd6:	f7ff fea1 	bl	800bb1c <__retarget_lock_release_recursive>
 800bdda:	e7f3      	b.n	800bdc4 <_vfiprintf_r+0x44>
 800bddc:	2300      	movs	r3, #0
 800bdde:	9309      	str	r3, [sp, #36]	; 0x24
 800bde0:	2320      	movs	r3, #32
 800bde2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bde6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdea:	2330      	movs	r3, #48	; 0x30
 800bdec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bfa0 <_vfiprintf_r+0x220>
 800bdf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf4:	f04f 0901 	mov.w	r9, #1
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	469a      	mov	sl, r3
 800bdfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be00:	b10a      	cbz	r2, 800be06 <_vfiprintf_r+0x86>
 800be02:	2a25      	cmp	r2, #37	; 0x25
 800be04:	d1f9      	bne.n	800bdfa <_vfiprintf_r+0x7a>
 800be06:	ebba 0b04 	subs.w	fp, sl, r4
 800be0a:	d00b      	beq.n	800be24 <_vfiprintf_r+0xa4>
 800be0c:	465b      	mov	r3, fp
 800be0e:	4622      	mov	r2, r4
 800be10:	4629      	mov	r1, r5
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ffa1 	bl	800bd5a <__sfputs_r>
 800be18:	3001      	adds	r0, #1
 800be1a:	f000 80a9 	beq.w	800bf70 <_vfiprintf_r+0x1f0>
 800be1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be20:	445a      	add	r2, fp
 800be22:	9209      	str	r2, [sp, #36]	; 0x24
 800be24:	f89a 3000 	ldrb.w	r3, [sl]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 80a1 	beq.w	800bf70 <_vfiprintf_r+0x1f0>
 800be2e:	2300      	movs	r3, #0
 800be30:	f04f 32ff 	mov.w	r2, #4294967295
 800be34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be38:	f10a 0a01 	add.w	sl, sl, #1
 800be3c:	9304      	str	r3, [sp, #16]
 800be3e:	9307      	str	r3, [sp, #28]
 800be40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be44:	931a      	str	r3, [sp, #104]	; 0x68
 800be46:	4654      	mov	r4, sl
 800be48:	2205      	movs	r2, #5
 800be4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4e:	4854      	ldr	r0, [pc, #336]	; (800bfa0 <_vfiprintf_r+0x220>)
 800be50:	f7f4 f9c6 	bl	80001e0 <memchr>
 800be54:	9a04      	ldr	r2, [sp, #16]
 800be56:	b9d8      	cbnz	r0, 800be90 <_vfiprintf_r+0x110>
 800be58:	06d1      	lsls	r1, r2, #27
 800be5a:	bf44      	itt	mi
 800be5c:	2320      	movmi	r3, #32
 800be5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be62:	0713      	lsls	r3, r2, #28
 800be64:	bf44      	itt	mi
 800be66:	232b      	movmi	r3, #43	; 0x2b
 800be68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be6c:	f89a 3000 	ldrb.w	r3, [sl]
 800be70:	2b2a      	cmp	r3, #42	; 0x2a
 800be72:	d015      	beq.n	800bea0 <_vfiprintf_r+0x120>
 800be74:	9a07      	ldr	r2, [sp, #28]
 800be76:	4654      	mov	r4, sl
 800be78:	2000      	movs	r0, #0
 800be7a:	f04f 0c0a 	mov.w	ip, #10
 800be7e:	4621      	mov	r1, r4
 800be80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be84:	3b30      	subs	r3, #48	; 0x30
 800be86:	2b09      	cmp	r3, #9
 800be88:	d94d      	bls.n	800bf26 <_vfiprintf_r+0x1a6>
 800be8a:	b1b0      	cbz	r0, 800beba <_vfiprintf_r+0x13a>
 800be8c:	9207      	str	r2, [sp, #28]
 800be8e:	e014      	b.n	800beba <_vfiprintf_r+0x13a>
 800be90:	eba0 0308 	sub.w	r3, r0, r8
 800be94:	fa09 f303 	lsl.w	r3, r9, r3
 800be98:	4313      	orrs	r3, r2
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	46a2      	mov	sl, r4
 800be9e:	e7d2      	b.n	800be46 <_vfiprintf_r+0xc6>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	1d19      	adds	r1, r3, #4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	9103      	str	r1, [sp, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	bfbb      	ittet	lt
 800beac:	425b      	neglt	r3, r3
 800beae:	f042 0202 	orrlt.w	r2, r2, #2
 800beb2:	9307      	strge	r3, [sp, #28]
 800beb4:	9307      	strlt	r3, [sp, #28]
 800beb6:	bfb8      	it	lt
 800beb8:	9204      	strlt	r2, [sp, #16]
 800beba:	7823      	ldrb	r3, [r4, #0]
 800bebc:	2b2e      	cmp	r3, #46	; 0x2e
 800bebe:	d10c      	bne.n	800beda <_vfiprintf_r+0x15a>
 800bec0:	7863      	ldrb	r3, [r4, #1]
 800bec2:	2b2a      	cmp	r3, #42	; 0x2a
 800bec4:	d134      	bne.n	800bf30 <_vfiprintf_r+0x1b0>
 800bec6:	9b03      	ldr	r3, [sp, #12]
 800bec8:	1d1a      	adds	r2, r3, #4
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	9203      	str	r2, [sp, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfb8      	it	lt
 800bed2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bed6:	3402      	adds	r4, #2
 800bed8:	9305      	str	r3, [sp, #20]
 800beda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bfb0 <_vfiprintf_r+0x230>
 800bede:	7821      	ldrb	r1, [r4, #0]
 800bee0:	2203      	movs	r2, #3
 800bee2:	4650      	mov	r0, sl
 800bee4:	f7f4 f97c 	bl	80001e0 <memchr>
 800bee8:	b138      	cbz	r0, 800befa <_vfiprintf_r+0x17a>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	eba0 000a 	sub.w	r0, r0, sl
 800bef0:	2240      	movs	r2, #64	; 0x40
 800bef2:	4082      	lsls	r2, r0
 800bef4:	4313      	orrs	r3, r2
 800bef6:	3401      	adds	r4, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	4829      	ldr	r0, [pc, #164]	; (800bfa4 <_vfiprintf_r+0x224>)
 800bf00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf04:	2206      	movs	r2, #6
 800bf06:	f7f4 f96b 	bl	80001e0 <memchr>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d03f      	beq.n	800bf8e <_vfiprintf_r+0x20e>
 800bf0e:	4b26      	ldr	r3, [pc, #152]	; (800bfa8 <_vfiprintf_r+0x228>)
 800bf10:	bb1b      	cbnz	r3, 800bf5a <_vfiprintf_r+0x1da>
 800bf12:	9b03      	ldr	r3, [sp, #12]
 800bf14:	3307      	adds	r3, #7
 800bf16:	f023 0307 	bic.w	r3, r3, #7
 800bf1a:	3308      	adds	r3, #8
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf20:	443b      	add	r3, r7
 800bf22:	9309      	str	r3, [sp, #36]	; 0x24
 800bf24:	e768      	b.n	800bdf8 <_vfiprintf_r+0x78>
 800bf26:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	e7a6      	b.n	800be7e <_vfiprintf_r+0xfe>
 800bf30:	2300      	movs	r3, #0
 800bf32:	3401      	adds	r4, #1
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	4619      	mov	r1, r3
 800bf38:	f04f 0c0a 	mov.w	ip, #10
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf42:	3a30      	subs	r2, #48	; 0x30
 800bf44:	2a09      	cmp	r2, #9
 800bf46:	d903      	bls.n	800bf50 <_vfiprintf_r+0x1d0>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0c6      	beq.n	800beda <_vfiprintf_r+0x15a>
 800bf4c:	9105      	str	r1, [sp, #20]
 800bf4e:	e7c4      	b.n	800beda <_vfiprintf_r+0x15a>
 800bf50:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf54:	4604      	mov	r4, r0
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7f0      	b.n	800bf3c <_vfiprintf_r+0x1bc>
 800bf5a:	ab03      	add	r3, sp, #12
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4b12      	ldr	r3, [pc, #72]	; (800bfac <_vfiprintf_r+0x22c>)
 800bf62:	a904      	add	r1, sp, #16
 800bf64:	4630      	mov	r0, r6
 800bf66:	f3af 8000 	nop.w
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	1c78      	adds	r0, r7, #1
 800bf6e:	d1d6      	bne.n	800bf1e <_vfiprintf_r+0x19e>
 800bf70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf72:	07d9      	lsls	r1, r3, #31
 800bf74:	d405      	bmi.n	800bf82 <_vfiprintf_r+0x202>
 800bf76:	89ab      	ldrh	r3, [r5, #12]
 800bf78:	059a      	lsls	r2, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_vfiprintf_r+0x202>
 800bf7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf7e:	f7ff fdcd 	bl	800bb1c <__retarget_lock_release_recursive>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	065b      	lsls	r3, r3, #25
 800bf86:	f53f af1d 	bmi.w	800bdc4 <_vfiprintf_r+0x44>
 800bf8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf8c:	e71c      	b.n	800bdc8 <_vfiprintf_r+0x48>
 800bf8e:	ab03      	add	r3, sp, #12
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	462a      	mov	r2, r5
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <_vfiprintf_r+0x22c>)
 800bf96:	a904      	add	r1, sp, #16
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f000 f879 	bl	800c090 <_printf_i>
 800bf9e:	e7e4      	b.n	800bf6a <_vfiprintf_r+0x1ea>
 800bfa0:	0800ca30 	.word	0x0800ca30
 800bfa4:	0800ca3a 	.word	0x0800ca3a
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	0800bd5b 	.word	0x0800bd5b
 800bfb0:	0800ca36 	.word	0x0800ca36

0800bfb4 <_printf_common>:
 800bfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	4616      	mov	r6, r2
 800bfba:	4699      	mov	r9, r3
 800bfbc:	688a      	ldr	r2, [r1, #8]
 800bfbe:	690b      	ldr	r3, [r1, #16]
 800bfc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	bfb8      	it	lt
 800bfc8:	4613      	movlt	r3, r2
 800bfca:	6033      	str	r3, [r6, #0]
 800bfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	b10a      	cbz	r2, 800bfda <_printf_common+0x26>
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	6033      	str	r3, [r6, #0]
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	0699      	lsls	r1, r3, #26
 800bfde:	bf42      	ittt	mi
 800bfe0:	6833      	ldrmi	r3, [r6, #0]
 800bfe2:	3302      	addmi	r3, #2
 800bfe4:	6033      	strmi	r3, [r6, #0]
 800bfe6:	6825      	ldr	r5, [r4, #0]
 800bfe8:	f015 0506 	ands.w	r5, r5, #6
 800bfec:	d106      	bne.n	800bffc <_printf_common+0x48>
 800bfee:	f104 0a19 	add.w	sl, r4, #25
 800bff2:	68e3      	ldr	r3, [r4, #12]
 800bff4:	6832      	ldr	r2, [r6, #0]
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	dc26      	bgt.n	800c04a <_printf_common+0x96>
 800bffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c000:	1e13      	subs	r3, r2, #0
 800c002:	6822      	ldr	r2, [r4, #0]
 800c004:	bf18      	it	ne
 800c006:	2301      	movne	r3, #1
 800c008:	0692      	lsls	r2, r2, #26
 800c00a:	d42b      	bmi.n	800c064 <_printf_common+0xb0>
 800c00c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c010:	4649      	mov	r1, r9
 800c012:	4638      	mov	r0, r7
 800c014:	47c0      	blx	r8
 800c016:	3001      	adds	r0, #1
 800c018:	d01e      	beq.n	800c058 <_printf_common+0xa4>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	6922      	ldr	r2, [r4, #16]
 800c01e:	f003 0306 	and.w	r3, r3, #6
 800c022:	2b04      	cmp	r3, #4
 800c024:	bf02      	ittt	eq
 800c026:	68e5      	ldreq	r5, [r4, #12]
 800c028:	6833      	ldreq	r3, [r6, #0]
 800c02a:	1aed      	subeq	r5, r5, r3
 800c02c:	68a3      	ldr	r3, [r4, #8]
 800c02e:	bf0c      	ite	eq
 800c030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c034:	2500      	movne	r5, #0
 800c036:	4293      	cmp	r3, r2
 800c038:	bfc4      	itt	gt
 800c03a:	1a9b      	subgt	r3, r3, r2
 800c03c:	18ed      	addgt	r5, r5, r3
 800c03e:	2600      	movs	r6, #0
 800c040:	341a      	adds	r4, #26
 800c042:	42b5      	cmp	r5, r6
 800c044:	d11a      	bne.n	800c07c <_printf_common+0xc8>
 800c046:	2000      	movs	r0, #0
 800c048:	e008      	b.n	800c05c <_printf_common+0xa8>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4652      	mov	r2, sl
 800c04e:	4649      	mov	r1, r9
 800c050:	4638      	mov	r0, r7
 800c052:	47c0      	blx	r8
 800c054:	3001      	adds	r0, #1
 800c056:	d103      	bne.n	800c060 <_printf_common+0xac>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c060:	3501      	adds	r5, #1
 800c062:	e7c6      	b.n	800bff2 <_printf_common+0x3e>
 800c064:	18e1      	adds	r1, r4, r3
 800c066:	1c5a      	adds	r2, r3, #1
 800c068:	2030      	movs	r0, #48	; 0x30
 800c06a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c06e:	4422      	add	r2, r4
 800c070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c078:	3302      	adds	r3, #2
 800c07a:	e7c7      	b.n	800c00c <_printf_common+0x58>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4622      	mov	r2, r4
 800c080:	4649      	mov	r1, r9
 800c082:	4638      	mov	r0, r7
 800c084:	47c0      	blx	r8
 800c086:	3001      	adds	r0, #1
 800c088:	d0e6      	beq.n	800c058 <_printf_common+0xa4>
 800c08a:	3601      	adds	r6, #1
 800c08c:	e7d9      	b.n	800c042 <_printf_common+0x8e>
	...

0800c090 <_printf_i>:
 800c090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	7e0f      	ldrb	r7, [r1, #24]
 800c096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c098:	2f78      	cmp	r7, #120	; 0x78
 800c09a:	4691      	mov	r9, r2
 800c09c:	4680      	mov	r8, r0
 800c09e:	460c      	mov	r4, r1
 800c0a0:	469a      	mov	sl, r3
 800c0a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0a6:	d807      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0a8:	2f62      	cmp	r7, #98	; 0x62
 800c0aa:	d80a      	bhi.n	800c0c2 <_printf_i+0x32>
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	f000 80d4 	beq.w	800c25a <_printf_i+0x1ca>
 800c0b2:	2f58      	cmp	r7, #88	; 0x58
 800c0b4:	f000 80c0 	beq.w	800c238 <_printf_i+0x1a8>
 800c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0c0:	e03a      	b.n	800c138 <_printf_i+0xa8>
 800c0c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0c6:	2b15      	cmp	r3, #21
 800c0c8:	d8f6      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0ca:	a101      	add	r1, pc, #4	; (adr r1, 800c0d0 <_printf_i+0x40>)
 800c0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c13d 	.word	0x0800c13d
 800c0d8:	0800c0b9 	.word	0x0800c0b9
 800c0dc:	0800c0b9 	.word	0x0800c0b9
 800c0e0:	0800c0b9 	.word	0x0800c0b9
 800c0e4:	0800c0b9 	.word	0x0800c0b9
 800c0e8:	0800c13d 	.word	0x0800c13d
 800c0ec:	0800c0b9 	.word	0x0800c0b9
 800c0f0:	0800c0b9 	.word	0x0800c0b9
 800c0f4:	0800c0b9 	.word	0x0800c0b9
 800c0f8:	0800c0b9 	.word	0x0800c0b9
 800c0fc:	0800c241 	.word	0x0800c241
 800c100:	0800c169 	.word	0x0800c169
 800c104:	0800c1fb 	.word	0x0800c1fb
 800c108:	0800c0b9 	.word	0x0800c0b9
 800c10c:	0800c0b9 	.word	0x0800c0b9
 800c110:	0800c263 	.word	0x0800c263
 800c114:	0800c0b9 	.word	0x0800c0b9
 800c118:	0800c169 	.word	0x0800c169
 800c11c:	0800c0b9 	.word	0x0800c0b9
 800c120:	0800c0b9 	.word	0x0800c0b9
 800c124:	0800c203 	.word	0x0800c203
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	1d1a      	adds	r2, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	602a      	str	r2, [r5, #0]
 800c130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c138:	2301      	movs	r3, #1
 800c13a:	e09f      	b.n	800c27c <_printf_i+0x1ec>
 800c13c:	6820      	ldr	r0, [r4, #0]
 800c13e:	682b      	ldr	r3, [r5, #0]
 800c140:	0607      	lsls	r7, r0, #24
 800c142:	f103 0104 	add.w	r1, r3, #4
 800c146:	6029      	str	r1, [r5, #0]
 800c148:	d501      	bpl.n	800c14e <_printf_i+0xbe>
 800c14a:	681e      	ldr	r6, [r3, #0]
 800c14c:	e003      	b.n	800c156 <_printf_i+0xc6>
 800c14e:	0646      	lsls	r6, r0, #25
 800c150:	d5fb      	bpl.n	800c14a <_printf_i+0xba>
 800c152:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c156:	2e00      	cmp	r6, #0
 800c158:	da03      	bge.n	800c162 <_printf_i+0xd2>
 800c15a:	232d      	movs	r3, #45	; 0x2d
 800c15c:	4276      	negs	r6, r6
 800c15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c162:	485a      	ldr	r0, [pc, #360]	; (800c2cc <_printf_i+0x23c>)
 800c164:	230a      	movs	r3, #10
 800c166:	e012      	b.n	800c18e <_printf_i+0xfe>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	6820      	ldr	r0, [r4, #0]
 800c16c:	1d19      	adds	r1, r3, #4
 800c16e:	6029      	str	r1, [r5, #0]
 800c170:	0605      	lsls	r5, r0, #24
 800c172:	d501      	bpl.n	800c178 <_printf_i+0xe8>
 800c174:	681e      	ldr	r6, [r3, #0]
 800c176:	e002      	b.n	800c17e <_printf_i+0xee>
 800c178:	0641      	lsls	r1, r0, #25
 800c17a:	d5fb      	bpl.n	800c174 <_printf_i+0xe4>
 800c17c:	881e      	ldrh	r6, [r3, #0]
 800c17e:	4853      	ldr	r0, [pc, #332]	; (800c2cc <_printf_i+0x23c>)
 800c180:	2f6f      	cmp	r7, #111	; 0x6f
 800c182:	bf0c      	ite	eq
 800c184:	2308      	moveq	r3, #8
 800c186:	230a      	movne	r3, #10
 800c188:	2100      	movs	r1, #0
 800c18a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c18e:	6865      	ldr	r5, [r4, #4]
 800c190:	60a5      	str	r5, [r4, #8]
 800c192:	2d00      	cmp	r5, #0
 800c194:	bfa2      	ittt	ge
 800c196:	6821      	ldrge	r1, [r4, #0]
 800c198:	f021 0104 	bicge.w	r1, r1, #4
 800c19c:	6021      	strge	r1, [r4, #0]
 800c19e:	b90e      	cbnz	r6, 800c1a4 <_printf_i+0x114>
 800c1a0:	2d00      	cmp	r5, #0
 800c1a2:	d04b      	beq.n	800c23c <_printf_i+0x1ac>
 800c1a4:	4615      	mov	r5, r2
 800c1a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c1ae:	5dc7      	ldrb	r7, [r0, r7]
 800c1b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1b4:	4637      	mov	r7, r6
 800c1b6:	42bb      	cmp	r3, r7
 800c1b8:	460e      	mov	r6, r1
 800c1ba:	d9f4      	bls.n	800c1a6 <_printf_i+0x116>
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d10b      	bne.n	800c1d8 <_printf_i+0x148>
 800c1c0:	6823      	ldr	r3, [r4, #0]
 800c1c2:	07de      	lsls	r6, r3, #31
 800c1c4:	d508      	bpl.n	800c1d8 <_printf_i+0x148>
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	6861      	ldr	r1, [r4, #4]
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	bfde      	ittt	le
 800c1ce:	2330      	movle	r3, #48	; 0x30
 800c1d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1d8:	1b52      	subs	r2, r2, r5
 800c1da:	6122      	str	r2, [r4, #16]
 800c1dc:	f8cd a000 	str.w	sl, [sp]
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	aa03      	add	r2, sp, #12
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	f7ff fee4 	bl	800bfb4 <_printf_common>
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d14a      	bne.n	800c286 <_printf_i+0x1f6>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	b004      	add	sp, #16
 800c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f043 0320 	orr.w	r3, r3, #32
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	4833      	ldr	r0, [pc, #204]	; (800c2d0 <_printf_i+0x240>)
 800c204:	2778      	movs	r7, #120	; 0x78
 800c206:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	6829      	ldr	r1, [r5, #0]
 800c20e:	061f      	lsls	r7, r3, #24
 800c210:	f851 6b04 	ldr.w	r6, [r1], #4
 800c214:	d402      	bmi.n	800c21c <_printf_i+0x18c>
 800c216:	065f      	lsls	r7, r3, #25
 800c218:	bf48      	it	mi
 800c21a:	b2b6      	uxthmi	r6, r6
 800c21c:	07df      	lsls	r7, r3, #31
 800c21e:	bf48      	it	mi
 800c220:	f043 0320 	orrmi.w	r3, r3, #32
 800c224:	6029      	str	r1, [r5, #0]
 800c226:	bf48      	it	mi
 800c228:	6023      	strmi	r3, [r4, #0]
 800c22a:	b91e      	cbnz	r6, 800c234 <_printf_i+0x1a4>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	f023 0320 	bic.w	r3, r3, #32
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	2310      	movs	r3, #16
 800c236:	e7a7      	b.n	800c188 <_printf_i+0xf8>
 800c238:	4824      	ldr	r0, [pc, #144]	; (800c2cc <_printf_i+0x23c>)
 800c23a:	e7e4      	b.n	800c206 <_printf_i+0x176>
 800c23c:	4615      	mov	r5, r2
 800c23e:	e7bd      	b.n	800c1bc <_printf_i+0x12c>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	6826      	ldr	r6, [r4, #0]
 800c244:	6961      	ldr	r1, [r4, #20]
 800c246:	1d18      	adds	r0, r3, #4
 800c248:	6028      	str	r0, [r5, #0]
 800c24a:	0635      	lsls	r5, r6, #24
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0x1c4>
 800c250:	6019      	str	r1, [r3, #0]
 800c252:	e002      	b.n	800c25a <_printf_i+0x1ca>
 800c254:	0670      	lsls	r0, r6, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0x1c0>
 800c258:	8019      	strh	r1, [r3, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	4615      	mov	r5, r2
 800c260:	e7bc      	b.n	800c1dc <_printf_i+0x14c>
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	1d1a      	adds	r2, r3, #4
 800c266:	602a      	str	r2, [r5, #0]
 800c268:	681d      	ldr	r5, [r3, #0]
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	2100      	movs	r1, #0
 800c26e:	4628      	mov	r0, r5
 800c270:	f7f3 ffb6 	bl	80001e0 <memchr>
 800c274:	b108      	cbz	r0, 800c27a <_printf_i+0x1ea>
 800c276:	1b40      	subs	r0, r0, r5
 800c278:	6060      	str	r0, [r4, #4]
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	2300      	movs	r3, #0
 800c280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c284:	e7aa      	b.n	800c1dc <_printf_i+0x14c>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	462a      	mov	r2, r5
 800c28a:	4649      	mov	r1, r9
 800c28c:	4640      	mov	r0, r8
 800c28e:	47d0      	blx	sl
 800c290:	3001      	adds	r0, #1
 800c292:	d0ad      	beq.n	800c1f0 <_printf_i+0x160>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	079b      	lsls	r3, r3, #30
 800c298:	d413      	bmi.n	800c2c2 <_printf_i+0x232>
 800c29a:	68e0      	ldr	r0, [r4, #12]
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	4298      	cmp	r0, r3
 800c2a0:	bfb8      	it	lt
 800c2a2:	4618      	movlt	r0, r3
 800c2a4:	e7a6      	b.n	800c1f4 <_printf_i+0x164>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	47d0      	blx	sl
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d09d      	beq.n	800c1f0 <_printf_i+0x160>
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	68e3      	ldr	r3, [r4, #12]
 800c2b8:	9903      	ldr	r1, [sp, #12]
 800c2ba:	1a5b      	subs	r3, r3, r1
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dcf2      	bgt.n	800c2a6 <_printf_i+0x216>
 800c2c0:	e7eb      	b.n	800c29a <_printf_i+0x20a>
 800c2c2:	2500      	movs	r5, #0
 800c2c4:	f104 0619 	add.w	r6, r4, #25
 800c2c8:	e7f5      	b.n	800c2b6 <_printf_i+0x226>
 800c2ca:	bf00      	nop
 800c2cc:	0800ca41 	.word	0x0800ca41
 800c2d0:	0800ca52 	.word	0x0800ca52

0800c2d4 <__sflush_r>:
 800c2d4:	898a      	ldrh	r2, [r1, #12]
 800c2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2da:	4605      	mov	r5, r0
 800c2dc:	0710      	lsls	r0, r2, #28
 800c2de:	460c      	mov	r4, r1
 800c2e0:	d458      	bmi.n	800c394 <__sflush_r+0xc0>
 800c2e2:	684b      	ldr	r3, [r1, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc05      	bgt.n	800c2f4 <__sflush_r+0x20>
 800c2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dc02      	bgt.n	800c2f4 <__sflush_r+0x20>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f6:	2e00      	cmp	r6, #0
 800c2f8:	d0f9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c300:	682f      	ldr	r7, [r5, #0]
 800c302:	6a21      	ldr	r1, [r4, #32]
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	d032      	beq.n	800c36e <__sflush_r+0x9a>
 800c308:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	075a      	lsls	r2, r3, #29
 800c30e:	d505      	bpl.n	800c31c <__sflush_r+0x48>
 800c310:	6863      	ldr	r3, [r4, #4]
 800c312:	1ac0      	subs	r0, r0, r3
 800c314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c316:	b10b      	cbz	r3, 800c31c <__sflush_r+0x48>
 800c318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c31a:	1ac0      	subs	r0, r0, r3
 800c31c:	2300      	movs	r3, #0
 800c31e:	4602      	mov	r2, r0
 800c320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c322:	6a21      	ldr	r1, [r4, #32]
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	d106      	bne.n	800c33c <__sflush_r+0x68>
 800c32e:	6829      	ldr	r1, [r5, #0]
 800c330:	291d      	cmp	r1, #29
 800c332:	d82b      	bhi.n	800c38c <__sflush_r+0xb8>
 800c334:	4a29      	ldr	r2, [pc, #164]	; (800c3dc <__sflush_r+0x108>)
 800c336:	410a      	asrs	r2, r1
 800c338:	07d6      	lsls	r6, r2, #31
 800c33a:	d427      	bmi.n	800c38c <__sflush_r+0xb8>
 800c33c:	2200      	movs	r2, #0
 800c33e:	6062      	str	r2, [r4, #4]
 800c340:	04d9      	lsls	r1, r3, #19
 800c342:	6922      	ldr	r2, [r4, #16]
 800c344:	6022      	str	r2, [r4, #0]
 800c346:	d504      	bpl.n	800c352 <__sflush_r+0x7e>
 800c348:	1c42      	adds	r2, r0, #1
 800c34a:	d101      	bne.n	800c350 <__sflush_r+0x7c>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b903      	cbnz	r3, 800c352 <__sflush_r+0x7e>
 800c350:	6560      	str	r0, [r4, #84]	; 0x54
 800c352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c354:	602f      	str	r7, [r5, #0]
 800c356:	2900      	cmp	r1, #0
 800c358:	d0c9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c35e:	4299      	cmp	r1, r3
 800c360:	d002      	beq.n	800c368 <__sflush_r+0x94>
 800c362:	4628      	mov	r0, r5
 800c364:	f7ff fbea 	bl	800bb3c <_free_r>
 800c368:	2000      	movs	r0, #0
 800c36a:	6360      	str	r0, [r4, #52]	; 0x34
 800c36c:	e7c0      	b.n	800c2f0 <__sflush_r+0x1c>
 800c36e:	2301      	movs	r3, #1
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	1c41      	adds	r1, r0, #1
 800c376:	d1c8      	bne.n	800c30a <__sflush_r+0x36>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0c5      	beq.n	800c30a <__sflush_r+0x36>
 800c37e:	2b1d      	cmp	r3, #29
 800c380:	d001      	beq.n	800c386 <__sflush_r+0xb2>
 800c382:	2b16      	cmp	r3, #22
 800c384:	d101      	bne.n	800c38a <__sflush_r+0xb6>
 800c386:	602f      	str	r7, [r5, #0]
 800c388:	e7b1      	b.n	800c2ee <__sflush_r+0x1a>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	e7ad      	b.n	800c2f0 <__sflush_r+0x1c>
 800c394:	690f      	ldr	r7, [r1, #16]
 800c396:	2f00      	cmp	r7, #0
 800c398:	d0a9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c39a:	0793      	lsls	r3, r2, #30
 800c39c:	680e      	ldr	r6, [r1, #0]
 800c39e:	bf08      	it	eq
 800c3a0:	694b      	ldreq	r3, [r1, #20]
 800c3a2:	600f      	str	r7, [r1, #0]
 800c3a4:	bf18      	it	ne
 800c3a6:	2300      	movne	r3, #0
 800c3a8:	eba6 0807 	sub.w	r8, r6, r7
 800c3ac:	608b      	str	r3, [r1, #8]
 800c3ae:	f1b8 0f00 	cmp.w	r8, #0
 800c3b2:	dd9c      	ble.n	800c2ee <__sflush_r+0x1a>
 800c3b4:	6a21      	ldr	r1, [r4, #32]
 800c3b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3b8:	4643      	mov	r3, r8
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	dc06      	bgt.n	800c3d2 <__sflush_r+0xfe>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	e78e      	b.n	800c2f0 <__sflush_r+0x1c>
 800c3d2:	4407      	add	r7, r0
 800c3d4:	eba8 0800 	sub.w	r8, r8, r0
 800c3d8:	e7e9      	b.n	800c3ae <__sflush_r+0xda>
 800c3da:	bf00      	nop
 800c3dc:	dfbffffe 	.word	0xdfbffffe

0800c3e0 <_fflush_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	690b      	ldr	r3, [r1, #16]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	b913      	cbnz	r3, 800c3f0 <_fflush_r+0x10>
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	b118      	cbz	r0, 800c3fa <_fflush_r+0x1a>
 800c3f2:	6a03      	ldr	r3, [r0, #32]
 800c3f4:	b90b      	cbnz	r3, 800c3fa <_fflush_r+0x1a>
 800c3f6:	f7ff f945 	bl	800b684 <__sinit>
 800c3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0f3      	beq.n	800c3ea <_fflush_r+0xa>
 800c402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c404:	07d0      	lsls	r0, r2, #31
 800c406:	d404      	bmi.n	800c412 <_fflush_r+0x32>
 800c408:	0599      	lsls	r1, r3, #22
 800c40a:	d402      	bmi.n	800c412 <_fflush_r+0x32>
 800c40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40e:	f7ff fb84 	bl	800bb1a <__retarget_lock_acquire_recursive>
 800c412:	4628      	mov	r0, r5
 800c414:	4621      	mov	r1, r4
 800c416:	f7ff ff5d 	bl	800c2d4 <__sflush_r>
 800c41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c41c:	07da      	lsls	r2, r3, #31
 800c41e:	4605      	mov	r5, r0
 800c420:	d4e4      	bmi.n	800c3ec <_fflush_r+0xc>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	059b      	lsls	r3, r3, #22
 800c426:	d4e1      	bmi.n	800c3ec <_fflush_r+0xc>
 800c428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c42a:	f7ff fb77 	bl	800bb1c <__retarget_lock_release_recursive>
 800c42e:	e7dd      	b.n	800c3ec <_fflush_r+0xc>

0800c430 <__swhatbuf_r>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	460c      	mov	r4, r1
 800c434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c438:	2900      	cmp	r1, #0
 800c43a:	b096      	sub	sp, #88	; 0x58
 800c43c:	4615      	mov	r5, r2
 800c43e:	461e      	mov	r6, r3
 800c440:	da0d      	bge.n	800c45e <__swhatbuf_r+0x2e>
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c448:	f04f 0100 	mov.w	r1, #0
 800c44c:	bf0c      	ite	eq
 800c44e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c452:	2340      	movne	r3, #64	; 0x40
 800c454:	2000      	movs	r0, #0
 800c456:	6031      	str	r1, [r6, #0]
 800c458:	602b      	str	r3, [r5, #0]
 800c45a:	b016      	add	sp, #88	; 0x58
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	466a      	mov	r2, sp
 800c460:	f000 f848 	bl	800c4f4 <_fstat_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	dbec      	blt.n	800c442 <__swhatbuf_r+0x12>
 800c468:	9901      	ldr	r1, [sp, #4]
 800c46a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c46e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c472:	4259      	negs	r1, r3
 800c474:	4159      	adcs	r1, r3
 800c476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47a:	e7eb      	b.n	800c454 <__swhatbuf_r+0x24>

0800c47c <__smakebuf_r>:
 800c47c:	898b      	ldrh	r3, [r1, #12]
 800c47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c480:	079d      	lsls	r5, r3, #30
 800c482:	4606      	mov	r6, r0
 800c484:	460c      	mov	r4, r1
 800c486:	d507      	bpl.n	800c498 <__smakebuf_r+0x1c>
 800c488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	2301      	movs	r3, #1
 800c492:	6163      	str	r3, [r4, #20]
 800c494:	b002      	add	sp, #8
 800c496:	bd70      	pop	{r4, r5, r6, pc}
 800c498:	ab01      	add	r3, sp, #4
 800c49a:	466a      	mov	r2, sp
 800c49c:	f7ff ffc8 	bl	800c430 <__swhatbuf_r>
 800c4a0:	9900      	ldr	r1, [sp, #0]
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff fbb5 	bl	800bc14 <_malloc_r>
 800c4aa:	b948      	cbnz	r0, 800c4c0 <__smakebuf_r+0x44>
 800c4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b0:	059a      	lsls	r2, r3, #22
 800c4b2:	d4ef      	bmi.n	800c494 <__smakebuf_r+0x18>
 800c4b4:	f023 0303 	bic.w	r3, r3, #3
 800c4b8:	f043 0302 	orr.w	r3, r3, #2
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	e7e3      	b.n	800c488 <__smakebuf_r+0xc>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	6020      	str	r0, [r4, #0]
 800c4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	6163      	str	r3, [r4, #20]
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	6120      	str	r0, [r4, #16]
 800c4d2:	b15b      	cbz	r3, 800c4ec <__smakebuf_r+0x70>
 800c4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 f81d 	bl	800c518 <_isatty_r>
 800c4de:	b128      	cbz	r0, 800c4ec <__smakebuf_r+0x70>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	431d      	orrs	r5, r3
 800c4f0:	81a5      	strh	r5, [r4, #12]
 800c4f2:	e7cf      	b.n	800c494 <__smakebuf_r+0x18>

0800c4f4 <_fstat_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_fstat_r+0x20>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f7f4 fc64 	bl	8000dce <_fstat>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d102      	bne.n	800c510 <_fstat_r+0x1c>
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	b103      	cbz	r3, 800c510 <_fstat_r+0x1c>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	2000282c 	.word	0x2000282c

0800c518 <_isatty_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d06      	ldr	r5, [pc, #24]	; (800c534 <_isatty_r+0x1c>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	f7f4 fc63 	bl	8000dee <_isatty>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_isatty_r+0x1a>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_isatty_r+0x1a>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	2000282c 	.word	0x2000282c

0800c538 <_sbrk_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d06      	ldr	r5, [pc, #24]	; (800c554 <_sbrk_r+0x1c>)
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	602b      	str	r3, [r5, #0]
 800c544:	f7f4 fc6c 	bl	8000e20 <_sbrk>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_sbrk_r+0x1a>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_sbrk_r+0x1a>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	2000282c 	.word	0x2000282c

0800c558 <_init>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	bf00      	nop
 800c55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c55e:	bc08      	pop	{r3}
 800c560:	469e      	mov	lr, r3
 800c562:	4770      	bx	lr

0800c564 <_fini>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	bf00      	nop
 800c568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56a:	bc08      	pop	{r3}
 800c56c:	469e      	mov	lr, r3
 800c56e:	4770      	bx	lr
