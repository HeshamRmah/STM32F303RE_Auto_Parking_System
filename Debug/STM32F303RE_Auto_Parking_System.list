
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c478  0800c478  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c478  0800c478  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c478  0800c478  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c478  0800c478  0001c478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c47c  0800c47c  0001c47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800c480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          00002758  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002840  20002840  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fb05  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004907  00000000  00000000  0003fca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000123d  00000000  00000000  00045d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ba  00000000  00000000  00046f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020076  00000000  00000000  0006c447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d77f6  00000000  00000000  0008c4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006840  00000000  00000000  00163cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c118 	.word	0x0800c118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	0800c118 	.word	0x0800c118

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000284:	481d      	ldr	r0, [pc, #116]	; (80002fc <MX_FREERTOS_Init+0x7c>)
 8000286:	f007 ff75 	bl	8008174 <osMutexNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <MX_FREERTOS_Init+0x80>)
 800028e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000290:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <MX_FREERTOS_Init+0x84>)
 8000292:	2100      	movs	r1, #0
 8000294:	481c      	ldr	r0, [pc, #112]	; (8000308 <MX_FREERTOS_Init+0x88>)
 8000296:	f007 fd19 	bl	8007ccc <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <MX_FREERTOS_Init+0x8c>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 80002a0:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <MX_FREERTOS_Init+0x90>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	481b      	ldr	r0, [pc, #108]	; (8000314 <MX_FREERTOS_Init+0x94>)
 80002a6:	f007 fd11 	bl	8007ccc <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <MX_FREERTOS_Init+0x98>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <MX_FREERTOS_Init+0x9c>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	481a      	ldr	r0, [pc, #104]	; (8000320 <MX_FREERTOS_Init+0xa0>)
 80002b6:	f007 fd09 	bl	8007ccc <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a19      	ldr	r2, [pc, #100]	; (8000324 <MX_FREERTOS_Init+0xa4>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of bluetooth_recive */
  bluetooth_reciveHandle = osThreadNew(RTOS_Bluetooth_Recive, NULL, &bluetooth_recive_attributes);
 80002c0:	4a19      	ldr	r2, [pc, #100]	; (8000328 <MX_FREERTOS_Init+0xa8>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4819      	ldr	r0, [pc, #100]	; (800032c <MX_FREERTOS_Init+0xac>)
 80002c6:	f007 fd01 	bl	8007ccc <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_FREERTOS_Init+0xb0>)
 80002ce:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <MX_FREERTOS_Init+0xb4>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	4818      	ldr	r0, [pc, #96]	; (8000338 <MX_FREERTOS_Init+0xb8>)
 80002d6:	f007 fcf9 	bl	8007ccc <osThreadNew>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_FREERTOS_Init+0xbc>)
 80002de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 80002e0:	4817      	ldr	r0, [pc, #92]	; (8000340 <MX_FREERTOS_Init+0xc0>)
 80002e2:	f007 fe25 	bl	8007f30 <osEventFlagsNew>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4a16      	ldr	r2, [pc, #88]	; (8000344 <MX_FREERTOS_Init+0xc4>)
 80002ea:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 80002ec:	4816      	ldr	r0, [pc, #88]	; (8000348 <MX_FREERTOS_Init+0xc8>)
 80002ee:	f007 fe1f 	bl	8007f30 <osEventFlagsNew>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <MX_FREERTOS_Init+0xcc>)
 80002f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	0800c3dc 	.word	0x0800c3dc
 8000300:	20000118 	.word	0x20000118
 8000304:	0800c328 	.word	0x0800c328
 8000308:	08000351 	.word	0x08000351
 800030c:	20000104 	.word	0x20000104
 8000310:	0800c34c 	.word	0x0800c34c
 8000314:	0800038d 	.word	0x0800038d
 8000318:	20000108 	.word	0x20000108
 800031c:	0800c370 	.word	0x0800c370
 8000320:	080003d9 	.word	0x080003d9
 8000324:	2000010c 	.word	0x2000010c
 8000328:	0800c394 	.word	0x0800c394
 800032c:	0800045d 	.word	0x0800045d
 8000330:	20000110 	.word	0x20000110
 8000334:	0800c3b8 	.word	0x0800c3b8
 8000338:	08000471 	.word	0x08000471
 800033c:	20000114 	.word	0x20000114
 8000340:	0800c3ec 	.word	0x0800c3ec
 8000344:	2000011c 	.word	0x2000011c
 8000348:	0800c3fc 	.word	0x0800c3fc
 800034c:	20000120 	.word	0x20000120

08000350 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <DefaultTask+0x30>)
 800035a:	f001 fd15 	bl	8001d88 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 800035e:	4809      	ldr	r0, [pc, #36]	; (8000384 <DefaultTask+0x34>)
 8000360:	f001 fd2c 	bl	8001dbc <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask is Running\n");
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <DefaultTask+0x38>)
 8000366:	f00b f809 	bl	800b37c <puts>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 800036a:	f007 fd59 	bl	8007e20 <osThreadGetId>
 800036e:	4603      	mov	r3, r0
 8000370:	4618      	mov	r0, r3
 8000372:	f007 fd7b 	bl	8007e6c <osThreadSuspend>
    osDelay(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f007 fdab 	bl	8007ed4 <osDelay>
	  printf("DefaultTask is Running\n");
 800037e:	e7f1      	b.n	8000364 <DefaultTask+0x14>
 8000380:	20000058 	.word	0x20000058
 8000384:	20000048 	.word	0x20000048
 8000388:	0800c1b4 	.word	0x0800c1b4

0800038c <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Ultrasonics_Read */
  /* Infinite loop */
  for(;;)
  {
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <RTOS_Ultrasonics_Read+0x34>)
 8000396:	f002 f8a1 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <RTOS_Ultrasonics_Read+0x38>)
 800039c:	f002 f89e 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <RTOS_Ultrasonics_Read+0x3c>)
 80003a2:	f002 f89b 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 80003a6:	4809      	ldr	r0, [pc, #36]	; (80003cc <RTOS_Ultrasonics_Read+0x40>)
 80003a8:	f002 f898 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("LeftFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 80003ac:	4808      	ldr	r0, [pc, #32]	; (80003d0 <RTOS_Ultrasonics_Read+0x44>)
 80003ae:	f002 f895 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003b2:	4808      	ldr	r0, [pc, #32]	; (80003d4 <RTOS_Ultrasonics_Read+0x48>)
 80003b4:	f002 f892 	bl	80024dc <ECU_Ultrasonic_Read>
	  //printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

    osDelay(90);
 80003b8:	205a      	movs	r0, #90	; 0x5a
 80003ba:	f007 fd8b 	bl	8007ed4 <osDelay>
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003be:	e7e9      	b.n	8000394 <RTOS_Ultrasonics_Read+0x8>
 80003c0:	20000000 	.word	0x20000000
 80003c4:	2000000c 	.word	0x2000000c
 80003c8:	20000018 	.word	0x20000018
 80003cc:	20000024 	.word	0x20000024
 80003d0:	20000030 	.word	0x20000030
 80003d4:	2000003c 	.word	0x2000003c

080003d8 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <RTOS_Car_Next_Step+0x74>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b57      	cmp	r3, #87	; 0x57
 80003e6:	d10c      	bne.n	8000402 <RTOS_Car_Next_Step+0x2a>
		  //osMutexAcquire(Car_Conrol_ModeHandle, 10U);
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <RTOS_Car_Next_Step+0x78>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	4618      	mov	r0, r3
 80003f0:	f007 fdf0 	bl	8007fd4 <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <RTOS_Car_Next_Step+0x78>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f007 fe42 	bl	8008084 <osEventFlagsClear>
 8000400:	e00f      	b.n	8000422 <RTOS_Car_Next_Step+0x4a>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <RTOS_Car_Next_Step+0x74>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b55      	cmp	r3, #85	; 0x55
 8000408:	d10b      	bne.n	8000422 <RTOS_Car_Next_Step+0x4a>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <RTOS_Car_Next_Step+0x78>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2101      	movs	r1, #1
 8000410:	4618      	mov	r0, r3
 8000412:	f007 fddf 	bl	8007fd4 <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <RTOS_Car_Next_Step+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2102      	movs	r1, #2
 800041c:	4618      	mov	r0, r3
 800041e:	f007 fdd9 	bl	8007fd4 <osEventFlagsSet>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_IDLE){
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <RTOS_Car_Next_Step+0x78>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f007 fe70 	bl	800810c <osEventFlagsGet>
 800042c:	4603      	mov	r3, r0
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <RTOS_Car_Next_Step+0x6c>
		  printf("Mobile Control Mode\n");
 8000436:	4807      	ldr	r0, [pc, #28]	; (8000454 <RTOS_Car_Next_Step+0x7c>)
 8000438:	f00a ffa0 	bl	800b37c <puts>
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 800043c:	4903      	ldr	r1, [pc, #12]	; (800044c <RTOS_Car_Next_Step+0x74>)
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <RTOS_Car_Next_Step+0x80>)
 8000440:	f001 fd6a 	bl	8001f18 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(100);
 8000444:	2064      	movs	r0, #100	; 0x64
 8000446:	f007 fd45 	bl	8007ed4 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 800044a:	e7c9      	b.n	80003e0 <RTOS_Car_Next_Step+0x8>
 800044c:	20000064 	.word	0x20000064
 8000450:	2000011c 	.word	0x2000011c
 8000454:	0800c1cc 	.word	0x0800c1cc
 8000458:	20000048 	.word	0x20000048

0800045c <RTOS_Bluetooth_Recive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Bluetooth_Recive */
void RTOS_Bluetooth_Recive(void *argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Bluetooth_Recive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 8000464:	4801      	ldr	r0, [pc, #4]	; (800046c <RTOS_Bluetooth_Recive+0x10>)
 8000466:	f007 fd35 	bl	8007ed4 <osDelay>
 800046a:	e7fb      	b.n	8000464 <RTOS_Bluetooth_Recive+0x8>
 800046c:	000186a0 	.word	0x000186a0

08000470 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000478:	4b47      	ldr	r3, [pc, #284]	; (8000598 <RTOS_Automatic_Parking+0x128>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b77      	cmp	r3, #119	; 0x77
 800047e:	d105      	bne.n	800048c <RTOS_Automatic_Parking+0x1c>
		  //osMutexRelease(Car_Conrol_ModeHandle);
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000480:	4b46      	ldr	r3, [pc, #280]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f007 fdfc 	bl	8008084 <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_ACTIVE){
 800048c:	4b43      	ldr	r3, [pc, #268]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f007 fe3b 	bl	800810c <osEventFlagsGet>
 8000496:	4603      	mov	r3, r0
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	2b01      	cmp	r3, #1
 800049e:	d176      	bne.n	800058e <RTOS_Automatic_Parking+0x11e>
		  printf("------------------------------------------------Automatic Parking Mode\n");
 80004a0:	483f      	ldr	r0, [pc, #252]	; (80005a0 <RTOS_Automatic_Parking+0x130>)
 80004a2:	f00a ff6b 	bl	800b37c <puts>
		  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80004a6:	493f      	ldr	r1, [pc, #252]	; (80005a4 <RTOS_Automatic_Parking+0x134>)
 80004a8:	483f      	ldr	r0, [pc, #252]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 80004aa:	f001 fd17 	bl	8001edc <ECU_Motor_ChangeSpeed>
		  /* Select Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT)){
 80004ae:	4b3b      	ldr	r3, [pc, #236]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f007 fe2a 	bl	800810c <osEventFlagsGet>
 80004b8:	4603      	mov	r3, r0
 80004ba:	f003 0302 	and.w	r3, r3, #2
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d12e      	bne.n	8000520 <RTOS_Automatic_Parking+0xb0>
			  printf("Park Right Side\n");
 80004c2:	483a      	ldr	r0, [pc, #232]	; (80005ac <RTOS_Automatic_Parking+0x13c>)
 80004c4:	f00a ff5a 	bl	800b37c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < 16) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < 16)){
 80004c8:	e002      	b.n	80004d0 <RTOS_Automatic_Parking+0x60>
				  ECU_Motor_MoveForward(&moving_motor);
 80004ca:	4837      	ldr	r0, [pc, #220]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 80004cc:	f001 fde0 	bl	8002090 <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < 16) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < 16)){
 80004d0:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d9f8      	bls.n	80004ca <RTOS_Automatic_Parking+0x5a>
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d9f4      	bls.n	80004ca <RTOS_Automatic_Parking+0x5a>
			  }
			  /* Delay to let the car move Forward to half the car length */
			  HAL_Delay(250);
 80004e0:	20fa      	movs	r0, #250	; 0xfa
 80004e2:	f002 f967 	bl	80027b4 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 80004e6:	4830      	ldr	r0, [pc, #192]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 80004e8:	f001 fefa 	bl	80022e0 <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 6){
 80004ec:	e002      	b.n	80004f4 <RTOS_Automatic_Parking+0x84>
				  ECU_Motor_MoveReverseRight(&moving_motor);
 80004ee:	482e      	ldr	r0, [pc, #184]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 80004f0:	f001 fe8a 	bl	8002208 <ECU_Motor_MoveReverseRight>
			  while(ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 6){
 80004f4:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	2b06      	cmp	r3, #6
 80004fa:	d8f8      	bhi.n	80004ee <RTOS_Automatic_Parking+0x7e>
			  }
			  ECU_Motor_Stop(&moving_motor);
 80004fc:	482a      	ldr	r0, [pc, #168]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 80004fe:	f001 feef 	bl	80022e0 <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4){
 8000502:	e002      	b.n	800050a <RTOS_Automatic_Parking+0x9a>
				  ECU_Motor_MoveReverseLeft(&moving_motor);
 8000504:	4828      	ldr	r0, [pc, #160]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 8000506:	f001 feb5 	bl	8002274 <ECU_Motor_MoveReverseLeft>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 4){
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	2b04      	cmp	r3, #4
 8000510:	d8f8      	bhi.n	8000504 <RTOS_Automatic_Parking+0x94>
			  }

			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f007 fdb3 	bl	8008084 <osEventFlagsClear>
 800051e:	e036      	b.n	800058e <RTOS_Automatic_Parking+0x11e>


		  }
		  /* Select Left Side to Park */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) || (STD_ACTIVE << PARKING_SIDE_BIT)){
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f007 fdf1 	bl	800810c <osEventFlagsGet>
			  printf("Park Left Side\n");
 800052a:	4822      	ldr	r0, [pc, #136]	; (80005b4 <RTOS_Automatic_Parking+0x144>)
 800052c:	f00a ff26 	bl	800b37c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < 16) && (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < 16)){
 8000530:	e002      	b.n	8000538 <RTOS_Automatic_Parking+0xc8>
				  ECU_Motor_MoveForward(&moving_motor);
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 8000534:	f001 fdac 	bl	8002090 <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < 16) && (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < 16)){
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d803      	bhi.n	8000548 <RTOS_Automatic_Parking+0xd8>
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 8000542:	691b      	ldr	r3, [r3, #16]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d9f4      	bls.n	8000532 <RTOS_Automatic_Parking+0xc2>
			  }
			  /* Delay to let the car move Forward to half the car length */
			  HAL_Delay(50);
 8000548:	2032      	movs	r0, #50	; 0x32
 800054a:	f002 f933 	bl	80027b4 <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 8000550:	f001 fec6 	bl	80022e0 <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3){
 8000554:	e002      	b.n	800055c <RTOS_Automatic_Parking+0xec>
				  ECU_Motor_MoveReverseLeft(&moving_motor);
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 8000558:	f001 fe8c 	bl	8002274 <ECU_Motor_MoveReverseLeft>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3){
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d8f8      	bhi.n	8000556 <RTOS_Automatic_Parking+0xe6>
			  }
			  ECU_Motor_Stop(&moving_motor);
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 8000566:	f001 febb 	bl	80022e0 <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3){
 800056a:	e002      	b.n	8000572 <RTOS_Automatic_Parking+0x102>
				  ECU_Motor_MoveReverseRight(&moving_motor);
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 800056e:	f001 fe4b 	bl	8002208 <ECU_Motor_MoveReverseRight>
			  while(ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3){
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <RTOS_Automatic_Parking+0x140>)
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d8f8      	bhi.n	800056c <RTOS_Automatic_Parking+0xfc>
			  }

			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 800057a:	490f      	ldr	r1, [pc, #60]	; (80005b8 <RTOS_Automatic_Parking+0x148>)
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <RTOS_Automatic_Parking+0x138>)
 800057e:	f001 fcad 	bl	8001edc <ECU_Motor_ChangeSpeed>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <RTOS_Automatic_Parking+0x12c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2101      	movs	r1, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f007 fd7b 	bl	8008084 <osEventFlagsClear>
		  else{/* DO NOTHING */}


	  }
	  else{/* DO NOTHING */}
    osDelay(200);
 800058e:	20c8      	movs	r0, #200	; 0xc8
 8000590:	f007 fca0 	bl	8007ed4 <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000594:	e770      	b.n	8000478 <RTOS_Automatic_Parking+0x8>
 8000596:	bf00      	nop
 8000598:	20000064 	.word	0x20000064
 800059c:	2000011c 	.word	0x2000011c
 80005a0:	0800c1e0 	.word	0x0800c1e0
 80005a4:	20000078 	.word	0x20000078
 80005a8:	20000048 	.word	0x20000048
 80005ac:	0800c228 	.word	0x0800c228
 80005b0:	2000049c 	.word	0x2000049c
 80005b4:	0800c238 	.word	0x0800c238
 80005b8:	20000070 	.word	0x20000070

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a40      	ldr	r2, [pc, #256]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a3a      	ldr	r2, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <MX_GPIO_Init+0x11c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x11c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <MX_GPIO_Init+0x11c>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_GPIO_Init+0x11c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x11c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x11c>)
 8000620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0x11c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f002 fbc2 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000640:	2200      	movs	r2, #0
 8000642:	f643 4106 	movw	r1, #15366	; 0x3c06
 8000646:	4825      	ldr	r0, [pc, #148]	; (80006dc <MX_GPIO_Init+0x120>)
 8000648:	f002 fbbc 	bl	8002dc4 <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000652:	4823      	ldr	r0, [pc, #140]	; (80006e0 <MX_GPIO_Init+0x124>)
 8000654:	f002 fbb6 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <MX_GPIO_Init+0x124>)
 8000670:	f002 fa1e 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 8000674:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f002 fa0e 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 8000694:	f643 4306 	movw	r3, #15366	; 0x3c06
 8000698:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <MX_GPIO_Init+0x120>)
 80006ae:	f002 f9ff 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80006b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0x124>)
 80006cc:	f002 f9f0 	bl	8002ab0 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400
 80006e0:	48000800 	.word	0x48000800

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f002 f82e 	bl	8002748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f81c 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff64 	bl	80005bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80006f4:	f000 fa96 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f8:	f000 fb64 	bl	8000dc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006fc:	f000 fbfc 	bl	8000ef8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000700:	f000 fc96 	bl	8001030 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000704:	f000 fd30 	bl	8001168 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000708:	f000 fdfe 	bl	8001308 <MX_TIM15_Init>
  MX_TIM16_Init();
 800070c:	f000 fec4 	bl	8001498 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000710:	f001 fa08 	bl	8001b24 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000714:	f001 f9d6 	bl	8001ac4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000718:	f007 fa70 	bl	8007bfc <osKernelInitialize>
  MX_FREERTOS_Init();
 800071c:	f7ff fdb0 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000720:	f007 faa0 	bl	8007c64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x40>
	...

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0a6      	sub	sp, #152	; 0x98
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00a ff00 	bl	800b53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2258      	movs	r2, #88	; 0x58
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f00a fef2 	bl	800b53c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fb3f 	bl	8002df4 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800077c:	f000 f848 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fb7e 	bl	8003e9c <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007a6:	f000 f833 	bl	8000810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <SystemClock_Config+0xc0>)
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80007be:	2300      	movs	r3, #0
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fdcb 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007dc:	f000 f818 	bl	8000810 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3798      	adds	r7, #152	; 0x98
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	00f0300a 	.word	0x00f0300a

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f001 ffb9 	bl	8002774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40001000 	.word	0x40001000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_MspInit+0x4c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_MspInit+0x4c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <HAL_MspInit+0x4c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	f06f 0001 	mvn.w	r0, #1
 800085a:	f002 f887 	bl	800296c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800087c:	4b33      	ldr	r3, [pc, #204]	; (800094c <HAL_InitTick+0xe0>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	4a32      	ldr	r2, [pc, #200]	; (800094c <HAL_InitTick+0xe0>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	61d3      	str	r3, [r2, #28]
 8000888:	4b30      	ldr	r3, [pc, #192]	; (800094c <HAL_InitTick+0xe0>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000894:	f107 0210 	add.w	r2, r7, #16
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fd32 	bl	8004308 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d103      	bne.n	80008b6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ae:	f003 fce7 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80008b2:	6378      	str	r0, [r7, #52]	; 0x34
 80008b4:	e004      	b.n	80008c0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008b6:	f003 fce3 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80008ba:	4603      	mov	r3, r0
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c2:	4a23      	ldr	r2, [pc, #140]	; (8000950 <HAL_InitTick+0xe4>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	0c9b      	lsrs	r3, r3, #18
 80008ca:	3b01      	subs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <HAL_InitTick+0xe8>)
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <HAL_InitTick+0xec>)
 80008d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <HAL_InitTick+0xe8>)
 80008d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <HAL_InitTick+0xe8>)
 80008de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_InitTick+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <HAL_InitTick+0xe8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_InitTick+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <HAL_InitTick+0xe8>)
 80008f6:	f003 ff57 	bl	80047a8 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000904:	2b00      	cmp	r3, #0
 8000906:	d11b      	bne.n	8000940 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <HAL_InitTick+0xe8>)
 800090a:	f003 ffa5 	bl	8004858 <HAL_TIM_Base_Start_IT>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000918:	2b00      	cmp	r3, #0
 800091a:	d111      	bne.n	8000940 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091c:	2036      	movs	r0, #54	; 0x36
 800091e:	f002 f841 	bl	80029a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d808      	bhi.n	800093a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2036      	movs	r0, #54	; 0x36
 800092e:	f002 f81d 	bl	800296c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_InitTick+0xf0>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e002      	b.n	8000940 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000944:	4618      	mov	r0, r3
 8000946:	3738      	adds	r7, #56	; 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	431bde83 	.word	0x431bde83
 8000954:	20000124 	.word	0x20000124
 8000958:	40001000 	.word	0x40001000
 800095c:	20000080 	.word	0x20000080

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8000992:	2205      	movs	r2, #5
 8000994:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8000998:	f004 fc42 	bl	8005220 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800099e:	f004 fc3f 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200004b4 	.word	0x200004b4
 80009ac:	20000174 	.word	0x20000174
 80009b0:	200002f0 	.word	0x200002f0

080009b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <TIM1_CC_IRQHandler+0x14>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <TIM1_CC_IRQHandler+0x18>)
 80009c0:	f004 fc2e 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200004b4 	.word	0x200004b4
 80009cc:	20000174 	.word	0x20000174

080009d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <TIM2_IRQHandler+0x14>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <TIM2_IRQHandler+0x18>)
 80009dc:	f004 fc20 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200004b4 	.word	0x200004b4
 80009e8:	200001c0 	.word	0x200001c0

080009ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <TIM3_IRQHandler+0x14>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <TIM3_IRQHandler+0x18>)
 80009f8:	f004 fc12 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200004b4 	.word	0x200004b4
 8000a04:	2000020c 	.word	0x2000020c

08000a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <TIM4_IRQHandler+0x14>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <TIM4_IRQHandler+0x18>)
 8000a14:	f004 fc04 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200004b4 	.word	0x200004b4
 8000a20:	20000258 	.word	0x20000258

08000a24 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <TIM8_CC_IRQHandler+0x14>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <TIM8_CC_IRQHandler+0x18>)
 8000a30:	f004 fbf6 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200004b4 	.word	0x200004b4
 8000a3c:	200002a4 	.word	0x200002a4

08000a40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <UART4_IRQHandler+0x10>)
 8000a46:	f005 ff31 	bl	80068ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000388 	.word	0x20000388

08000a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM6_DAC_IRQHandler+0x10>)
 8000a5a:	f004 fbe1 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000124 	.word	0x20000124

08000a68 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <Custom_ITM_sendChar_Ch0+0x48>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <Custom_ITM_sendChar_Ch0+0x48>)
 8000a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a7c:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a8a:	bf00      	nop
 8000a8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000a9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	6013      	str	r3, [r2, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000edfc 	.word	0xe000edfc
 8000ab4:	e0000e00 	.word	0xe0000e00

08000ab8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
  }

  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffab 	bl	8000a68 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
  }
  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f00a fd5e 	bl	800b684 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20010000 	.word	0x20010000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	20000170 	.word	0x20000170
 8000bfc:	20002840 	.word	0x20002840

08000c00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09e      	sub	sp, #120	; 0x78
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	222c      	movs	r2, #44	; 0x2c
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00a fc65 	bl	800b53c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c74:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <MX_TIM1_Init+0x19c>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c84:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c92:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9e:	4847      	ldr	r0, [pc, #284]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000ca0:	f003 fd82 	bl	80047a8 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000caa:	f7ff fdb1 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000cbc:	f004 fd80 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cc6:	f7ff fda3 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cca:	483c      	ldr	r0, [pc, #240]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000ccc:	f003 fe34 	bl	8004938 <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000cd6:	f7ff fd9b 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cda:	4838      	ldr	r0, [pc, #224]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000cdc:	f004 f836 	bl	8004d4c <HAL_TIM_IC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ce6:	f7ff fd93 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	482f      	ldr	r0, [pc, #188]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000cfe:	f005 fc13 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000d08:	f7ff fd82 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000d10:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	4822      	ldr	r0, [pc, #136]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000d34:	f004 fc30 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d3e:	f7ff fd67 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d46:	2301      	movs	r3, #1
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d56:	2204      	movs	r2, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000d5c:	f004 fb7f 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d66:	f7ff fd53 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000da0:	f005 fc4e 	bl	8006640 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000daa:	f7ff fd31 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM1_Init+0x198>)
 8000db0:	f000 fd74 	bl	800189c <HAL_TIM_MspPostInit>

}
 8000db4:	bf00      	nop
 8000db6:	3778      	adds	r7, #120	; 0x78
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000174 	.word	0x20000174
 8000dc0:	40012c00 	.word	0x40012c00

08000dc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b092      	sub	sp, #72	; 0x48
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e0e:	2207      	movs	r2, #7
 8000e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2c:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e2e:	f003 fcbb 	bl	80047a8 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e38:	f7ff fcea 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e46:	4619      	mov	r1, r3
 8000e48:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e4a:	f004 fcb9 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e54:	f7ff fcdc 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e5a:	f003 fd6d 	bl	8004938 <HAL_TIM_PWM_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000e64:	f7ff fcd4 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e68:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e6a:	f003 ff6f 	bl	8004d4c <HAL_TIM_IC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e74:	f7ff fccc 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000e88:	f005 fb4e 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e92:	f7ff fcbd 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000e9a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000eb2:	f004 fb71 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000ebc:	f7ff fca8 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000ed8:	f004 fac1 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000ee2:	f7ff fc95 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM2_Init+0x130>)
 8000ee8:	f000 fcd8 	bl	800189c <HAL_TIM_MspPostInit>

}
 8000eec:	bf00      	nop
 8000eee:	3748      	adds	r7, #72	; 0x48
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001c0 	.word	0x200001c0

08000ef8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b092      	sub	sp, #72	; 0x48
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f3a:	4a3c      	ldr	r2, [pc, #240]	; (800102c <MX_TIM3_Init+0x134>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5e:	4832      	ldr	r0, [pc, #200]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f60:	f003 fc22 	bl	80047a8 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f7ff fc51 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482b      	ldr	r0, [pc, #172]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f7c:	f004 fc20 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f86:	f7ff fc43 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f8c:	f003 fcd4 	bl	8004938 <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000f96:	f7ff fc3b 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f9a:	4823      	ldr	r0, [pc, #140]	; (8001028 <MX_TIM3_Init+0x130>)
 8000f9c:	f003 fed6 	bl	8004d4c <HAL_TIM_IC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f7ff fc33 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_TIM3_Init+0x130>)
 8000fba:	f005 fab5 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000fc4:	f7ff fc24 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc8:	2360      	movs	r3, #96	; 0x60
 8000fca:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000fcc:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_TIM3_Init+0x130>)
 8000fe4:	f004 fad8 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000fee:	f7ff fc0f 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	2204      	movs	r2, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM3_Init+0x130>)
 800100a:	f004 fa28 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001014:	f7ff fbfc 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM3_Init+0x130>)
 800101a:	f000 fc3f 	bl	800189c <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3748      	adds	r7, #72	; 0x48
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000020c 	.word	0x2000020c
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b092      	sub	sp, #72	; 0x48
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <MX_TIM4_Init+0x130>)
 8001072:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <MX_TIM4_Init+0x134>)
 8001074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <MX_TIM4_Init+0x130>)
 8001078:	2207      	movs	r2, #7
 800107a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b38      	ldr	r3, [pc, #224]	; (8001160 <MX_TIM4_Init+0x130>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <MX_TIM4_Init+0x130>)
 8001084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <MX_TIM4_Init+0x130>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_TIM4_Init+0x130>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001096:	4832      	ldr	r0, [pc, #200]	; (8001160 <MX_TIM4_Init+0x130>)
 8001098:	f003 fb86 	bl	80047a8 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80010a2:	f7ff fbb5 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b0:	4619      	mov	r1, r3
 80010b2:	482b      	ldr	r0, [pc, #172]	; (8001160 <MX_TIM4_Init+0x130>)
 80010b4:	f004 fb84 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010be:	f7ff fba7 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010c2:	4827      	ldr	r0, [pc, #156]	; (8001160 <MX_TIM4_Init+0x130>)
 80010c4:	f003 fc38 	bl	8004938 <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80010ce:	f7ff fb9f 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80010d2:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM4_Init+0x130>)
 80010d4:	f003 fe3a 	bl	8004d4c <HAL_TIM_IC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010de:	f7ff fb97 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ee:	4619      	mov	r1, r3
 80010f0:	481b      	ldr	r0, [pc, #108]	; (8001160 <MX_TIM4_Init+0x130>)
 80010f2:	f005 fa19 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80010fc:	f7ff fb88 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001104:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001108:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM4_Init+0x130>)
 800111c:	f004 fa3c 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8001126:	f7ff fb73 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800112e:	2301      	movs	r3, #1
 8001130:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2204      	movs	r2, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM4_Init+0x130>)
 8001142:	f004 f98c 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 800114c:	f7ff fb60 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM4_Init+0x130>)
 8001152:	f000 fba3 	bl	800189c <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3748      	adds	r7, #72	; 0x48
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000258 	.word	0x20000258
 8001164:	40000800 	.word	0x40000800

08001168 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b09e      	sub	sp, #120	; 0x78
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	222c      	movs	r2, #44	; 0x2c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00a f9c3 	bl	800b53c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011b6:	4b52      	ldr	r3, [pc, #328]	; (8001300 <MX_TIM8_Init+0x198>)
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <MX_TIM8_Init+0x19c>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80011bc:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MX_TIM8_Init+0x198>)
 80011be:	2207      	movs	r2, #7
 80011c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <MX_TIM8_Init+0x198>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <MX_TIM8_Init+0x198>)
 80011ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <MX_TIM8_Init+0x198>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <MX_TIM8_Init+0x198>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <MX_TIM8_Init+0x198>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011e2:	4847      	ldr	r0, [pc, #284]	; (8001300 <MX_TIM8_Init+0x198>)
 80011e4:	f003 fae0 	bl	80047a8 <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f7ff fb0f 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011fc:	4619      	mov	r1, r3
 80011fe:	4840      	ldr	r0, [pc, #256]	; (8001300 <MX_TIM8_Init+0x198>)
 8001200:	f004 fade 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800120a:	f7ff fb01 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800120e:	483c      	ldr	r0, [pc, #240]	; (8001300 <MX_TIM8_Init+0x198>)
 8001210:	f003 fb92 	bl	8004938 <HAL_TIM_PWM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800121a:	f7ff faf9 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800121e:	4838      	ldr	r0, [pc, #224]	; (8001300 <MX_TIM8_Init+0x198>)
 8001220:	f003 fd94 	bl	8004d4c <HAL_TIM_IC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800122a:	f7ff faf1 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800123a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800123e:	4619      	mov	r1, r3
 8001240:	482f      	ldr	r0, [pc, #188]	; (8001300 <MX_TIM8_Init+0x198>)
 8001242:	f005 f971 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 800124c:	f7ff fae0 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001250:	2360      	movs	r3, #96	; 0x60
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001254:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_TIM8_Init+0x198>)
 8001278:	f004 f98e 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8001282:	f7ff fac5 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <MX_TIM8_Init+0x198>)
 80012a0:	f004 f8dd 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80012aa:	f7ff fab1 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM8_Init+0x198>)
 80012e4:	f005 f9ac 	bl	8006640 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80012ee:	f7ff fa8f 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM8_Init+0x198>)
 80012f4:	f000 fad2 	bl	800189c <HAL_TIM_MspPostInit>

}
 80012f8:	bf00      	nop
 80012fa:	3778      	adds	r7, #120	; 0x78
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002a4 	.word	0x200002a4
 8001304:	40013400 	.word	0x40013400

08001308 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09e      	sub	sp, #120	; 0x78
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800133c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	222c      	movs	r2, #44	; 0x2c
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00a f8f3 	bl	800b53c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MX_TIM15_Init+0x188>)
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <MX_TIM15_Init+0x18c>)
 800135a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 800135c:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <MX_TIM15_Init+0x188>)
 800135e:	2207      	movs	r2, #7
 8001360:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <MX_TIM15_Init+0x188>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <MX_TIM15_Init+0x188>)
 800136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b47      	ldr	r3, [pc, #284]	; (8001490 <MX_TIM15_Init+0x188>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <MX_TIM15_Init+0x188>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <MX_TIM15_Init+0x188>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001382:	4843      	ldr	r0, [pc, #268]	; (8001490 <MX_TIM15_Init+0x188>)
 8001384:	f003 fa10 	bl	80047a8 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800138e:	f7ff fa3f 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800139c:	4619      	mov	r1, r3
 800139e:	483c      	ldr	r0, [pc, #240]	; (8001490 <MX_TIM15_Init+0x188>)
 80013a0:	f004 fa0e 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80013aa:	f7ff fa31 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013ae:	4838      	ldr	r0, [pc, #224]	; (8001490 <MX_TIM15_Init+0x188>)
 80013b0:	f003 fac2 	bl	8004938 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 80013ba:	f7ff fa29 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80013be:	4834      	ldr	r0, [pc, #208]	; (8001490 <MX_TIM15_Init+0x188>)
 80013c0:	f003 fcc4 	bl	8004d4c <HAL_TIM_IC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80013ca:	f7ff fa21 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013da:	4619      	mov	r1, r3
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <MX_TIM15_Init+0x188>)
 80013de:	f005 f8a3 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 80013e8:	f7ff fa12 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80013f0:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013fa:	2300      	movs	r3, #0
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	481f      	ldr	r0, [pc, #124]	; (8001490 <MX_TIM15_Init+0x188>)
 8001414:	f004 f8c0 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800141e:	f7ff f9f7 	bl	8000810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2204      	movs	r2, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_TIM15_Init+0x188>)
 800143c:	f004 f80f 	bl	800545e <HAL_TIM_IC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 8001446:	f7ff f9e3 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800145e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_TIM15_Init+0x188>)
 8001472:	f005 f8e5 	bl	8006640 <HAL_TIMEx_ConfigBreakDeadTime>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 800147c:	f7ff f9c8 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_TIM15_Init+0x188>)
 8001482:	f000 fa0b 	bl	800189c <HAL_TIM_MspPostInit>

}
 8001486:	bf00      	nop
 8001488:	3778      	adds	r7, #120	; 0x78
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200002f0 	.word	0x200002f0
 8001494:	40014000 	.word	0x40014000

08001498 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b092      	sub	sp, #72	; 0x48
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	222c      	movs	r2, #44	; 0x2c
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00a f83f 	bl	800b53c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <MX_TIM16_Init+0xec>)
 80014c0:	4a31      	ldr	r2, [pc, #196]	; (8001588 <MX_TIM16_Init+0xf0>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <MX_TIM16_Init+0xec>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_TIM16_Init+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <MX_TIM16_Init+0xec>)
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <MX_TIM16_Init+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_TIM16_Init+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <MX_TIM16_Init+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014ea:	4826      	ldr	r0, [pc, #152]	; (8001584 <MX_TIM16_Init+0xec>)
 80014ec:	f003 f95c 	bl	80047a8 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014f6:	f7ff f98b 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <MX_TIM16_Init+0xec>)
 80014fc:	f003 fa1c 	bl	8004938 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001506:	f7ff f983 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	; 0x60
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800150e:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_TIM16_Init+0xec>)
 8001532:	f004 f831 	bl	8005598 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800153c:	f7ff f968 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM16_Init+0xec>)
 8001568:	f005 f86a 	bl	8006640 <HAL_TIMEx_ConfigBreakDeadTime>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001572:	f7ff f94d 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM16_Init+0xec>)
 8001578:	f000 f990 	bl	800189c <HAL_TIM_MspPostInit>

}
 800157c:	bf00      	nop
 800157e:	3748      	adds	r7, #72	; 0x48
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000033c 	.word	0x2000033c
 8001588:	40014400 	.word	0x40014400

0800158c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4aa7      	ldr	r2, [pc, #668]	; (8001848 <HAL_TIM_Base_MspInit+0x2bc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d138      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	4ba7      	ldr	r3, [pc, #668]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4aa6      	ldr	r2, [pc, #664]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4ba4      	ldr	r3, [pc, #656]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4aa0      	ldr	r2, [pc, #640]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015de:	2302      	movs	r3, #2
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015ee:	2302      	movs	r3, #2
 80015f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4895      	ldr	r0, [pc, #596]	; (8001850 <HAL_TIM_Base_MspInit+0x2c4>)
 80015fa:	f001 fa59 	bl	8002ab0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2018      	movs	r0, #24
 8001604:	f001 f9b2 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001608:	2018      	movs	r0, #24
 800160a:	f001 f9cb 	bl	80029a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	201b      	movs	r0, #27
 8001614:	f001 f9aa 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001618:	201b      	movs	r0, #27
 800161a:	f001 f9c3 	bl	80029a4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800161e:	e134      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001628:	d131      	bne.n	800168e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a87      	ldr	r2, [pc, #540]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
 8001640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a81      	ldr	r2, [pc, #516]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800165a:	2302      	movs	r3, #2
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166a:	2301      	movs	r3, #1
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001678:	f001 fa1a 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2105      	movs	r1, #5
 8001680:	201c      	movs	r0, #28
 8001682:	f001 f973 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001686:	201c      	movs	r0, #28
 8001688:	f001 f98c 	bl	80029a4 <HAL_NVIC_EnableIRQ>
}
 800168c:	e0fd      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a70      	ldr	r2, [pc, #448]	; (8001854 <HAL_TIM_Base_MspInit+0x2c8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d131      	bne.n	80016fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001698:	4b6c      	ldr	r3, [pc, #432]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	4a6b      	ldr	r2, [pc, #428]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	61d3      	str	r3, [r2, #28]
 80016a4:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6153      	str	r3, [r2, #20]
 80016bc:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c8:	2310      	movs	r3, #16
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016d8:	2302      	movs	r3, #2
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f001 f9e3 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2105      	movs	r1, #5
 80016ee:	201d      	movs	r0, #29
 80016f0:	f001 f93c 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f4:	201d      	movs	r0, #29
 80016f6:	f001 f955 	bl	80029a4 <HAL_NVIC_EnableIRQ>
}
 80016fa:	e0c6      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_TIM_Base_MspInit+0x2cc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d132      	bne.n	800176c <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a50      	ldr	r2, [pc, #320]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a4a      	ldr	r2, [pc, #296]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001748:	230a      	movs	r3, #10
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f001 f9ab 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2105      	movs	r1, #5
 800175e:	201e      	movs	r0, #30
 8001760:	f001 f904 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001764:	201e      	movs	r0, #30
 8001766:	f001 f91d 	bl	80029a4 <HAL_NVIC_EnableIRQ>
}
 800176a:	e08e      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_TIM_Base_MspInit+0x2d0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d130      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a34      	ldr	r2, [pc, #208]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800177c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a2e      	ldr	r2, [pc, #184]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80017b6:	2304      	movs	r3, #4
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017be:	4619      	mov	r1, r3
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <HAL_TIM_Base_MspInit+0x2c4>)
 80017c2:	f001 f975 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	202e      	movs	r0, #46	; 0x2e
 80017cc:	f001 f8ce 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80017d0:	202e      	movs	r0, #46	; 0x2e
 80017d2:	f001 f8e7 	bl	80029a4 <HAL_NVIC_EnableIRQ>
}
 80017d6:	e058      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_TIM_Base_MspInit+0x2d4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d142      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_TIM_Base_MspInit+0x2c0>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001824:	2301      	movs	r3, #1
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <HAL_TIM_Base_MspInit+0x2d8>)
 8001830:	f001 f93e 	bl	8002ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2105      	movs	r1, #5
 8001838:	2018      	movs	r0, #24
 800183a:	f001 f897 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800183e:	2018      	movs	r0, #24
 8001840:	f001 f8b0 	bl	80029a4 <HAL_NVIC_EnableIRQ>
}
 8001844:	e021      	b.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40021000 	.word	0x40021000
 8001850:	48000800 	.word	0x48000800
 8001854:	40000400 	.word	0x40000400
 8001858:	40000800 	.word	0x40000800
 800185c:	40013400 	.word	0x40013400
 8001860:	40014000 	.word	0x40014000
 8001864:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0x308>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x30c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_TIM_Base_MspInit+0x30c>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_TIM_Base_MspInit+0x30c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40014400 	.word	0x40014400
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	; 0x38
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a79      	ldr	r2, [pc, #484]	; (8001aa0 <HAL_TIM_MspPostInit+0x204>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11c      	bne.n	80018f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a78      	ldr	r2, [pc, #480]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80018c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018de:	2302      	movs	r3, #2
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018e6:	2302      	movs	r3, #2
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	486d      	ldr	r0, [pc, #436]	; (8001aa8 <HAL_TIM_MspPostInit+0x20c>)
 80018f2:	f001 f8dd 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80018f6:	e0cf      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d11d      	bne.n	800193e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192a:	2301      	movs	r3, #1
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001938:	f001 f8ba 	bl	8002ab0 <HAL_GPIO_Init>
}
 800193c:	e0ac      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <HAL_TIM_MspPostInit+0x210>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d11d      	bne.n	8001984 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	4a55      	ldr	r2, [pc, #340]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 800194e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001952:	6153      	str	r3, [r2, #20]
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001968:	2302      	movs	r3, #2
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001970:	2302      	movs	r3, #2
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f001 f897 	bl	8002ab0 <HAL_GPIO_Init>
}
 8001982:	e089      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <HAL_TIM_MspPostInit+0x214>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d11e      	bne.n	80019cc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a44      	ldr	r2, [pc, #272]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	6153      	str	r3, [r2, #20]
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80019b8:	230a      	movs	r3, #10
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 f873 	bl	8002ab0 <HAL_GPIO_Init>
}
 80019ca:	e065      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <HAL_TIM_MspPostInit+0x218>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d11c      	bne.n	8001a10 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80019dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80019fe:	2304      	movs	r3, #4
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	4827      	ldr	r0, [pc, #156]	; (8001aa8 <HAL_TIM_MspPostInit+0x20c>)
 8001a0a:	f001 f851 	bl	8002ab0 <HAL_GPIO_Init>
}
 8001a0e:	e043      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <HAL_TIM_MspPostInit+0x21c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11d      	bne.n	8001a56 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001a44:	2301      	movs	r3, #1
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481b      	ldr	r0, [pc, #108]	; (8001abc <HAL_TIM_MspPostInit+0x220>)
 8001a50:	f001 f82e 	bl	8002ab0 <HAL_GPIO_Init>
}
 8001a54:	e020      	b.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_TIM_MspPostInit+0x224>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d11b      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6a:	6153      	str	r3, [r2, #20]
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_TIM_MspPostInit+0x208>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a78:	2310      	movs	r3, #16
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	480a      	ldr	r0, [pc, #40]	; (8001abc <HAL_TIM_MspPostInit+0x220>)
 8001a94:	f001 f80c 	bl	8002ab0 <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3738      	adds	r7, #56	; 0x38
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40013400 	.word	0x40013400
 8001ab8:	40014000 	.word	0x40014000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	40014400 	.word	0x40014400

08001ac4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_UART4_Init+0x58>)
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <MX_UART4_Init+0x5c>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_UART4_Init+0x58>)
 8001ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ad4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_UART4_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_UART4_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_UART4_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_UART4_Init+0x58>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_UART4_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_UART4_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_UART4_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_UART4_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_UART4_Init+0x58>)
 8001b08:	f004 fe3e 	bl	8006788 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b12:	f7fe fe7d 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000388 	.word	0x20000388
 8001b20:	40004c00 	.word	0x40004c00

08001b24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART2_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART2_UART_Init+0x58>)
 8001b68:	f004 fe0e 	bl	8006788 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f7fe fe4d 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000410 	.word	0x20000410
 8001b80:	40004400 	.word	0x40004400

08001b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <HAL_UART_MspInit+0xec>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d131      	bne.n	8001c0a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001be8:	2305      	movs	r3, #5
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <HAL_UART_MspInit+0xf4>)
 8001bf4:	f000 ff5c 	bl	8002ab0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2105      	movs	r1, #5
 8001bfc:	2034      	movs	r0, #52	; 0x34
 8001bfe:	f000 feb5 	bl	800296c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c02:	2034      	movs	r0, #52	; 0x34
 8001c04:	f000 fece 	bl	80029a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c08:	e02d      	b.n	8001c66 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_UART_MspInit+0xf8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d128      	bne.n	8001c66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1e:	61d3      	str	r3, [r2, #28]
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c36:	6153      	str	r3, [r2, #20]
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_UART_MspInit+0xf0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c44:	230c      	movs	r3, #12
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c54:	2307      	movs	r3, #7
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f000 ff25 	bl	8002ab0 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40004c00 	.word	0x40004c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	40004400 	.word	0x40004400

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c84:	f7fe ffbc 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f009 fcef 	bl	800b690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7fe fd17 	bl	80006e4 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001cc4:	0800c480 	.word	0x0800c480
  ldr r2, =_sbss
 8001cc8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001ccc:	20002840 	.word	0x20002840

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>
	...

08001cd4 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	printf("----------------------> is %c\n",temp);
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4827      	ldr	r0, [pc, #156]	; (8001d80 <HAL_UART_RxCpltCallback+0xac>)
 8001ce4:	f009 fae4 	bl	800b2b0 <iprintf>
	if( BLUETOOTH_CONDITION(temp) ){
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b46      	cmp	r3, #70	; 0x46
 8001cee:	d037      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b42      	cmp	r3, #66	; 0x42
 8001cf6:	d033      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b47      	cmp	r3, #71	; 0x47
 8001cfe:	d02f      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b49      	cmp	r3, #73	; 0x49
 8001d06:	d02b      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b48      	cmp	r3, #72	; 0x48
 8001d0e:	d027      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b4a      	cmp	r3, #74	; 0x4a
 8001d16:	d023      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b52      	cmp	r3, #82	; 0x52
 8001d1e:	d01f      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b4c      	cmp	r3, #76	; 0x4c
 8001d26:	d01b      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b53      	cmp	r3, #83	; 0x53
 8001d2e:	d017      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b23      	cmp	r3, #35	; 0x23
 8001d36:	d013      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d00f      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b21      	cmp	r3, #33	; 0x21
 8001d46:	d00b      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b57      	cmp	r3, #87	; 0x57
 8001d4e:	d007      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b55      	cmp	r3, #85	; 0x55
 8001d56:	d003      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x8c>
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b77      	cmp	r3, #119	; 0x77
 8001d5e:	d103      	bne.n	8001d68 <HAL_UART_RxCpltCallback+0x94>
		Bluetooth_RX_Data = temp;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_UART_RxCpltCallback+0xb0>)
 8001d66:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4904      	ldr	r1, [pc, #16]	; (8001d7c <HAL_UART_RxCpltCallback+0xa8>)
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f004 fd59 	bl	8006824 <HAL_UART_Receive_IT>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000498 	.word	0x20000498
 8001d80:	0800c248 	.word	0x0800c248
 8001d84:	20000064 	.word	0x20000064

08001d88 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e009      	b.n	8001dae <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	791b      	ldrb	r3, [r3, #4]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4904      	ldr	r1, [pc, #16]	; (8001db8 <ECU_Bluetooth_ReciveData+0x30>)
 8001da8:	f004 fd3c 	bl	8006824 <HAL_UART_Receive_IT>

	return ECU_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000498 	.word	0x20000498

08001dbc <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07e      	b.n	8001ed0 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10a      	bne.n	8001df0 <ECU_Motor_GeneratePWM+0x34>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e045      	b.n	8001e7c <ECU_Motor_GeneratePWM+0xc0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d10a      	bne.n	8001e0e <ECU_Motor_GeneratePWM+0x52>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e036      	b.n	8001e7c <ECU_Motor_GeneratePWM+0xc0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d10a      	bne.n	8001e2c <ECU_Motor_GeneratePWM+0x70>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e027      	b.n	8001e7c <ECU_Motor_GeneratePWM+0xc0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d10a      	bne.n	8001e4a <ECU_Motor_GeneratePWM+0x8e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	e018      	b.n	8001e7c <ECU_Motor_GeneratePWM+0xc0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d10a      	bne.n	8001e68 <ECU_Motor_GeneratePWM+0xac>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e009      	b.n	8001e7c <ECU_Motor_GeneratePWM+0xc0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e025      	b.n	8001ed0 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <ECU_Motor_GeneratePWM+0x11c>)
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb8:	ee17 2a90 	vmov	r2, s15
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f002 fd97 	bl	80049fc <HAL_TIM_PWM_Start>

	return ECU_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	000f4240 	.word	0x000f4240

08001edc <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <ECU_Motor_ChangeSpeed+0x16>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00b      	b.n	8001f0e <ECU_Motor_ChangeSpeed+0x32>
	}

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff58 	bl	8001dbc <ECU_Motor_GeneratePWM>

	return ECU_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <ECU_Motor_NextStep+0x16>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0a3      	b.n	800207a <ECU_Motor_NextStep+0x162>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3b21      	subs	r3, #33	; 0x21
 8001f38:	2b32      	cmp	r3, #50	; 0x32
 8001f3a:	f200 8099 	bhi.w	8002070 <ECU_Motor_NextStep+0x158>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <ECU_Motor_NextStep+0x2c>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08002069 	.word	0x08002069
 8001f48:	08002071 	.word	0x08002071
 8001f4c:	08002059 	.word	0x08002059
 8001f50:	08002071 	.word	0x08002071
 8001f54:	08002071 	.word	0x08002071
 8001f58:	08002071 	.word	0x08002071
 8001f5c:	08002071 	.word	0x08002071
 8001f60:	08002071 	.word	0x08002071
 8001f64:	08002071 	.word	0x08002071
 8001f68:	08002071 	.word	0x08002071
 8001f6c:	08002071 	.word	0x08002071
 8001f70:	08002071 	.word	0x08002071
 8001f74:	08002071 	.word	0x08002071
 8001f78:	08002071 	.word	0x08002071
 8001f7c:	08002071 	.word	0x08002071
 8001f80:	08002071 	.word	0x08002071
 8001f84:	08002071 	.word	0x08002071
 8001f88:	08002071 	.word	0x08002071
 8001f8c:	08002071 	.word	0x08002071
 8001f90:	08002071 	.word	0x08002071
 8001f94:	08002071 	.word	0x08002071
 8001f98:	08002071 	.word	0x08002071
 8001f9c:	08002071 	.word	0x08002071
 8001fa0:	08002071 	.word	0x08002071
 8001fa4:	08002071 	.word	0x08002071
 8001fa8:	08002071 	.word	0x08002071
 8001fac:	08002071 	.word	0x08002071
 8001fb0:	08002071 	.word	0x08002071
 8001fb4:	08002071 	.word	0x08002071
 8001fb8:	08002071 	.word	0x08002071
 8001fbc:	08002071 	.word	0x08002071
 8001fc0:	08002061 	.word	0x08002061
 8001fc4:	08002071 	.word	0x08002071
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	08002071 	.word	0x08002071
 8001fd0:	08002071 	.word	0x08002071
 8001fd4:	08002071 	.word	0x08002071
 8001fd8:	08002011 	.word	0x08002011
 8001fdc:	08002021 	.word	0x08002021
 8001fe0:	08002031 	.word	0x08002031
 8001fe4:	08002029 	.word	0x08002029
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	08002071 	.word	0x08002071
 8001ff0:	08002049 	.word	0x08002049
 8001ff4:	08002071 	.word	0x08002071
 8001ff8:	08002071 	.word	0x08002071
 8001ffc:	08002071 	.word	0x08002071
 8002000:	08002071 	.word	0x08002071
 8002004:	08002071 	.word	0x08002071
 8002008:	08002041 	.word	0x08002041
 800200c:	08002051 	.word	0x08002051
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f83d 	bl	8002090 <ECU_Motor_MoveForward>
 8002016:	e02f      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f861 	bl	80020e0 <ECU_Motor_MoveReverse>
 800201e:	e02b      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8bb 	bl	800219c <ECU_Motor_MoveForwardLeft>
 8002026:	e027      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f881 	bl	8002130 <ECU_Motor_MoveForwardRight>
 800202e:	e023      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f91f 	bl	8002274 <ECU_Motor_MoveReverseLeft>
 8002036:	e01f      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8e5 	bl	8002208 <ECU_Motor_MoveReverseRight>
 800203e:	e01b      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f983 	bl	800234c <ECU_Motor_MoveRight>
 8002046:	e017      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f9b5 	bl	80023b8 <ECU_Motor_MoveLeft>
 800204e:	e013      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f945 	bl	80022e0 <ECU_Motor_Stop>
 8002056:	e00f      	b.n	8002078 <ECU_Motor_NextStep+0x160>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8002058:	490a      	ldr	r1, [pc, #40]	; (8002084 <ECU_Motor_NextStep+0x16c>)
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff3e 	bl	8001edc <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 8002060:	4909      	ldr	r1, [pc, #36]	; (8002088 <ECU_Motor_NextStep+0x170>)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff3a 	bl	8001edc <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 8002068:	4908      	ldr	r1, [pc, #32]	; (800208c <ECU_Motor_NextStep+0x174>)
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff36 	bl	8001edc <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (motor_obj); break;
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f935 	bl	80022e0 <ECU_Motor_Stop>
 8002076:	bf00      	nop
	}

	return ECU_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000068 	.word	0x20000068
 8002088:	20000070 	.word	0x20000070
 800208c:	20000078 	.word	0x20000078

08002090 <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e018      	b.n	80020d4 <ECU_Motor_MoveForward+0x44>
	}

	printf("Motor_MoveForward\n");
 80020a2:	480e      	ldr	r0, [pc, #56]	; (80020dc <ECU_Motor_MoveForward+0x4c>)
 80020a4:	f009 f96a 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b2:	f000 fe87 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c0:	f000 fe80 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f000 fe79 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800c268 	.word	0x0800c268

080020e0 <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e018      	b.n	8002124 <ECU_Motor_MoveReverse+0x44>
	}

	printf("MoveReverse\n");
 80020f2:	480e      	ldr	r0, [pc, #56]	; (800212c <ECU_Motor_MoveReverse+0x4c>)
 80020f4:	f009 f942 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f000 fe5f 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002110:	f000 fe58 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f000 fe51 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	0800c27c 	.word	0x0800c27c

08002130 <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e024      	b.n	800218c <ECU_Motor_MoveForwardRight+0x5c>
	}

	printf("MoveForwardRight\n");
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <ECU_Motor_MoveForwardRight+0x64>)
 8002144:	f009 f91a 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002152:	f000 fe37 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215c:	480e      	ldr	r0, [pc, #56]	; (8002198 <ECU_Motor_MoveForwardRight+0x68>)
 800215e:	f000 fe31 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <ECU_Motor_MoveForwardRight+0x68>)
 800216a:	f000 fe2b 	bl	8002dc4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002178:	f000 fe24 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002186:	f000 fe1d 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0800c288 	.word	0x0800c288
 8002198:	48000800 	.word	0x48000800

0800219c <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e024      	b.n	80021f8 <ECU_Motor_MoveForwardLeft+0x5c>
	}

	printf("MoveForwardLeft\n");
 80021ae:	4814      	ldr	r0, [pc, #80]	; (8002200 <ECU_Motor_MoveForwardLeft+0x64>)
 80021b0:	f009 f8e4 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f000 fe01 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c8:	480e      	ldr	r0, [pc, #56]	; (8002204 <ECU_Motor_MoveForwardLeft+0x68>)
 80021ca:	f000 fdfb 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <ECU_Motor_MoveForwardLeft+0x68>)
 80021d6:	f000 fdf5 	bl	8002dc4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f000 fdee 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f000 fde7 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800c29c 	.word	0x0800c29c
 8002204:	48000800 	.word	0x48000800

08002208 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e024      	b.n	8002264 <ECU_Motor_MoveReverseRight+0x5c>
	}

	printf("MoveReverseRight\n");
 800221a:	4814      	ldr	r0, [pc, #80]	; (800226c <ECU_Motor_MoveReverseRight+0x64>)
 800221c:	f009 f8ae 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222a:	f000 fdcb 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002234:	480e      	ldr	r0, [pc, #56]	; (8002270 <ECU_Motor_MoveReverseRight+0x68>)
 8002236:	f000 fdc5 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <ECU_Motor_MoveReverseRight+0x68>)
 8002242:	f000 fdbf 	bl	8002dc4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f000 fdb8 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800225a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225e:	f000 fdb1 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800c2ac 	.word	0x0800c2ac
 8002270:	48000800 	.word	0x48000800

08002274 <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e024      	b.n	80022d0 <ECU_Motor_MoveReverseLeft+0x5c>
	}

	printf("MoveReverseLeft\n");
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <ECU_Motor_MoveReverseLeft+0x64>)
 8002288:	f009 f878 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002296:	f000 fd95 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a0:	480e      	ldr	r0, [pc, #56]	; (80022dc <ECU_Motor_MoveReverseLeft+0x68>)
 80022a2:	f000 fd8f 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	480b      	ldr	r0, [pc, #44]	; (80022dc <ECU_Motor_MoveReverseLeft+0x68>)
 80022ae:	f000 fd89 	bl	8002dc4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f000 fd82 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ca:	f000 fd7b 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	0800c2c0 	.word	0x0800c2c0
 80022dc:	48000800 	.word	0x48000800

080022e0 <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e024      	b.n	800233c <ECU_Motor_Stop+0x5c>
	}

	printf("Stop\n");
 80022f2:	4814      	ldr	r0, [pc, #80]	; (8002344 <ECU_Motor_Stop+0x64>)
 80022f4:	f009 f842 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f000 fd5f 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <ECU_Motor_Stop+0x68>)
 800230e:	f000 fd59 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002318:	480b      	ldr	r0, [pc, #44]	; (8002348 <ECU_Motor_Stop+0x68>)
 800231a:	f000 fd53 	bl	8002dc4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f000 fd4c 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002336:	f000 fd45 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	0800c2d0 	.word	0x0800c2d0
 8002348:	48000800 	.word	0x48000800

0800234c <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e024      	b.n	80023a8 <ECU_Motor_MoveRight+0x5c>
	}

	printf("MoveRight\n");
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <ECU_Motor_MoveRight+0x64>)
 8002360:	f009 f80c 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f000 fd29 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002378:	480e      	ldr	r0, [pc, #56]	; (80023b4 <ECU_Motor_MoveRight+0x68>)
 800237a:	f000 fd23 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002384:	480b      	ldr	r0, [pc, #44]	; (80023b4 <ECU_Motor_MoveRight+0x68>)
 8002386:	f000 fd1d 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002394:	f000 fd16 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f000 fd0f 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800c2d8 	.word	0x0800c2d8
 80023b4:	48000800 	.word	0x48000800

080023b8 <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e024      	b.n	8002414 <ECU_Motor_MoveLeft+0x5c>
	}

	printf("MoveLeft\n");
 80023ca:	4814      	ldr	r0, [pc, #80]	; (800241c <ECU_Motor_MoveLeft+0x64>)
 80023cc:	f008 ffd6 	bl	800b37c <puts>

	HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f000 fcf3 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e4:	480e      	ldr	r0, [pc, #56]	; (8002420 <ECU_Motor_MoveLeft+0x68>)
 80023e6:	f000 fced 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <ECU_Motor_MoveLeft+0x68>)
 80023f2:	f000 fce7 	bl	8002dc4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f000 fce0 	bl	8002dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240e:	f000 fcd9 	bl	8002dc4 <HAL_GPIO_WritePin>

	return ECU_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800c2e4 	.word	0x0800c2e4
 8002420:	48000800 	.word	0x48000800

08002424 <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7f1b      	ldrb	r3, [r3, #28]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d145      	bne.n	80024c0 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d114      	bne.n	800246e <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8002444:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800244e:	4413      	add	r3, r2
 8002450:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 800245a:	440a      	add	r2, r1
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8e4 	bl	800262c <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8002464:	2100      	movs	r1, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f002 fbd4 	bl	8004c14 <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 800246c:	e028      	b.n	80024c0 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002478:	5c9b      	ldrb	r3, [r3, r2]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d120      	bne.n	80024c0 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002488:	1899      	adds	r1, r3, r2
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002494:	441a      	add	r2, r3
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	480e      	ldr	r0, [pc, #56]	; (80024d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80024a0:	4418      	add	r0, r3
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461c      	mov	r4, r3
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_TIM_IC_CaptureCallback+0xa8>)
 80024ac:	4423      	add	r3, r4
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4603      	mov	r3, r0
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8e4 	bl	8002680 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80024b8:	2104      	movs	r1, #4
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f002 fdf2 	bl	80050a4 <HAL_TIM_IC_Stop_IT>
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	200004b4 	.word	0x200004b4
 80024cc:	200004b8 	.word	0x200004b8
 80024d0:	200004c0 	.word	0x200004c0
 80024d4:	200004d8 	.word	0x200004d8
 80024d8:	200004f0 	.word	0x200004f0

080024dc <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80024ee:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002518 <ECU_Ultrasonic_Read+0x3c>
 80024f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f810 	bl	800251c <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f002 fc82 	bl	8004e10 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	3a83126f 	.word	0x3a83126f

0800251c <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e077      	b.n	8002624 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <ECU_Ultrasonic_GenerateTrigger+0x36>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e045      	b.n	80025de <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d10a      	bne.n	8002570 <ECU_Ultrasonic_GenerateTrigger+0x54>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e036      	b.n	80025de <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d10a      	bne.n	800258e <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e027      	b.n	80025de <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d10a      	bne.n	80025ac <ECU_Ultrasonic_GenerateTrigger+0x90>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e018      	b.n	80025de <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d10a      	bne.n	80025ca <ECU_Ultrasonic_GenerateTrigger+0xae>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	e009      	b.n	80025de <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01e      	b.n	8002624 <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	ee17 2a90 	vmov	r2, s15
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f002 f9ed 	bl	80049fc <HAL_TIM_PWM_Start>

	return ECU_OK;;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002638:	2104      	movs	r1, #4
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f003 f98a 	bl	8005954 <HAL_TIM_ReadCapturedValue>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002664:	621a      	str	r2, [r3, #32]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800268e:	2104      	movs	r1, #4
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f003 f95f 	bl	8005954 <HAL_TIM_ReadCapturedValue>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d307      	bcc.n	80026c0 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e011      	b.n	80026e4 <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026ce:	33ff      	adds	r3, #255	; 0xff
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <IC_second_Capture+0xb8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	4619      	mov	r1, r3
 80026de:	4817      	ldr	r0, [pc, #92]	; (800273c <IC_second_Capture+0xbc>)
 80026e0:	f008 fde6 	bl	800b2b0 <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002740 <IC_second_Capture+0xc0>
 80026f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <IC_second_Capture+0xb8>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002704:	ee17 1a90 	vmov	r1, s15
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <IC_second_Capture+0xc4>)
 800270a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002722:	621a      	str	r2, [r3, #32]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a12      	ldr	r2, [r2, #32]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200004b4 	.word	0x200004b4
 800273c:	0800c2f0 	.word	0x0800c2f0
 8002740:	42680000 	.word	0x42680000
 8002744:	2000049c 	.word	0x2000049c

08002748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_Init+0x28>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_Init+0x28>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f8fc 	bl	8002956 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	200f      	movs	r0, #15
 8002760:	f7fe f884 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7fe f85a 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000084 	.word	0x20000084
 8002798:	20000508 	.word	0x20000508

0800279c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;  
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000508 	.word	0x20000508

080027b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000084 	.word	0x20000084

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff4c 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297e:	f7ff ff61 	bl	8002844 <__NVIC_GetPriorityGrouping>
 8002982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	6978      	ldr	r0, [r7, #20]
 800298a:	f7ff ffb1 	bl	80028f0 <NVIC_EncodePriority>
 800298e:	4602      	mov	r2, r0
 8002990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff80 	bl	800289c <__NVIC_SetPriority>
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff54 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d008      	beq.n	80029e4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2204      	movs	r2, #4
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e020      	b.n	8002a26 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020e 	bic.w	r2, r2, #14
 80029f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e027      	b.n	8002aa4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
    } 
  }
  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	e160      	b.n	8002d82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8152 	beq.w	8002d7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d005      	beq.n	8002af0 <HAL_GPIO_Init+0x40>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d130      	bne.n	8002b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b26:	2201      	movs	r2, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0201 	and.w	r2, r3, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d017      	beq.n	8002b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d123      	bne.n	8002be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	6939      	ldr	r1, [r7, #16]
 8002bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0203 	and.w	r2, r3, #3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80ac 	beq.w	8002d7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c24:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <HAL_GPIO_Init+0x2f0>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6193      	str	r3, [r2, #24]
 8002c30:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <HAL_GPIO_Init+0x2f0>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c3c:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_GPIO_Init+0x2f4>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c66:	d025      	beq.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a4f      	ldr	r2, [pc, #316]	; (8002da8 <HAL_GPIO_Init+0x2f8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01f      	beq.n	8002cb0 <HAL_GPIO_Init+0x200>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d019      	beq.n	8002cac <HAL_GPIO_Init+0x1fc>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d013      	beq.n	8002ca8 <HAL_GPIO_Init+0x1f8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_GPIO_Init+0x304>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00d      	beq.n	8002ca4 <HAL_GPIO_Init+0x1f4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_GPIO_Init+0x308>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <HAL_GPIO_Init+0x1f0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c98:	2306      	movs	r3, #6
 8002c9a:	e00c      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002c9c:	2307      	movs	r3, #7
 8002c9e:	e00a      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002ca0:	2305      	movs	r3, #5
 8002ca2:	e008      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc6:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_GPIO_Init+0x2f4>)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d22:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f ae97 	bne.w	8002ac0 <HAL_GPIO_Init+0x10>
  }
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010000 	.word	0x40010000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	48000c00 	.word	0x48000c00
 8002db4:	48001000 	.word	0x48001000
 8002db8:	48001400 	.word	0x48001400
 8002dbc:	48001800 	.word	0x48001800
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd4:	787b      	ldrb	r3, [r7, #1]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dda:	887a      	ldrh	r2, [r7, #2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f001 b83a 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 816f 	beq.w	800310e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e30:	4bb5      	ldr	r3, [pc, #724]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d00c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e3c:	4bb2      	ldr	r3, [pc, #712]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d15c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x10e>
 8002e48:	4baf      	ldr	r3, [pc, #700]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d155      	bne.n	8002f02 <HAL_RCC_OscConfig+0x10e>
 8002e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_OscConfig+0x94>
 8002e82:	4ba1      	ldr	r3, [pc, #644]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	e015      	b.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ea4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002eb0:	4b95      	ldr	r3, [pc, #596]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002ebc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002ec8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ecc:	fab2 f282 	clz	r2, r2
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f042 0220 	orr.w	r2, r2, #32
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f002 021f 	and.w	r2, r2, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8111 	beq.w	800310c <HAL_RCC_OscConfig+0x318>
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 8108 	bne.w	800310c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f000 bfc6 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12e>
 8002f14:	4b7c      	ldr	r3, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7b      	ldr	r2, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e036      	b.n	8002f90 <HAL_RCC_OscConfig+0x19c>
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x158>
 8002f32:	4b75      	ldr	r3, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a74      	ldr	r2, [pc, #464]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b72      	ldr	r3, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a71      	ldr	r2, [pc, #452]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e021      	b.n	8002f90 <HAL_RCC_OscConfig+0x19c>
 8002f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x184>
 8002f5e:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a69      	ldr	r2, [pc, #420]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a66      	ldr	r2, [pc, #408]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x19c>
 8002f78:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a62      	ldr	r2, [pc, #392]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b60      	ldr	r3, [pc, #384]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d059      	beq.n	8003054 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fbfc 	bl	800279c <HAL_GetTick>
 8002fa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002faa:	f7ff fbf7 	bl	800279c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d902      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	f000 bf67 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 8002fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002fd4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1fe>
 8002fec:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x22a>
 8002ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800300e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003022:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003026:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003032:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003036:	fab2 f282 	clz	r2, r2
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f042 0220 	orr.w	r2, r2, #32
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f002 021f 	and.w	r2, r2, #31
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ab      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b6>
 8003052:	e05c      	b.n	800310e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7ff fba2 	bl	800279c <HAL_GetTick>
 8003058:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305e:	f7ff fb9d 	bl	800279c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d902      	bls.n	8003074 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	f000 bf0d 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003088:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2b2>
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x2de>
 80030a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80030ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCC_OscConfig+0x314>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80030da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80030de:	fa92 f2a2 	rbit	r2, r2
 80030e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80030e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f002 021f 	and.w	r2, r2, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ab      	bne.n	800305e <HAL_RCC_OscConfig+0x26a>
 8003106:	e002      	b.n	800310e <HAL_RCC_OscConfig+0x31a>
 8003108:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 817f 	beq.w	8003422 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003124:	4ba7      	ldr	r3, [pc, #668]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003130:	4ba4      	ldr	r3, [pc, #656]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d173      	bne.n	8003224 <HAL_RCC_OscConfig+0x430>
 800313c:	4ba1      	ldr	r3, [pc, #644]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	d16c      	bne.n	8003224 <HAL_RCC_OscConfig+0x430>
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800315c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0x386>
 8003174:	4b93      	ldr	r3, [pc, #588]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e013      	b.n	80031a2 <HAL_RCC_OscConfig+0x3ae>
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800318c:	2302      	movs	r3, #2
 800318e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003192:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2202      	movs	r2, #2
 80031a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80031a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80031ac:	fa92 f2a2 	rbit	r2, r2
 80031b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80031b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f002 021f 	and.w	r2, r2, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCC_OscConfig+0x3f6>
 80031d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d002      	beq.n	80031ea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f000 be52 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	21f8      	movs	r1, #248	; 0xf8
 8003200:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003208:	fa91 f1a1 	rbit	r1, r1
 800320c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003210:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003214:	fab1 f181 	clz	r1, r1
 8003218:	b2c9      	uxtb	r1, r1
 800321a:	408b      	lsls	r3, r1
 800321c:	4969      	ldr	r1, [pc, #420]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	e0fe      	b.n	8003422 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8088 	beq.w	8003346 <HAL_RCC_OscConfig+0x552>
 8003236:	2301      	movs	r3, #1
 8003238:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003248:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003256:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	461a      	mov	r2, r3
 800325e:	2301      	movs	r3, #1
 8003260:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7ff fa9b 	bl	800279c <HAL_GetTick>
 8003266:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326c:	f7ff fa96 	bl	800279c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d902      	bls.n	8003282 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	f000 be06 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003282:	2302      	movs	r3, #2
 8003284:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003294:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x4be>
 80032ac:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e013      	b.n	80032da <HAL_RCC_OscConfig+0x4e6>
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032c4:	2302      	movs	r3, #2
 80032c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2202      	movs	r2, #2
 80032dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80032e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80032e4:	fa92 f2a2 	rbit	r2, r2
 80032e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80032ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f002 021f 	and.w	r2, r2, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f202 	lsl.w	r2, r1, r2
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0af      	beq.n	800326c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	21f8      	movs	r1, #248	; 0xf8
 8003322:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800332a:	fa91 f1a1 	rbit	r1, r1
 800332e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003332:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003336:	fab1 f181 	clz	r1, r1
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	408b      	lsls	r3, r1
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e06d      	b.n	8003422 <HAL_RCC_OscConfig+0x62e>
 8003346:	2301      	movs	r3, #1
 8003348:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003358:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	461a      	mov	r2, r3
 800336e:	2300      	movs	r3, #0
 8003370:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7ff fa13 	bl	800279c <HAL_GetTick>
 8003376:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7ff fa0e 	bl	800279c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d902      	bls.n	8003392 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f000 bd7e 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80033a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5d4>
 80033bc:	4b01      	ldr	r3, [pc, #4]	; (80033c4 <HAL_RCC_OscConfig+0x5d0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	e016      	b.n	80033f0 <HAL_RCC_OscConfig+0x5fc>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033ec:	4bbf      	ldr	r3, [pc, #764]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2202      	movs	r2, #2
 80033f2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003402:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003406:	fab2 f282 	clz	r2, r2
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f042 0220 	orr.w	r2, r2, #32
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	f002 021f 	and.w	r2, r2, #31
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ac      	bne.n	800337c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8113 	beq.w	800365e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d07c      	beq.n	8003542 <HAL_RCC_OscConfig+0x74e>
 8003448:	2301      	movs	r3, #1
 800344a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800345a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4ba2      	ldr	r3, [pc, #648]	; (80036f0 <HAL_RCC_OscConfig+0x8fc>)
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	461a      	mov	r2, r3
 800346e:	2301      	movs	r3, #1
 8003470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7ff f993 	bl	800279c <HAL_GetTick>
 8003476:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347c:	f7ff f98e 	bl	800279c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d902      	bls.n	8003492 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	f000 bcfe 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003492:	2302      	movs	r3, #2
 8003494:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034b2:	2202      	movs	r2, #2
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034d6:	2202      	movs	r2, #2
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	4b7e      	ldr	r3, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034fe:	2102      	movs	r1, #2
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003506:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f1a3 	rbit	r1, r3
 8003510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003514:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003518:	6019      	str	r1, [r3, #0]
  return result;
 800351a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d09d      	beq.n	800347c <HAL_RCC_OscConfig+0x688>
 8003540:	e08d      	b.n	800365e <HAL_RCC_OscConfig+0x86a>
 8003542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003546:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003552:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003560:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003564:	601a      	str	r2, [r3, #0]
  return result;
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800356e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <HAL_RCC_OscConfig+0x8fc>)
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7ff f90a 	bl	800279c <HAL_GetTick>
 8003588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358e:	f7ff f905 	bl	800279c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	f000 bc75 	b.w	8003e8e <HAL_RCC_OscConfig+0x109a>
 80035a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035ac:	2202      	movs	r2, #2
 80035ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035d0:	2202      	movs	r2, #2
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800360e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 8003612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003618:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800361c:	2102      	movs	r1, #2
 800361e:	6019      	str	r1, [r3, #0]
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f1a3 	rbit	r1, r3
 800362e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003632:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003636:	6019      	str	r1, [r3, #0]
  return result;
 8003638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d197      	bne.n	800358e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 81a5 	beq.w	80039be <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	61d3      	str	r3, [r2, #28]
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCC_OscConfig+0x8f8>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800369a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_RCC_OscConfig+0x900>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d121      	bne.n	8003704 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_RCC_OscConfig+0x900>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x900>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7ff f866 	bl	800279c <HAL_GetTick>
 80036d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	e010      	b.n	80036f8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7ff f861 	bl	800279c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d908      	bls.n	80036f8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e3d1      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	10908120 	.word	0x10908120
 80036f4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <HAL_RCC_OscConfig+0xb3c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0e8      	beq.n	80036d6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003708:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x92e>
 8003714:	4b87      	ldr	r3, [pc, #540]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4a86      	ldr	r2, [pc, #536]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6213      	str	r3, [r2, #32]
 8003720:	e035      	b.n	800378e <HAL_RCC_OscConfig+0x99a>
 8003722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x958>
 8003732:	4b80      	ldr	r3, [pc, #512]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a7f      	ldr	r2, [pc, #508]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	4b7d      	ldr	r3, [pc, #500]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a7c      	ldr	r2, [pc, #496]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	e020      	b.n	800378e <HAL_RCC_OscConfig+0x99a>
 800374c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d10c      	bne.n	8003776 <HAL_RCC_OscConfig+0x982>
 800375c:	4b75      	ldr	r3, [pc, #468]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a74      	ldr	r2, [pc, #464]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a71      	ldr	r2, [pc, #452]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	e00b      	b.n	800378e <HAL_RCC_OscConfig+0x99a>
 8003776:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	4a6e      	ldr	r2, [pc, #440]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6213      	str	r3, [r2, #32]
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4a6b      	ldr	r2, [pc, #428]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8081 	beq.w	80038a2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7fe fffc 	bl	800279c <HAL_GetTick>
 80037a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fff7 	bl	800279c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e365      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 80037c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003804:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003812:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d102      	bne.n	800382e <HAL_RCC_OscConfig+0xa3a>
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	e013      	b.n	8003856 <HAL_RCC_OscConfig+0xa62>
 800382e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003832:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003836:	2202      	movs	r2, #2
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fa93 f2a3 	rbit	r2, r3
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800385a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800385e:	2102      	movs	r1, #2
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003866:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	fa92 f1a2 	rbit	r1, r2
 8003870:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003874:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003878:	6011      	str	r1, [r2, #0]
  return result;
 800387a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800387e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d084      	beq.n	80037aa <HAL_RCC_OscConfig+0x9b6>
 80038a0:	e083      	b.n	80039aa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe ff7b 	bl	800279c <HAL_GetTick>
 80038a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ac:	f7fe ff76 	bl	800279c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e2e4      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 80038c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038cc:	2202      	movs	r2, #2
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003906:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800390a:	601a      	str	r2, [r3, #0]
  return result;
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003914:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0xb44>
 800392a:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_OscConfig+0xb40>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	e017      	b.n	8003960 <HAL_RCC_OscConfig+0xb6c>
 8003930:	40007000 	.word	0x40007000
 8003934:	40021000 	.word	0x40021000
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003948:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003956:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4bb3      	ldr	r3, [pc, #716]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003964:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003968:	2102      	movs	r1, #2
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003970:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	fa92 f1a2 	rbit	r1, r2
 800397a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800397e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003982:	6011      	str	r1, [r2, #0]
  return result;
 8003984:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003988:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d180      	bne.n	80038ac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039aa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d105      	bne.n	80039be <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b2:	4b9e      	ldr	r3, [pc, #632]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a9d      	ldr	r2, [pc, #628]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 825e 	beq.w	8003e8c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b96      	ldr	r3, [pc, #600]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f000 821f 	beq.w	8003e1c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f040 8170 	bne.w	8003cd0 <HAL_RCC_OscConfig+0xedc>
 80039f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a14:	601a      	str	r2, [r3, #0]
  return result;
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a1e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe feb1 	bl	800279c <HAL_GetTick>
 8003a3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3e:	e009      	b.n	8003a54 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe feac 	bl	800279c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e21c      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a58:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	fa93 f2a3 	rbit	r2, r3
 8003a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a78:	601a      	str	r2, [r3, #0]
  return result;
 8003a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_OscConfig+0xcaa>
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	e027      	b.n	8003aee <HAL_RCC_OscConfig+0xcfa>
 8003a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003af2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003af6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003afa:	6011      	str	r1, [r2, #0]
 8003afc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	fa92 f1a2 	rbit	r1, r2
 8003b0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b0e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003b12:	6011      	str	r1, [r2, #0]
  return result;
 8003b14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b18:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	fab2 f282 	clz	r2, r2
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f042 0220 	orr.w	r2, r2, #32
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f002 021f 	and.w	r2, r2, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d182      	bne.n	8003a40 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f023 020f 	bic.w	r2, r3, #15
 8003b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	4937      	ldr	r1, [pc, #220]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a19      	ldr	r1, [r3, #32]
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	492d      	ldr	r1, [pc, #180]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
 8003b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ba0:	601a      	str	r2, [r3, #0]
  return result;
 8003ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003baa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fdeb 	bl	800279c <HAL_GetTick>
 8003bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bca:	e009      	b.n	8003be0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fde6 	bl	800279c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e156      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f2a3 	rbit	r2, r3
 8003bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003c04:	601a      	str	r2, [r3, #0]
  return result;
 8003c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003c0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d105      	bne.n	8003c30 <HAL_RCC_OscConfig+0xe3c>
 8003c24:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <HAL_RCC_OscConfig+0xe38>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	e02a      	b.n	8003c80 <HAL_RCC_OscConfig+0xe8c>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c50:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c68:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fa93 f2a3 	rbit	r2, r3
 8003c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c76:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	4b86      	ldr	r3, [pc, #536]	; (8003e98 <HAL_RCC_OscConfig+0x10a4>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c8c:	6011      	str	r1, [r2, #0]
 8003c8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c92:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	fa92 f1a2 	rbit	r1, r2
 8003c9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ca0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003ca4:	6011      	str	r1, [r2, #0]
  return result;
 8003ca6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003caa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f042 0220 	orr.w	r2, r2, #32
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	f002 021f 	and.w	r2, r2, #31
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f43f af7f 	beq.w	8003bcc <HAL_RCC_OscConfig+0xdd8>
 8003cce:	e0dd      	b.n	8003e8c <HAL_RCC_OscConfig+0x1098>
 8003cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cf4:	601a      	str	r2, [r3, #0]
  return result;
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cfe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe fd41 	bl	800279c <HAL_GetTick>
 8003d1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fd3c 	bl	800279c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0ac      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
 8003d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d46:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d58:	601a      	str	r2, [r3, #0]
  return result;
 8003d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_OscConfig+0xf8a>
 8003d78:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_OscConfig+0x10a4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	e027      	b.n	8003dce <HAL_RCC_OscConfig+0xfda>
 8003d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d82:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	fa93 f2a3 	rbit	r2, r3
 8003d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f2a3 	rbit	r2, r3
 8003dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x10a4>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dd2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003dd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dda:	6011      	str	r1, [r2, #0]
 8003ddc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003de0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	fa92 f1a2 	rbit	r1, r2
 8003dea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003df2:	6011      	str	r1, [r2, #0]
  return result;
 8003df4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	fab2 f282 	clz	r2, r2
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f002 021f 	and.w	r2, r2, #31
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d182      	bne.n	8003d20 <HAL_RCC_OscConfig+0xf2c>
 8003e1a:	e037      	b.n	8003e8c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e02e      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_OscConfig+0x10a4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_RCC_OscConfig+0x10a4>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e44:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d117      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e5c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b09e      	sub	sp, #120	; 0x78
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e162      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b90      	ldr	r3, [pc, #576]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d910      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	498b      	ldr	r1, [pc, #556]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e14a      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef0:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	497f      	ldr	r1, [pc, #508]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80dc 	beq.w	80040c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d13c      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xf6>
 8003f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xa6>
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e00f      	b.n	8003f62 <HAL_RCC_ClockConfig+0xc6>
 8003f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
 8003f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f6a:	fa92 f2a2 	rbit	r2, r2
 8003f6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f72:	fab2 f282 	clz	r2, r2
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	f042 0220 	orr.w	r2, r2, #32
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	f002 021f 	and.w	r2, r2, #31
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f202 	lsl.w	r2, r1, r2
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d17b      	bne.n	8004086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0f3      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d13c      	bne.n	8004014 <HAL_RCC_ClockConfig+0x178>
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x128>
 8003fbe:	4b4f      	ldr	r3, [pc, #316]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	e00f      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x148>
 8003fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fec:	fa92 f2a2 	rbit	r2, r2
 8003ff0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	f042 0220 	orr.w	r2, r2, #32
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f002 021f 	and.w	r2, r2, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d13a      	bne.n	8004086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0b2      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
 8004014:	2302      	movs	r3, #2
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b01      	cmp	r3, #1
 8004034:	d102      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	e00d      	b.n	8004058 <HAL_RCC_ClockConfig+0x1bc>
 800403c:	2302      	movs	r3, #2
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	2302      	movs	r3, #2
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	2202      	movs	r2, #2
 800405a:	61ba      	str	r2, [r7, #24]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	fa92 f2a2 	rbit	r2, r2
 8004062:	617a      	str	r2, [r7, #20]
  return result;
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	fab2 f282 	clz	r2, r2
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	f042 0220 	orr.w	r2, r2, #32
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	f002 021f 	and.w	r2, r2, #31
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e079      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	491a      	ldr	r1, [pc, #104]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004098:	f7fe fb80 	bl	800279c <HAL_GetTick>
 800409c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fe fb7c 	bl	800279c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e061      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d214      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4906      	ldr	r1, [pc, #24]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e040      	b.n	800417a <HAL_RCC_ClockConfig+0x2de>
 80040f8:	40022000 	.word	0x40022000
 80040fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_RCC_ClockConfig+0x2e8>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	491a      	ldr	r1, [pc, #104]	; (8004184 <HAL_RCC_ClockConfig+0x2e8>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b16      	ldr	r3, [pc, #88]	; (8004184 <HAL_RCC_ClockConfig+0x2e8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4912      	ldr	r1, [pc, #72]	; (8004184 <HAL_RCC_ClockConfig+0x2e8>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800413e:	f000 f829 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004142:	4601      	mov	r1, r0
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCC_ClockConfig+0x2e8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	22f0      	movs	r2, #240	; 0xf0
 800414e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	fa92 f2a2 	rbit	r2, r2
 8004156:	60fa      	str	r2, [r7, #12]
  return result;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	fab2 f282 	clz	r2, r2
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	40d3      	lsrs	r3, r2
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x2ec>)
 8004164:	5cd3      	ldrb	r3, [r2, r3]
 8004166:	fa21 f303 	lsr.w	r3, r1, r3
 800416a:	4a08      	ldr	r2, [pc, #32]	; (800418c <HAL_RCC_ClockConfig+0x2f0>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCC_ClockConfig+0x2f4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fb7a 	bl	800086c <HAL_InitTick>
  
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3778      	adds	r7, #120	; 0x78
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	0800c40c 	.word	0x0800c40c
 800418c:	20000060 	.word	0x20000060
 8004190:	20000080 	.word	0x20000080

08004194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b08b      	sub	sp, #44	; 0x2c
 8004198:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	2300      	movs	r3, #0
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80041ae:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d002      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x30>
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0x36>
 80041c2:	e03f      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCC_GetSysClockFreq+0xc8>)
 80041c6:	623b      	str	r3, [r7, #32]
      break;
 80041c8:	e03f      	b.n	800424a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80041d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80041d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	fa92 f2a2 	rbit	r2, r2
 80041dc:	607a      	str	r2, [r7, #4]
  return result;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	fab2 f282 	clz	r2, r2
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	40d3      	lsrs	r3, r2
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041ea:	5cd3      	ldrb	r3, [r2, r3]
 80041ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	220f      	movs	r2, #15
 80041f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	fa92 f2a2 	rbit	r2, r2
 8004200:	60fa      	str	r2, [r7, #12]
  return result;
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	fab2 f282 	clz	r2, r2
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	40d3      	lsrs	r3, r2
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <HAL_RCC_GetSysClockFreq+0xd0>)
 800420e:	5cd3      	ldrb	r3, [r2, r3]
 8004210:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800421c:	4a0f      	ldr	r2, [pc, #60]	; (800425c <HAL_RCC_GetSysClockFreq+0xc8>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	fbb2 f2f3 	udiv	r2, r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	e007      	b.n	800423e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fbb2 f2f3 	udiv	r2, r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	623b      	str	r3, [r7, #32]
      break;
 8004242:	e002      	b.n	800424a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004246:	623b      	str	r3, [r7, #32]
      break;
 8004248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424a:	6a3b      	ldr	r3, [r7, #32]
}
 800424c:	4618      	mov	r0, r3
 800424e:	372c      	adds	r7, #44	; 0x2c
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40021000 	.word	0x40021000
 800425c:	007a1200 	.word	0x007a1200
 8004260:	0800c424 	.word	0x0800c424
 8004264:	0800c434 	.word	0x0800c434

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000060 	.word	0x20000060

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004286:	f7ff ffef 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 800428a:	4601      	mov	r1, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004294:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004298:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	fa92 f2a2 	rbit	r2, r2
 80042a0:	603a      	str	r2, [r7, #0]
  return result;
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	fab2 f282 	clz	r2, r2
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	40d3      	lsrs	r3, r2
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	0800c41c 	.word	0x0800c41c

080042c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80042ca:	f7ff ffcd 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80042d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80042dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	fa92 f2a2 	rbit	r2, r2
 80042e4:	603a      	str	r2, [r7, #0]
  return result;
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	fab2 f282 	clz	r2, r2
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	40d3      	lsrs	r3, r2
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x40>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800c41c 	.word	0x0800c41c

08004308 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	220f      	movs	r2, #15
 8004316:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_RCC_GetClockConfig+0x60>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	40022000 	.word	0x40022000

0800436c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b092      	sub	sp, #72	; 0x48
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80d4 	beq.w	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10e      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439c:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	4a4a      	ldr	r2, [pc, #296]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	61d3      	str	r3, [r2, #28]
 80043a8:	4b48      	ldr	r3, [pc, #288]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ba:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d118      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c6:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a41      	ldr	r2, [pc, #260]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d2:	f7fe f9e3 	bl	800279c <HAL_GetTick>
 80043d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fe f9df 	bl	800279c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1d6      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043f8:	4b34      	ldr	r3, [pc, #208]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8084 	beq.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004414:	429a      	cmp	r2, r3
 8004416:	d07c      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	461a      	mov	r2, r3
 8004442:	2301      	movs	r3, #1
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	461a      	mov	r2, r3
 8004466:	2300      	movs	r3, #0
 8004468:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d04b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fe f98f 	bl	800279c <HAL_GetTick>
 800447e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fe f98b 	bl	800279c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e180      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004498:	2302      	movs	r3, #2
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	2302      	movs	r3, #2
 80044a6:	623b      	str	r3, [r7, #32]
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
  return result;
 80044b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d108      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80044c6:	4b01      	ldr	r3, [pc, #4]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	e00d      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40007000 	.word	0x40007000
 80044d4:	10908100 	.word	0x10908100
 80044d8:	2302      	movs	r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	4b9a      	ldr	r3, [pc, #616]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2202      	movs	r2, #2
 80044ea:	613a      	str	r2, [r7, #16]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	fa92 f2a2 	rbit	r2, r2
 80044f2:	60fa      	str	r2, [r7, #12]
  return result;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	fab2 f282 	clz	r2, r2
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f002 021f 	and.w	r2, r2, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0b7      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004512:	4b8f      	ldr	r3, [pc, #572]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	498c      	ldr	r1, [pc, #560]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4a87      	ldr	r2, [pc, #540]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004544:	4b82      	ldr	r3, [pc, #520]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	f023 0203 	bic.w	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	497f      	ldr	r1, [pc, #508]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004562:	4b7b      	ldr	r3, [pc, #492]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4978      	ldr	r1, [pc, #480]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004580:	4b73      	ldr	r3, [pc, #460]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	4970      	ldr	r1, [pc, #448]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800459e:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4969      	ldr	r1, [pc, #420]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80045bc:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	4961      	ldr	r1, [pc, #388]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045da:	4b5d      	ldr	r3, [pc, #372]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f023 0220 	bic.w	r2, r3, #32
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	495a      	ldr	r1, [pc, #360]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f8:	4b55      	ldr	r3, [pc, #340]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	4952      	ldr	r1, [pc, #328]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004616:	4b4e      	ldr	r3, [pc, #312]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	494b      	ldr	r1, [pc, #300]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004634:	4b46      	ldr	r3, [pc, #280]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4943      	ldr	r1, [pc, #268]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004652:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	493c      	ldr	r1, [pc, #240]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004670:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	4934      	ldr	r1, [pc, #208]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	492d      	ldr	r1, [pc, #180]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	4925      	ldr	r1, [pc, #148]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80046ca:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	491e      	ldr	r1, [pc, #120]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	490f      	ldr	r1, [pc, #60]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	4907      	ldr	r1, [pc, #28]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	4913      	ldr	r1, [pc, #76]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	490b      	ldr	r1, [pc, #44]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004794:	4313      	orrs	r3, r2
 8004796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3748      	adds	r7, #72	; 0x48
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e049      	b.n	800484e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fedc 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f001 f916 	bl	8005a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04f      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a23      	ldr	r2, [pc, #140]	; (800491c <HAL_TIM_Base_Start_IT+0xc4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d018      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_TIM_Base_Start_IT+0xc8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_TIM_Base_Start_IT+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_TIM_Base_Start_IT+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_TIM_Base_Start_IT+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_TIM_Base_Start_IT+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d015      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d011      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e008      	b.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40015000 	.word	0x40015000
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e049      	b.n	80049de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f841 	bl	80049e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f001 f84e 	bl	8005a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start+0x24>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e03c      	b.n	8004a9a <HAL_TIM_PWM_Start+0x9e>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d109      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x3e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e02f      	b.n	8004a9a <HAL_TIM_PWM_Start+0x9e>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start+0x58>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e022      	b.n	8004a9a <HAL_TIM_PWM_Start+0x9e>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d109      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x72>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e015      	b.n	8004a9a <HAL_TIM_PWM_Start+0x9e>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d109      	bne.n	8004a88 <HAL_TIM_PWM_Start+0x8c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e008      	b.n	8004a9a <HAL_TIM_PWM_Start+0x9e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0a1      	b.n	8004be6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xb6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab0:	e023      	b.n	8004afa <HAL_TIM_PWM_Start+0xfe>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xc6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	e01b      	b.n	8004afa <HAL_TIM_PWM_Start+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xd6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	e013      	b.n	8004afa <HAL_TIM_PWM_Start+0xfe>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d104      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0xe6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae0:	e00b      	b.n	8004afa <HAL_TIM_PWM_Start+0xfe>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_PWM_Start+0xf6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af0:	e003      	b.n	8004afa <HAL_TIM_PWM_Start+0xfe>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fcea 	bl	80064dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_TIM_PWM_Start+0x1f4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x148>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a37      	ldr	r2, [pc, #220]	; (8004bf4 <HAL_TIM_PWM_Start+0x1f8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x148>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	; (8004bf8 <HAL_TIM_PWM_Start+0x1fc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x148>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <HAL_TIM_PWM_Start+0x200>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x148>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <HAL_TIM_PWM_Start+0x204>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_TIM_PWM_Start+0x148>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a31      	ldr	r2, [pc, #196]	; (8004c04 <HAL_TIM_PWM_Start+0x208>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x14c>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_TIM_PWM_Start+0x14e>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_TIM_PWM_Start+0x1f4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01d      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d018      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <HAL_TIM_PWM_Start+0x20c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_TIM_PWM_Start+0x210>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIM_PWM_Start+0x1f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_TIM_PWM_Start+0x1fc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x1a8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <HAL_TIM_PWM_Start+0x208>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d115      	bne.n	8004bd0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_TIM_PWM_Start+0x214>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d015      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x1e6>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d011      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e008      	b.n	8004be2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40015000 	.word	0x40015000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	00010007 	.word	0x00010007

08004c14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fc58 	bl	80064dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <HAL_TIM_PWM_Stop+0x120>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x54>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	; (8004d38 <HAL_TIM_PWM_Stop+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x54>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3d      	ldr	r2, [pc, #244]	; (8004d3c <HAL_TIM_PWM_Stop+0x128>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x54>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3c      	ldr	r2, [pc, #240]	; (8004d40 <HAL_TIM_PWM_Stop+0x12c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x54>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <HAL_TIM_PWM_Stop+0x130>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_PWM_Stop+0x54>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a39      	ldr	r2, [pc, #228]	; (8004d48 <HAL_TIM_PWM_Stop+0x134>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_PWM_Stop+0x58>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_TIM_PWM_Stop+0x5a>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d017      	beq.n	8004ca2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_TIM_PWM_Stop+0x8e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1a      	ldr	r2, [r3, #32]
 8004c88:	f240 4344 	movw	r3, #1092	; 0x444
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_PWM_Stop+0x8e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_TIM_PWM_Stop+0xbe>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	f240 4344 	movw	r3, #1092	; 0x444
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_PWM_Stop+0xbe>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_PWM_Stop+0xce>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce0:	e023      	b.n	8004d2a <HAL_TIM_PWM_Stop+0x116>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Stop+0xde>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	e01b      	b.n	8004d2a <HAL_TIM_PWM_Stop+0x116>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_PWM_Stop+0xee>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d00:	e013      	b.n	8004d2a <HAL_TIM_PWM_Stop+0x116>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Stop+0xfe>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d10:	e00b      	b.n	8004d2a <HAL_TIM_PWM_Stop+0x116>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_PWM_Stop+0x10e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d20:	e003      	b.n	8004d2a <HAL_TIM_PWM_Stop+0x116>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	40015000 	.word	0x40015000

08004d4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e049      	b.n	8004df2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f841 	bl	8004dfa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 fe44 	bl	8005a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_IC_Start_IT+0x1e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e023      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x66>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Start_IT+0x2e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e01b      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x66>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_IC_Start_IT+0x3e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e013      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x66>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_IC_Start_IT+0x4e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e00b      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x66>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_IC_Start_IT+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e003      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x66>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_TIM_IC_Start_IT+0x78>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e013      	b.n	8004eb0 <HAL_TIM_IC_Start_IT+0xa0>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d104      	bne.n	8004e98 <HAL_TIM_IC_Start_IT+0x88>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e00b      	b.n	8004eb0 <HAL_TIM_IC_Start_IT+0xa0>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d104      	bne.n	8004ea8 <HAL_TIM_IC_Start_IT+0x98>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e003      	b.n	8004eb0 <HAL_TIM_IC_Start_IT+0xa0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d102      	bne.n	8004ebe <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb8:	7b7b      	ldrb	r3, [r7, #13]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0dd      	b.n	800507e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_IC_Start_IT+0xc2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed0:	e023      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x10a>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_IC_Start_IT+0xd2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	e01b      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x10a>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_IC_Start_IT+0xe2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x10a>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_IC_Start_IT+0xf2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x10a>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_IC_Start_IT+0x102>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x10a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0x11a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f28:	e013      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x142>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_IC_Start_IT+0x12a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f38:	e00b      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x142>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_IC_Start_IT+0x13a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f48:	e003      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x142>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d841      	bhi.n	8004fdc <HAL_TIM_IC_Start_IT+0x1cc>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <HAL_TIM_IC_Start_IT+0x150>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004fdd 	.word	0x08004fdd
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08004fdd 	.word	0x08004fdd
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004fdd 	.word	0x08004fdd
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	08004fcb 	.word	0x08004fcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0202 	orr.w	r2, r2, #2
 8004fa2:	60da      	str	r2, [r3, #12]
      break;
 8004fa4:	e01d      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0204 	orr.w	r2, r2, #4
 8004fb4:	60da      	str	r2, [r3, #12]
      break;
 8004fb6:	e014      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	60da      	str	r2, [r3, #12]
      break;
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0210 	orr.w	r2, r2, #16
 8004fd8:	60da      	str	r2, [r3, #12]
      break;
 8004fda:	e002      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d149      	bne.n	800507c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2201      	movs	r2, #1
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 fa73 	bl	80064dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a23      	ldr	r2, [pc, #140]	; (8005088 <HAL_TIM_IC_Start_IT+0x278>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d01d      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d018      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_TIM_IC_Start_IT+0x27c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIM_IC_Start_IT+0x280>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00e      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIM_IC_Start_IT+0x284>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_TIM_IC_Start_IT+0x288>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIM_IC_Start_IT+0x22c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_TIM_IC_Start_IT+0x28c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d115      	bne.n	8005068 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_TIM_IC_Start_IT+0x290>)
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b06      	cmp	r3, #6
 800504c:	d015      	beq.n	800507a <HAL_TIM_IC_Start_IT+0x26a>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d011      	beq.n	800507a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	e008      	b.n	800507a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e000      	b.n	800507c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40015000 	.word	0x40015000
 80050a0:	00010007 	.word	0x00010007

080050a4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d841      	bhi.n	800513c <HAL_TIM_IC_Stop_IT+0x98>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	0800513d 	.word	0x0800513d
 80050c8:	0800513d 	.word	0x0800513d
 80050cc:	0800513d 	.word	0x0800513d
 80050d0:	08005107 	.word	0x08005107
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	0800513d 	.word	0x0800513d
 80050e0:	08005119 	.word	0x08005119
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800512b 	.word	0x0800512b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0202 	bic.w	r2, r2, #2
 8005102:	60da      	str	r2, [r3, #12]
      break;
 8005104:	e01d      	b.n	8005142 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0204 	bic.w	r2, r2, #4
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e014      	b.n	8005142 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0208 	bic.w	r2, r2, #8
 8005126:	60da      	str	r2, [r3, #12]
      break;
 8005128:	e00b      	b.n	8005142 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0210 	bic.w	r2, r2, #16
 8005138:	60da      	str	r2, [r3, #12]
      break;
 800513a:	e002      	b.n	8005142 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
      break;
 8005140:	bf00      	nop
  }

  if (status == HAL_OK)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d166      	bne.n	8005216 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f9c3 	bl	80064dc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_TIM_IC_Stop_IT+0xe2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	f240 4344 	movw	r3, #1092	; 0x444
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IC_Stop_IT+0xe2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Stop_IT+0xf2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	e023      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x13a>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_IC_Stop_IT+0x102>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	e01b      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x13a>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_IC_Stop_IT+0x112>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	e013      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x13a>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Stop_IT+0x122>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c4:	e00b      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x13a>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Stop_IT+0x132>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d4:	e003      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x13a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_IC_Stop_IT+0x14a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ec:	e013      	b.n	8005216 <HAL_TIM_IC_Stop_IT+0x172>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_IC_Stop_IT+0x15a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051fc:	e00b      	b.n	8005216 <HAL_TIM_IC_Stop_IT+0x172>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d104      	bne.n	800520e <HAL_TIM_IC_Stop_IT+0x16a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800520c:	e003      	b.n	8005216 <HAL_TIM_IC_Stop_IT+0x172>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0202 	mvn.w	r2, #2
 800524c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fd f8de 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbb6 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fbbd 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b04      	cmp	r3, #4
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0204 	mvn.w	r2, #4
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd f8b4 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb8c 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb93 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0208 	mvn.w	r2, #8
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2204      	movs	r2, #4
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd f88a 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb62 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb69 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0210 	mvn.w	r2, #16
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2208      	movs	r2, #8
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fd f860 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb38 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb3f 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0201 	mvn.w	r2, #1
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fa24 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f9c8 	bl	8006760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f9bb 	bl	8006774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 faed 	bl	8005a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d10e      	bne.n	8005456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b20      	cmp	r3, #32
 8005444:	d107      	bne.n	8005456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0220 	mvn.w	r2, #32
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f97b 	bl	800674c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005478:	2302      	movs	r3, #2
 800547a:	e088      	b.n	800558e <HAL_TIM_IC_ConfigChannel+0x130>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11b      	bne.n	80054c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800549a:	f000 fe61 	bl	8006160 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 020c 	bic.w	r2, r2, #12
 80054ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6999      	ldr	r1, [r3, #24]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	619a      	str	r2, [r3, #24]
 80054c0:	e060      	b.n	8005584 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d11c      	bne.n	8005502 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80054d8:	f000 fedf 	bl	800629a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	619a      	str	r2, [r3, #24]
 8005500:	e040      	b.n	8005584 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005518:	f000 ff2c 	bl	8006374 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 020c 	bic.w	r2, r2, #12
 800552a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69d9      	ldr	r1, [r3, #28]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	61da      	str	r2, [r3, #28]
 800553e:	e021      	b.n	8005584 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d11c      	bne.n	8005580 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005556:	f000 ff49 	bl	80063ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005568:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
 800557e:	e001      	b.n	8005584 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800558c:	7dfb      	ldrb	r3, [r7, #23]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0ff      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b14      	cmp	r3, #20
 80055c2:	f200 80f0 	bhi.w	80057a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005621 	.word	0x08005621
 80055d0:	080057a7 	.word	0x080057a7
 80055d4:	080057a7 	.word	0x080057a7
 80055d8:	080057a7 	.word	0x080057a7
 80055dc:	08005661 	.word	0x08005661
 80055e0:	080057a7 	.word	0x080057a7
 80055e4:	080057a7 	.word	0x080057a7
 80055e8:	080057a7 	.word	0x080057a7
 80055ec:	080056a3 	.word	0x080056a3
 80055f0:	080057a7 	.word	0x080057a7
 80055f4:	080057a7 	.word	0x080057a7
 80055f8:	080057a7 	.word	0x080057a7
 80055fc:	080056e3 	.word	0x080056e3
 8005600:	080057a7 	.word	0x080057a7
 8005604:	080057a7 	.word	0x080057a7
 8005608:	080057a7 	.word	0x080057a7
 800560c:	08005725 	.word	0x08005725
 8005610:	080057a7 	.word	0x080057a7
 8005614:	080057a7 	.word	0x080057a7
 8005618:	080057a7 	.word	0x080057a7
 800561c:	08005765 	.word	0x08005765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa94 	bl	8005b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0208 	orr.w	r2, r2, #8
 800563a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0204 	bic.w	r2, r2, #4
 800564a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6999      	ldr	r1, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	619a      	str	r2, [r3, #24]
      break;
 800565e:	e0a5      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fb0e 	bl	8005c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6999      	ldr	r1, [r3, #24]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	619a      	str	r2, [r3, #24]
      break;
 80056a0:	e084      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fb81 	bl	8005db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0208 	orr.w	r2, r2, #8
 80056bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0204 	bic.w	r2, r2, #4
 80056cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69d9      	ldr	r1, [r3, #28]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	61da      	str	r2, [r3, #28]
      break;
 80056e0:	e064      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fbf3 	bl	8005ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69d9      	ldr	r1, [r3, #28]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	021a      	lsls	r2, r3, #8
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	61da      	str	r2, [r3, #28]
      break;
 8005722:	e043      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fc42 	bl	8005fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0208 	orr.w	r2, r2, #8
 800573e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0204 	bic.w	r2, r2, #4
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005762:	e023      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fc8c 	bl	8006088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	021a      	lsls	r2, r3, #8
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057a4:	e002      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	75fb      	strb	r3, [r7, #23]
      break;
 80057aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop

080057c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_ConfigClockSource+0x1c>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0b6      	b.n	800594a <HAL_TIM_ConfigClockSource+0x18a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005818:	d03e      	beq.n	8005898 <HAL_TIM_ConfigClockSource+0xd8>
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	f200 8087 	bhi.w	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	f000 8086 	beq.w	8005936 <HAL_TIM_ConfigClockSource+0x176>
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582e:	d87f      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005830:	2b70      	cmp	r3, #112	; 0x70
 8005832:	d01a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0xaa>
 8005834:	2b70      	cmp	r3, #112	; 0x70
 8005836:	d87b      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d050      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x11e>
 800583c:	2b60      	cmp	r3, #96	; 0x60
 800583e:	d877      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d03c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xfe>
 8005844:	2b50      	cmp	r3, #80	; 0x50
 8005846:	d873      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d058      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x13e>
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d86f      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d064      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15e>
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d86b      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d060      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15e>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d867      	bhi.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d05c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15e>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d05a      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x15e>
 8005868:	e062      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800587a:	f000 fe0f 	bl	800649c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800588c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	609a      	str	r2, [r3, #8]
      break;
 8005896:	e04f      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	f000 fdf8 	bl	800649c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ba:	609a      	str	r2, [r3, #8]
      break;
 80058bc:	e03c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fcb6 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2150      	movs	r1, #80	; 0x50
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fdc5 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e02c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fd12 	bl	8006314 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2160      	movs	r1, #96	; 0x60
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fdb5 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 80058fc:	e01c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fc96 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fda5 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 800591c:	e00c      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f000 fd9c 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 800592e:	e003      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e000      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d831      	bhi.n	80059cc <HAL_TIM_ReadCapturedValue+0x78>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <HAL_TIM_ReadCapturedValue+0x1c>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059cd 	.word	0x080059cd
 800597c:	080059cd 	.word	0x080059cd
 8005980:	080059af 	.word	0x080059af
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059cd 	.word	0x080059cd
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059cd 	.word	0x080059cd
 800599c:	080059cd 	.word	0x080059cd
 80059a0:	080059c3 	.word	0x080059c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	60fb      	str	r3, [r7, #12]

      break;
 80059ac:	e00f      	b.n	80059ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	60fb      	str	r3, [r7, #12]

      break;
 80059b6:	e00a      	b.n	80059ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	60fb      	str	r3, [r7, #12]

      break;
 80059c0:	e005      	b.n	80059ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	60fb      	str	r3, [r7, #12]

      break;
 80059ca:	e000      	b.n	80059ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059cc:	bf00      	nop
  }

  return tmpreg;
 80059ce:	68fb      	ldr	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a42      	ldr	r2, [pc, #264]	; (8005b34 <TIM_Base_SetConfig+0x11c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d00f      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3f      	ldr	r2, [pc, #252]	; (8005b38 <TIM_Base_SetConfig+0x120>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00b      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3e      	ldr	r2, [pc, #248]	; (8005b3c <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d007      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a3d      	ldr	r2, [pc, #244]	; (8005b40 <TIM_Base_SetConfig+0x128>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a3c      	ldr	r2, [pc, #240]	; (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d108      	bne.n	8005a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a31      	ldr	r2, [pc, #196]	; (8005b34 <TIM_Base_SetConfig+0x11c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01f      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d01b      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <TIM_Base_SetConfig+0x120>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d017      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2d      	ldr	r2, [pc, #180]	; (8005b3c <TIM_Base_SetConfig+0x124>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <TIM_Base_SetConfig+0x128>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00f      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <TIM_Base_SetConfig+0x130>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00b      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2b      	ldr	r2, [pc, #172]	; (8005b4c <TIM_Base_SetConfig+0x134>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d007      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <TIM_Base_SetConfig+0x138>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <TIM_Base_SetConfig+0x11c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_Base_SetConfig+0x100>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <TIM_Base_SetConfig+0x128>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x100>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <TIM_Base_SetConfig+0x130>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x100>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a12      	ldr	r2, [pc, #72]	; (8005b4c <TIM_Base_SetConfig+0x134>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x100>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a11      	ldr	r2, [pc, #68]	; (8005b50 <TIM_Base_SetConfig+0x138>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x100>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <TIM_Base_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	615a      	str	r2, [r3, #20]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40015000 	.word	0x40015000
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 0302 	bic.w	r3, r3, #2
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a30      	ldr	r2, [pc, #192]	; (8005c70 <TIM_OC1_SetConfig+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <TIM_OC1_SetConfig+0x88>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <TIM_OC1_SetConfig+0x120>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00f      	beq.n	8005bdc <TIM_OC1_SetConfig+0x88>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a2e      	ldr	r2, [pc, #184]	; (8005c78 <TIM_OC1_SetConfig+0x124>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC1_SetConfig+0x88>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <TIM_OC1_SetConfig+0x128>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC1_SetConfig+0x88>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2c      	ldr	r2, [pc, #176]	; (8005c80 <TIM_OC1_SetConfig+0x12c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC1_SetConfig+0x88>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2b      	ldr	r2, [pc, #172]	; (8005c84 <TIM_OC1_SetConfig+0x130>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10c      	bne.n	8005bf6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0308 	bic.w	r3, r3, #8
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f023 0304 	bic.w	r3, r3, #4
 8005bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <TIM_OC1_SetConfig+0x11c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_OC1_SetConfig+0xd2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <TIM_OC1_SetConfig+0x120>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_OC1_SetConfig+0xd2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <TIM_OC1_SetConfig+0x124>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_OC1_SetConfig+0xd2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <TIM_OC1_SetConfig+0x128>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC1_SetConfig+0xd2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_OC1_SetConfig+0x12c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC1_SetConfig+0xd2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_OC1_SetConfig+0x130>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d111      	bne.n	8005c4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	621a      	str	r2, [r3, #32]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800
 8005c84:	40015000 	.word	0x40015000

08005c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0210 	bic.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0320 	bic.w	r3, r3, #32
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2c      	ldr	r2, [pc, #176]	; (8005d98 <TIM_OC2_SetConfig+0x110>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d007      	beq.n	8005cfc <TIM_OC2_SetConfig+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <TIM_OC2_SetConfig+0x114>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC2_SetConfig+0x74>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	; (8005da0 <TIM_OC2_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <TIM_OC2_SetConfig+0x110>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <TIM_OC2_SetConfig+0xc0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <TIM_OC2_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <TIM_OC2_SetConfig+0xc0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <TIM_OC2_SetConfig+0x11c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_OC2_SetConfig+0xc0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <TIM_OC2_SetConfig+0x120>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_OC2_SetConfig+0xc0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <TIM_OC2_SetConfig+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC2_SetConfig+0xc0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <TIM_OC2_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d113      	bne.n	8005d70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d56:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40015000 	.word	0x40015000
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40014800 	.word	0x40014800

08005db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2b      	ldr	r2, [pc, #172]	; (8005ebc <TIM_OC3_SetConfig+0x10c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_OC3_SetConfig+0x72>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <TIM_OC3_SetConfig+0x110>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC3_SetConfig+0x72>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <TIM_OC3_SetConfig+0x114>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10d      	bne.n	8005e3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <TIM_OC3_SetConfig+0x10c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_OC3_SetConfig+0xbe>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <TIM_OC3_SetConfig+0x110>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC3_SetConfig+0xbe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <TIM_OC3_SetConfig+0x118>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC3_SetConfig+0xbe>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <TIM_OC3_SetConfig+0x11c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC3_SetConfig+0xbe>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	; (8005ed0 <TIM_OC3_SetConfig+0x120>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC3_SetConfig+0xbe>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <TIM_OC3_SetConfig+0x114>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d113      	bne.n	8005e96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40015000 	.word	0x40015000
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400
 8005ed0:	40014800 	.word	0x40014800

08005ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <TIM_OC4_SetConfig+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <TIM_OC4_SetConfig+0x8c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <TIM_OC4_SetConfig+0xcc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00f      	beq.n	8005f60 <TIM_OC4_SetConfig+0x8c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <TIM_OC4_SetConfig+0xd0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_OC4_SetConfig+0x8c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <TIM_OC4_SetConfig+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_OC4_SetConfig+0x8c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a16      	ldr	r2, [pc, #88]	; (8005fac <TIM_OC4_SetConfig+0xd8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC4_SetConfig+0x8c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <TIM_OC4_SetConfig+0xdc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d109      	bne.n	8005f74 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	019b      	lsls	r3, r3, #6
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800
 8005fb0:	40015000 	.word	0x40015000

08005fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <TIM_OC5_SetConfig+0xbc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_OC5_SetConfig+0x82>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a18      	ldr	r2, [pc, #96]	; (8006074 <TIM_OC5_SetConfig+0xc0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_OC5_SetConfig+0x82>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <TIM_OC5_SetConfig+0xc4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_OC5_SetConfig+0x82>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a16      	ldr	r2, [pc, #88]	; (800607c <TIM_OC5_SetConfig+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_OC5_SetConfig+0x82>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <TIM_OC5_SetConfig+0xcc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC5_SetConfig+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <TIM_OC5_SetConfig+0xd0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d109      	bne.n	800604a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800
 8006084:	40015000 	.word	0x40015000

08006088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	051b      	lsls	r3, r3, #20
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <TIM_OC6_SetConfig+0xc0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <TIM_OC6_SetConfig+0x84>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a19      	ldr	r2, [pc, #100]	; (800614c <TIM_OC6_SetConfig+0xc4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC6_SetConfig+0x84>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a18      	ldr	r2, [pc, #96]	; (8006150 <TIM_OC6_SetConfig+0xc8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC6_SetConfig+0x84>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a17      	ldr	r2, [pc, #92]	; (8006154 <TIM_OC6_SetConfig+0xcc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC6_SetConfig+0x84>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a16      	ldr	r2, [pc, #88]	; (8006158 <TIM_OC6_SetConfig+0xd0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC6_SetConfig+0x84>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a15      	ldr	r2, [pc, #84]	; (800615c <TIM_OC6_SetConfig+0xd4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d109      	bne.n	8006120 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40013400 	.word	0x40013400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800
 800615c:	40015000 	.word	0x40015000

08006160 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a26      	ldr	r2, [pc, #152]	; (8006224 <TIM_TI1_SetConfig+0xc4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d017      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d013      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <TIM_TI1_SetConfig+0xc8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00f      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a22      	ldr	r2, [pc, #136]	; (800622c <TIM_TI1_SetConfig+0xcc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00b      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a21      	ldr	r2, [pc, #132]	; (8006230 <TIM_TI1_SetConfig+0xd0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a20      	ldr	r2, [pc, #128]	; (8006234 <TIM_TI1_SetConfig+0xd4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_TI1_SetConfig+0x5e>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <TIM_TI1_SetConfig+0xd8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d101      	bne.n	80061c2 <TIM_TI1_SetConfig+0x62>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <TIM_TI1_SetConfig+0x64>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e003      	b.n	80061e2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f023 030a 	bic.w	r3, r3, #10
 80061fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f003 030a 	and.w	r3, r3, #10
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40015000 	.word	0x40015000

0800623c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f023 0210 	bic.w	r2, r3, #16
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	031b      	lsls	r3, r3, #12
 80062de:	b29b      	uxth	r3, r3
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	621a      	str	r2, [r3, #32]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0210 	bic.w	r2, r3, #16
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800633e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	031b      	lsls	r3, r3, #12
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 0303 	bic.w	r3, r3, #3
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800642a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	031b      	lsls	r3, r3, #12
 8006430:	b29b      	uxth	r3, r3
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800643e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	031b      	lsls	r3, r3, #12
 8006444:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 0307 	orr.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2201      	movs	r2, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	401a      	ands	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e06d      	b.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a30      	ldr	r2, [pc, #192]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2f      	ldr	r2, [pc, #188]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d018      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a16      	ldr	r2, [pc, #88]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a11      	ldr	r2, [pc, #68]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10c      	bne.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40013400 	.word	0x40013400
 8006630:	40015000 	.word	0x40015000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40014000 	.word	0x40014000

08006640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006658:	2302      	movs	r3, #2
 800665a:	e06a      	b.n	8006732 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d009      	beq.n	80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a17      	ldr	r2, [pc, #92]	; (8006744 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d115      	bne.n	8006720 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	051b      	lsls	r3, r3, #20
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40015000 	.word	0x40015000

0800674c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e040      	b.n	800681c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fb f9ea 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	; 0x24
 80067b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb76 	bl	8006eb8 <UART_SetConfig>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e022      	b.n	800681c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fd3e 	bl	8007260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fdc5 	bl	80073a4 <UART_CheckIdleState>
 800681a:	4603      	mov	r3, r0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006838:	2b20      	cmp	r3, #32
 800683a:	d132      	bne.n	80068a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_UART_Receive_IT+0x24>
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e02b      	b.n	80068a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d018      	beq.n	8006892 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	613b      	str	r3, [r7, #16]
   return(result);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	623b      	str	r3, [r7, #32]
 8006880:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	69f9      	ldr	r1, [r7, #28]
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	61bb      	str	r3, [r7, #24]
   return(result);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	461a      	mov	r2, r3
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fe93 	bl	80075c4 <UART_Start_Receive_IT>
 800689e:	4603      	mov	r3, r0
 80068a0:	e000      	b.n	80068a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
  }
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3728      	adds	r7, #40	; 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b0ba      	sub	sp, #232	; 0xe8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80068da:	4013      	ands	r3, r2
 80068dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d115      	bne.n	8006914 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00f      	beq.n	8006914 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 82ab 	beq.w	8006e60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
      }
      return;
 8006912:	e2a5      	b.n	8006e60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8117 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800691e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800692a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800692e:	4b85      	ldr	r3, [pc, #532]	; (8006b44 <HAL_UART_IRQHandler+0x298>)
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 810a 	beq.w	8006b4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d011      	beq.n	8006968 <HAL_UART_IRQHandler+0xbc>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2201      	movs	r2, #1
 8006956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d011      	beq.n	8006998 <HAL_UART_IRQHandler+0xec>
 8006974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2202      	movs	r2, #2
 8006986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d011      	beq.n	80069c8 <HAL_UART_IRQHandler+0x11c>
 80069a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2204      	movs	r2, #4
 80069b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069be:	f043 0202 	orr.w	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d017      	beq.n	8006a04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2208      	movs	r2, #8
 80069f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069fa:	f043 0208 	orr.w	r2, r3, #8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d012      	beq.n	8006a36 <HAL_UART_IRQHandler+0x18a>
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8211 	beq.w	8006e64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d005      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04f      	beq.n	8006b2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fe5e 	bl	8007750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d141      	bne.n	8006b26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1d9      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d013      	beq.n	8006b1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <HAL_UART_IRQHandler+0x29c>)
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fb ff95 	bl	8002a32 <HAL_DMA_Abort_IT>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	e00f      	b.n	8006b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9b4 	bl	8006e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	e00b      	b.n	8006b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9b0 	bl	8006e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e007      	b.n	8006b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9ac 	bl	8006e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006b3c:	e192      	b.n	8006e64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3e:	bf00      	nop
    return;
 8006b40:	e190      	b.n	8006e64 <HAL_UART_IRQHandler+0x5b8>
 8006b42:	bf00      	nop
 8006b44:	04000120 	.word	0x04000120
 8006b48:	08007819 	.word	0x08007819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 814b 	bne.w	8006dec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8144 	beq.w	8006dec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 813d 	beq.w	8006dec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2210      	movs	r2, #16
 8006b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	f040 80b5 	bne.w	8006cf4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 8164 	beq.w	8006e68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006baa:	429a      	cmp	r2, r3
 8006bac:	f080 815c 	bcs.w	8006e68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	f000 8086 	beq.w	8006cd2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1da      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e1      	bne.n	8006c10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fb fe77 	bl	80029c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8d7 	bl	8006ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cf2:	e0b9      	b.n	8006e68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80ab 	beq.w	8006e6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80a6 	beq.w	8006e6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
 8006d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e4      	bne.n	8006d20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e3      	bne.n	8006d56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0310 	bic.w	r3, r3, #16
 8006db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f85b 	bl	8006ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dea:	e03f      	b.n	8006e6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <HAL_UART_IRQHandler+0x56a>
 8006df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 feea 	bl	8007be8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e14:	e02d      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01c      	beq.n	8006e70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
    }
    return;
 8006e3e:	e017      	b.n	8006e70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d012      	beq.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fcf3 	bl	8007844 <UART_EndTransmit_IT>
    return;
 8006e5e:	e008      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e60:	bf00      	nop
 8006e62:	e006      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006e64:	bf00      	nop
 8006e66:	e004      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e68:	bf00      	nop
 8006e6a:	e002      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e6c:	bf00      	nop
 8006e6e:	e000      	b.n	8006e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006e70:	bf00      	nop
  }

}
 8006e72:	37e8      	adds	r7, #232	; 0xe8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b92      	ldr	r3, [pc, #584]	; (800712c <UART_SetConfig+0x274>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	6979      	ldr	r1, [r7, #20]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a80      	ldr	r2, [pc, #512]	; (8007130 <UART_SetConfig+0x278>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d120      	bne.n	8006f76 <UART_SetConfig+0xbe>
 8006f34:	4b7f      	ldr	r3, [pc, #508]	; (8007134 <UART_SetConfig+0x27c>)
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d817      	bhi.n	8006f70 <UART_SetConfig+0xb8>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x90>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006f65 	.word	0x08006f65
 8006f50:	08006f6b 	.word	0x08006f6b
 8006f54:	08006f5f 	.word	0x08006f5f
 8006f58:	2301      	movs	r3, #1
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e0b5      	b.n	80070ca <UART_SetConfig+0x212>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	77fb      	strb	r3, [r7, #31]
 8006f62:	e0b2      	b.n	80070ca <UART_SetConfig+0x212>
 8006f64:	2304      	movs	r3, #4
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e0af      	b.n	80070ca <UART_SetConfig+0x212>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	77fb      	strb	r3, [r7, #31]
 8006f6e:	e0ac      	b.n	80070ca <UART_SetConfig+0x212>
 8006f70:	2310      	movs	r3, #16
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e0a9      	b.n	80070ca <UART_SetConfig+0x212>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6f      	ldr	r2, [pc, #444]	; (8007138 <UART_SetConfig+0x280>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d124      	bne.n	8006fca <UART_SetConfig+0x112>
 8006f80:	4b6c      	ldr	r3, [pc, #432]	; (8007134 <UART_SetConfig+0x27c>)
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f8c:	d011      	beq.n	8006fb2 <UART_SetConfig+0xfa>
 8006f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f92:	d817      	bhi.n	8006fc4 <UART_SetConfig+0x10c>
 8006f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f98:	d011      	beq.n	8006fbe <UART_SetConfig+0x106>
 8006f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f9e:	d811      	bhi.n	8006fc4 <UART_SetConfig+0x10c>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <UART_SetConfig+0xf4>
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	d006      	beq.n	8006fb8 <UART_SetConfig+0x100>
 8006faa:	e00b      	b.n	8006fc4 <UART_SetConfig+0x10c>
 8006fac:	2300      	movs	r3, #0
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e08b      	b.n	80070ca <UART_SetConfig+0x212>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e088      	b.n	80070ca <UART_SetConfig+0x212>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e085      	b.n	80070ca <UART_SetConfig+0x212>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	e082      	b.n	80070ca <UART_SetConfig+0x212>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	77fb      	strb	r3, [r7, #31]
 8006fc8:	e07f      	b.n	80070ca <UART_SetConfig+0x212>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a5b      	ldr	r2, [pc, #364]	; (800713c <UART_SetConfig+0x284>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d124      	bne.n	800701e <UART_SetConfig+0x166>
 8006fd4:	4b57      	ldr	r3, [pc, #348]	; (8007134 <UART_SetConfig+0x27c>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006fdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fe0:	d011      	beq.n	8007006 <UART_SetConfig+0x14e>
 8006fe2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fe6:	d817      	bhi.n	8007018 <UART_SetConfig+0x160>
 8006fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fec:	d011      	beq.n	8007012 <UART_SetConfig+0x15a>
 8006fee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ff2:	d811      	bhi.n	8007018 <UART_SetConfig+0x160>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <UART_SetConfig+0x148>
 8006ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ffc:	d006      	beq.n	800700c <UART_SetConfig+0x154>
 8006ffe:	e00b      	b.n	8007018 <UART_SetConfig+0x160>
 8007000:	2300      	movs	r3, #0
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e061      	b.n	80070ca <UART_SetConfig+0x212>
 8007006:	2302      	movs	r3, #2
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e05e      	b.n	80070ca <UART_SetConfig+0x212>
 800700c:	2304      	movs	r3, #4
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e05b      	b.n	80070ca <UART_SetConfig+0x212>
 8007012:	2308      	movs	r3, #8
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e058      	b.n	80070ca <UART_SetConfig+0x212>
 8007018:	2310      	movs	r3, #16
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e055      	b.n	80070ca <UART_SetConfig+0x212>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a47      	ldr	r2, [pc, #284]	; (8007140 <UART_SetConfig+0x288>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d124      	bne.n	8007072 <UART_SetConfig+0x1ba>
 8007028:	4b42      	ldr	r3, [pc, #264]	; (8007134 <UART_SetConfig+0x27c>)
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007034:	d011      	beq.n	800705a <UART_SetConfig+0x1a2>
 8007036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800703a:	d817      	bhi.n	800706c <UART_SetConfig+0x1b4>
 800703c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007040:	d011      	beq.n	8007066 <UART_SetConfig+0x1ae>
 8007042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007046:	d811      	bhi.n	800706c <UART_SetConfig+0x1b4>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <UART_SetConfig+0x19c>
 800704c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007050:	d006      	beq.n	8007060 <UART_SetConfig+0x1a8>
 8007052:	e00b      	b.n	800706c <UART_SetConfig+0x1b4>
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e037      	b.n	80070ca <UART_SetConfig+0x212>
 800705a:	2302      	movs	r3, #2
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e034      	b.n	80070ca <UART_SetConfig+0x212>
 8007060:	2304      	movs	r3, #4
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e031      	b.n	80070ca <UART_SetConfig+0x212>
 8007066:	2308      	movs	r3, #8
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e02e      	b.n	80070ca <UART_SetConfig+0x212>
 800706c:	2310      	movs	r3, #16
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e02b      	b.n	80070ca <UART_SetConfig+0x212>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a33      	ldr	r2, [pc, #204]	; (8007144 <UART_SetConfig+0x28c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d124      	bne.n	80070c6 <UART_SetConfig+0x20e>
 800707c:	4b2d      	ldr	r3, [pc, #180]	; (8007134 <UART_SetConfig+0x27c>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007088:	d011      	beq.n	80070ae <UART_SetConfig+0x1f6>
 800708a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800708e:	d817      	bhi.n	80070c0 <UART_SetConfig+0x208>
 8007090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007094:	d011      	beq.n	80070ba <UART_SetConfig+0x202>
 8007096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800709a:	d811      	bhi.n	80070c0 <UART_SetConfig+0x208>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <UART_SetConfig+0x1f0>
 80070a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a4:	d006      	beq.n	80070b4 <UART_SetConfig+0x1fc>
 80070a6:	e00b      	b.n	80070c0 <UART_SetConfig+0x208>
 80070a8:	2300      	movs	r3, #0
 80070aa:	77fb      	strb	r3, [r7, #31]
 80070ac:	e00d      	b.n	80070ca <UART_SetConfig+0x212>
 80070ae:	2302      	movs	r3, #2
 80070b0:	77fb      	strb	r3, [r7, #31]
 80070b2:	e00a      	b.n	80070ca <UART_SetConfig+0x212>
 80070b4:	2304      	movs	r3, #4
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e007      	b.n	80070ca <UART_SetConfig+0x212>
 80070ba:	2308      	movs	r3, #8
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e004      	b.n	80070ca <UART_SetConfig+0x212>
 80070c0:	2310      	movs	r3, #16
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e001      	b.n	80070ca <UART_SetConfig+0x212>
 80070c6:	2310      	movs	r3, #16
 80070c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d2:	d16b      	bne.n	80071ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80070d4:	7ffb      	ldrb	r3, [r7, #31]
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d838      	bhi.n	800714c <UART_SetConfig+0x294>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <UART_SetConfig+0x228>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007105 	.word	0x08007105
 80070e4:	0800710d 	.word	0x0800710d
 80070e8:	08007115 	.word	0x08007115
 80070ec:	0800714d 	.word	0x0800714d
 80070f0:	0800711b 	.word	0x0800711b
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	0800714d 	.word	0x0800714d
 80070fc:	0800714d 	.word	0x0800714d
 8007100:	08007123 	.word	0x08007123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007104:	f7fd f8bc 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8007108:	61b8      	str	r0, [r7, #24]
        break;
 800710a:	e024      	b.n	8007156 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800710c:	f7fd f8da 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 8007110:	61b8      	str	r0, [r7, #24]
        break;
 8007112:	e020      	b.n	8007156 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <UART_SetConfig+0x290>)
 8007116:	61bb      	str	r3, [r7, #24]
        break;
 8007118:	e01d      	b.n	8007156 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800711a:	f7fd f83b 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800711e:	61b8      	str	r0, [r7, #24]
        break;
 8007120:	e019      	b.n	8007156 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007126:	61bb      	str	r3, [r7, #24]
        break;
 8007128:	e015      	b.n	8007156 <UART_SetConfig+0x29e>
 800712a:	bf00      	nop
 800712c:	efff69f3 	.word	0xefff69f3
 8007130:	40013800 	.word	0x40013800
 8007134:	40021000 	.word	0x40021000
 8007138:	40004400 	.word	0x40004400
 800713c:	40004800 	.word	0x40004800
 8007140:	40004c00 	.word	0x40004c00
 8007144:	40005000 	.word	0x40005000
 8007148:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	77bb      	strb	r3, [r7, #30]
        break;
 8007154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d073      	beq.n	8007244 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	005a      	lsls	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	441a      	add	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d916      	bls.n	80071a6 <UART_SetConfig+0x2ee>
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717e:	d212      	bcs.n	80071a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f023 030f 	bic.w	r3, r3, #15
 8007188:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	b29a      	uxth	r2, r3
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	4313      	orrs	r3, r2
 800719a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	89fa      	ldrh	r2, [r7, #14]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e04e      	b.n	8007244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77bb      	strb	r3, [r7, #30]
 80071aa:	e04b      	b.n	8007244 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ac:	7ffb      	ldrb	r3, [r7, #31]
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d827      	bhi.n	8007202 <UART_SetConfig+0x34a>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <UART_SetConfig+0x300>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	08007203 	.word	0x08007203
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007203 	.word	0x08007203
 80071d8:	080071fb 	.word	0x080071fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fd f850 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80071e0:	61b8      	str	r0, [r7, #24]
        break;
 80071e2:	e013      	b.n	800720c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fd f86e 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 80071e8:	61b8      	str	r0, [r7, #24]
        break;
 80071ea:	e00f      	b.n	800720c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <UART_SetConfig+0x3a4>)
 80071ee:	61bb      	str	r3, [r7, #24]
        break;
 80071f0:	e00c      	b.n	800720c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f2:	f7fc ffcf 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 80071f6:	61b8      	str	r0, [r7, #24]
        break;
 80071f8:	e008      	b.n	800720c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	61bb      	str	r3, [r7, #24]
        break;
 8007200:	e004      	b.n	800720c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	77bb      	strb	r3, [r7, #30]
        break;
 800720a:	bf00      	nop
    }

    if (pclk != 0U)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	085a      	lsrs	r2, r3, #1
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	441a      	add	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b0f      	cmp	r3, #15
 800722a:	d909      	bls.n	8007240 <UART_SetConfig+0x388>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d205      	bcs.n	8007240 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60da      	str	r2, [r3, #12]
 800723e:	e001      	b.n	8007244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007250:	7fbb      	ldrb	r3, [r7, #30]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	007a1200 	.word	0x007a1200

08007260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01a      	beq.n	8007376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735e:	d10a      	bne.n	8007376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b098      	sub	sp, #96	; 0x60
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b4:	f7fb f9f2 	bl	800279c <HAL_GetTick>
 80073b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d12e      	bne.n	8007426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d0:	2200      	movs	r2, #0
 80073d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f88c 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d021      	beq.n	8007426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f6:	653b      	str	r3, [r7, #80]	; 0x50
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007400:	647b      	str	r3, [r7, #68]	; 0x44
 8007402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e062      	b.n	80074ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b04      	cmp	r3, #4
 8007432:	d149      	bne.n	80074c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800743c:	2200      	movs	r2, #0
 800743e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f856 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d03c      	beq.n	80074c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	623b      	str	r3, [r7, #32]
   return(result);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a0:	61fa      	str	r2, [r7, #28]
 80074a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69b9      	ldr	r1, [r7, #24]
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	617b      	str	r3, [r7, #20]
   return(result);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e011      	b.n	80074ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3758      	adds	r7, #88	; 0x58
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007504:	e049      	b.n	800759a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d045      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7fb f945 	bl	800279c <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <UART_WaitOnFlagUntilTimeout+0x30>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e048      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d031      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d110      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2208      	movs	r2, #8
 800754a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f8ff 	bl	8007750 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2208      	movs	r2, #8
 8007556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e029      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007574:	d111      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f8e5 	bl	8007750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e00f      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d0a6      	beq.n	8007506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b097      	sub	sp, #92	; 0x5c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d10e      	bne.n	8007616 <UART_Start_Receive_IT+0x52>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <UART_Start_Receive_IT+0x48>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800760a:	e02d      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	22ff      	movs	r2, #255	; 0xff
 8007610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007614:	e028      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <UART_Start_Receive_IT+0x76>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <UART_Start_Receive_IT+0x6c>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800762e:	e01b      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	227f      	movs	r2, #127	; 0x7f
 8007634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007638:	e016      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007642:	d10d      	bne.n	8007660 <UART_Start_Receive_IT+0x9c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <UART_Start_Receive_IT+0x92>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	227f      	movs	r2, #127	; 0x7f
 8007650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007654:	e008      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	223f      	movs	r2, #63	; 0x3f
 800765a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800765e:	e003      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2222      	movs	r2, #34	; 0x22
 8007674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	657b      	str	r3, [r7, #84]	; 0x54
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007698:	64ba      	str	r2, [r7, #72]	; 0x48
 800769a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800769e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b4:	d107      	bne.n	80076c6 <UART_Start_Receive_IT+0x102>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4a21      	ldr	r2, [pc, #132]	; (8007748 <UART_Start_Receive_IT+0x184>)
 80076c2:	669a      	str	r2, [r3, #104]	; 0x68
 80076c4:	e002      	b.n	80076cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4a20      	ldr	r2, [pc, #128]	; (800774c <UART_Start_Receive_IT+0x188>)
 80076ca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d019      	beq.n	8007708 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80076e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	637b      	str	r3, [r7, #52]	; 0x34
 80076f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_Start_Receive_IT+0x110>
 8007706:	e018      	b.n	800773a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f043 0320 	orr.w	r3, r3, #32
 800771c:	653b      	str	r3, [r7, #80]	; 0x50
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69f9      	ldr	r1, [r7, #28]
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	61bb      	str	r3, [r7, #24]
   return(result);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	375c      	adds	r7, #92	; 0x5c
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	08007a41 	.word	0x08007a41
 800774c:	08007899 	.word	0x08007899

08007750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b095      	sub	sp, #84	; 0x54
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800776c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007776:	643b      	str	r3, [r7, #64]	; 0x40
 8007778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800777c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e6      	bne.n	8007758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	61fb      	str	r3, [r7, #28]
   return(result);
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e5      	bne.n	800778a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d118      	bne.n	80077f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0310 	bic.w	r3, r3, #16
 80077da:	647b      	str	r3, [r7, #68]	; 0x44
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6979      	ldr	r1, [r7, #20]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	613b      	str	r3, [r7, #16]
   return(result);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e6      	bne.n	80077c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800780c:	bf00      	nop
 800780e:	3754      	adds	r7, #84	; 0x54
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fb28 	bl	8006e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	60bb      	str	r3, [r7, #8]
   return(result);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6979      	ldr	r1, [r7, #20]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	613b      	str	r3, [r7, #16]
   return(result);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e6      	bne.n	800784c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff faf4 	bl	8006e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007890:	bf00      	nop
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b09c      	sub	sp, #112	; 0x70
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b0:	2b22      	cmp	r3, #34	; 0x22
 80078b2:	f040 80b9 	bne.w	8007a28 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80078bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078c4:	b2d9      	uxtb	r1, r3
 80078c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d0:	400a      	ands	r2, r1
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 809c 	bne.w	8007a38 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800790e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007914:	66bb      	str	r3, [r7, #104]	; 0x68
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800791e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007920:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800792c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e6      	bne.n	8007900 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	f023 0301 	bic.w	r3, r3, #1
 8007948:	667b      	str	r3, [r7, #100]	; 0x64
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007952:	647a      	str	r2, [r7, #68]	; 0x44
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e5      	bne.n	8007932 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d018      	beq.n	80079ba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	623b      	str	r3, [r7, #32]
   return(result);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800799c:	663b      	str	r3, [r7, #96]	; 0x60
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30
 80079a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d12e      	bne.n	8007a20 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 0310 	bic.w	r3, r3, #16
 80079dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	617b      	str	r3, [r7, #20]
   return(result);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d103      	bne.n	8007a10 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff fa41 	bl	8006ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a1e:	e00b      	b.n	8007a38 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7fa f957 	bl	8001cd4 <HAL_UART_RxCpltCallback>
}
 8007a26:	e007      	b.n	8007a38 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0208 	orr.w	r2, r2, #8
 8007a36:	619a      	str	r2, [r3, #24]
}
 8007a38:	bf00      	nop
 8007a3a:	3770      	adds	r7, #112	; 0x70
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b09c      	sub	sp, #112	; 0x70
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a58:	2b22      	cmp	r3, #34	; 0x22
 8007a5a:	f040 80b9 	bne.w	8007bd0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a76:	4013      	ands	r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f040 809c 	bne.w	8007be0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007abc:	667b      	str	r3, [r7, #100]	; 0x64
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	663b      	str	r3, [r7, #96]	; 0x60
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007afa:	643a      	str	r2, [r7, #64]	; 0x40
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d018      	beq.n	8007b62 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e6      	bne.n	8007b30 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d12e      	bne.n	8007bc8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f023 0310 	bic.w	r3, r3, #16
 8007b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6979      	ldr	r1, [r7, #20]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d103      	bne.n	8007bb8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2210      	movs	r2, #16
 8007bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff f96d 	bl	8006ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bc6:	e00b      	b.n	8007be0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fa f883 	bl	8001cd4 <HAL_UART_RxCpltCallback>
}
 8007bce:	e007      	b.n	8007be0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0208 	orr.w	r2, r2, #8
 8007bde:	619a      	str	r2, [r3, #24]
}
 8007be0:	bf00      	nop
 8007be2:	3770      	adds	r7, #112	; 0x70
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c02:	f3ef 8305 	mrs	r3, IPSR
 8007c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10f      	bne.n	8007c2e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c12:	607b      	str	r3, [r7, #4]
  return(result);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <osKernelInitialize+0x32>
 8007c1a:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <osKernelInitialize+0x64>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d109      	bne.n	8007c36 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c22:	f3ef 8311 	mrs	r3, BASEPRI
 8007c26:	603b      	str	r3, [r7, #0]
  return(result);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c2e:	f06f 0305 	mvn.w	r3, #5
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e00c      	b.n	8007c50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <osKernelInitialize+0x64>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007c3e:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <osKernelInitialize+0x64>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e002      	b.n	8007c50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c50:	68fb      	ldr	r3, [r7, #12]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000050c 	.word	0x2000050c

08007c64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c6a:	f3ef 8305 	mrs	r3, IPSR
 8007c6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10f      	bne.n	8007c96 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c76:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7a:	607b      	str	r3, [r7, #4]
  return(result);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <osKernelStart+0x32>
 8007c82:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <osKernelStart+0x64>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d109      	bne.n	8007c9e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007c96:	f06f 0305 	mvn.w	r3, #5
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	e00e      	b.n	8007cbc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <osKernelStart+0x64>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d107      	bne.n	8007cb6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007ca6:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <osKernelStart+0x64>)
 8007ca8:	2202      	movs	r2, #2
 8007caa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007cac:	f001 fd2c 	bl	8009708 <vTaskStartScheduler>
      stat = osOK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e002      	b.n	8007cbc <osKernelStart+0x58>
    } else {
      stat = osError;
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	2000050c 	.word	0x2000050c

08007ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b092      	sub	sp, #72	; 0x48
 8007cd0:	af04      	add	r7, sp, #16
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cdc:	f3ef 8305 	mrs	r3, IPSR
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f040 8094 	bne.w	8007e12 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cea:	f3ef 8310 	mrs	r3, PRIMASK
 8007cee:	623b      	str	r3, [r7, #32]
  return(result);
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 808d 	bne.w	8007e12 <osThreadNew+0x146>
 8007cf8:	4b48      	ldr	r3, [pc, #288]	; (8007e1c <osThreadNew+0x150>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d106      	bne.n	8007d0e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d00:	f3ef 8311 	mrs	r3, BASEPRI
 8007d04:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f040 8082 	bne.w	8007e12 <osThreadNew+0x146>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d07e      	beq.n	8007e12 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007d18:	2318      	movs	r3, #24
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007d20:	f107 031b 	add.w	r3, r7, #27
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d045      	beq.n	8007dbe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <osThreadNew+0x74>
        name = attr->name;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <osThreadNew+0x9a>
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	2b38      	cmp	r3, #56	; 0x38
 8007d58:	d805      	bhi.n	8007d66 <osThreadNew+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <osThreadNew+0x9e>
        return (NULL);
 8007d66:	2300      	movs	r3, #0
 8007d68:	e054      	b.n	8007e14 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	089b      	lsrs	r3, r3, #2
 8007d78:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <osThreadNew+0xd4>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2bab      	cmp	r3, #171	; 0xab
 8007d88:	d90a      	bls.n	8007da0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <osThreadNew+0xd4>
        mem = 1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d9e:	e010      	b.n	8007dc2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10c      	bne.n	8007dc2 <osThreadNew+0xf6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d108      	bne.n	8007dc2 <osThreadNew+0xf6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <osThreadNew+0xf6>
          mem = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dbc:	e001      	b.n	8007dc2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d110      	bne.n	8007dea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dd0:	9202      	str	r2, [sp, #8]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 fa38 	bl	8009254 <xTaskCreateStatic>
 8007de4:	4603      	mov	r3, r0
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e013      	b.n	8007e12 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d110      	bne.n	8007e12 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f107 0314 	add.w	r3, r7, #20
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fa82 	bl	800930c <xTaskCreate>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d001      	beq.n	8007e12 <osThreadNew+0x146>
          hTask = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3738      	adds	r7, #56	; 0x38
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	2000050c 	.word	0x2000050c

08007e20 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e26:	f3ef 8305 	mrs	r3, IPSR
 8007e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10f      	bne.n	8007e52 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e32:	f3ef 8310 	mrs	r3, PRIMASK
 8007e36:	607b      	str	r3, [r7, #4]
  return(result);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <osThreadGetId+0x32>
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <osThreadGetId+0x48>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d108      	bne.n	8007e58 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e46:	f3ef 8311 	mrs	r3, BASEPRI
 8007e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <osThreadGetId+0x38>
    id = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e002      	b.n	8007e5e <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8007e58:	f002 f91e 	bl	800a098 <xTaskGetCurrentTaskHandle>
 8007e5c:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	2000050c 	.word	0x2000050c

08007e6c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e78:	f3ef 8305 	mrs	r3, IPSR
 8007e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e7e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10f      	bne.n	8007ea4 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e84:	f3ef 8310 	mrs	r3, PRIMASK
 8007e88:	613b      	str	r3, [r7, #16]
  return(result);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <osThreadSuspend+0x38>
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <osThreadSuspend+0x64>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d109      	bne.n	8007eac <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e98:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007ea4:	f06f 0305 	mvn.w	r3, #5
 8007ea8:	61fb      	str	r3, [r7, #28]
 8007eaa:	e00b      	b.n	8007ec4 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007eb2:	f06f 0303 	mvn.w	r3, #3
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	e004      	b.n	8007ec4 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007ebe:	69b8      	ldr	r0, [r7, #24]
 8007ec0:	f001 fbac 	bl	800961c <vTaskSuspend>
  }

  return (stat);
 8007ec4:	69fb      	ldr	r3, [r7, #28]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	2000050c 	.word	0x2000050c

08007ed4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007edc:	f3ef 8305 	mrs	r3, IPSR
 8007ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ee2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8007eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <osDelay+0x34>
 8007ef4:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <osDelay+0x58>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d109      	bne.n	8007f10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007efc:	f3ef 8311 	mrs	r3, BASEPRI
 8007f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <osDelay+0x3c>
    stat = osErrorISR;
 8007f08:	f06f 0305 	mvn.w	r3, #5
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e007      	b.n	8007f20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fb4a 	bl	80095b4 <vTaskDelay>
    }
  }

  return (stat);
 8007f20:	697b      	ldr	r3, [r7, #20]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	2000050c 	.word	0x2000050c

08007f30 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3c:	f3ef 8305 	mrs	r3, IPSR
 8007f40:	617b      	str	r3, [r7, #20]
  return(result);
 8007f42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d13d      	bne.n	8007fc4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f48:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d137      	bne.n	8007fc4 <osEventFlagsNew+0x94>
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <osEventFlagsNew+0xa0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d105      	bne.n	8007f68 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d12d      	bne.n	8007fc4 <osEventFlagsNew+0x94>
    mem = -1;
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d015      	beq.n	8007fa0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d006      	beq.n	8007f8a <osEventFlagsNew+0x5a>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b1f      	cmp	r3, #31
 8007f82:	d902      	bls.n	8007f8a <osEventFlagsNew+0x5a>
        mem = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e00c      	b.n	8007fa4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d108      	bne.n	8007fa4 <osEventFlagsNew+0x74>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d104      	bne.n	8007fa4 <osEventFlagsNew+0x74>
          mem = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	e001      	b.n	8007fa4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d106      	bne.n	8007fb8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f9ae 	bl	8008310 <xEventGroupCreateStatic>
 8007fb4:	61f8      	str	r0, [r7, #28]
 8007fb6:	e005      	b.n	8007fc4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8007fbe:	f000 f9de 	bl	800837e <xEventGroupCreate>
 8007fc2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007fc4:	69fb      	ldr	r3, [r7, #28]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	2000050c 	.word	0x2000050c

08007fd4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <osEventFlagsSet+0x1e>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007ff2:	f06f 0303 	mvn.w	r3, #3
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e03a      	b.n	8008070 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffa:	f3ef 8305 	mrs	r3, IPSR
 8007ffe:	617b      	str	r3, [r7, #20]
  return(result);
 8008000:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10f      	bne.n	8008026 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008006:	f3ef 8310 	mrs	r3, PRIMASK
 800800a:	613b      	str	r3, [r7, #16]
  return(result);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <osEventFlagsSet+0x52>
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <osEventFlagsSet+0xa8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d123      	bne.n	8008062 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800801a:	f3ef 8311 	mrs	r3, BASEPRI
 800801e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01d      	beq.n	8008062 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	461a      	mov	r2, r3
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	69b8      	ldr	r0, [r7, #24]
 8008034:	f000 fad4 	bl	80085e0 <xEventGroupSetBitsFromISR>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800803e:	f06f 0302 	mvn.w	r3, #2
 8008042:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008044:	e013      	b.n	800806e <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <osEventFlagsSet+0x9a>
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <osEventFlagsSet+0xac>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008060:	e005      	b.n	800806e <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	69b8      	ldr	r0, [r7, #24]
 8008066:	f000 fa15 	bl	8008494 <xEventGroupSetBits>
 800806a:	61f8      	str	r0, [r7, #28]
 800806c:	e000      	b.n	8008070 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800806e:	bf00      	nop
  }

  return (rflags);
 8008070:	69fb      	ldr	r3, [r7, #28]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	2000050c 	.word	0x2000050c
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <osEventFlagsClear+0x1e>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80080a2:	f06f 0303 	mvn.w	r3, #3
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	e029      	b.n	80080fe <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080aa:	f3ef 8305 	mrs	r3, IPSR
 80080ae:	617b      	str	r3, [r7, #20]
  return(result);
 80080b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10f      	bne.n	80080d6 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b6:	f3ef 8310 	mrs	r3, PRIMASK
 80080ba:	613b      	str	r3, [r7, #16]
  return(result);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <osEventFlagsClear+0x52>
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <osEventFlagsClear+0x84>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d114      	bne.n	80080f4 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080ca:	f3ef 8311 	mrs	r3, BASEPRI
 80080ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80080d6:	69b8      	ldr	r0, [r7, #24]
 80080d8:	f000 f9b8 	bl	800844c <xEventGroupGetBitsFromISR>
 80080dc:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	69b8      	ldr	r0, [r7, #24]
 80080e2:	f000 f99f 	bl	8008424 <xEventGroupClearBitsFromISR>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d108      	bne.n	80080fe <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80080ec:	f06f 0302 	mvn.w	r3, #2
 80080f0:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080f2:	e004      	b.n	80080fe <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	69b8      	ldr	r0, [r7, #24]
 80080f8:	f000 f95b 	bl	80083b2 <xEventGroupClearBits>
 80080fc:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80080fe:	69fb      	ldr	r3, [r7, #28]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	2000050c 	.word	0x2000050c

0800810c <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <osEventFlagsGet+0x18>
    rflags = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	e01f      	b.n	8008164 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008124:	f3ef 8305 	mrs	r3, IPSR
 8008128:	617b      	str	r3, [r7, #20]
  return(result);
 800812a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10f      	bne.n	8008150 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008130:	f3ef 8310 	mrs	r3, PRIMASK
 8008134:	613b      	str	r3, [r7, #16]
  return(result);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <osEventFlagsGet+0x44>
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <osEventFlagsGet+0x64>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d10a      	bne.n	800815a <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008144:	f3ef 8311 	mrs	r3, BASEPRI
 8008148:	60fb      	str	r3, [r7, #12]
  return(result);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008150:	69b8      	ldr	r0, [r7, #24]
 8008152:	f000 f97b 	bl	800844c <xEventGroupGetBitsFromISR>
 8008156:	61f8      	str	r0, [r7, #28]
 8008158:	e004      	b.n	8008164 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800815a:	2100      	movs	r1, #0
 800815c:	69b8      	ldr	r0, [r7, #24]
 800815e:	f000 f928 	bl	80083b2 <xEventGroupClearBits>
 8008162:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8008164:	69fb      	ldr	r3, [r7, #28]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	2000050c 	.word	0x2000050c

08008174 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b08a      	sub	sp, #40	; 0x28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008180:	f3ef 8305 	mrs	r3, IPSR
 8008184:	613b      	str	r3, [r7, #16]
  return(result);
 8008186:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 8085 	bne.w	8008298 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800818e:	f3ef 8310 	mrs	r3, PRIMASK
 8008192:	60fb      	str	r3, [r7, #12]
  return(result);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d17e      	bne.n	8008298 <osMutexNew+0x124>
 800819a:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <osMutexNew+0x130>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d105      	bne.n	80081ae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081a2:	f3ef 8311 	mrs	r3, BASEPRI
 80081a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d174      	bne.n	8008298 <osMutexNew+0x124>
    if (attr != NULL) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <osMutexNew+0x48>
      type = attr->attr_bits;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	e001      	b.n	80081c0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <osMutexNew+0x5c>
      rmtx = 1U;
 80081ca:	2301      	movs	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	e001      	b.n	80081d4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d15c      	bne.n	8008298 <osMutexNew+0x124>
      mem = -1;
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d015      	beq.n	8008216 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d006      	beq.n	8008200 <osMutexNew+0x8c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b4f      	cmp	r3, #79	; 0x4f
 80081f8:	d902      	bls.n	8008200 <osMutexNew+0x8c>
          mem = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	e00c      	b.n	800821a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d108      	bne.n	800821a <osMutexNew+0xa6>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <osMutexNew+0xa6>
            mem = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e001      	b.n	800821a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d112      	bne.n	8008246 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d007      	beq.n	8008236 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	4619      	mov	r1, r3
 800822c:	2004      	movs	r0, #4
 800822e:	f000 fc11 	bl	8008a54 <xQueueCreateMutexStatic>
 8008232:	6278      	str	r0, [r7, #36]	; 0x24
 8008234:	e016      	b.n	8008264 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	4619      	mov	r1, r3
 800823c:	2001      	movs	r0, #1
 800823e:	f000 fc09 	bl	8008a54 <xQueueCreateMutexStatic>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24
 8008244:	e00e      	b.n	8008264 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008252:	2004      	movs	r0, #4
 8008254:	f000 fbe6 	bl	8008a24 <xQueueCreateMutex>
 8008258:	6278      	str	r0, [r7, #36]	; 0x24
 800825a:	e003      	b.n	8008264 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800825c:	2001      	movs	r0, #1
 800825e:	f000 fbe1 	bl	8008a24 <xQueueCreateMutex>
 8008262:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00c      	beq.n	8008284 <osMutexNew+0x110>
        if (attr != NULL) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <osMutexNew+0x104>
          name = attr->name;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e001      	b.n	800827c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800827c:	6979      	ldr	r1, [r7, #20]
 800827e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008280:	f000 ff8a 	bl	8009198 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d006      	beq.n	8008298 <osMutexNew+0x124>
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800829a:	4618      	mov	r0, r3
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	2000050c 	.word	0x2000050c

080082a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4a07      	ldr	r2, [pc, #28]	; (80082d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80082b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4a06      	ldr	r2, [pc, #24]	; (80082d8 <vApplicationGetIdleTaskMemory+0x30>)
 80082be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2280      	movs	r2, #128	; 0x80
 80082c4:	601a      	str	r2, [r3, #0]
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000510 	.word	0x20000510
 80082d8:	200005bc 	.word	0x200005bc

080082dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4a07      	ldr	r2, [pc, #28]	; (8008308 <vApplicationGetTimerTaskMemory+0x2c>)
 80082ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4a06      	ldr	r2, [pc, #24]	; (800830c <vApplicationGetTimerTaskMemory+0x30>)
 80082f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	200007bc 	.word	0x200007bc
 800830c:	20000868 	.word	0x20000868

08008310 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008334:	2320      	movs	r3, #32
 8008336:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b20      	cmp	r3, #32
 800833c:	d00a      	beq.n	8008354 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60fb      	str	r3, [r7, #12]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3304      	adds	r3, #4
 8008368:	4618      	mov	r0, r3
 800836a:	f000 f94d 	bl	8008608 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008374:	697b      	ldr	r3, [r7, #20]
	}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008384:	2020      	movs	r0, #32
 8008386:	f002 fcf7 	bl	800ad78 <pvPortMalloc>
 800838a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3304      	adds	r3, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f933 	bl	8008608 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80083a8:	687b      	ldr	r3, [r7, #4]
	}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b086      	sub	sp, #24
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <xEventGroupClearBits+0x2a>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <xEventGroupClearBits+0x4a>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60bb      	str	r3, [r7, #8]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80083fc:	f002 fb9a 	bl	800ab34 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	43db      	mvns	r3, r3
 800840e:	401a      	ands	r2, r3
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008414:	f002 fbbe 	bl	800ab94 <vPortExitCritical>

	return uxReturn;
 8008418:	693b      	ldr	r3, [r7, #16]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800842e:	2300      	movs	r3, #0
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4804      	ldr	r0, [pc, #16]	; (8008448 <xEventGroupClearBitsFromISR+0x24>)
 8008436:	f002 fa31 	bl	800a89c <xTimerPendFunctionCallFromISR>
 800843a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800843c:	68fb      	ldr	r3, [r7, #12]
	}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	080085c5 	.word	0x080085c5

0800844c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800844c:	b480      	push	{r7}
 800844e:	b089      	sub	sp, #36	; 0x24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008458:	f3ef 8211 	mrs	r2, BASEPRI
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fa      	str	r2, [r7, #12]
 800846e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008470:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008472:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008484:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008486:	697b      	ldr	r3, [r7, #20]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3724      	adds	r7, #36	; 0x24
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800849e:	2300      	movs	r3, #0
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80084a6:	2300      	movs	r3, #0
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xEventGroupSetBits+0x32>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	613b      	str	r3, [r7, #16]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <xEventGroupSetBits+0x52>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60fb      	str	r3, [r7, #12]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	3304      	adds	r3, #4
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	3308      	adds	r3, #8
 80084f0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80084f2:	f001 f979 	bl	80097e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	431a      	orrs	r2, r3
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008508:	e03c      	b.n	8008584 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008520:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008528:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d108      	bne.n	8008546 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008544:	e008      	b.n	8008558 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	4013      	ands	r3, r2
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	429a      	cmp	r2, r3
 8008552:	d101      	bne.n	8008558 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008554:	2301      	movs	r3, #1
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d010      	beq.n	8008580 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	4313      	orrs	r3, r2
 800856e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008578:	4619      	mov	r1, r3
 800857a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800857c:	f001 fbc6 	bl	8009d0c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	429a      	cmp	r2, r3
 800858a:	d1be      	bne.n	800850a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	43db      	mvns	r3, r3
 8008594:	401a      	ands	r2, r3
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800859a:	f001 f933 	bl	8009804 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	681b      	ldr	r3, [r3, #0]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3738      	adds	r7, #56	; 0x38
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff ff6c 	bl	8008494 <xEventGroupSetBits>
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff feee 	bl	80083b2 <xEventGroupClearBits>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	68f9      	ldr	r1, [r7, #12]
 80085f2:	4804      	ldr	r0, [pc, #16]	; (8008604 <xEventGroupSetBitsFromISR+0x24>)
 80085f4:	f002 f952 	bl	800a89c <xTimerPendFunctionCallFromISR>
 80085f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80085fa:	697b      	ldr	r3, [r7, #20]
	}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	080085ab 	.word	0x080085ab

08008608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f103 0208 	add.w	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f04f 32ff 	mov.w	r2, #4294967295
 8008620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f103 0208 	add.w	r2, r3, #8
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f103 0208 	add.w	r2, r3, #8
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
}
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d103      	bne.n	80086ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e00c      	b.n	80086e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3308      	adds	r3, #8
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e002      	b.n	80086d8 <vListInsert+0x2e>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d2f6      	bcs.n	80086d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6892      	ldr	r2, [r2, #8]
 8008732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6852      	ldr	r2, [r2, #4]
 800873c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d103      	bne.n	8008750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xQueueGenericReset+0x2a>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	60bb      	str	r3, [r7, #8]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800879a:	f002 f9cb 	bl	800ab34 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	441a      	add	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	3b01      	subs	r3, #1
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	22ff      	movs	r2, #255	; 0xff
 80087de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d114      	bne.n	800881a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01a      	beq.n	800882e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3310      	adds	r3, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fa21 	bl	8009c44 <xTaskRemoveFromEventList>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <xQueueGenericReset+0xcc>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	e009      	b.n	800882e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3310      	adds	r3, #16
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff fef2 	bl	8008608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3324      	adds	r3, #36	; 0x24
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff feed 	bl	8008608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800882e:	f002 f9b1 	bl	800ab94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008832:	2301      	movs	r3, #1
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	; 0x38
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <xQueueGenericCreateStatic+0x52>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <xQueueGenericCreateStatic+0x56>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueGenericCreateStatic+0x58>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	623b      	str	r3, [r7, #32]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <xQueueGenericCreateStatic+0x7e>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <xQueueGenericCreateStatic+0x82>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueGenericCreateStatic+0x84>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	61fb      	str	r3, [r7, #28]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088de:	2350      	movs	r3, #80	; 0x50
 80088e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b50      	cmp	r3, #80	; 0x50
 80088e6:	d00a      	beq.n	80088fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	61bb      	str	r3, [r7, #24]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00d      	beq.n	8008924 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008910:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 f843 	bl	80089aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008926:	4618      	mov	r0, r3
 8008928:	3730      	adds	r7, #48	; 0x30
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08a      	sub	sp, #40	; 0x28
 8008932:	af02      	add	r7, sp, #8
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	4613      	mov	r3, r2
 800893a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	613b      	str	r3, [r7, #16]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	e004      	b.n	800896e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	3350      	adds	r3, #80	; 0x50
 8008972:	4618      	mov	r0, r3
 8008974:	f002 fa00 	bl	800ad78 <pvPortMalloc>
 8008978:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	3350      	adds	r3, #80	; 0x50
 8008984:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800898e:	79fa      	ldrb	r2, [r7, #7]
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	68b9      	ldr	r1, [r7, #8]
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f805 	bl	80089aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80089a0:	69bb      	ldr	r3, [r7, #24]
	}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e002      	b.n	80089cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089d8:	2101      	movs	r1, #1
 80089da:	69b8      	ldr	r0, [r7, #24]
 80089dc:	f7ff fec8 	bl	8008770 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a10:	2300      	movs	r3, #0
 8008a12:	2200      	movs	r2, #0
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f838 	bl	8008a8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6939      	ldr	r1, [r7, #16]
 8008a3c:	6978      	ldr	r0, [r7, #20]
 8008a3e:	f7ff ff76 	bl	800892e <xQueueGenericCreate>
 8008a42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff ffd3 	bl	80089f0 <prvInitialiseMutex>

		return pxNewQueue;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6939      	ldr	r1, [r7, #16]
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f7ff fee4 	bl	8008840 <xQueueGenericCreateStatic>
 8008a78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff ffb8 	bl	80089f0 <prvInitialiseMutex>

		return pxNewQueue;
 8008a80:	68fb      	ldr	r3, [r7, #12]
	}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <xQueueGenericSend+0x32>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <xQueueGenericSend+0x40>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <xQueueGenericSend+0x44>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <xQueueGenericSend+0x46>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10a      	bne.n	8008aec <xQueueGenericSend+0x60>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d103      	bne.n	8008afa <xQueueGenericSend+0x6e>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <xQueueGenericSend+0x72>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueGenericSend+0x74>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <xQueueGenericSend+0x8e>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	623b      	str	r3, [r7, #32]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b1a:	f001 facd 	bl	800a0b8 <xTaskGetSchedulerState>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <xQueueGenericSend+0x9e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <xQueueGenericSend+0xa2>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <xQueueGenericSend+0xa4>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xQueueGenericSend+0xbe>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	61fb      	str	r3, [r7, #28]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b4a:	f001 fff3 	bl	800ab34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d302      	bcc.n	8008b60 <xQueueGenericSend+0xd4>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d129      	bne.n	8008bb4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b66:	f000 fa07 	bl	8008f78 <prvCopyDataToQueue>
 8008b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d010      	beq.n	8008b96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 f863 	bl	8009c44 <xTaskRemoveFromEventList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d013      	beq.n	8008bac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b84:	4b3f      	ldr	r3, [pc, #252]	; (8008c84 <xQueueGenericSend+0x1f8>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	e00a      	b.n	8008bac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b9c:	4b39      	ldr	r3, [pc, #228]	; (8008c84 <xQueueGenericSend+0x1f8>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bac:	f001 fff2 	bl	800ab94 <vPortExitCritical>
				return pdPASS;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e063      	b.n	8008c7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bba:	f001 ffeb 	bl	800ab94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e05c      	b.n	8008c7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d106      	bne.n	8008bd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f8ff 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bd6:	f001 ffdd 	bl	800ab94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bda:	f000 fe05 	bl	80097e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bde:	f001 ffa9 	bl	800ab34 <vPortEnterCritical>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be8:	b25b      	sxtb	r3, r3
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d103      	bne.n	8008bf8 <xQueueGenericSend+0x16c>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x182>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c0e:	f001 ffc1 	bl	800ab94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c12:	1d3a      	adds	r2, r7, #4
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 f8ee 	bl	8009dfc <xTaskCheckForTimeOut>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d124      	bne.n	8008c70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c28:	f000 fa9e 	bl	8009168 <prvIsQueueFull>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d018      	beq.n	8008c64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	3310      	adds	r3, #16
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ffb2 	bl	8009ba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c42:	f000 fa29 	bl	8009098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c46:	f000 fddd 	bl	8009804 <xTaskResumeAll>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f af7c 	bne.w	8008b4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <xQueueGenericSend+0x1f8>)
 8008c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	e772      	b.n	8008b4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c66:	f000 fa17 	bl	8009098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c6a:	f000 fdcb 	bl	8009804 <xTaskResumeAll>
 8008c6e:	e76c      	b.n	8008b4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c72:	f000 fa11 	bl	8009098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c76:	f000 fdc5 	bl	8009804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c7a:	2300      	movs	r3, #0
		}
	}
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3738      	adds	r7, #56	; 0x38
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	e000ed04 	.word	0xe000ed04

08008c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08e      	sub	sp, #56	; 0x38
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <xQueueGenericSendFromISR+0x3c>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <xQueueGenericSendFromISR+0x40>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <xQueueGenericSendFromISR+0x42>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	623b      	str	r3, [r7, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d103      	bne.n	8008cf2 <xQueueGenericSendFromISR+0x6a>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <xQueueGenericSendFromISR+0x6e>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueGenericSendFromISR+0x70>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61fb      	str	r3, [r7, #28]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d12:	f001 fff1 	bl	800acf8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d16:	f3ef 8211 	mrs	r2, BASEPRI
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	61ba      	str	r2, [r7, #24]
 8008d2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d302      	bcc.n	8008d44 <xQueueGenericSendFromISR+0xbc>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d12c      	bne.n	8008d9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d54:	f000 f910 	bl	8008f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d112      	bne.n	8008d88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	3324      	adds	r3, #36	; 0x24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 ff68 	bl	8009c44 <xTaskRemoveFromEventList>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	e007      	b.n	8008d98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	b25a      	sxtb	r2, r3
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008d9c:	e001      	b.n	8008da2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f383 8811 	msr	BASEPRI, r3
}
 8008dac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3738      	adds	r7, #56	; 0x38
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08c      	sub	sp, #48	; 0x30
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <xQueueReceive+0x30>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	623b      	str	r3, [r7, #32]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <xQueueReceive+0x3e>
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <xQueueReceive+0x42>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <xQueueReceive+0x44>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xQueueReceive+0x5e>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61fb      	str	r3, [r7, #28]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e16:	f001 f94f 	bl	800a0b8 <xTaskGetSchedulerState>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <xQueueReceive+0x6e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <xQueueReceive+0x72>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <xQueueReceive+0x74>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <xQueueReceive+0x8e>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	61bb      	str	r3, [r7, #24]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e46:	f001 fe75 	bl	800ab34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01f      	beq.n	8008e96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5a:	f000 f8f7 	bl	800904c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	1e5a      	subs	r2, r3, #1
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00f      	beq.n	8008e8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	3310      	adds	r3, #16
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fee6 	bl	8009c44 <xTaskRemoveFromEventList>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e7e:	4b3d      	ldr	r3, [pc, #244]	; (8008f74 <xQueueReceive+0x1bc>)
 8008e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e8e:	f001 fe81 	bl	800ab94 <vPortExitCritical>
				return pdPASS;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e069      	b.n	8008f6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d103      	bne.n	8008ea4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e9c:	f001 fe7a 	bl	800ab94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e062      	b.n	8008f6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eaa:	f107 0310 	add.w	r3, r7, #16
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 ff8e 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eb8:	f001 fe6c 	bl	800ab94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ebc:	f000 fc94 	bl	80097e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ec0:	f001 fe38 	bl	800ab34 <vPortEnterCritical>
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eca:	b25b      	sxtb	r3, r3
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed0:	d103      	bne.n	8008eda <xQueueReceive+0x122>
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee6:	d103      	bne.n	8008ef0 <xQueueReceive+0x138>
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef0:	f001 fe50 	bl	800ab94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ef4:	1d3a      	adds	r2, r7, #4
 8008ef6:	f107 0310 	add.w	r3, r7, #16
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 ff7d 	bl	8009dfc <xTaskCheckForTimeOut>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d123      	bne.n	8008f50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0a:	f000 f917 	bl	800913c <prvIsQueueEmpty>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	3324      	adds	r3, #36	; 0x24
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fe41 	bl	8009ba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f24:	f000 f8b8 	bl	8009098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f28:	f000 fc6c 	bl	8009804 <xTaskResumeAll>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d189      	bne.n	8008e46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008f32:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <xQueueReceive+0x1bc>)
 8008f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	e780      	b.n	8008e46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f46:	f000 f8a7 	bl	8009098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f4a:	f000 fc5b 	bl	8009804 <xTaskResumeAll>
 8008f4e:	e77a      	b.n	8008e46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f52:	f000 f8a1 	bl	8009098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f56:	f000 fc55 	bl	8009804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5c:	f000 f8ee 	bl	800913c <prvIsQueueEmpty>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f43f af6f 	beq.w	8008e46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3730      	adds	r7, #48	; 0x30
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d14d      	bne.n	800903a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 f8a6 	bl	800a0f4 <xTaskPriorityDisinherit>
 8008fa8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	605a      	str	r2, [r3, #4]
 8008fb0:	e043      	b.n	800903a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d119      	bne.n	8008fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6898      	ldr	r0, [r3, #8]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	f002 fb8b 	bl	800b6de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d32b      	bcc.n	800903a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	609a      	str	r2, [r3, #8]
 8008fea:	e026      	b.n	800903a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68d8      	ldr	r0, [r3, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	f002 fb71 	bl	800b6de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	425b      	negs	r3, r3
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d207      	bcs.n	8009028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	425b      	negs	r3, r3
 8009022:	441a      	add	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d105      	bne.n	800903a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3b01      	subs	r3, #1
 8009038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009042:	697b      	ldr	r3, [r7, #20]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	441a      	add	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d303      	bcc.n	8009080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68d9      	ldr	r1, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	461a      	mov	r2, r3
 800908a:	6838      	ldr	r0, [r7, #0]
 800908c:	f002 fb27 	bl	800b6de <memcpy>
	}
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090a0:	f001 fd48 	bl	800ab34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090ac:	e011      	b.n	80090d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d012      	beq.n	80090dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3324      	adds	r3, #36	; 0x24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fdc2 	bl	8009c44 <xTaskRemoveFromEventList>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090c6:	f000 fefb 	bl	8009ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dce9      	bgt.n	80090ae <prvUnlockQueue+0x16>
 80090da:	e000      	b.n	80090de <prvUnlockQueue+0x46>
					break;
 80090dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	22ff      	movs	r2, #255	; 0xff
 80090e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090e6:	f001 fd55 	bl	800ab94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090ea:	f001 fd23 	bl	800ab34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090f6:	e011      	b.n	800911c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d012      	beq.n	8009126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3310      	adds	r3, #16
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fd9d 	bl	8009c44 <xTaskRemoveFromEventList>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009110:	f000 fed6 	bl	8009ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	3b01      	subs	r3, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800911c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	dce9      	bgt.n	80090f8 <prvUnlockQueue+0x60>
 8009124:	e000      	b.n	8009128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	22ff      	movs	r2, #255	; 0xff
 800912c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009130:	f001 fd30 	bl	800ab94 <vPortExitCritical>
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009144:	f001 fcf6 	bl	800ab34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e001      	b.n	800915a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800915a:	f001 fd1b 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009170:	f001 fce0 	bl	800ab34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917c:	429a      	cmp	r2, r3
 800917e:	d102      	bne.n	8009186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009180:	2301      	movs	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e001      	b.n	800918a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800918a:	f001 fd03 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800918e:	68fb      	ldr	r3, [r7, #12]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e014      	b.n	80091d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091a8:	4a0f      	ldr	r2, [pc, #60]	; (80091e8 <vQueueAddToRegistry+0x50>)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10b      	bne.n	80091cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091b4:	490c      	ldr	r1, [pc, #48]	; (80091e8 <vQueueAddToRegistry+0x50>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091be:	4a0a      	ldr	r2, [pc, #40]	; (80091e8 <vQueueAddToRegistry+0x50>)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4413      	add	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091ca:	e006      	b.n	80091da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3301      	adds	r3, #1
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b07      	cmp	r3, #7
 80091d6:	d9e7      	bls.n	80091a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000c68 	.word	0x20000c68

080091ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091fc:	f001 fc9a 	bl	800ab34 <vPortEnterCritical>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009206:	b25b      	sxtb	r3, r3
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d103      	bne.n	8009216 <vQueueWaitForMessageRestricted+0x2a>
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800921c:	b25b      	sxtb	r3, r3
 800921e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009222:	d103      	bne.n	800922c <vQueueWaitForMessageRestricted+0x40>
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800922c:	f001 fcb2 	bl	800ab94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	3324      	adds	r3, #36	; 0x24
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fcd3 	bl	8009bec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009246:	6978      	ldr	r0, [r7, #20]
 8009248:	f7ff ff26 	bl	8009098 <prvUnlockQueue>
	}
 800924c:	bf00      	nop
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08e      	sub	sp, #56	; 0x38
 8009258:	af04      	add	r7, sp, #16
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	623b      	str	r3, [r7, #32]
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <xTaskCreateStatic+0x46>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	61fb      	str	r3, [r7, #28]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800929a:	23ac      	movs	r3, #172	; 0xac
 800929c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2bac      	cmp	r3, #172	; 0xac
 80092a2:	d00a      	beq.n	80092ba <xTaskCreateStatic+0x66>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	61bb      	str	r3, [r7, #24]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01e      	beq.n	80092fe <xTaskCreateStatic+0xaa>
 80092c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01b      	beq.n	80092fe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092d8:	2300      	movs	r3, #0
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	9302      	str	r3, [sp, #8]
 80092e0:	f107 0314 	add.w	r3, r7, #20
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f851 	bl	8009398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092f8:	f000 f8ec 	bl	80094d4 <prvAddNewTaskToReadyList>
 80092fc:	e001      	b.n	8009302 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009302:	697b      	ldr	r3, [r7, #20]
	}
 8009304:	4618      	mov	r0, r3
 8009306:	3728      	adds	r7, #40	; 0x28
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08c      	sub	sp, #48	; 0x30
 8009310:	af04      	add	r7, sp, #16
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4618      	mov	r0, r3
 8009322:	f001 fd29 	bl	800ad78 <pvPortMalloc>
 8009326:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00e      	beq.n	800934c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800932e:	20ac      	movs	r0, #172	; 0xac
 8009330:	f001 fd22 	bl	800ad78 <pvPortMalloc>
 8009334:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
 8009342:	e005      	b.n	8009350 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009344:	6978      	ldr	r0, [r7, #20]
 8009346:	f001 fddb 	bl	800af00 <vPortFree>
 800934a:	e001      	b.n	8009350 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800934c:	2300      	movs	r3, #0
 800934e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d017      	beq.n	8009386 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	2300      	movs	r3, #0
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f80f 	bl	8009398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800937a:	69f8      	ldr	r0, [r7, #28]
 800937c:	f000 f8aa 	bl	80094d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	61bb      	str	r3, [r7, #24]
 8009384:	e002      	b.n	800938c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800938c:	69bb      	ldr	r3, [r7, #24]
	}
 800938e:	4618      	mov	r0, r3
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	461a      	mov	r2, r3
 80093b0:	21a5      	movs	r1, #165	; 0xa5
 80093b2:	f002 f8c3 	bl	800b53c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093c0:	3b01      	subs	r3, #1
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f023 0307 	bic.w	r3, r3, #7
 80093ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	617b      	str	r3, [r7, #20]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]
 80093f4:	e012      	b.n	800941c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	7819      	ldrb	r1, [r3, #0]
 80093fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	3334      	adds	r3, #52	; 0x34
 8009406:	460a      	mov	r2, r1
 8009408:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d006      	beq.n	8009424 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	3301      	adds	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b13      	cmp	r3, #19
 8009420:	d9e9      	bls.n	80093f6 <prvInitialiseNewTask+0x5e>
 8009422:	e000      	b.n	8009426 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009424:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	2b37      	cmp	r3, #55	; 0x37
 8009432:	d901      	bls.n	8009438 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009434:	2337      	movs	r3, #55	; 0x37
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800943c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009442:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	2200      	movs	r2, #0
 8009448:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff f8fa 	bl	8008648 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	3318      	adds	r3, #24
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff f8f5 	bl	8008648 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	2200      	movs	r2, #0
 8009478:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	2200      	movs	r2, #0
 8009480:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	3358      	adds	r3, #88	; 0x58
 8009488:	224c      	movs	r2, #76	; 0x4c
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f002 f855 	bl	800b53c <memset>
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	4a0c      	ldr	r2, [pc, #48]	; (80094c8 <prvInitialiseNewTask+0x130>)
 8009496:	65da      	str	r2, [r3, #92]	; 0x5c
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	4a0c      	ldr	r2, [pc, #48]	; (80094cc <prvInitialiseNewTask+0x134>)
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	4a0b      	ldr	r2, [pc, #44]	; (80094d0 <prvInitialiseNewTask+0x138>)
 80094a2:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	69b8      	ldr	r0, [r7, #24]
 80094aa:	f001 fa17 	bl	800a8dc <pxPortInitialiseStack>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c0:	bf00      	nop
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200026f4 	.word	0x200026f4
 80094cc:	2000275c 	.word	0x2000275c
 80094d0:	200027c4 	.word	0x200027c4

080094d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094dc:	f001 fb2a 	bl	800ab34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094e0:	4b2d      	ldr	r3, [pc, #180]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	4a2c      	ldr	r2, [pc, #176]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 80094e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094ea:	4b2c      	ldr	r3, [pc, #176]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094f2:	4a2a      	ldr	r2, [pc, #168]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094f8:	4b27      	ldr	r3, [pc, #156]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d110      	bne.n	8009522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009500:	f000 fd02 	bl	8009f08 <prvInitialiseTaskLists>
 8009504:	e00d      	b.n	8009522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009506:	4b26      	ldr	r3, [pc, #152]	; (80095a0 <prvAddNewTaskToReadyList+0xcc>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800950e:	4b23      	ldr	r3, [pc, #140]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	429a      	cmp	r2, r3
 800951a:	d802      	bhi.n	8009522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800951c:	4a1f      	ldr	r2, [pc, #124]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009522:	4b20      	ldr	r3, [pc, #128]	; (80095a4 <prvAddNewTaskToReadyList+0xd0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3301      	adds	r3, #1
 8009528:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <prvAddNewTaskToReadyList+0xd0>)
 800952a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800952c:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <prvAddNewTaskToReadyList+0xd0>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <prvAddNewTaskToReadyList+0xd4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d903      	bls.n	8009548 <prvAddNewTaskToReadyList+0x74>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <prvAddNewTaskToReadyList+0xd4>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a15      	ldr	r2, [pc, #84]	; (80095ac <prvAddNewTaskToReadyList+0xd8>)
 8009556:	441a      	add	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7ff f87f 	bl	8008662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009564:	f001 fb16 	bl	800ab94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <prvAddNewTaskToReadyList+0xcc>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00e      	beq.n	800958e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	429a      	cmp	r2, r3
 800957c:	d207      	bcs.n	800958e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800957e:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <prvAddNewTaskToReadyList+0xdc>)
 8009580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	2000117c 	.word	0x2000117c
 800959c:	20000ca8 	.word	0x20000ca8
 80095a0:	20001188 	.word	0x20001188
 80095a4:	20001198 	.word	0x20001198
 80095a8:	20001184 	.word	0x20001184
 80095ac:	20000cac 	.word	0x20000cac
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d017      	beq.n	80095f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095c6:	4b13      	ldr	r3, [pc, #76]	; (8009614 <vTaskDelay+0x60>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <vTaskDelay+0x30>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60bb      	str	r3, [r7, #8]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095e4:	f000 f900 	bl	80097e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095e8:	2100      	movs	r1, #0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fdf0 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095f0:	f000 f908 	bl	8009804 <xTaskResumeAll>
 80095f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d107      	bne.n	800960c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <vTaskDelay+0x64>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	200011a4 	.word	0x200011a4
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009624:	f001 fa86 	bl	800ab34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <vTaskSuspend+0x18>
 800962e:	4b30      	ldr	r3, [pc, #192]	; (80096f0 <vTaskSuspend+0xd4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	e000      	b.n	8009636 <vTaskSuspend+0x1a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3304      	adds	r3, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f86d 	bl	800871c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3318      	adds	r3, #24
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff f864 	bl	800871c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4826      	ldr	r0, [pc, #152]	; (80096f4 <vTaskSuspend+0xd8>)
 800965c:	f7ff f801 	bl	8008662 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b01      	cmp	r3, #1
 800966a:	d103      	bne.n	8009674 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009674:	f001 fa8e 	bl	800ab94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009678:	4b1f      	ldr	r3, [pc, #124]	; (80096f8 <vTaskSuspend+0xdc>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009680:	f001 fa58 	bl	800ab34 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009684:	f000 fce2 	bl	800a04c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009688:	f001 fa84 	bl	800ab94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800968c:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <vTaskSuspend+0xd4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	429a      	cmp	r2, r3
 8009694:	d127      	bne.n	80096e6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009696:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <vTaskSuspend+0xdc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d017      	beq.n	80096ce <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800969e:	4b17      	ldr	r3, [pc, #92]	; (80096fc <vTaskSuspend+0xe0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <vTaskSuspend+0xa0>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60bb      	str	r3, [r7, #8]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <vTaskSuspend+0xe4>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096cc:	e00b      	b.n	80096e6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <vTaskSuspend+0xd8>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <vTaskSuspend+0xe8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d103      	bne.n	80096e2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <vTaskSuspend+0xd4>)
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
	}
 80096e0:	e001      	b.n	80096e6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80096e2:	f000 f9fb 	bl	8009adc <vTaskSwitchContext>
	}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000ca8 	.word	0x20000ca8
 80096f4:	20001168 	.word	0x20001168
 80096f8:	20001188 	.word	0x20001188
 80096fc:	200011a4 	.word	0x200011a4
 8009700:	e000ed04 	.word	0xe000ed04
 8009704:	2000117c 	.word	0x2000117c

08009708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	; 0x28
 800970c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009716:	463a      	mov	r2, r7
 8009718:	1d39      	adds	r1, r7, #4
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe fdc2 	bl	80082a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	9202      	str	r2, [sp, #8]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	460a      	mov	r2, r1
 8009736:	4924      	ldr	r1, [pc, #144]	; (80097c8 <vTaskStartScheduler+0xc0>)
 8009738:	4824      	ldr	r0, [pc, #144]	; (80097cc <vTaskStartScheduler+0xc4>)
 800973a:	f7ff fd8b 	bl	8009254 <xTaskCreateStatic>
 800973e:	4603      	mov	r3, r0
 8009740:	4a23      	ldr	r2, [pc, #140]	; (80097d0 <vTaskStartScheduler+0xc8>)
 8009742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009744:	4b22      	ldr	r3, [pc, #136]	; (80097d0 <vTaskStartScheduler+0xc8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800974c:	2301      	movs	r3, #1
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e001      	b.n	8009756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d102      	bne.n	8009762 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800975c:	f000 fd8c 	bl	800a278 <xTimerCreateTimerTask>
 8009760:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d11b      	bne.n	80097a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	613b      	str	r3, [r7, #16]
}
 800977a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800977c:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <vTaskStartScheduler+0xcc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3358      	adds	r3, #88	; 0x58
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <vTaskStartScheduler+0xd0>)
 8009784:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009786:	4b15      	ldr	r3, [pc, #84]	; (80097dc <vTaskStartScheduler+0xd4>)
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <vTaskStartScheduler+0xd8>)
 8009790:	2201      	movs	r2, #1
 8009792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009794:	4b13      	ldr	r3, [pc, #76]	; (80097e4 <vTaskStartScheduler+0xdc>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800979a:	f001 f929 	bl	800a9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800979e:	e00e      	b.n	80097be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d10a      	bne.n	80097be <vTaskStartScheduler+0xb6>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <vTaskStartScheduler+0xb4>
}
 80097be:	bf00      	nop
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	0800c310 	.word	0x0800c310
 80097cc:	08009ed9 	.word	0x08009ed9
 80097d0:	200011a0 	.word	0x200011a0
 80097d4:	20000ca8 	.word	0x20000ca8
 80097d8:	200000e4 	.word	0x200000e4
 80097dc:	2000119c 	.word	0x2000119c
 80097e0:	20001188 	.word	0x20001188
 80097e4:	20001180 	.word	0x20001180

080097e8 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <vTaskSuspendAll+0x18>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	4a03      	ldr	r2, [pc, #12]	; (8009800 <vTaskSuspendAll+0x18>)
 80097f4:	6013      	str	r3, [r2, #0]
}
 80097f6:	bf00      	nop
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	200011a4 	.word	0x200011a4

08009804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009812:	4b42      	ldr	r3, [pc, #264]	; (800991c <xTaskResumeAll+0x118>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <xTaskResumeAll+0x2c>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	603b      	str	r3, [r7, #0]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009830:	f001 f980 	bl	800ab34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009834:	4b39      	ldr	r3, [pc, #228]	; (800991c <xTaskResumeAll+0x118>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3b01      	subs	r3, #1
 800983a:	4a38      	ldr	r2, [pc, #224]	; (800991c <xTaskResumeAll+0x118>)
 800983c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800983e:	4b37      	ldr	r3, [pc, #220]	; (800991c <xTaskResumeAll+0x118>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d162      	bne.n	800990c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009846:	4b36      	ldr	r3, [pc, #216]	; (8009920 <xTaskResumeAll+0x11c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d05e      	beq.n	800990c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800984e:	e02f      	b.n	80098b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009850:	4b34      	ldr	r3, [pc, #208]	; (8009924 <xTaskResumeAll+0x120>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3318      	adds	r3, #24
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe ff5d 	bl	800871c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3304      	adds	r3, #4
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe ff58 	bl	800871c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009870:	4b2d      	ldr	r3, [pc, #180]	; (8009928 <xTaskResumeAll+0x124>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d903      	bls.n	8009880 <xTaskResumeAll+0x7c>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <xTaskResumeAll+0x124>)
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4a27      	ldr	r2, [pc, #156]	; (800992c <xTaskResumeAll+0x128>)
 800988e:	441a      	add	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe fee3 	bl	8008662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4b23      	ldr	r3, [pc, #140]	; (8009930 <xTaskResumeAll+0x12c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d302      	bcc.n	80098b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098aa:	4b22      	ldr	r3, [pc, #136]	; (8009934 <xTaskResumeAll+0x130>)
 80098ac:	2201      	movs	r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b0:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <xTaskResumeAll+0x120>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1cb      	bne.n	8009850 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098be:	f000 fbc5 	bl	800a04c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <xTaskResumeAll+0x134>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d010      	beq.n	80098f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098ce:	f000 f847 	bl	8009960 <xTaskIncrementTick>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098d8:	4b16      	ldr	r3, [pc, #88]	; (8009934 <xTaskResumeAll+0x130>)
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1f1      	bne.n	80098ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80098ea:	4b13      	ldr	r3, [pc, #76]	; (8009938 <xTaskResumeAll+0x134>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTaskResumeAll+0x130>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d009      	beq.n	800990c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098f8:	2301      	movs	r3, #1
 80098fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <xTaskResumeAll+0x138>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800990c:	f001 f942 	bl	800ab94 <vPortExitCritical>

	return xAlreadyYielded;
 8009910:	68bb      	ldr	r3, [r7, #8]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200011a4 	.word	0x200011a4
 8009920:	2000117c 	.word	0x2000117c
 8009924:	2000113c 	.word	0x2000113c
 8009928:	20001184 	.word	0x20001184
 800992c:	20000cac 	.word	0x20000cac
 8009930:	20000ca8 	.word	0x20000ca8
 8009934:	20001190 	.word	0x20001190
 8009938:	2000118c 	.word	0x2000118c
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <xTaskGetTickCount+0x1c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800994c:	687b      	ldr	r3, [r7, #4]
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20001180 	.word	0x20001180

08009960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800996a:	4b51      	ldr	r3, [pc, #324]	; (8009ab0 <xTaskIncrementTick+0x150>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 808e 	bne.w	8009a90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009974:	4b4f      	ldr	r3, [pc, #316]	; (8009ab4 <xTaskIncrementTick+0x154>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800997c:	4a4d      	ldr	r2, [pc, #308]	; (8009ab4 <xTaskIncrementTick+0x154>)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d120      	bne.n	80099ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009988:	4b4b      	ldr	r3, [pc, #300]	; (8009ab8 <xTaskIncrementTick+0x158>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00a      	beq.n	80099a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	603b      	str	r3, [r7, #0]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <xTaskIncrementTick+0x46>
 80099a8:	4b43      	ldr	r3, [pc, #268]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	4b43      	ldr	r3, [pc, #268]	; (8009abc <xTaskIncrementTick+0x15c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a41      	ldr	r2, [pc, #260]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	4a41      	ldr	r2, [pc, #260]	; (8009abc <xTaskIncrementTick+0x15c>)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	4b40      	ldr	r3, [pc, #256]	; (8009ac0 <xTaskIncrementTick+0x160>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a3f      	ldr	r2, [pc, #252]	; (8009ac0 <xTaskIncrementTick+0x160>)
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	f000 fb41 	bl	800a04c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099ca:	4b3e      	ldr	r3, [pc, #248]	; (8009ac4 <xTaskIncrementTick+0x164>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d34e      	bcc.n	8009a72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099d4:	4b38      	ldr	r3, [pc, #224]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <xTaskIncrementTick+0x82>
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <xTaskIncrementTick+0x84>
 80099e2:	2300      	movs	r3, #0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e8:	4b36      	ldr	r3, [pc, #216]	; (8009ac4 <xTaskIncrementTick+0x164>)
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	601a      	str	r2, [r3, #0]
					break;
 80099f0:	e03f      	b.n	8009a72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099f2:	4b31      	ldr	r3, [pc, #196]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d203      	bcs.n	8009a12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a0a:	4a2e      	ldr	r2, [pc, #184]	; (8009ac4 <xTaskIncrementTick+0x164>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6013      	str	r3, [r2, #0]
						break;
 8009a10:	e02f      	b.n	8009a72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	3304      	adds	r3, #4
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fe80 	bl	800871c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	3318      	adds	r3, #24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fe77 	bl	800871c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a32:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <xTaskIncrementTick+0x168>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d903      	bls.n	8009a42 <xTaskIncrementTick+0xe2>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	4a22      	ldr	r2, [pc, #136]	; (8009ac8 <xTaskIncrementTick+0x168>)
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4a1f      	ldr	r2, [pc, #124]	; (8009acc <xTaskIncrementTick+0x16c>)
 8009a50:	441a      	add	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3304      	adds	r3, #4
 8009a56:	4619      	mov	r1, r3
 8009a58:	4610      	mov	r0, r2
 8009a5a:	f7fe fe02 	bl	8008662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a62:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <xTaskIncrementTick+0x170>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d3b3      	bcc.n	80099d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a70:	e7b0      	b.n	80099d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <xTaskIncrementTick+0x170>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	4914      	ldr	r1, [pc, #80]	; (8009acc <xTaskIncrementTick+0x16c>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d907      	bls.n	8009a9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	617b      	str	r3, [r7, #20]
 8009a8e:	e004      	b.n	8009a9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <xTaskIncrementTick+0x174>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <xTaskIncrementTick+0x174>)
 8009a98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <xTaskIncrementTick+0x178>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009aa6:	697b      	ldr	r3, [r7, #20]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	200011a4 	.word	0x200011a4
 8009ab4:	20001180 	.word	0x20001180
 8009ab8:	20001134 	.word	0x20001134
 8009abc:	20001138 	.word	0x20001138
 8009ac0:	20001194 	.word	0x20001194
 8009ac4:	2000119c 	.word	0x2000119c
 8009ac8:	20001184 	.word	0x20001184
 8009acc:	20000cac 	.word	0x20000cac
 8009ad0:	20000ca8 	.word	0x20000ca8
 8009ad4:	2000118c 	.word	0x2000118c
 8009ad8:	20001190 	.word	0x20001190

08009adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ae2:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <vTaskSwitchContext+0xb0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009aea:	4b29      	ldr	r3, [pc, #164]	; (8009b90 <vTaskSwitchContext+0xb4>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009af0:	e046      	b.n	8009b80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009af2:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <vTaskSwitchContext+0xb4>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009af8:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <vTaskSwitchContext+0xb8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e010      	b.n	8009b22 <vTaskSwitchContext+0x46>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <vTaskSwitchContext+0x40>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	607b      	str	r3, [r7, #4]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <vTaskSwitchContext+0x3e>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	491d      	ldr	r1, [pc, #116]	; (8009b98 <vTaskSwitchContext+0xbc>)
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0e4      	beq.n	8009b00 <vTaskSwitchContext+0x24>
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4a15      	ldr	r2, [pc, #84]	; (8009b98 <vTaskSwitchContext+0xbc>)
 8009b42:	4413      	add	r3, r2
 8009b44:	60bb      	str	r3, [r7, #8]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	605a      	str	r2, [r3, #4]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	3308      	adds	r3, #8
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d104      	bne.n	8009b66 <vTaskSwitchContext+0x8a>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4a0b      	ldr	r2, [pc, #44]	; (8009b9c <vTaskSwitchContext+0xc0>)
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4a08      	ldr	r2, [pc, #32]	; (8009b94 <vTaskSwitchContext+0xb8>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <vTaskSwitchContext+0xc0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3358      	adds	r3, #88	; 0x58
 8009b7c:	4a08      	ldr	r2, [pc, #32]	; (8009ba0 <vTaskSwitchContext+0xc4>)
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	200011a4 	.word	0x200011a4
 8009b90:	20001190 	.word	0x20001190
 8009b94:	20001184 	.word	0x20001184
 8009b98:	20000cac 	.word	0x20000cac
 8009b9c:	20000ca8 	.word	0x20000ca8
 8009ba0:	200000e4 	.word	0x200000e4

08009ba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60fb      	str	r3, [r7, #12]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bca:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <vTaskPlaceOnEventList+0x44>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3318      	adds	r3, #24
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fe fd69 	bl	80086aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bd8:	2101      	movs	r1, #1
 8009bda:	6838      	ldr	r0, [r7, #0]
 8009bdc:	f000 faf8 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
}
 8009be0:	bf00      	nop
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000ca8 	.word	0x20000ca8

08009bec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	617b      	str	r3, [r7, #20]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3318      	adds	r3, #24
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7fe fd20 	bl	8008662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c28:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f000 facd 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
	}
 8009c36:	bf00      	nop
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000ca8 	.word	0x20000ca8

08009c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	60fb      	str	r3, [r7, #12]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	3318      	adds	r3, #24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fd51 	bl	800871c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7a:	4b1e      	ldr	r3, [pc, #120]	; (8009cf4 <xTaskRemoveFromEventList+0xb0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d11d      	bne.n	8009cbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3304      	adds	r3, #4
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fd48 	bl	800871c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4b19      	ldr	r3, [pc, #100]	; (8009cf8 <xTaskRemoveFromEventList+0xb4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d903      	bls.n	8009ca0 <xTaskRemoveFromEventList+0x5c>
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <xTaskRemoveFromEventList+0xb4>)
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <xTaskRemoveFromEventList+0xb8>)
 8009cae:	441a      	add	r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fe fcd3 	bl	8008662 <vListInsertEnd>
 8009cbc:	e005      	b.n	8009cca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	3318      	adds	r3, #24
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	480e      	ldr	r0, [pc, #56]	; (8009d00 <xTaskRemoveFromEventList+0xbc>)
 8009cc6:	f7fe fccc 	bl	8008662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	4b0d      	ldr	r3, [pc, #52]	; (8009d04 <xTaskRemoveFromEventList+0xc0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d905      	bls.n	8009ce4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <xTaskRemoveFromEventList+0xc4>)
 8009cde:	2201      	movs	r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	e001      	b.n	8009ce8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009ce8:	697b      	ldr	r3, [r7, #20]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	200011a4 	.word	0x200011a4
 8009cf8:	20001184 	.word	0x20001184
 8009cfc:	20000cac 	.word	0x20000cac
 8009d00:	2000113c 	.word	0x2000113c
 8009d04:	20000ca8 	.word	0x20000ca8
 8009d08:	20001190 	.word	0x20001190

08009d0c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009d16:	4b29      	ldr	r3, [pc, #164]	; (8009dbc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	613b      	str	r3, [r7, #16]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	60fb      	str	r3, [r7, #12]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fe fcdb 	bl	800871c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fcd6 	bl	800871c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d903      	bls.n	8009d84 <vTaskRemoveFromUnorderedEventList+0x78>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	4a0f      	ldr	r2, [pc, #60]	; (8009dc0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009d92:	441a      	add	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7fe fc61 	bl	8008662 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d902      	bls.n	8009db4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
	}
}
 8009db4:	bf00      	nop
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200011a4 	.word	0x200011a4
 8009dc0:	20001184 	.word	0x20001184
 8009dc4:	20000cac 	.word	0x20000cac
 8009dc8:	20000ca8 	.word	0x20000ca8
 8009dcc:	20001190 	.word	0x20001190

08009dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <vTaskInternalSetTimeOutState+0x24>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <vTaskInternalSetTimeOutState+0x28>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	20001194 	.word	0x20001194
 8009df8:	20001180 	.word	0x20001180

08009dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	613b      	str	r3, [r7, #16]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e3e:	f000 fe79 	bl	800ab34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <xTaskCheckForTimeOut+0xbc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5a:	d102      	bne.n	8009e62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	e023      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <xTaskCheckForTimeOut+0xc0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d007      	beq.n	8009e7e <xTaskCheckForTimeOut+0x82>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	61fb      	str	r3, [r7, #28]
 8009e7c:	e015      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d20b      	bcs.n	8009ea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff9b 	bl	8009dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	e004      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009eaa:	f000 fe73 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 8009eae:	69fb      	ldr	r3, [r7, #28]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20001180 	.word	0x20001180
 8009ebc:	20001194 	.word	0x20001194

08009ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ec4:	4b03      	ldr	r3, [pc, #12]	; (8009ed4 <vTaskMissedYield+0x14>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	20001190 	.word	0x20001190

08009ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ee0:	f000 f852 	bl	8009f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <prvIdleTask+0x28>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d9f9      	bls.n	8009ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <prvIdleTask+0x2c>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009efc:	e7f0      	b.n	8009ee0 <prvIdleTask+0x8>
 8009efe:	bf00      	nop
 8009f00:	20000cac 	.word	0x20000cac
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f0e:	2300      	movs	r3, #0
 8009f10:	607b      	str	r3, [r7, #4]
 8009f12:	e00c      	b.n	8009f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <prvInitialiseTaskLists+0x60>)
 8009f20:	4413      	add	r3, r2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fb70 	bl	8008608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b37      	cmp	r3, #55	; 0x37
 8009f32:	d9ef      	bls.n	8009f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f34:	480d      	ldr	r0, [pc, #52]	; (8009f6c <prvInitialiseTaskLists+0x64>)
 8009f36:	f7fe fb67 	bl	8008608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f3a:	480d      	ldr	r0, [pc, #52]	; (8009f70 <prvInitialiseTaskLists+0x68>)
 8009f3c:	f7fe fb64 	bl	8008608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f40:	480c      	ldr	r0, [pc, #48]	; (8009f74 <prvInitialiseTaskLists+0x6c>)
 8009f42:	f7fe fb61 	bl	8008608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f46:	480c      	ldr	r0, [pc, #48]	; (8009f78 <prvInitialiseTaskLists+0x70>)
 8009f48:	f7fe fb5e 	bl	8008608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f4c:	480b      	ldr	r0, [pc, #44]	; (8009f7c <prvInitialiseTaskLists+0x74>)
 8009f4e:	f7fe fb5b 	bl	8008608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f52:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <prvInitialiseTaskLists+0x78>)
 8009f54:	4a05      	ldr	r2, [pc, #20]	; (8009f6c <prvInitialiseTaskLists+0x64>)
 8009f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <prvInitialiseTaskLists+0x7c>)
 8009f5a:	4a05      	ldr	r2, [pc, #20]	; (8009f70 <prvInitialiseTaskLists+0x68>)
 8009f5c:	601a      	str	r2, [r3, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000cac 	.word	0x20000cac
 8009f6c:	2000110c 	.word	0x2000110c
 8009f70:	20001120 	.word	0x20001120
 8009f74:	2000113c 	.word	0x2000113c
 8009f78:	20001150 	.word	0x20001150
 8009f7c:	20001168 	.word	0x20001168
 8009f80:	20001134 	.word	0x20001134
 8009f84:	20001138 	.word	0x20001138

08009f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f8e:	e019      	b.n	8009fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f90:	f000 fdd0 	bl	800ab34 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <prvCheckTasksWaitingTermination+0x50>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fbbb 	bl	800871c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <prvCheckTasksWaitingTermination+0x54>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4a0b      	ldr	r2, [pc, #44]	; (8009fdc <prvCheckTasksWaitingTermination+0x54>)
 8009fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fba:	f000 fdeb 	bl	800ab94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f810 	bl	8009fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e1      	bne.n	8009f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20001150 	.word	0x20001150
 8009fdc:	2000117c 	.word	0x2000117c
 8009fe0:	20001164 	.word	0x20001164

08009fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3358      	adds	r3, #88	; 0x58
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 fabb 	bl	800b56c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d108      	bne.n	800a012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	4618      	mov	r0, r3
 800a006:	f000 ff7b 	bl	800af00 <vPortFree>
				vPortFree( pxTCB );
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 ff78 	bl	800af00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a010:	e018      	b.n	800a044 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d103      	bne.n	800a024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 ff6f 	bl	800af00 <vPortFree>
	}
 800a022:	e00f      	b.n	800a044 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d00a      	beq.n	800a044 <prvDeleteTCB+0x60>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	60fb      	str	r3, [r7, #12]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <prvDeleteTCB+0x5e>
	}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a052:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <prvResetNextTaskUnblockTime+0x44>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <prvResetNextTaskUnblockTime+0x14>
 800a05c:	2301      	movs	r3, #1
 800a05e:	e000      	b.n	800a062 <prvResetNextTaskUnblockTime+0x16>
 800a060:	2300      	movs	r3, #0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <prvResetNextTaskUnblockTime+0x48>)
 800a068:	f04f 32ff 	mov.w	r2, #4294967295
 800a06c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a06e:	e008      	b.n	800a082 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <prvResetNextTaskUnblockTime+0x44>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4a05      	ldr	r2, [pc, #20]	; (800a094 <prvResetNextTaskUnblockTime+0x48>)
 800a080:	6013      	str	r3, [r2, #0]
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20001134 	.word	0x20001134
 800a094:	2000119c 	.word	0x2000119c

0800a098 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <xTaskGetCurrentTaskHandle+0x1c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a0a4:	687b      	ldr	r3, [r7, #4]
	}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20000ca8 	.word	0x20000ca8

0800a0b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <xTaskGetSchedulerState+0x34>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	e008      	b.n	800a0de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0cc:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <xTaskGetSchedulerState+0x38>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e001      	b.n	800a0de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0de:	687b      	ldr	r3, [r7, #4]
	}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20001188 	.word	0x20001188
 800a0f0:	200011a4 	.word	0x200011a4

0800a0f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d056      	beq.n	800a1b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a10a:	4b2e      	ldr	r3, [pc, #184]	; (800a1c4 <xTaskPriorityDisinherit+0xd0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	429a      	cmp	r2, r3
 800a112:	d00a      	beq.n	800a12a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60bb      	str	r3, [r7, #8]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14c:	1e5a      	subs	r2, r3, #1
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d02c      	beq.n	800a1b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	2b00      	cmp	r3, #0
 800a164:	d128      	bne.n	800a1b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3304      	adds	r3, #4
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fad6 	bl	800871c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <xTaskPriorityDisinherit+0xd4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d903      	bls.n	800a198 <xTaskPriorityDisinherit+0xa4>
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <xTaskPriorityDisinherit+0xd4>)
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4a09      	ldr	r2, [pc, #36]	; (800a1cc <xTaskPriorityDisinherit+0xd8>)
 800a1a6:	441a      	add	r2, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f7fe fa57 	bl	8008662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1b8:	697b      	ldr	r3, [r7, #20]
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000ca8 	.word	0x20000ca8
 800a1c8:	20001184 	.word	0x20001184
 800a1cc:	20000cac 	.word	0x20000cac

0800a1d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e0:	4b20      	ldr	r3, [pc, #128]	; (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fa98 	bl	800871c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d10a      	bne.n	800a20a <prvAddCurrentTaskToDelayedList+0x3a>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4819      	ldr	r0, [pc, #100]	; (800a268 <prvAddCurrentTaskToDelayedList+0x98>)
 800a204:	f7fe fa2d 	bl	8008662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a208:	e026      	b.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4413      	add	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a212:	4b14      	ldr	r3, [pc, #80]	; (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d209      	bcs.n	800a236 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a222:	4b12      	ldr	r3, [pc, #72]	; (800a26c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fe fa3b 	bl	80086aa <vListInsert>
}
 800a234:	e010      	b.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a236:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7fe fa31 	bl	80086aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a248:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d202      	bcs.n	800a258 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a252:	4a08      	ldr	r2, [pc, #32]	; (800a274 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	6013      	str	r3, [r2, #0]
}
 800a258:	bf00      	nop
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20001180 	.word	0x20001180
 800a264:	20000ca8 	.word	0x20000ca8
 800a268:	20001168 	.word	0x20001168
 800a26c:	20001138 	.word	0x20001138
 800a270:	20001134 	.word	0x20001134
 800a274:	2000119c 	.word	0x2000119c

0800a278 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	; 0x28
 800a27c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a282:	f000 facb 	bl	800a81c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a286:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <xTimerCreateTimerTask+0x80>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d021      	beq.n	800a2d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a296:	1d3a      	adds	r2, r7, #4
 800a298:	f107 0108 	add.w	r1, r7, #8
 800a29c:	f107 030c 	add.w	r3, r7, #12
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe f81b 	bl	80082dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	9202      	str	r2, [sp, #8]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	4910      	ldr	r1, [pc, #64]	; (800a2fc <xTimerCreateTimerTask+0x84>)
 800a2ba:	4811      	ldr	r0, [pc, #68]	; (800a300 <xTimerCreateTimerTask+0x88>)
 800a2bc:	f7fe ffca 	bl	8009254 <xTaskCreateStatic>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4a10      	ldr	r2, [pc, #64]	; (800a304 <xTimerCreateTimerTask+0x8c>)
 800a2c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <xTimerCreateTimerTask+0x8c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	613b      	str	r3, [r7, #16]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2ee:	697b      	ldr	r3, [r7, #20]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	200011d8 	.word	0x200011d8
 800a2fc:	0800c318 	.word	0x0800c318
 800a300:	0800a425 	.word	0x0800a425
 800a304:	200011dc 	.word	0x200011dc

0800a308 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a316:	2300      	movs	r3, #0
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a336:	4b1a      	ldr	r3, [pc, #104]	; (800a3a0 <xTimerGenericCommand+0x98>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d02a      	beq.n	800a394 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b05      	cmp	r3, #5
 800a34e:	dc18      	bgt.n	800a382 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a350:	f7ff feb2 	bl	800a0b8 <xTaskGetSchedulerState>
 800a354:	4603      	mov	r3, r0
 800a356:	2b02      	cmp	r3, #2
 800a358:	d109      	bne.n	800a36e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <xTimerGenericCommand+0x98>)
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f107 0110 	add.w	r1, r7, #16
 800a362:	2300      	movs	r3, #0
 800a364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a366:	f7fe fb91 	bl	8008a8c <xQueueGenericSend>
 800a36a:	6278      	str	r0, [r7, #36]	; 0x24
 800a36c:	e012      	b.n	800a394 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a36e:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <xTimerGenericCommand+0x98>)
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f107 0110 	add.w	r1, r7, #16
 800a376:	2300      	movs	r3, #0
 800a378:	2200      	movs	r2, #0
 800a37a:	f7fe fb87 	bl	8008a8c <xQueueGenericSend>
 800a37e:	6278      	str	r0, [r7, #36]	; 0x24
 800a380:	e008      	b.n	800a394 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a382:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <xTimerGenericCommand+0x98>)
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	f107 0110 	add.w	r1, r7, #16
 800a38a:	2300      	movs	r3, #0
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	f7fe fc7b 	bl	8008c88 <xQueueGenericSendFromISR>
 800a392:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a396:	4618      	mov	r0, r3
 800a398:	3728      	adds	r7, #40	; 0x28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200011d8 	.word	0x200011d8

0800a3a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b088      	sub	sp, #32
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ae:	4b1c      	ldr	r3, [pc, #112]	; (800a420 <prvProcessExpiredTimer+0x7c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe f9ad 	bl	800871c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d122      	bne.n	800a410 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	18d1      	adds	r1, r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	6978      	ldr	r0, [r7, #20]
 800a3d8:	f000 f8c8 	bl	800a56c <prvInsertTimerInActiveList>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d016      	beq.n	800a410 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	6978      	ldr	r0, [r7, #20]
 800a3ee:	f7ff ff8b 	bl	800a308 <xTimerGenericCommand>
 800a3f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	60fb      	str	r3, [r7, #12]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	6978      	ldr	r0, [r7, #20]
 800a416:	4798      	blx	r3
}
 800a418:	bf00      	nop
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	200011d0 	.word	0x200011d0

0800a424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f857 	bl	800a4e4 <prvGetNextExpireTime>
 800a436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4619      	mov	r1, r3
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f803 	bl	800a448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a442:	f000 f8d5 	bl	800a5f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a446:	e7f1      	b.n	800a42c <prvTimerTask+0x8>

0800a448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a452:	f7ff f9c9 	bl	80097e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a456:	f107 0308 	add.w	r3, r7, #8
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f866 	bl	800a52c <prvSampleTimeNow>
 800a460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d130      	bne.n	800a4ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <prvProcessTimerOrBlockTask+0x3c>
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	429a      	cmp	r2, r3
 800a474:	d806      	bhi.n	800a484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a476:	f7ff f9c5 	bl	8009804 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff91 	bl	800a3a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a482:	e024      	b.n	800a4ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d008      	beq.n	800a49c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <prvProcessTimerOrBlockTask+0x90>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <prvProcessTimerOrBlockTask+0x94>)
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f7fe fe9f 	bl	80091ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ae:	f7ff f9a9 	bl	8009804 <xTaskResumeAll>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4b8:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <prvProcessTimerOrBlockTask+0x98>)
 800a4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	f3bf 8f6f 	isb	sy
}
 800a4c8:	e001      	b.n	800a4ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4ca:	f7ff f99b 	bl	8009804 <xTaskResumeAll>
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	200011d4 	.word	0x200011d4
 800a4dc:	200011d8 	.word	0x200011d8
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4ec:	4b0e      	ldr	r3, [pc, #56]	; (800a528 <prvGetNextExpireTime+0x44>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bf0c      	ite	eq
 800a4f6:	2301      	moveq	r3, #1
 800a4f8:	2300      	movne	r3, #0
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d105      	bne.n	800a516 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a50a:	4b07      	ldr	r3, [pc, #28]	; (800a528 <prvGetNextExpireTime+0x44>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e001      	b.n	800a51a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	200011d0 	.word	0x200011d0

0800a52c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a534:	f7ff fa04 	bl	8009940 <xTaskGetTickCount>
 800a538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <prvSampleTimeNow+0x3c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	429a      	cmp	r2, r3
 800a542:	d205      	bcs.n	800a550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a544:	f000 f908 	bl	800a758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e002      	b.n	800a556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a556:	4a04      	ldr	r2, [pc, #16]	; (800a568 <prvSampleTimeNow+0x3c>)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a55c:	68fb      	ldr	r3, [r7, #12]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200011e0 	.word	0x200011e0

0800a56c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d812      	bhi.n	800a5b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e01b      	b.n	800a5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5a6:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <prvInsertTimerInActiveList+0x7c>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	f7fe f87a 	bl	80086aa <vListInsert>
 800a5b6:	e012      	b.n	800a5de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d206      	bcs.n	800a5ce <prvInsertTimerInActiveList+0x62>
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d302      	bcc.n	800a5ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e007      	b.n	800a5de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ce:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <prvInsertTimerInActiveList+0x80>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fe f866 	bl	80086aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5de:	697b      	ldr	r3, [r7, #20]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3718      	adds	r7, #24
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200011d4 	.word	0x200011d4
 800a5ec:	200011d0 	.word	0x200011d0

0800a5f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08e      	sub	sp, #56	; 0x38
 800a5f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5f6:	e09d      	b.n	800a734 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da18      	bge.n	800a630 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5fe:	1d3b      	adds	r3, r7, #4
 800a600:	3304      	adds	r3, #4
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	61fb      	str	r3, [r7, #28]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a626:	6850      	ldr	r0, [r2, #4]
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	6892      	ldr	r2, [r2, #8]
 800a62c:	4611      	mov	r1, r2
 800a62e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	db7e      	blt.n	800a734 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d004      	beq.n	800a64c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	3304      	adds	r3, #4
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe f868 	bl	800871c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a64c:	463b      	mov	r3, r7
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff ff6c 	bl	800a52c <prvSampleTimeNow>
 800a654:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b09      	cmp	r3, #9
 800a65a:	d86a      	bhi.n	800a732 <prvProcessReceivedCommands+0x142>
 800a65c:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <prvProcessReceivedCommands+0x74>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a68d 	.word	0x0800a68d
 800a670:	0800a735 	.word	0x0800a735
 800a674:	0800a6e9 	.word	0x0800a6e9
 800a678:	0800a721 	.word	0x0800a721
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a68d 	.word	0x0800a68d
 800a684:	0800a735 	.word	0x0800a735
 800a688:	0800a6e9 	.word	0x0800a6e9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	18d1      	adds	r1, r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a69a:	f7ff ff67 	bl	800a56c <prvInsertTimerInActiveList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d047      	beq.n	800a734 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d13f      	bne.n	800a734 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c6:	f7ff fe1f 	bl	800a308 <xTimerGenericCommand>
 800a6ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d130      	bne.n	800a734 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	61bb      	str	r3, [r7, #24]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10a      	bne.n	800a70c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	617b      	str	r3, [r7, #20]
}
 800a708:	bf00      	nop
 800a70a:	e7fe      	b.n	800a70a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	699a      	ldr	r2, [r3, #24]
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	18d1      	adds	r1, r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a71a:	f7ff ff27 	bl	800a56c <prvInsertTimerInActiveList>
					break;
 800a71e:	e009      	b.n	800a734 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d104      	bne.n	800a734 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72c:	f000 fbe8 	bl	800af00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a730:	e000      	b.n	800a734 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a732:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a734:	4b07      	ldr	r3, [pc, #28]	; (800a754 <prvProcessReceivedCommands+0x164>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	1d39      	adds	r1, r7, #4
 800a73a:	2200      	movs	r2, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fb3b 	bl	8008db8 <xQueueReceive>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	f47f af57 	bne.w	800a5f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	3730      	adds	r7, #48	; 0x30
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200011d8 	.word	0x200011d8

0800a758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a75e:	e045      	b.n	800a7ec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a760:	4b2c      	ldr	r3, [pc, #176]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a76a:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3304      	adds	r3, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd ffcf 	bl	800871c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d12e      	bne.n	800a7ec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	4413      	add	r3, r2
 800a796:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d90e      	bls.n	800a7be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7ac:	4b19      	ldr	r3, [pc, #100]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fd ff77 	bl	80086aa <vListInsert>
 800a7bc:	e016      	b.n	800a7ec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fd9d 	bl	800a308 <xTimerGenericCommand>
 800a7ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <prvSwitchTimerLists+0x94>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	603b      	str	r3, [r7, #0]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7ec:	4b09      	ldr	r3, [pc, #36]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1b4      	bne.n	800a760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7f6:	4b07      	ldr	r3, [pc, #28]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <prvSwitchTimerLists+0xc0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a04      	ldr	r2, [pc, #16]	; (800a814 <prvSwitchTimerLists+0xbc>)
 800a802:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a804:	4a04      	ldr	r2, [pc, #16]	; (800a818 <prvSwitchTimerLists+0xc0>)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6013      	str	r3, [r2, #0]
}
 800a80a:	bf00      	nop
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200011d0 	.word	0x200011d0
 800a818:	200011d4 	.word	0x200011d4

0800a81c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a822:	f000 f987 	bl	800ab34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a826:	4b15      	ldr	r3, [pc, #84]	; (800a87c <prvCheckForValidListAndQueue+0x60>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d120      	bne.n	800a870 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a82e:	4814      	ldr	r0, [pc, #80]	; (800a880 <prvCheckForValidListAndQueue+0x64>)
 800a830:	f7fd feea 	bl	8008608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a834:	4813      	ldr	r0, [pc, #76]	; (800a884 <prvCheckForValidListAndQueue+0x68>)
 800a836:	f7fd fee7 	bl	8008608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <prvCheckForValidListAndQueue+0x6c>)
 800a83c:	4a10      	ldr	r2, [pc, #64]	; (800a880 <prvCheckForValidListAndQueue+0x64>)
 800a83e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a840:	4b12      	ldr	r3, [pc, #72]	; (800a88c <prvCheckForValidListAndQueue+0x70>)
 800a842:	4a10      	ldr	r2, [pc, #64]	; (800a884 <prvCheckForValidListAndQueue+0x68>)
 800a844:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a846:	2300      	movs	r3, #0
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	4b11      	ldr	r3, [pc, #68]	; (800a890 <prvCheckForValidListAndQueue+0x74>)
 800a84c:	4a11      	ldr	r2, [pc, #68]	; (800a894 <prvCheckForValidListAndQueue+0x78>)
 800a84e:	2110      	movs	r1, #16
 800a850:	200a      	movs	r0, #10
 800a852:	f7fd fff5 	bl	8008840 <xQueueGenericCreateStatic>
 800a856:	4603      	mov	r3, r0
 800a858:	4a08      	ldr	r2, [pc, #32]	; (800a87c <prvCheckForValidListAndQueue+0x60>)
 800a85a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a85c:	4b07      	ldr	r3, [pc, #28]	; (800a87c <prvCheckForValidListAndQueue+0x60>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <prvCheckForValidListAndQueue+0x60>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	490b      	ldr	r1, [pc, #44]	; (800a898 <prvCheckForValidListAndQueue+0x7c>)
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fc94 	bl	8009198 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a870:	f000 f990 	bl	800ab94 <vPortExitCritical>
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	200011d8 	.word	0x200011d8
 800a880:	200011a8 	.word	0x200011a8
 800a884:	200011bc 	.word	0x200011bc
 800a888:	200011d0 	.word	0x200011d0
 800a88c:	200011d4 	.word	0x200011d4
 800a890:	20001284 	.word	0x20001284
 800a894:	200011e4 	.word	0x200011e4
 800a898:	0800c320 	.word	0x0800c320

0800a89c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	; 0x28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a8aa:	f06f 0301 	mvn.w	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <xTimerPendFunctionCallFromISR+0x3c>)
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	f107 0114 	add.w	r1, r7, #20
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	f7fe f9de 	bl	8008c88 <xQueueGenericSendFromISR>
 800a8cc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3728      	adds	r7, #40	; 0x28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	200011d8 	.word	0x200011d8

0800a8dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b04      	subs	r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f023 0201 	bic.w	r2, r3, #1
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3b04      	subs	r3, #4
 800a90a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a90c:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <pxPortInitialiseStack+0x64>)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3b14      	subs	r3, #20
 800a916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3b04      	subs	r3, #4
 800a922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f06f 0202 	mvn.w	r2, #2
 800a92a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3b20      	subs	r3, #32
 800a930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a932:	68fb      	ldr	r3, [r7, #12]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	0800a945 	.word	0x0800a945

0800a944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a94e:	4b12      	ldr	r3, [pc, #72]	; (800a998 <prvTaskExitError+0x54>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d00a      	beq.n	800a96e <prvTaskExitError+0x2a>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	60fb      	str	r3, [r7, #12]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <prvTaskExitError+0x28>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60bb      	str	r3, [r7, #8]
}
 800a980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a982:	bf00      	nop
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0fc      	beq.n	800a984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a98a:	bf00      	nop
 800a98c:	bf00      	nop
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	20000088 	.word	0x20000088
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	20000ca8 	.word	0x20000ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9c8:	4808      	ldr	r0, [pc, #32]	; (800a9ec <prvPortStartFirstTask+0x24>)
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	6800      	ldr	r0, [r0, #0]
 800a9ce:	f380 8808 	msr	MSP, r0
 800a9d2:	f04f 0000 	mov.w	r0, #0
 800a9d6:	f380 8814 	msr	CONTROL, r0
 800a9da:	b662      	cpsie	i
 800a9dc:	b661      	cpsie	f
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	df00      	svc	0
 800a9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ea:	bf00      	nop
 800a9ec:	e000ed08 	.word	0xe000ed08

0800a9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9f6:	4b46      	ldr	r3, [pc, #280]	; (800ab10 <xPortStartScheduler+0x120>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a46      	ldr	r2, [pc, #280]	; (800ab14 <xPortStartScheduler+0x124>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d10a      	bne.n	800aa16 <xPortStartScheduler+0x26>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	613b      	str	r3, [r7, #16]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa16:	4b3e      	ldr	r3, [pc, #248]	; (800ab10 <xPortStartScheduler+0x120>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	; (800ab18 <xPortStartScheduler+0x128>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d10a      	bne.n	800aa36 <xPortStartScheduler+0x46>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa36:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <xPortStartScheduler+0x12c>)
 800aa38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	22ff      	movs	r2, #255	; 0xff
 800aa46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <xPortStartScheduler+0x130>)
 800aa5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa5e:	4b31      	ldr	r3, [pc, #196]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa64:	e009      	b.n	800aa7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa66:	4b2f      	ldr	r3, [pc, #188]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	4a2d      	ldr	r2, [pc, #180]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d0ef      	beq.n	800aa66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa86:	4b27      	ldr	r3, [pc, #156]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1c3 0307 	rsb	r3, r3, #7
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d00a      	beq.n	800aaa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60bb      	str	r3, [r7, #8]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <xPortStartScheduler+0x134>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	021b      	lsls	r3, r3, #8
 800aaae:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aab2:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <xPortStartScheduler+0x134>)
 800aabc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aac6:	4b18      	ldr	r3, [pc, #96]	; (800ab28 <xPortStartScheduler+0x138>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <xPortStartScheduler+0x138>)
 800aacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a14      	ldr	r2, [pc, #80]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aadc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aade:	f000 f8dd 	bl	800ac9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <xPortStartScheduler+0x13c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aae8:	f000 f8fc 	bl	800ace4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0f      	ldr	r2, [pc, #60]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aaf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aaf8:	f7ff ff66 	bl	800a9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aafc:	f7fe ffee 	bl	8009adc <vTaskSwitchContext>
	prvTaskExitError();
 800ab00:	f7ff ff20 	bl	800a944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	e000ed00 	.word	0xe000ed00
 800ab14:	410fc271 	.word	0x410fc271
 800ab18:	410fc270 	.word	0x410fc270
 800ab1c:	e000e400 	.word	0xe000e400
 800ab20:	200012d4 	.word	0x200012d4
 800ab24:	200012d8 	.word	0x200012d8
 800ab28:	e000ed20 	.word	0xe000ed20
 800ab2c:	20000088 	.word	0x20000088
 800ab30:	e000ef34 	.word	0xe000ef34

0800ab34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	607b      	str	r3, [r7, #4]
}
 800ab4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10f      	bne.n	800ab80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <vPortEnterCritical+0x5c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	603b      	str	r3, [r7, #0]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <vPortEnterCritical+0x4a>
	}
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	20000088 	.word	0x20000088
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <vPortExitCritical+0x50>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <vPortExitCritical+0x24>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	607b      	str	r3, [r7, #4]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <vPortExitCritical+0x50>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <vPortExitCritical+0x50>)
 800abc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abc2:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <vPortExitCritical+0x50>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <vPortExitCritical+0x42>
 800abca:	2300      	movs	r3, #0
 800abcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	f383 8811 	msr	BASEPRI, r3
}
 800abd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	20000088 	.word	0x20000088
	...

0800abf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abf0:	f3ef 8009 	mrs	r0, PSP
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <pxCurrentTCBConst>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	f01e 0f10 	tst.w	lr, #16
 800ac00:	bf08      	it	eq
 800ac02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	6010      	str	r0, [r2, #0]
 800ac0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac14:	f380 8811 	msr	BASEPRI, r0
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f7fe ff5c 	bl	8009adc <vTaskSwitchContext>
 800ac24:	f04f 0000 	mov.w	r0, #0
 800ac28:	f380 8811 	msr	BASEPRI, r0
 800ac2c:	bc09      	pop	{r0, r3}
 800ac2e:	6819      	ldr	r1, [r3, #0]
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac36:	f01e 0f10 	tst.w	lr, #16
 800ac3a:	bf08      	it	eq
 800ac3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac40:	f380 8809 	msr	PSP, r0
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst>:
 800ac50:	20000ca8 	.word	0x20000ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	607b      	str	r3, [r7, #4]
}
 800ac70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac72:	f7fe fe75 	bl	8009960 <xTaskIncrementTick>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <SysTick_Handler+0x40>)
 800ac7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	2300      	movs	r3, #0
 800ac86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f383 8811 	msr	BASEPRI, r3
}
 800ac8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aca0:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <vPortSetupTimerInterrupt+0x34>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aca6:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <vPortSetupTimerInterrupt+0x38>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <vPortSetupTimerInterrupt+0x3c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <vPortSetupTimerInterrupt+0x40>)
 800acb2:	fba2 2303 	umull	r2, r3, r2, r3
 800acb6:	099b      	lsrs	r3, r3, #6
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <vPortSetupTimerInterrupt+0x44>)
 800acba:	3b01      	subs	r3, #1
 800acbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acbe:	4b04      	ldr	r3, [pc, #16]	; (800acd0 <vPortSetupTimerInterrupt+0x34>)
 800acc0:	2207      	movs	r2, #7
 800acc2:	601a      	str	r2, [r3, #0]
}
 800acc4:	bf00      	nop
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	e000e010 	.word	0xe000e010
 800acd4:	e000e018 	.word	0xe000e018
 800acd8:	20000060 	.word	0x20000060
 800acdc:	10624dd3 	.word	0x10624dd3
 800ace0:	e000e014 	.word	0xe000e014

0800ace4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ace4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acf4 <vPortEnableVFP+0x10>
 800ace8:	6801      	ldr	r1, [r0, #0]
 800acea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acee:	6001      	str	r1, [r0, #0]
 800acf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acf2:	bf00      	nop
 800acf4:	e000ed88 	.word	0xe000ed88

0800acf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800acfe:	f3ef 8305 	mrs	r3, IPSR
 800ad02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b0f      	cmp	r3, #15
 800ad08:	d914      	bls.n	800ad34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad0a:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <vPortValidateInterruptPriority+0x70>)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4413      	add	r3, r2
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad14:	4b15      	ldr	r3, [pc, #84]	; (800ad6c <vPortValidateInterruptPriority+0x74>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	7afa      	ldrb	r2, [r7, #11]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d20a      	bcs.n	800ad34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	607b      	str	r3, [r7, #4]
}
 800ad30:	bf00      	nop
 800ad32:	e7fe      	b.n	800ad32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <vPortValidateInterruptPriority+0x78>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <vPortValidateInterruptPriority+0x7c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d90a      	bls.n	800ad5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	603b      	str	r3, [r7, #0]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <vPortValidateInterruptPriority+0x60>
	}
 800ad5a:	bf00      	nop
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	e000e3f0 	.word	0xe000e3f0
 800ad6c:	200012d4 	.word	0x200012d4
 800ad70:	e000ed0c 	.word	0xe000ed0c
 800ad74:	200012d8 	.word	0x200012d8

0800ad78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	; 0x28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad84:	f7fe fd30 	bl	80097e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad88:	4b58      	ldr	r3, [pc, #352]	; (800aeec <pvPortMalloc+0x174>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad90:	f000 f910 	bl	800afb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad94:	4b56      	ldr	r3, [pc, #344]	; (800aef0 <pvPortMalloc+0x178>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 808e 	bne.w	800aebe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01d      	beq.n	800ade4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ada8:	2208      	movs	r2, #8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d014      	beq.n	800ade4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f023 0307 	bic.w	r3, r3, #7
 800adc0:	3308      	adds	r3, #8
 800adc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <pvPortMalloc+0x6c>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	617b      	str	r3, [r7, #20]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d069      	beq.n	800aebe <pvPortMalloc+0x146>
 800adea:	4b42      	ldr	r3, [pc, #264]	; (800aef4 <pvPortMalloc+0x17c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d864      	bhi.n	800aebe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800adf4:	4b40      	ldr	r3, [pc, #256]	; (800aef8 <pvPortMalloc+0x180>)
 800adf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adf8:	4b3f      	ldr	r3, [pc, #252]	; (800aef8 <pvPortMalloc+0x180>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adfe:	e004      	b.n	800ae0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d903      	bls.n	800ae1c <pvPortMalloc+0xa4>
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1f1      	bne.n	800ae00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae1c:	4b33      	ldr	r3, [pc, #204]	; (800aeec <pvPortMalloc+0x174>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d04b      	beq.n	800aebe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	4413      	add	r3, r2
 800ae2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	2308      	movs	r3, #8
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d91f      	bls.n	800ae88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	f003 0307 	and.w	r3, r3, #7
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <pvPortMalloc+0xf8>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	613b      	str	r3, [r7, #16]
}
 800ae6c:	bf00      	nop
 800ae6e:	e7fe      	b.n	800ae6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae82:	69b8      	ldr	r0, [r7, #24]
 800ae84:	f000 f8f8 	bl	800b078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae88:	4b1a      	ldr	r3, [pc, #104]	; (800aef4 <pvPortMalloc+0x17c>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	4a18      	ldr	r2, [pc, #96]	; (800aef4 <pvPortMalloc+0x17c>)
 800ae94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae96:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <pvPortMalloc+0x17c>)
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4b18      	ldr	r3, [pc, #96]	; (800aefc <pvPortMalloc+0x184>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d203      	bcs.n	800aeaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aea2:	4b14      	ldr	r3, [pc, #80]	; (800aef4 <pvPortMalloc+0x17c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a15      	ldr	r2, [pc, #84]	; (800aefc <pvPortMalloc+0x184>)
 800aea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <pvPortMalloc+0x178>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aebe:	f7fe fca1 	bl	8009804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	f003 0307 	and.w	r3, r3, #7
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <pvPortMalloc+0x16a>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	60fb      	str	r3, [r7, #12]
}
 800aede:	bf00      	nop
 800aee0:	e7fe      	b.n	800aee0 <pvPortMalloc+0x168>
	return pvReturn;
 800aee2:	69fb      	ldr	r3, [r7, #28]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3728      	adds	r7, #40	; 0x28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	200026e4 	.word	0x200026e4
 800aef0:	200026f0 	.word	0x200026f0
 800aef4:	200026e8 	.word	0x200026e8
 800aef8:	200026dc 	.word	0x200026dc
 800aefc:	200026ec 	.word	0x200026ec

0800af00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d048      	beq.n	800afa4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af12:	2308      	movs	r3, #8
 800af14:	425b      	negs	r3, r3
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	4413      	add	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	4b21      	ldr	r3, [pc, #132]	; (800afac <vPortFree+0xac>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4013      	ands	r3, r2
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <vPortFree+0x44>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	60fb      	str	r3, [r7, #12]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <vPortFree+0x62>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	60bb      	str	r3, [r7, #8]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	4b11      	ldr	r3, [pc, #68]	; (800afac <vPortFree+0xac>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4013      	ands	r3, r2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d019      	beq.n	800afa4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d115      	bne.n	800afa4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <vPortFree+0xac>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	43db      	mvns	r3, r3
 800af82:	401a      	ands	r2, r3
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af88:	f7fe fc2e 	bl	80097e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <vPortFree+0xb0>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4413      	add	r3, r2
 800af96:	4a06      	ldr	r2, [pc, #24]	; (800afb0 <vPortFree+0xb0>)
 800af98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af9a:	6938      	ldr	r0, [r7, #16]
 800af9c:	f000 f86c 	bl	800b078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800afa0:	f7fe fc30 	bl	8009804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afa4:	bf00      	nop
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	200026f0 	.word	0x200026f0
 800afb0:	200026e8 	.word	0x200026e8

0800afb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800afbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800afc0:	4b27      	ldr	r3, [pc, #156]	; (800b060 <prvHeapInit+0xac>)
 800afc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f003 0307 	and.w	r3, r3, #7
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00c      	beq.n	800afe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3307      	adds	r3, #7
 800afd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	4a1f      	ldr	r2, [pc, #124]	; (800b060 <prvHeapInit+0xac>)
 800afe4:	4413      	add	r3, r2
 800afe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afec:	4a1d      	ldr	r2, [pc, #116]	; (800b064 <prvHeapInit+0xb0>)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aff2:	4b1c      	ldr	r3, [pc, #112]	; (800b064 <prvHeapInit+0xb0>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	4413      	add	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b000:	2208      	movs	r2, #8
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 0307 	bic.w	r3, r3, #7
 800b00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4a15      	ldr	r2, [pc, #84]	; (800b068 <prvHeapInit+0xb4>)
 800b014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b016:	4b14      	ldr	r3, [pc, #80]	; (800b068 <prvHeapInit+0xb4>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b01e:	4b12      	ldr	r3, [pc, #72]	; (800b068 <prvHeapInit+0xb4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <prvHeapInit+0xb4>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	4a0a      	ldr	r2, [pc, #40]	; (800b06c <prvHeapInit+0xb8>)
 800b042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4a09      	ldr	r2, [pc, #36]	; (800b070 <prvHeapInit+0xbc>)
 800b04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <prvHeapInit+0xc0>)
 800b04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b052:	601a      	str	r2, [r3, #0]
}
 800b054:	bf00      	nop
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	200012dc 	.word	0x200012dc
 800b064:	200026dc 	.word	0x200026dc
 800b068:	200026e4 	.word	0x200026e4
 800b06c:	200026ec 	.word	0x200026ec
 800b070:	200026e8 	.word	0x200026e8
 800b074:	200026f0 	.word	0x200026f0

0800b078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b080:	4b28      	ldr	r3, [pc, #160]	; (800b124 <prvInsertBlockIntoFreeList+0xac>)
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	e002      	b.n	800b08c <prvInsertBlockIntoFreeList+0x14>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d8f7      	bhi.n	800b086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d108      	bne.n	800b0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	441a      	add	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	441a      	add	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d118      	bne.n	800b100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <prvInsertBlockIntoFreeList+0xb0>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d00d      	beq.n	800b0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	441a      	add	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	e008      	b.n	800b108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <prvInsertBlockIntoFreeList+0xb0>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	e003      	b.n	800b108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d002      	beq.n	800b116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b116:	bf00      	nop
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	200026dc 	.word	0x200026dc
 800b128:	200026e4 	.word	0x200026e4

0800b12c <std>:
 800b12c:	2300      	movs	r3, #0
 800b12e:	b510      	push	{r4, lr}
 800b130:	4604      	mov	r4, r0
 800b132:	e9c0 3300 	strd	r3, r3, [r0]
 800b136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b13a:	6083      	str	r3, [r0, #8]
 800b13c:	8181      	strh	r1, [r0, #12]
 800b13e:	6643      	str	r3, [r0, #100]	; 0x64
 800b140:	81c2      	strh	r2, [r0, #14]
 800b142:	6183      	str	r3, [r0, #24]
 800b144:	4619      	mov	r1, r3
 800b146:	2208      	movs	r2, #8
 800b148:	305c      	adds	r0, #92	; 0x5c
 800b14a:	f000 f9f7 	bl	800b53c <memset>
 800b14e:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <std+0x58>)
 800b150:	6263      	str	r3, [r4, #36]	; 0x24
 800b152:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <std+0x5c>)
 800b154:	62a3      	str	r3, [r4, #40]	; 0x28
 800b156:	4b0d      	ldr	r3, [pc, #52]	; (800b18c <std+0x60>)
 800b158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b15a:	4b0d      	ldr	r3, [pc, #52]	; (800b190 <std+0x64>)
 800b15c:	6323      	str	r3, [r4, #48]	; 0x30
 800b15e:	4b0d      	ldr	r3, [pc, #52]	; (800b194 <std+0x68>)
 800b160:	6224      	str	r4, [r4, #32]
 800b162:	429c      	cmp	r4, r3
 800b164:	d006      	beq.n	800b174 <std+0x48>
 800b166:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b16a:	4294      	cmp	r4, r2
 800b16c:	d002      	beq.n	800b174 <std+0x48>
 800b16e:	33d0      	adds	r3, #208	; 0xd0
 800b170:	429c      	cmp	r4, r3
 800b172:	d105      	bne.n	800b180 <std+0x54>
 800b174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b17c:	f000 baac 	b.w	800b6d8 <__retarget_lock_init_recursive>
 800b180:	bd10      	pop	{r4, pc}
 800b182:	bf00      	nop
 800b184:	0800b38d 	.word	0x0800b38d
 800b188:	0800b3af 	.word	0x0800b3af
 800b18c:	0800b3e7 	.word	0x0800b3e7
 800b190:	0800b40b 	.word	0x0800b40b
 800b194:	200026f4 	.word	0x200026f4

0800b198 <stdio_exit_handler>:
 800b198:	4a02      	ldr	r2, [pc, #8]	; (800b1a4 <stdio_exit_handler+0xc>)
 800b19a:	4903      	ldr	r1, [pc, #12]	; (800b1a8 <stdio_exit_handler+0x10>)
 800b19c:	4803      	ldr	r0, [pc, #12]	; (800b1ac <stdio_exit_handler+0x14>)
 800b19e:	f000 b869 	b.w	800b274 <_fwalk_sglue>
 800b1a2:	bf00      	nop
 800b1a4:	2000008c 	.word	0x2000008c
 800b1a8:	0800bfa1 	.word	0x0800bfa1
 800b1ac:	20000098 	.word	0x20000098

0800b1b0 <cleanup_stdio>:
 800b1b0:	6841      	ldr	r1, [r0, #4]
 800b1b2:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <cleanup_stdio+0x34>)
 800b1b4:	4299      	cmp	r1, r3
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	d001      	beq.n	800b1c0 <cleanup_stdio+0x10>
 800b1bc:	f000 fef0 	bl	800bfa0 <_fflush_r>
 800b1c0:	68a1      	ldr	r1, [r4, #8]
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <cleanup_stdio+0x38>)
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	d002      	beq.n	800b1ce <cleanup_stdio+0x1e>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fee9 	bl	800bfa0 <_fflush_r>
 800b1ce:	68e1      	ldr	r1, [r4, #12]
 800b1d0:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <cleanup_stdio+0x3c>)
 800b1d2:	4299      	cmp	r1, r3
 800b1d4:	d004      	beq.n	800b1e0 <cleanup_stdio+0x30>
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1dc:	f000 bee0 	b.w	800bfa0 <_fflush_r>
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200026f4 	.word	0x200026f4
 800b1e8:	2000275c 	.word	0x2000275c
 800b1ec:	200027c4 	.word	0x200027c4

0800b1f0 <global_stdio_init.part.0>:
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <global_stdio_init.part.0+0x30>)
 800b1f4:	4c0b      	ldr	r4, [pc, #44]	; (800b224 <global_stdio_init.part.0+0x34>)
 800b1f6:	4a0c      	ldr	r2, [pc, #48]	; (800b228 <global_stdio_init.part.0+0x38>)
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2104      	movs	r1, #4
 800b200:	f7ff ff94 	bl	800b12c <std>
 800b204:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b208:	2201      	movs	r2, #1
 800b20a:	2109      	movs	r1, #9
 800b20c:	f7ff ff8e 	bl	800b12c <std>
 800b210:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b214:	2202      	movs	r2, #2
 800b216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21a:	2112      	movs	r1, #18
 800b21c:	f7ff bf86 	b.w	800b12c <std>
 800b220:	2000282c 	.word	0x2000282c
 800b224:	200026f4 	.word	0x200026f4
 800b228:	0800b199 	.word	0x0800b199

0800b22c <__sfp_lock_acquire>:
 800b22c:	4801      	ldr	r0, [pc, #4]	; (800b234 <__sfp_lock_acquire+0x8>)
 800b22e:	f000 ba54 	b.w	800b6da <__retarget_lock_acquire_recursive>
 800b232:	bf00      	nop
 800b234:	20002835 	.word	0x20002835

0800b238 <__sfp_lock_release>:
 800b238:	4801      	ldr	r0, [pc, #4]	; (800b240 <__sfp_lock_release+0x8>)
 800b23a:	f000 ba4f 	b.w	800b6dc <__retarget_lock_release_recursive>
 800b23e:	bf00      	nop
 800b240:	20002835 	.word	0x20002835

0800b244 <__sinit>:
 800b244:	b510      	push	{r4, lr}
 800b246:	4604      	mov	r4, r0
 800b248:	f7ff fff0 	bl	800b22c <__sfp_lock_acquire>
 800b24c:	6a23      	ldr	r3, [r4, #32]
 800b24e:	b11b      	cbz	r3, 800b258 <__sinit+0x14>
 800b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b254:	f7ff bff0 	b.w	800b238 <__sfp_lock_release>
 800b258:	4b04      	ldr	r3, [pc, #16]	; (800b26c <__sinit+0x28>)
 800b25a:	6223      	str	r3, [r4, #32]
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <__sinit+0x2c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1f5      	bne.n	800b250 <__sinit+0xc>
 800b264:	f7ff ffc4 	bl	800b1f0 <global_stdio_init.part.0>
 800b268:	e7f2      	b.n	800b250 <__sinit+0xc>
 800b26a:	bf00      	nop
 800b26c:	0800b1b1 	.word	0x0800b1b1
 800b270:	2000282c 	.word	0x2000282c

0800b274 <_fwalk_sglue>:
 800b274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b278:	4607      	mov	r7, r0
 800b27a:	4688      	mov	r8, r1
 800b27c:	4614      	mov	r4, r2
 800b27e:	2600      	movs	r6, #0
 800b280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b284:	f1b9 0901 	subs.w	r9, r9, #1
 800b288:	d505      	bpl.n	800b296 <_fwalk_sglue+0x22>
 800b28a:	6824      	ldr	r4, [r4, #0]
 800b28c:	2c00      	cmp	r4, #0
 800b28e:	d1f7      	bne.n	800b280 <_fwalk_sglue+0xc>
 800b290:	4630      	mov	r0, r6
 800b292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b296:	89ab      	ldrh	r3, [r5, #12]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d907      	bls.n	800b2ac <_fwalk_sglue+0x38>
 800b29c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	d003      	beq.n	800b2ac <_fwalk_sglue+0x38>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	47c0      	blx	r8
 800b2aa:	4306      	orrs	r6, r0
 800b2ac:	3568      	adds	r5, #104	; 0x68
 800b2ae:	e7e9      	b.n	800b284 <_fwalk_sglue+0x10>

0800b2b0 <iprintf>:
 800b2b0:	b40f      	push	{r0, r1, r2, r3}
 800b2b2:	b507      	push	{r0, r1, r2, lr}
 800b2b4:	4906      	ldr	r1, [pc, #24]	; (800b2d0 <iprintf+0x20>)
 800b2b6:	ab04      	add	r3, sp, #16
 800b2b8:	6808      	ldr	r0, [r1, #0]
 800b2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2be:	6881      	ldr	r1, [r0, #8]
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	f000 fb3d 	bl	800b940 <_vfiprintf_r>
 800b2c6:	b003      	add	sp, #12
 800b2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2cc:	b004      	add	sp, #16
 800b2ce:	4770      	bx	lr
 800b2d0:	200000e4 	.word	0x200000e4

0800b2d4 <_puts_r>:
 800b2d4:	6a03      	ldr	r3, [r0, #32]
 800b2d6:	b570      	push	{r4, r5, r6, lr}
 800b2d8:	6884      	ldr	r4, [r0, #8]
 800b2da:	4605      	mov	r5, r0
 800b2dc:	460e      	mov	r6, r1
 800b2de:	b90b      	cbnz	r3, 800b2e4 <_puts_r+0x10>
 800b2e0:	f7ff ffb0 	bl	800b244 <__sinit>
 800b2e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2e6:	07db      	lsls	r3, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_puts_r+0x22>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	0598      	lsls	r0, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_puts_r+0x22>
 800b2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2f2:	f000 f9f2 	bl	800b6da <__retarget_lock_acquire_recursive>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	0719      	lsls	r1, r3, #28
 800b2fa:	d513      	bpl.n	800b324 <_puts_r+0x50>
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	b18b      	cbz	r3, 800b324 <_puts_r+0x50>
 800b300:	3e01      	subs	r6, #1
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b308:	3b01      	subs	r3, #1
 800b30a:	60a3      	str	r3, [r4, #8]
 800b30c:	b9e9      	cbnz	r1, 800b34a <_puts_r+0x76>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	da2e      	bge.n	800b370 <_puts_r+0x9c>
 800b312:	4622      	mov	r2, r4
 800b314:	210a      	movs	r1, #10
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f87b 	bl	800b412 <__swbuf_r>
 800b31c:	3001      	adds	r0, #1
 800b31e:	d007      	beq.n	800b330 <_puts_r+0x5c>
 800b320:	250a      	movs	r5, #10
 800b322:	e007      	b.n	800b334 <_puts_r+0x60>
 800b324:	4621      	mov	r1, r4
 800b326:	4628      	mov	r0, r5
 800b328:	f000 f8b0 	bl	800b48c <__swsetup_r>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d0e7      	beq.n	800b300 <_puts_r+0x2c>
 800b330:	f04f 35ff 	mov.w	r5, #4294967295
 800b334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b336:	07da      	lsls	r2, r3, #31
 800b338:	d405      	bmi.n	800b346 <_puts_r+0x72>
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	059b      	lsls	r3, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_puts_r+0x72>
 800b340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b342:	f000 f9cb 	bl	800b6dc <__retarget_lock_release_recursive>
 800b346:	4628      	mov	r0, r5
 800b348:	bd70      	pop	{r4, r5, r6, pc}
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	da04      	bge.n	800b358 <_puts_r+0x84>
 800b34e:	69a2      	ldr	r2, [r4, #24]
 800b350:	429a      	cmp	r2, r3
 800b352:	dc06      	bgt.n	800b362 <_puts_r+0x8e>
 800b354:	290a      	cmp	r1, #10
 800b356:	d004      	beq.n	800b362 <_puts_r+0x8e>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	6022      	str	r2, [r4, #0]
 800b35e:	7019      	strb	r1, [r3, #0]
 800b360:	e7cf      	b.n	800b302 <_puts_r+0x2e>
 800b362:	4622      	mov	r2, r4
 800b364:	4628      	mov	r0, r5
 800b366:	f000 f854 	bl	800b412 <__swbuf_r>
 800b36a:	3001      	adds	r0, #1
 800b36c:	d1c9      	bne.n	800b302 <_puts_r+0x2e>
 800b36e:	e7df      	b.n	800b330 <_puts_r+0x5c>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	250a      	movs	r5, #10
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	6022      	str	r2, [r4, #0]
 800b378:	701d      	strb	r5, [r3, #0]
 800b37a:	e7db      	b.n	800b334 <_puts_r+0x60>

0800b37c <puts>:
 800b37c:	4b02      	ldr	r3, [pc, #8]	; (800b388 <puts+0xc>)
 800b37e:	4601      	mov	r1, r0
 800b380:	6818      	ldr	r0, [r3, #0]
 800b382:	f7ff bfa7 	b.w	800b2d4 <_puts_r>
 800b386:	bf00      	nop
 800b388:	200000e4 	.word	0x200000e4

0800b38c <__sread>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b394:	f000 f952 	bl	800b63c <_read_r>
 800b398:	2800      	cmp	r0, #0
 800b39a:	bfab      	itete	ge
 800b39c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b39e:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a0:	181b      	addge	r3, r3, r0
 800b3a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3a6:	bfac      	ite	ge
 800b3a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3aa:	81a3      	strhlt	r3, [r4, #12]
 800b3ac:	bd10      	pop	{r4, pc}

0800b3ae <__swrite>:
 800b3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	461f      	mov	r7, r3
 800b3b4:	898b      	ldrh	r3, [r1, #12]
 800b3b6:	05db      	lsls	r3, r3, #23
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	4616      	mov	r6, r2
 800b3be:	d505      	bpl.n	800b3cc <__swrite+0x1e>
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f000 f926 	bl	800b618 <_lseek_r>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	4632      	mov	r2, r6
 800b3da:	463b      	mov	r3, r7
 800b3dc:	4628      	mov	r0, r5
 800b3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	f000 b93d 	b.w	800b660 <_write_r>

0800b3e6 <__sseek>:
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ee:	f000 f913 	bl	800b618 <_lseek_r>
 800b3f2:	1c43      	adds	r3, r0, #1
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	bf15      	itete	ne
 800b3f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b402:	81a3      	strheq	r3, [r4, #12]
 800b404:	bf18      	it	ne
 800b406:	81a3      	strhne	r3, [r4, #12]
 800b408:	bd10      	pop	{r4, pc}

0800b40a <__sclose>:
 800b40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40e:	f000 b89d 	b.w	800b54c <_close_r>

0800b412 <__swbuf_r>:
 800b412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b414:	460e      	mov	r6, r1
 800b416:	4614      	mov	r4, r2
 800b418:	4605      	mov	r5, r0
 800b41a:	b118      	cbz	r0, 800b424 <__swbuf_r+0x12>
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b90b      	cbnz	r3, 800b424 <__swbuf_r+0x12>
 800b420:	f7ff ff10 	bl	800b244 <__sinit>
 800b424:	69a3      	ldr	r3, [r4, #24]
 800b426:	60a3      	str	r3, [r4, #8]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	071a      	lsls	r2, r3, #28
 800b42c:	d525      	bpl.n	800b47a <__swbuf_r+0x68>
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b31b      	cbz	r3, 800b47a <__swbuf_r+0x68>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	6922      	ldr	r2, [r4, #16]
 800b436:	1a98      	subs	r0, r3, r2
 800b438:	6963      	ldr	r3, [r4, #20]
 800b43a:	b2f6      	uxtb	r6, r6
 800b43c:	4283      	cmp	r3, r0
 800b43e:	4637      	mov	r7, r6
 800b440:	dc04      	bgt.n	800b44c <__swbuf_r+0x3a>
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f000 fdab 	bl	800bfa0 <_fflush_r>
 800b44a:	b9e0      	cbnz	r0, 800b486 <__swbuf_r+0x74>
 800b44c:	68a3      	ldr	r3, [r4, #8]
 800b44e:	3b01      	subs	r3, #1
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	6022      	str	r2, [r4, #0]
 800b458:	701e      	strb	r6, [r3, #0]
 800b45a:	6962      	ldr	r2, [r4, #20]
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	429a      	cmp	r2, r3
 800b460:	d004      	beq.n	800b46c <__swbuf_r+0x5a>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	07db      	lsls	r3, r3, #31
 800b466:	d506      	bpl.n	800b476 <__swbuf_r+0x64>
 800b468:	2e0a      	cmp	r6, #10
 800b46a:	d104      	bne.n	800b476 <__swbuf_r+0x64>
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 fd96 	bl	800bfa0 <_fflush_r>
 800b474:	b938      	cbnz	r0, 800b486 <__swbuf_r+0x74>
 800b476:	4638      	mov	r0, r7
 800b478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b47a:	4621      	mov	r1, r4
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 f805 	bl	800b48c <__swsetup_r>
 800b482:	2800      	cmp	r0, #0
 800b484:	d0d5      	beq.n	800b432 <__swbuf_r+0x20>
 800b486:	f04f 37ff 	mov.w	r7, #4294967295
 800b48a:	e7f4      	b.n	800b476 <__swbuf_r+0x64>

0800b48c <__swsetup_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4b2a      	ldr	r3, [pc, #168]	; (800b538 <__swsetup_r+0xac>)
 800b490:	4605      	mov	r5, r0
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	460c      	mov	r4, r1
 800b496:	b118      	cbz	r0, 800b4a0 <__swsetup_r+0x14>
 800b498:	6a03      	ldr	r3, [r0, #32]
 800b49a:	b90b      	cbnz	r3, 800b4a0 <__swsetup_r+0x14>
 800b49c:	f7ff fed2 	bl	800b244 <__sinit>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4a6:	0718      	lsls	r0, r3, #28
 800b4a8:	d422      	bmi.n	800b4f0 <__swsetup_r+0x64>
 800b4aa:	06d9      	lsls	r1, r3, #27
 800b4ac:	d407      	bmi.n	800b4be <__swsetup_r+0x32>
 800b4ae:	2309      	movs	r3, #9
 800b4b0:	602b      	str	r3, [r5, #0]
 800b4b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	e034      	b.n	800b528 <__swsetup_r+0x9c>
 800b4be:	0758      	lsls	r0, r3, #29
 800b4c0:	d512      	bpl.n	800b4e8 <__swsetup_r+0x5c>
 800b4c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4c4:	b141      	cbz	r1, 800b4d8 <__swsetup_r+0x4c>
 800b4c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4ca:	4299      	cmp	r1, r3
 800b4cc:	d002      	beq.n	800b4d4 <__swsetup_r+0x48>
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f000 f914 	bl	800b6fc <_free_r>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4de:	81a3      	strh	r3, [r4, #12]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6063      	str	r3, [r4, #4]
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f043 0308 	orr.w	r3, r3, #8
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	b94b      	cbnz	r3, 800b508 <__swsetup_r+0x7c>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4fe:	d003      	beq.n	800b508 <__swsetup_r+0x7c>
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f000 fd9a 	bl	800c03c <__smakebuf_r>
 800b508:	89a0      	ldrh	r0, [r4, #12]
 800b50a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b50e:	f010 0301 	ands.w	r3, r0, #1
 800b512:	d00a      	beq.n	800b52a <__swsetup_r+0x9e>
 800b514:	2300      	movs	r3, #0
 800b516:	60a3      	str	r3, [r4, #8]
 800b518:	6963      	ldr	r3, [r4, #20]
 800b51a:	425b      	negs	r3, r3
 800b51c:	61a3      	str	r3, [r4, #24]
 800b51e:	6923      	ldr	r3, [r4, #16]
 800b520:	b943      	cbnz	r3, 800b534 <__swsetup_r+0xa8>
 800b522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b526:	d1c4      	bne.n	800b4b2 <__swsetup_r+0x26>
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	0781      	lsls	r1, r0, #30
 800b52c:	bf58      	it	pl
 800b52e:	6963      	ldrpl	r3, [r4, #20]
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	e7f4      	b.n	800b51e <__swsetup_r+0x92>
 800b534:	2000      	movs	r0, #0
 800b536:	e7f7      	b.n	800b528 <__swsetup_r+0x9c>
 800b538:	200000e4 	.word	0x200000e4

0800b53c <memset>:
 800b53c:	4402      	add	r2, r0
 800b53e:	4603      	mov	r3, r0
 800b540:	4293      	cmp	r3, r2
 800b542:	d100      	bne.n	800b546 <memset+0xa>
 800b544:	4770      	bx	lr
 800b546:	f803 1b01 	strb.w	r1, [r3], #1
 800b54a:	e7f9      	b.n	800b540 <memset+0x4>

0800b54c <_close_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d06      	ldr	r5, [pc, #24]	; (800b568 <_close_r+0x1c>)
 800b550:	2300      	movs	r3, #0
 800b552:	4604      	mov	r4, r0
 800b554:	4608      	mov	r0, r1
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	f7f5 fae7 	bl	8000b2a <_close>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_close_r+0x1a>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_close_r+0x1a>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20002830 	.word	0x20002830

0800b56c <_reclaim_reent>:
 800b56c:	4b29      	ldr	r3, [pc, #164]	; (800b614 <_reclaim_reent+0xa8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4283      	cmp	r3, r0
 800b572:	b570      	push	{r4, r5, r6, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	d04b      	beq.n	800b610 <_reclaim_reent+0xa4>
 800b578:	69c3      	ldr	r3, [r0, #28]
 800b57a:	b143      	cbz	r3, 800b58e <_reclaim_reent+0x22>
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d144      	bne.n	800b60c <_reclaim_reent+0xa0>
 800b582:	69e3      	ldr	r3, [r4, #28]
 800b584:	6819      	ldr	r1, [r3, #0]
 800b586:	b111      	cbz	r1, 800b58e <_reclaim_reent+0x22>
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 f8b7 	bl	800b6fc <_free_r>
 800b58e:	6961      	ldr	r1, [r4, #20]
 800b590:	b111      	cbz	r1, 800b598 <_reclaim_reent+0x2c>
 800b592:	4620      	mov	r0, r4
 800b594:	f000 f8b2 	bl	800b6fc <_free_r>
 800b598:	69e1      	ldr	r1, [r4, #28]
 800b59a:	b111      	cbz	r1, 800b5a2 <_reclaim_reent+0x36>
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 f8ad 	bl	800b6fc <_free_r>
 800b5a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b5a4:	b111      	cbz	r1, 800b5ac <_reclaim_reent+0x40>
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 f8a8 	bl	800b6fc <_free_r>
 800b5ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ae:	b111      	cbz	r1, 800b5b6 <_reclaim_reent+0x4a>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 f8a3 	bl	800b6fc <_free_r>
 800b5b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5b8:	b111      	cbz	r1, 800b5c0 <_reclaim_reent+0x54>
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 f89e 	bl	800b6fc <_free_r>
 800b5c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5c2:	b111      	cbz	r1, 800b5ca <_reclaim_reent+0x5e>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 f899 	bl	800b6fc <_free_r>
 800b5ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b5cc:	b111      	cbz	r1, 800b5d4 <_reclaim_reent+0x68>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 f894 	bl	800b6fc <_free_r>
 800b5d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b5d6:	b111      	cbz	r1, 800b5de <_reclaim_reent+0x72>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 f88f 	bl	800b6fc <_free_r>
 800b5de:	6a23      	ldr	r3, [r4, #32]
 800b5e0:	b1b3      	cbz	r3, 800b610 <_reclaim_reent+0xa4>
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5e8:	4718      	bx	r3
 800b5ea:	5949      	ldr	r1, [r1, r5]
 800b5ec:	b941      	cbnz	r1, 800b600 <_reclaim_reent+0x94>
 800b5ee:	3504      	adds	r5, #4
 800b5f0:	69e3      	ldr	r3, [r4, #28]
 800b5f2:	2d80      	cmp	r5, #128	; 0x80
 800b5f4:	68d9      	ldr	r1, [r3, #12]
 800b5f6:	d1f8      	bne.n	800b5ea <_reclaim_reent+0x7e>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 f87f 	bl	800b6fc <_free_r>
 800b5fe:	e7c0      	b.n	800b582 <_reclaim_reent+0x16>
 800b600:	680e      	ldr	r6, [r1, #0]
 800b602:	4620      	mov	r0, r4
 800b604:	f000 f87a 	bl	800b6fc <_free_r>
 800b608:	4631      	mov	r1, r6
 800b60a:	e7ef      	b.n	800b5ec <_reclaim_reent+0x80>
 800b60c:	2500      	movs	r5, #0
 800b60e:	e7ef      	b.n	800b5f0 <_reclaim_reent+0x84>
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	bf00      	nop
 800b614:	200000e4 	.word	0x200000e4

0800b618 <_lseek_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d07      	ldr	r5, [pc, #28]	; (800b638 <_lseek_r+0x20>)
 800b61c:	4604      	mov	r4, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	602a      	str	r2, [r5, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7f5 faa6 	bl	8000b78 <_lseek>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_lseek_r+0x1e>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_lseek_r+0x1e>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20002830 	.word	0x20002830

0800b63c <_read_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	; (800b65c <_read_r+0x20>)
 800b640:	4604      	mov	r4, r0
 800b642:	4608      	mov	r0, r1
 800b644:	4611      	mov	r1, r2
 800b646:	2200      	movs	r2, #0
 800b648:	602a      	str	r2, [r5, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	f7f5 fa34 	bl	8000ab8 <_read>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_read_r+0x1e>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_read_r+0x1e>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20002830 	.word	0x20002830

0800b660 <_write_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d07      	ldr	r5, [pc, #28]	; (800b680 <_write_r+0x20>)
 800b664:	4604      	mov	r4, r0
 800b666:	4608      	mov	r0, r1
 800b668:	4611      	mov	r1, r2
 800b66a:	2200      	movs	r2, #0
 800b66c:	602a      	str	r2, [r5, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	f7f5 fa3f 	bl	8000af2 <_write>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_write_r+0x1e>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_write_r+0x1e>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20002830 	.word	0x20002830

0800b684 <__errno>:
 800b684:	4b01      	ldr	r3, [pc, #4]	; (800b68c <__errno+0x8>)
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	200000e4 	.word	0x200000e4

0800b690 <__libc_init_array>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4d0d      	ldr	r5, [pc, #52]	; (800b6c8 <__libc_init_array+0x38>)
 800b694:	4c0d      	ldr	r4, [pc, #52]	; (800b6cc <__libc_init_array+0x3c>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	2600      	movs	r6, #0
 800b69c:	42a6      	cmp	r6, r4
 800b69e:	d109      	bne.n	800b6b4 <__libc_init_array+0x24>
 800b6a0:	4d0b      	ldr	r5, [pc, #44]	; (800b6d0 <__libc_init_array+0x40>)
 800b6a2:	4c0c      	ldr	r4, [pc, #48]	; (800b6d4 <__libc_init_array+0x44>)
 800b6a4:	f000 fd38 	bl	800c118 <_init>
 800b6a8:	1b64      	subs	r4, r4, r5
 800b6aa:	10a4      	asrs	r4, r4, #2
 800b6ac:	2600      	movs	r6, #0
 800b6ae:	42a6      	cmp	r6, r4
 800b6b0:	d105      	bne.n	800b6be <__libc_init_array+0x2e>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b8:	4798      	blx	r3
 800b6ba:	3601      	adds	r6, #1
 800b6bc:	e7ee      	b.n	800b69c <__libc_init_array+0xc>
 800b6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c2:	4798      	blx	r3
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	e7f2      	b.n	800b6ae <__libc_init_array+0x1e>
 800b6c8:	0800c478 	.word	0x0800c478
 800b6cc:	0800c478 	.word	0x0800c478
 800b6d0:	0800c478 	.word	0x0800c478
 800b6d4:	0800c47c 	.word	0x0800c47c

0800b6d8 <__retarget_lock_init_recursive>:
 800b6d8:	4770      	bx	lr

0800b6da <__retarget_lock_acquire_recursive>:
 800b6da:	4770      	bx	lr

0800b6dc <__retarget_lock_release_recursive>:
 800b6dc:	4770      	bx	lr

0800b6de <memcpy>:
 800b6de:	440a      	add	r2, r1
 800b6e0:	4291      	cmp	r1, r2
 800b6e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6e6:	d100      	bne.n	800b6ea <memcpy+0xc>
 800b6e8:	4770      	bx	lr
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6f4:	4291      	cmp	r1, r2
 800b6f6:	d1f9      	bne.n	800b6ec <memcpy+0xe>
 800b6f8:	bd10      	pop	{r4, pc}
	...

0800b6fc <_free_r>:
 800b6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6fe:	2900      	cmp	r1, #0
 800b700:	d044      	beq.n	800b78c <_free_r+0x90>
 800b702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b706:	9001      	str	r0, [sp, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f1a1 0404 	sub.w	r4, r1, #4
 800b70e:	bfb8      	it	lt
 800b710:	18e4      	addlt	r4, r4, r3
 800b712:	f000 f8df 	bl	800b8d4 <__malloc_lock>
 800b716:	4a1e      	ldr	r2, [pc, #120]	; (800b790 <_free_r+0x94>)
 800b718:	9801      	ldr	r0, [sp, #4]
 800b71a:	6813      	ldr	r3, [r2, #0]
 800b71c:	b933      	cbnz	r3, 800b72c <_free_r+0x30>
 800b71e:	6063      	str	r3, [r4, #4]
 800b720:	6014      	str	r4, [r2, #0]
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b728:	f000 b8da 	b.w	800b8e0 <__malloc_unlock>
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d908      	bls.n	800b742 <_free_r+0x46>
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	1961      	adds	r1, r4, r5
 800b734:	428b      	cmp	r3, r1
 800b736:	bf01      	itttt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	1949      	addeq	r1, r1, r5
 800b73e:	6021      	streq	r1, [r4, #0]
 800b740:	e7ed      	b.n	800b71e <_free_r+0x22>
 800b742:	461a      	mov	r2, r3
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	b10b      	cbz	r3, 800b74c <_free_r+0x50>
 800b748:	42a3      	cmp	r3, r4
 800b74a:	d9fa      	bls.n	800b742 <_free_r+0x46>
 800b74c:	6811      	ldr	r1, [r2, #0]
 800b74e:	1855      	adds	r5, r2, r1
 800b750:	42a5      	cmp	r5, r4
 800b752:	d10b      	bne.n	800b76c <_free_r+0x70>
 800b754:	6824      	ldr	r4, [r4, #0]
 800b756:	4421      	add	r1, r4
 800b758:	1854      	adds	r4, r2, r1
 800b75a:	42a3      	cmp	r3, r4
 800b75c:	6011      	str	r1, [r2, #0]
 800b75e:	d1e0      	bne.n	800b722 <_free_r+0x26>
 800b760:	681c      	ldr	r4, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	6053      	str	r3, [r2, #4]
 800b766:	440c      	add	r4, r1
 800b768:	6014      	str	r4, [r2, #0]
 800b76a:	e7da      	b.n	800b722 <_free_r+0x26>
 800b76c:	d902      	bls.n	800b774 <_free_r+0x78>
 800b76e:	230c      	movs	r3, #12
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	e7d6      	b.n	800b722 <_free_r+0x26>
 800b774:	6825      	ldr	r5, [r4, #0]
 800b776:	1961      	adds	r1, r4, r5
 800b778:	428b      	cmp	r3, r1
 800b77a:	bf04      	itt	eq
 800b77c:	6819      	ldreq	r1, [r3, #0]
 800b77e:	685b      	ldreq	r3, [r3, #4]
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	bf04      	itt	eq
 800b784:	1949      	addeq	r1, r1, r5
 800b786:	6021      	streq	r1, [r4, #0]
 800b788:	6054      	str	r4, [r2, #4]
 800b78a:	e7ca      	b.n	800b722 <_free_r+0x26>
 800b78c:	b003      	add	sp, #12
 800b78e:	bd30      	pop	{r4, r5, pc}
 800b790:	20002838 	.word	0x20002838

0800b794 <sbrk_aligned>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	4e0e      	ldr	r6, [pc, #56]	; (800b7d0 <sbrk_aligned+0x3c>)
 800b798:	460c      	mov	r4, r1
 800b79a:	6831      	ldr	r1, [r6, #0]
 800b79c:	4605      	mov	r5, r0
 800b79e:	b911      	cbnz	r1, 800b7a6 <sbrk_aligned+0x12>
 800b7a0:	f000 fcaa 	bl	800c0f8 <_sbrk_r>
 800b7a4:	6030      	str	r0, [r6, #0]
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f000 fca5 	bl	800c0f8 <_sbrk_r>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d00a      	beq.n	800b7c8 <sbrk_aligned+0x34>
 800b7b2:	1cc4      	adds	r4, r0, #3
 800b7b4:	f024 0403 	bic.w	r4, r4, #3
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d007      	beq.n	800b7cc <sbrk_aligned+0x38>
 800b7bc:	1a21      	subs	r1, r4, r0
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 fc9a 	bl	800c0f8 <_sbrk_r>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d101      	bne.n	800b7cc <sbrk_aligned+0x38>
 800b7c8:	f04f 34ff 	mov.w	r4, #4294967295
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	2000283c 	.word	0x2000283c

0800b7d4 <_malloc_r>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	1ccd      	adds	r5, r1, #3
 800b7da:	f025 0503 	bic.w	r5, r5, #3
 800b7de:	3508      	adds	r5, #8
 800b7e0:	2d0c      	cmp	r5, #12
 800b7e2:	bf38      	it	cc
 800b7e4:	250c      	movcc	r5, #12
 800b7e6:	2d00      	cmp	r5, #0
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	db01      	blt.n	800b7f0 <_malloc_r+0x1c>
 800b7ec:	42a9      	cmp	r1, r5
 800b7ee:	d905      	bls.n	800b7fc <_malloc_r+0x28>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b8d0 <_malloc_r+0xfc>
 800b800:	f000 f868 	bl	800b8d4 <__malloc_lock>
 800b804:	f8d8 3000 	ldr.w	r3, [r8]
 800b808:	461c      	mov	r4, r3
 800b80a:	bb5c      	cbnz	r4, 800b864 <_malloc_r+0x90>
 800b80c:	4629      	mov	r1, r5
 800b80e:	4638      	mov	r0, r7
 800b810:	f7ff ffc0 	bl	800b794 <sbrk_aligned>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	4604      	mov	r4, r0
 800b818:	d155      	bne.n	800b8c6 <_malloc_r+0xf2>
 800b81a:	f8d8 4000 	ldr.w	r4, [r8]
 800b81e:	4626      	mov	r6, r4
 800b820:	2e00      	cmp	r6, #0
 800b822:	d145      	bne.n	800b8b0 <_malloc_r+0xdc>
 800b824:	2c00      	cmp	r4, #0
 800b826:	d048      	beq.n	800b8ba <_malloc_r+0xe6>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	4631      	mov	r1, r6
 800b82c:	4638      	mov	r0, r7
 800b82e:	eb04 0903 	add.w	r9, r4, r3
 800b832:	f000 fc61 	bl	800c0f8 <_sbrk_r>
 800b836:	4581      	cmp	r9, r0
 800b838:	d13f      	bne.n	800b8ba <_malloc_r+0xe6>
 800b83a:	6821      	ldr	r1, [r4, #0]
 800b83c:	1a6d      	subs	r5, r5, r1
 800b83e:	4629      	mov	r1, r5
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff ffa7 	bl	800b794 <sbrk_aligned>
 800b846:	3001      	adds	r0, #1
 800b848:	d037      	beq.n	800b8ba <_malloc_r+0xe6>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	442b      	add	r3, r5
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	f8d8 3000 	ldr.w	r3, [r8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d038      	beq.n	800b8ca <_malloc_r+0xf6>
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	42a2      	cmp	r2, r4
 800b85c:	d12b      	bne.n	800b8b6 <_malloc_r+0xe2>
 800b85e:	2200      	movs	r2, #0
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	e00f      	b.n	800b884 <_malloc_r+0xb0>
 800b864:	6822      	ldr	r2, [r4, #0]
 800b866:	1b52      	subs	r2, r2, r5
 800b868:	d41f      	bmi.n	800b8aa <_malloc_r+0xd6>
 800b86a:	2a0b      	cmp	r2, #11
 800b86c:	d917      	bls.n	800b89e <_malloc_r+0xca>
 800b86e:	1961      	adds	r1, r4, r5
 800b870:	42a3      	cmp	r3, r4
 800b872:	6025      	str	r5, [r4, #0]
 800b874:	bf18      	it	ne
 800b876:	6059      	strne	r1, [r3, #4]
 800b878:	6863      	ldr	r3, [r4, #4]
 800b87a:	bf08      	it	eq
 800b87c:	f8c8 1000 	streq.w	r1, [r8]
 800b880:	5162      	str	r2, [r4, r5]
 800b882:	604b      	str	r3, [r1, #4]
 800b884:	4638      	mov	r0, r7
 800b886:	f104 060b 	add.w	r6, r4, #11
 800b88a:	f000 f829 	bl	800b8e0 <__malloc_unlock>
 800b88e:	f026 0607 	bic.w	r6, r6, #7
 800b892:	1d23      	adds	r3, r4, #4
 800b894:	1af2      	subs	r2, r6, r3
 800b896:	d0ae      	beq.n	800b7f6 <_malloc_r+0x22>
 800b898:	1b9b      	subs	r3, r3, r6
 800b89a:	50a3      	str	r3, [r4, r2]
 800b89c:	e7ab      	b.n	800b7f6 <_malloc_r+0x22>
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	6862      	ldr	r2, [r4, #4]
 800b8a2:	d1dd      	bne.n	800b860 <_malloc_r+0x8c>
 800b8a4:	f8c8 2000 	str.w	r2, [r8]
 800b8a8:	e7ec      	b.n	800b884 <_malloc_r+0xb0>
 800b8aa:	4623      	mov	r3, r4
 800b8ac:	6864      	ldr	r4, [r4, #4]
 800b8ae:	e7ac      	b.n	800b80a <_malloc_r+0x36>
 800b8b0:	4634      	mov	r4, r6
 800b8b2:	6876      	ldr	r6, [r6, #4]
 800b8b4:	e7b4      	b.n	800b820 <_malloc_r+0x4c>
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	e7cc      	b.n	800b854 <_malloc_r+0x80>
 800b8ba:	230c      	movs	r3, #12
 800b8bc:	603b      	str	r3, [r7, #0]
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f000 f80e 	bl	800b8e0 <__malloc_unlock>
 800b8c4:	e797      	b.n	800b7f6 <_malloc_r+0x22>
 800b8c6:	6025      	str	r5, [r4, #0]
 800b8c8:	e7dc      	b.n	800b884 <_malloc_r+0xb0>
 800b8ca:	605b      	str	r3, [r3, #4]
 800b8cc:	deff      	udf	#255	; 0xff
 800b8ce:	bf00      	nop
 800b8d0:	20002838 	.word	0x20002838

0800b8d4 <__malloc_lock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__malloc_lock+0x8>)
 800b8d6:	f7ff bf00 	b.w	800b6da <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20002834 	.word	0x20002834

0800b8e0 <__malloc_unlock>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	; (800b8e8 <__malloc_unlock+0x8>)
 800b8e2:	f7ff befb 	b.w	800b6dc <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	20002834 	.word	0x20002834

0800b8ec <__sfputc_r>:
 800b8ec:	6893      	ldr	r3, [r2, #8]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	b410      	push	{r4}
 800b8f4:	6093      	str	r3, [r2, #8]
 800b8f6:	da08      	bge.n	800b90a <__sfputc_r+0x1e>
 800b8f8:	6994      	ldr	r4, [r2, #24]
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	db01      	blt.n	800b902 <__sfputc_r+0x16>
 800b8fe:	290a      	cmp	r1, #10
 800b900:	d103      	bne.n	800b90a <__sfputc_r+0x1e>
 800b902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b906:	f7ff bd84 	b.w	800b412 <__swbuf_r>
 800b90a:	6813      	ldr	r3, [r2, #0]
 800b90c:	1c58      	adds	r0, r3, #1
 800b90e:	6010      	str	r0, [r2, #0]
 800b910:	7019      	strb	r1, [r3, #0]
 800b912:	4608      	mov	r0, r1
 800b914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <__sfputs_r>:
 800b91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91c:	4606      	mov	r6, r0
 800b91e:	460f      	mov	r7, r1
 800b920:	4614      	mov	r4, r2
 800b922:	18d5      	adds	r5, r2, r3
 800b924:	42ac      	cmp	r4, r5
 800b926:	d101      	bne.n	800b92c <__sfputs_r+0x12>
 800b928:	2000      	movs	r0, #0
 800b92a:	e007      	b.n	800b93c <__sfputs_r+0x22>
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	463a      	mov	r2, r7
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ffda 	bl	800b8ec <__sfputc_r>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d1f3      	bne.n	800b924 <__sfputs_r+0xa>
 800b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b940 <_vfiprintf_r>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	460d      	mov	r5, r1
 800b946:	b09d      	sub	sp, #116	; 0x74
 800b948:	4614      	mov	r4, r2
 800b94a:	4698      	mov	r8, r3
 800b94c:	4606      	mov	r6, r0
 800b94e:	b118      	cbz	r0, 800b958 <_vfiprintf_r+0x18>
 800b950:	6a03      	ldr	r3, [r0, #32]
 800b952:	b90b      	cbnz	r3, 800b958 <_vfiprintf_r+0x18>
 800b954:	f7ff fc76 	bl	800b244 <__sinit>
 800b958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95a:	07d9      	lsls	r1, r3, #31
 800b95c:	d405      	bmi.n	800b96a <_vfiprintf_r+0x2a>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	059a      	lsls	r2, r3, #22
 800b962:	d402      	bmi.n	800b96a <_vfiprintf_r+0x2a>
 800b964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b966:	f7ff feb8 	bl	800b6da <__retarget_lock_acquire_recursive>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	071b      	lsls	r3, r3, #28
 800b96e:	d501      	bpl.n	800b974 <_vfiprintf_r+0x34>
 800b970:	692b      	ldr	r3, [r5, #16]
 800b972:	b99b      	cbnz	r3, 800b99c <_vfiprintf_r+0x5c>
 800b974:	4629      	mov	r1, r5
 800b976:	4630      	mov	r0, r6
 800b978:	f7ff fd88 	bl	800b48c <__swsetup_r>
 800b97c:	b170      	cbz	r0, 800b99c <_vfiprintf_r+0x5c>
 800b97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b980:	07dc      	lsls	r4, r3, #31
 800b982:	d504      	bpl.n	800b98e <_vfiprintf_r+0x4e>
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	b01d      	add	sp, #116	; 0x74
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	0598      	lsls	r0, r3, #22
 800b992:	d4f7      	bmi.n	800b984 <_vfiprintf_r+0x44>
 800b994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b996:	f7ff fea1 	bl	800b6dc <__retarget_lock_release_recursive>
 800b99a:	e7f3      	b.n	800b984 <_vfiprintf_r+0x44>
 800b99c:	2300      	movs	r3, #0
 800b99e:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a0:	2320      	movs	r3, #32
 800b9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9aa:	2330      	movs	r3, #48	; 0x30
 800b9ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb60 <_vfiprintf_r+0x220>
 800b9b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9b4:	f04f 0901 	mov.w	r9, #1
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	469a      	mov	sl, r3
 800b9bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c0:	b10a      	cbz	r2, 800b9c6 <_vfiprintf_r+0x86>
 800b9c2:	2a25      	cmp	r2, #37	; 0x25
 800b9c4:	d1f9      	bne.n	800b9ba <_vfiprintf_r+0x7a>
 800b9c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ca:	d00b      	beq.n	800b9e4 <_vfiprintf_r+0xa4>
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff ffa1 	bl	800b91a <__sfputs_r>
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f000 80a9 	beq.w	800bb30 <_vfiprintf_r+0x1f0>
 800b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e0:	445a      	add	r2, fp
 800b9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 80a1 	beq.w	800bb30 <_vfiprintf_r+0x1f0>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f8:	f10a 0a01 	add.w	sl, sl, #1
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba04:	931a      	str	r3, [sp, #104]	; 0x68
 800ba06:	4654      	mov	r4, sl
 800ba08:	2205      	movs	r2, #5
 800ba0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0e:	4854      	ldr	r0, [pc, #336]	; (800bb60 <_vfiprintf_r+0x220>)
 800ba10:	f7f4 fbe6 	bl	80001e0 <memchr>
 800ba14:	9a04      	ldr	r2, [sp, #16]
 800ba16:	b9d8      	cbnz	r0, 800ba50 <_vfiprintf_r+0x110>
 800ba18:	06d1      	lsls	r1, r2, #27
 800ba1a:	bf44      	itt	mi
 800ba1c:	2320      	movmi	r3, #32
 800ba1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba22:	0713      	lsls	r3, r2, #28
 800ba24:	bf44      	itt	mi
 800ba26:	232b      	movmi	r3, #43	; 0x2b
 800ba28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba30:	2b2a      	cmp	r3, #42	; 0x2a
 800ba32:	d015      	beq.n	800ba60 <_vfiprintf_r+0x120>
 800ba34:	9a07      	ldr	r2, [sp, #28]
 800ba36:	4654      	mov	r4, sl
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f04f 0c0a 	mov.w	ip, #10
 800ba3e:	4621      	mov	r1, r4
 800ba40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba44:	3b30      	subs	r3, #48	; 0x30
 800ba46:	2b09      	cmp	r3, #9
 800ba48:	d94d      	bls.n	800bae6 <_vfiprintf_r+0x1a6>
 800ba4a:	b1b0      	cbz	r0, 800ba7a <_vfiprintf_r+0x13a>
 800ba4c:	9207      	str	r2, [sp, #28]
 800ba4e:	e014      	b.n	800ba7a <_vfiprintf_r+0x13a>
 800ba50:	eba0 0308 	sub.w	r3, r0, r8
 800ba54:	fa09 f303 	lsl.w	r3, r9, r3
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	46a2      	mov	sl, r4
 800ba5e:	e7d2      	b.n	800ba06 <_vfiprintf_r+0xc6>
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	1d19      	adds	r1, r3, #4
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	9103      	str	r1, [sp, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bfbb      	ittet	lt
 800ba6c:	425b      	neglt	r3, r3
 800ba6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba72:	9307      	strge	r3, [sp, #28]
 800ba74:	9307      	strlt	r3, [sp, #28]
 800ba76:	bfb8      	it	lt
 800ba78:	9204      	strlt	r2, [sp, #16]
 800ba7a:	7823      	ldrb	r3, [r4, #0]
 800ba7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7e:	d10c      	bne.n	800ba9a <_vfiprintf_r+0x15a>
 800ba80:	7863      	ldrb	r3, [r4, #1]
 800ba82:	2b2a      	cmp	r3, #42	; 0x2a
 800ba84:	d134      	bne.n	800baf0 <_vfiprintf_r+0x1b0>
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	9203      	str	r2, [sp, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bfb8      	it	lt
 800ba92:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba96:	3402      	adds	r4, #2
 800ba98:	9305      	str	r3, [sp, #20]
 800ba9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb70 <_vfiprintf_r+0x230>
 800ba9e:	7821      	ldrb	r1, [r4, #0]
 800baa0:	2203      	movs	r2, #3
 800baa2:	4650      	mov	r0, sl
 800baa4:	f7f4 fb9c 	bl	80001e0 <memchr>
 800baa8:	b138      	cbz	r0, 800baba <_vfiprintf_r+0x17a>
 800baaa:	9b04      	ldr	r3, [sp, #16]
 800baac:	eba0 000a 	sub.w	r0, r0, sl
 800bab0:	2240      	movs	r2, #64	; 0x40
 800bab2:	4082      	lsls	r2, r0
 800bab4:	4313      	orrs	r3, r2
 800bab6:	3401      	adds	r4, #1
 800bab8:	9304      	str	r3, [sp, #16]
 800baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babe:	4829      	ldr	r0, [pc, #164]	; (800bb64 <_vfiprintf_r+0x224>)
 800bac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bac4:	2206      	movs	r2, #6
 800bac6:	f7f4 fb8b 	bl	80001e0 <memchr>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d03f      	beq.n	800bb4e <_vfiprintf_r+0x20e>
 800bace:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <_vfiprintf_r+0x228>)
 800bad0:	bb1b      	cbnz	r3, 800bb1a <_vfiprintf_r+0x1da>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	3307      	adds	r3, #7
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	3308      	adds	r3, #8
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae0:	443b      	add	r3, r7
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	e768      	b.n	800b9b8 <_vfiprintf_r+0x78>
 800bae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baea:	460c      	mov	r4, r1
 800baec:	2001      	movs	r0, #1
 800baee:	e7a6      	b.n	800ba3e <_vfiprintf_r+0xfe>
 800baf0:	2300      	movs	r3, #0
 800baf2:	3401      	adds	r4, #1
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	4619      	mov	r1, r3
 800baf8:	f04f 0c0a 	mov.w	ip, #10
 800bafc:	4620      	mov	r0, r4
 800bafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb02:	3a30      	subs	r2, #48	; 0x30
 800bb04:	2a09      	cmp	r2, #9
 800bb06:	d903      	bls.n	800bb10 <_vfiprintf_r+0x1d0>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0c6      	beq.n	800ba9a <_vfiprintf_r+0x15a>
 800bb0c:	9105      	str	r1, [sp, #20]
 800bb0e:	e7c4      	b.n	800ba9a <_vfiprintf_r+0x15a>
 800bb10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb14:	4604      	mov	r4, r0
 800bb16:	2301      	movs	r3, #1
 800bb18:	e7f0      	b.n	800bafc <_vfiprintf_r+0x1bc>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <_vfiprintf_r+0x22c>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f3af 8000 	nop.w
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	1c78      	adds	r0, r7, #1
 800bb2e:	d1d6      	bne.n	800bade <_vfiprintf_r+0x19e>
 800bb30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb32:	07d9      	lsls	r1, r3, #31
 800bb34:	d405      	bmi.n	800bb42 <_vfiprintf_r+0x202>
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	059a      	lsls	r2, r3, #22
 800bb3a:	d402      	bmi.n	800bb42 <_vfiprintf_r+0x202>
 800bb3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb3e:	f7ff fdcd 	bl	800b6dc <__retarget_lock_release_recursive>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	065b      	lsls	r3, r3, #25
 800bb46:	f53f af1d 	bmi.w	800b984 <_vfiprintf_r+0x44>
 800bb4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb4c:	e71c      	b.n	800b988 <_vfiprintf_r+0x48>
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <_vfiprintf_r+0x22c>)
 800bb56:	a904      	add	r1, sp, #16
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 f879 	bl	800bc50 <_printf_i>
 800bb5e:	e7e4      	b.n	800bb2a <_vfiprintf_r+0x1ea>
 800bb60:	0800c444 	.word	0x0800c444
 800bb64:	0800c44e 	.word	0x0800c44e
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	0800b91b 	.word	0x0800b91b
 800bb70:	0800c44a 	.word	0x0800c44a

0800bb74 <_printf_common>:
 800bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb78:	4616      	mov	r6, r2
 800bb7a:	4699      	mov	r9, r3
 800bb7c:	688a      	ldr	r2, [r1, #8]
 800bb7e:	690b      	ldr	r3, [r1, #16]
 800bb80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	bfb8      	it	lt
 800bb88:	4613      	movlt	r3, r2
 800bb8a:	6033      	str	r3, [r6, #0]
 800bb8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb90:	4607      	mov	r7, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	b10a      	cbz	r2, 800bb9a <_printf_common+0x26>
 800bb96:	3301      	adds	r3, #1
 800bb98:	6033      	str	r3, [r6, #0]
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	0699      	lsls	r1, r3, #26
 800bb9e:	bf42      	ittt	mi
 800bba0:	6833      	ldrmi	r3, [r6, #0]
 800bba2:	3302      	addmi	r3, #2
 800bba4:	6033      	strmi	r3, [r6, #0]
 800bba6:	6825      	ldr	r5, [r4, #0]
 800bba8:	f015 0506 	ands.w	r5, r5, #6
 800bbac:	d106      	bne.n	800bbbc <_printf_common+0x48>
 800bbae:	f104 0a19 	add.w	sl, r4, #25
 800bbb2:	68e3      	ldr	r3, [r4, #12]
 800bbb4:	6832      	ldr	r2, [r6, #0]
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	42ab      	cmp	r3, r5
 800bbba:	dc26      	bgt.n	800bc0a <_printf_common+0x96>
 800bbbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbc0:	1e13      	subs	r3, r2, #0
 800bbc2:	6822      	ldr	r2, [r4, #0]
 800bbc4:	bf18      	it	ne
 800bbc6:	2301      	movne	r3, #1
 800bbc8:	0692      	lsls	r2, r2, #26
 800bbca:	d42b      	bmi.n	800bc24 <_printf_common+0xb0>
 800bbcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c0      	blx	r8
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d01e      	beq.n	800bc18 <_printf_common+0xa4>
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	6922      	ldr	r2, [r4, #16]
 800bbde:	f003 0306 	and.w	r3, r3, #6
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	bf02      	ittt	eq
 800bbe6:	68e5      	ldreq	r5, [r4, #12]
 800bbe8:	6833      	ldreq	r3, [r6, #0]
 800bbea:	1aed      	subeq	r5, r5, r3
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	bf0c      	ite	eq
 800bbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbf4:	2500      	movne	r5, #0
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	bfc4      	itt	gt
 800bbfa:	1a9b      	subgt	r3, r3, r2
 800bbfc:	18ed      	addgt	r5, r5, r3
 800bbfe:	2600      	movs	r6, #0
 800bc00:	341a      	adds	r4, #26
 800bc02:	42b5      	cmp	r5, r6
 800bc04:	d11a      	bne.n	800bc3c <_printf_common+0xc8>
 800bc06:	2000      	movs	r0, #0
 800bc08:	e008      	b.n	800bc1c <_printf_common+0xa8>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4652      	mov	r2, sl
 800bc0e:	4649      	mov	r1, r9
 800bc10:	4638      	mov	r0, r7
 800bc12:	47c0      	blx	r8
 800bc14:	3001      	adds	r0, #1
 800bc16:	d103      	bne.n	800bc20 <_printf_common+0xac>
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	3501      	adds	r5, #1
 800bc22:	e7c6      	b.n	800bbb2 <_printf_common+0x3e>
 800bc24:	18e1      	adds	r1, r4, r3
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	2030      	movs	r0, #48	; 0x30
 800bc2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc2e:	4422      	add	r2, r4
 800bc30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc38:	3302      	adds	r3, #2
 800bc3a:	e7c7      	b.n	800bbcc <_printf_common+0x58>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4622      	mov	r2, r4
 800bc40:	4649      	mov	r1, r9
 800bc42:	4638      	mov	r0, r7
 800bc44:	47c0      	blx	r8
 800bc46:	3001      	adds	r0, #1
 800bc48:	d0e6      	beq.n	800bc18 <_printf_common+0xa4>
 800bc4a:	3601      	adds	r6, #1
 800bc4c:	e7d9      	b.n	800bc02 <_printf_common+0x8e>
	...

0800bc50 <_printf_i>:
 800bc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	7e0f      	ldrb	r7, [r1, #24]
 800bc56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc58:	2f78      	cmp	r7, #120	; 0x78
 800bc5a:	4691      	mov	r9, r2
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	469a      	mov	sl, r3
 800bc62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc66:	d807      	bhi.n	800bc78 <_printf_i+0x28>
 800bc68:	2f62      	cmp	r7, #98	; 0x62
 800bc6a:	d80a      	bhi.n	800bc82 <_printf_i+0x32>
 800bc6c:	2f00      	cmp	r7, #0
 800bc6e:	f000 80d4 	beq.w	800be1a <_printf_i+0x1ca>
 800bc72:	2f58      	cmp	r7, #88	; 0x58
 800bc74:	f000 80c0 	beq.w	800bdf8 <_printf_i+0x1a8>
 800bc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc80:	e03a      	b.n	800bcf8 <_printf_i+0xa8>
 800bc82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc86:	2b15      	cmp	r3, #21
 800bc88:	d8f6      	bhi.n	800bc78 <_printf_i+0x28>
 800bc8a:	a101      	add	r1, pc, #4	; (adr r1, 800bc90 <_printf_i+0x40>)
 800bc8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bcfd 	.word	0x0800bcfd
 800bc98:	0800bc79 	.word	0x0800bc79
 800bc9c:	0800bc79 	.word	0x0800bc79
 800bca0:	0800bc79 	.word	0x0800bc79
 800bca4:	0800bc79 	.word	0x0800bc79
 800bca8:	0800bcfd 	.word	0x0800bcfd
 800bcac:	0800bc79 	.word	0x0800bc79
 800bcb0:	0800bc79 	.word	0x0800bc79
 800bcb4:	0800bc79 	.word	0x0800bc79
 800bcb8:	0800bc79 	.word	0x0800bc79
 800bcbc:	0800be01 	.word	0x0800be01
 800bcc0:	0800bd29 	.word	0x0800bd29
 800bcc4:	0800bdbb 	.word	0x0800bdbb
 800bcc8:	0800bc79 	.word	0x0800bc79
 800bccc:	0800bc79 	.word	0x0800bc79
 800bcd0:	0800be23 	.word	0x0800be23
 800bcd4:	0800bc79 	.word	0x0800bc79
 800bcd8:	0800bd29 	.word	0x0800bd29
 800bcdc:	0800bc79 	.word	0x0800bc79
 800bce0:	0800bc79 	.word	0x0800bc79
 800bce4:	0800bdc3 	.word	0x0800bdc3
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	602a      	str	r2, [r5, #0]
 800bcf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e09f      	b.n	800be3c <_printf_i+0x1ec>
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	0607      	lsls	r7, r0, #24
 800bd02:	f103 0104 	add.w	r1, r3, #4
 800bd06:	6029      	str	r1, [r5, #0]
 800bd08:	d501      	bpl.n	800bd0e <_printf_i+0xbe>
 800bd0a:	681e      	ldr	r6, [r3, #0]
 800bd0c:	e003      	b.n	800bd16 <_printf_i+0xc6>
 800bd0e:	0646      	lsls	r6, r0, #25
 800bd10:	d5fb      	bpl.n	800bd0a <_printf_i+0xba>
 800bd12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	da03      	bge.n	800bd22 <_printf_i+0xd2>
 800bd1a:	232d      	movs	r3, #45	; 0x2d
 800bd1c:	4276      	negs	r6, r6
 800bd1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd22:	485a      	ldr	r0, [pc, #360]	; (800be8c <_printf_i+0x23c>)
 800bd24:	230a      	movs	r3, #10
 800bd26:	e012      	b.n	800bd4e <_printf_i+0xfe>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	1d19      	adds	r1, r3, #4
 800bd2e:	6029      	str	r1, [r5, #0]
 800bd30:	0605      	lsls	r5, r0, #24
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0xe8>
 800bd34:	681e      	ldr	r6, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0xee>
 800bd38:	0641      	lsls	r1, r0, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0xe4>
 800bd3c:	881e      	ldrh	r6, [r3, #0]
 800bd3e:	4853      	ldr	r0, [pc, #332]	; (800be8c <_printf_i+0x23c>)
 800bd40:	2f6f      	cmp	r7, #111	; 0x6f
 800bd42:	bf0c      	ite	eq
 800bd44:	2308      	moveq	r3, #8
 800bd46:	230a      	movne	r3, #10
 800bd48:	2100      	movs	r1, #0
 800bd4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd4e:	6865      	ldr	r5, [r4, #4]
 800bd50:	60a5      	str	r5, [r4, #8]
 800bd52:	2d00      	cmp	r5, #0
 800bd54:	bfa2      	ittt	ge
 800bd56:	6821      	ldrge	r1, [r4, #0]
 800bd58:	f021 0104 	bicge.w	r1, r1, #4
 800bd5c:	6021      	strge	r1, [r4, #0]
 800bd5e:	b90e      	cbnz	r6, 800bd64 <_printf_i+0x114>
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	d04b      	beq.n	800bdfc <_printf_i+0x1ac>
 800bd64:	4615      	mov	r5, r2
 800bd66:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd6a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd6e:	5dc7      	ldrb	r7, [r0, r7]
 800bd70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd74:	4637      	mov	r7, r6
 800bd76:	42bb      	cmp	r3, r7
 800bd78:	460e      	mov	r6, r1
 800bd7a:	d9f4      	bls.n	800bd66 <_printf_i+0x116>
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d10b      	bne.n	800bd98 <_printf_i+0x148>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	07de      	lsls	r6, r3, #31
 800bd84:	d508      	bpl.n	800bd98 <_printf_i+0x148>
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	6861      	ldr	r1, [r4, #4]
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	bfde      	ittt	le
 800bd8e:	2330      	movle	r3, #48	; 0x30
 800bd90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd98:	1b52      	subs	r2, r2, r5
 800bd9a:	6122      	str	r2, [r4, #16]
 800bd9c:	f8cd a000 	str.w	sl, [sp]
 800bda0:	464b      	mov	r3, r9
 800bda2:	aa03      	add	r2, sp, #12
 800bda4:	4621      	mov	r1, r4
 800bda6:	4640      	mov	r0, r8
 800bda8:	f7ff fee4 	bl	800bb74 <_printf_common>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d14a      	bne.n	800be46 <_printf_i+0x1f6>
 800bdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb4:	b004      	add	sp, #16
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	f043 0320 	orr.w	r3, r3, #32
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	4833      	ldr	r0, [pc, #204]	; (800be90 <_printf_i+0x240>)
 800bdc4:	2778      	movs	r7, #120	; 0x78
 800bdc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	6829      	ldr	r1, [r5, #0]
 800bdce:	061f      	lsls	r7, r3, #24
 800bdd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdd4:	d402      	bmi.n	800bddc <_printf_i+0x18c>
 800bdd6:	065f      	lsls	r7, r3, #25
 800bdd8:	bf48      	it	mi
 800bdda:	b2b6      	uxthmi	r6, r6
 800bddc:	07df      	lsls	r7, r3, #31
 800bdde:	bf48      	it	mi
 800bde0:	f043 0320 	orrmi.w	r3, r3, #32
 800bde4:	6029      	str	r1, [r5, #0]
 800bde6:	bf48      	it	mi
 800bde8:	6023      	strmi	r3, [r4, #0]
 800bdea:	b91e      	cbnz	r6, 800bdf4 <_printf_i+0x1a4>
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	f023 0320 	bic.w	r3, r3, #32
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	2310      	movs	r3, #16
 800bdf6:	e7a7      	b.n	800bd48 <_printf_i+0xf8>
 800bdf8:	4824      	ldr	r0, [pc, #144]	; (800be8c <_printf_i+0x23c>)
 800bdfa:	e7e4      	b.n	800bdc6 <_printf_i+0x176>
 800bdfc:	4615      	mov	r5, r2
 800bdfe:	e7bd      	b.n	800bd7c <_printf_i+0x12c>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	6826      	ldr	r6, [r4, #0]
 800be04:	6961      	ldr	r1, [r4, #20]
 800be06:	1d18      	adds	r0, r3, #4
 800be08:	6028      	str	r0, [r5, #0]
 800be0a:	0635      	lsls	r5, r6, #24
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	d501      	bpl.n	800be14 <_printf_i+0x1c4>
 800be10:	6019      	str	r1, [r3, #0]
 800be12:	e002      	b.n	800be1a <_printf_i+0x1ca>
 800be14:	0670      	lsls	r0, r6, #25
 800be16:	d5fb      	bpl.n	800be10 <_printf_i+0x1c0>
 800be18:	8019      	strh	r1, [r3, #0]
 800be1a:	2300      	movs	r3, #0
 800be1c:	6123      	str	r3, [r4, #16]
 800be1e:	4615      	mov	r5, r2
 800be20:	e7bc      	b.n	800bd9c <_printf_i+0x14c>
 800be22:	682b      	ldr	r3, [r5, #0]
 800be24:	1d1a      	adds	r2, r3, #4
 800be26:	602a      	str	r2, [r5, #0]
 800be28:	681d      	ldr	r5, [r3, #0]
 800be2a:	6862      	ldr	r2, [r4, #4]
 800be2c:	2100      	movs	r1, #0
 800be2e:	4628      	mov	r0, r5
 800be30:	f7f4 f9d6 	bl	80001e0 <memchr>
 800be34:	b108      	cbz	r0, 800be3a <_printf_i+0x1ea>
 800be36:	1b40      	subs	r0, r0, r5
 800be38:	6060      	str	r0, [r4, #4]
 800be3a:	6863      	ldr	r3, [r4, #4]
 800be3c:	6123      	str	r3, [r4, #16]
 800be3e:	2300      	movs	r3, #0
 800be40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be44:	e7aa      	b.n	800bd9c <_printf_i+0x14c>
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	462a      	mov	r2, r5
 800be4a:	4649      	mov	r1, r9
 800be4c:	4640      	mov	r0, r8
 800be4e:	47d0      	blx	sl
 800be50:	3001      	adds	r0, #1
 800be52:	d0ad      	beq.n	800bdb0 <_printf_i+0x160>
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	079b      	lsls	r3, r3, #30
 800be58:	d413      	bmi.n	800be82 <_printf_i+0x232>
 800be5a:	68e0      	ldr	r0, [r4, #12]
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	4298      	cmp	r0, r3
 800be60:	bfb8      	it	lt
 800be62:	4618      	movlt	r0, r3
 800be64:	e7a6      	b.n	800bdb4 <_printf_i+0x164>
 800be66:	2301      	movs	r3, #1
 800be68:	4632      	mov	r2, r6
 800be6a:	4649      	mov	r1, r9
 800be6c:	4640      	mov	r0, r8
 800be6e:	47d0      	blx	sl
 800be70:	3001      	adds	r0, #1
 800be72:	d09d      	beq.n	800bdb0 <_printf_i+0x160>
 800be74:	3501      	adds	r5, #1
 800be76:	68e3      	ldr	r3, [r4, #12]
 800be78:	9903      	ldr	r1, [sp, #12]
 800be7a:	1a5b      	subs	r3, r3, r1
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	dcf2      	bgt.n	800be66 <_printf_i+0x216>
 800be80:	e7eb      	b.n	800be5a <_printf_i+0x20a>
 800be82:	2500      	movs	r5, #0
 800be84:	f104 0619 	add.w	r6, r4, #25
 800be88:	e7f5      	b.n	800be76 <_printf_i+0x226>
 800be8a:	bf00      	nop
 800be8c:	0800c455 	.word	0x0800c455
 800be90:	0800c466 	.word	0x0800c466

0800be94 <__sflush_r>:
 800be94:	898a      	ldrh	r2, [r1, #12]
 800be96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	4605      	mov	r5, r0
 800be9c:	0710      	lsls	r0, r2, #28
 800be9e:	460c      	mov	r4, r1
 800bea0:	d458      	bmi.n	800bf54 <__sflush_r+0xc0>
 800bea2:	684b      	ldr	r3, [r1, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dc05      	bgt.n	800beb4 <__sflush_r+0x20>
 800bea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc02      	bgt.n	800beb4 <__sflush_r+0x20>
 800beae:	2000      	movs	r0, #0
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d0f9      	beq.n	800beae <__sflush_r+0x1a>
 800beba:	2300      	movs	r3, #0
 800bebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bec0:	682f      	ldr	r7, [r5, #0]
 800bec2:	6a21      	ldr	r1, [r4, #32]
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	d032      	beq.n	800bf2e <__sflush_r+0x9a>
 800bec8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	075a      	lsls	r2, r3, #29
 800bece:	d505      	bpl.n	800bedc <__sflush_r+0x48>
 800bed0:	6863      	ldr	r3, [r4, #4]
 800bed2:	1ac0      	subs	r0, r0, r3
 800bed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bed6:	b10b      	cbz	r3, 800bedc <__sflush_r+0x48>
 800bed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beda:	1ac0      	subs	r0, r0, r3
 800bedc:	2300      	movs	r3, #0
 800bede:	4602      	mov	r2, r0
 800bee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bee2:	6a21      	ldr	r1, [r4, #32]
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b0      	blx	r6
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	d106      	bne.n	800befc <__sflush_r+0x68>
 800beee:	6829      	ldr	r1, [r5, #0]
 800bef0:	291d      	cmp	r1, #29
 800bef2:	d82b      	bhi.n	800bf4c <__sflush_r+0xb8>
 800bef4:	4a29      	ldr	r2, [pc, #164]	; (800bf9c <__sflush_r+0x108>)
 800bef6:	410a      	asrs	r2, r1
 800bef8:	07d6      	lsls	r6, r2, #31
 800befa:	d427      	bmi.n	800bf4c <__sflush_r+0xb8>
 800befc:	2200      	movs	r2, #0
 800befe:	6062      	str	r2, [r4, #4]
 800bf00:	04d9      	lsls	r1, r3, #19
 800bf02:	6922      	ldr	r2, [r4, #16]
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	d504      	bpl.n	800bf12 <__sflush_r+0x7e>
 800bf08:	1c42      	adds	r2, r0, #1
 800bf0a:	d101      	bne.n	800bf10 <__sflush_r+0x7c>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b903      	cbnz	r3, 800bf12 <__sflush_r+0x7e>
 800bf10:	6560      	str	r0, [r4, #84]	; 0x54
 800bf12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf14:	602f      	str	r7, [r5, #0]
 800bf16:	2900      	cmp	r1, #0
 800bf18:	d0c9      	beq.n	800beae <__sflush_r+0x1a>
 800bf1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf1e:	4299      	cmp	r1, r3
 800bf20:	d002      	beq.n	800bf28 <__sflush_r+0x94>
 800bf22:	4628      	mov	r0, r5
 800bf24:	f7ff fbea 	bl	800b6fc <_free_r>
 800bf28:	2000      	movs	r0, #0
 800bf2a:	6360      	str	r0, [r4, #52]	; 0x34
 800bf2c:	e7c0      	b.n	800beb0 <__sflush_r+0x1c>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b0      	blx	r6
 800bf34:	1c41      	adds	r1, r0, #1
 800bf36:	d1c8      	bne.n	800beca <__sflush_r+0x36>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0c5      	beq.n	800beca <__sflush_r+0x36>
 800bf3e:	2b1d      	cmp	r3, #29
 800bf40:	d001      	beq.n	800bf46 <__sflush_r+0xb2>
 800bf42:	2b16      	cmp	r3, #22
 800bf44:	d101      	bne.n	800bf4a <__sflush_r+0xb6>
 800bf46:	602f      	str	r7, [r5, #0]
 800bf48:	e7b1      	b.n	800beae <__sflush_r+0x1a>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	e7ad      	b.n	800beb0 <__sflush_r+0x1c>
 800bf54:	690f      	ldr	r7, [r1, #16]
 800bf56:	2f00      	cmp	r7, #0
 800bf58:	d0a9      	beq.n	800beae <__sflush_r+0x1a>
 800bf5a:	0793      	lsls	r3, r2, #30
 800bf5c:	680e      	ldr	r6, [r1, #0]
 800bf5e:	bf08      	it	eq
 800bf60:	694b      	ldreq	r3, [r1, #20]
 800bf62:	600f      	str	r7, [r1, #0]
 800bf64:	bf18      	it	ne
 800bf66:	2300      	movne	r3, #0
 800bf68:	eba6 0807 	sub.w	r8, r6, r7
 800bf6c:	608b      	str	r3, [r1, #8]
 800bf6e:	f1b8 0f00 	cmp.w	r8, #0
 800bf72:	dd9c      	ble.n	800beae <__sflush_r+0x1a>
 800bf74:	6a21      	ldr	r1, [r4, #32]
 800bf76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf78:	4643      	mov	r3, r8
 800bf7a:	463a      	mov	r2, r7
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	47b0      	blx	r6
 800bf80:	2800      	cmp	r0, #0
 800bf82:	dc06      	bgt.n	800bf92 <__sflush_r+0xfe>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	e78e      	b.n	800beb0 <__sflush_r+0x1c>
 800bf92:	4407      	add	r7, r0
 800bf94:	eba8 0800 	sub.w	r8, r8, r0
 800bf98:	e7e9      	b.n	800bf6e <__sflush_r+0xda>
 800bf9a:	bf00      	nop
 800bf9c:	dfbffffe 	.word	0xdfbffffe

0800bfa0 <_fflush_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	690b      	ldr	r3, [r1, #16]
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	b913      	cbnz	r3, 800bfb0 <_fflush_r+0x10>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	4628      	mov	r0, r5
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	b118      	cbz	r0, 800bfba <_fflush_r+0x1a>
 800bfb2:	6a03      	ldr	r3, [r0, #32]
 800bfb4:	b90b      	cbnz	r3, 800bfba <_fflush_r+0x1a>
 800bfb6:	f7ff f945 	bl	800b244 <__sinit>
 800bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0f3      	beq.n	800bfaa <_fflush_r+0xa>
 800bfc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfc4:	07d0      	lsls	r0, r2, #31
 800bfc6:	d404      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfc8:	0599      	lsls	r1, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfce:	f7ff fb84 	bl	800b6da <__retarget_lock_acquire_recursive>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f7ff ff5d 	bl	800be94 <__sflush_r>
 800bfda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfdc:	07da      	lsls	r2, r3, #31
 800bfde:	4605      	mov	r5, r0
 800bfe0:	d4e4      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	d4e1      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfea:	f7ff fb77 	bl	800b6dc <__retarget_lock_release_recursive>
 800bfee:	e7dd      	b.n	800bfac <_fflush_r+0xc>

0800bff0 <__swhatbuf_r>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	460c      	mov	r4, r1
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	2900      	cmp	r1, #0
 800bffa:	b096      	sub	sp, #88	; 0x58
 800bffc:	4615      	mov	r5, r2
 800bffe:	461e      	mov	r6, r3
 800c000:	da0d      	bge.n	800c01e <__swhatbuf_r+0x2e>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c008:	f04f 0100 	mov.w	r1, #0
 800c00c:	bf0c      	ite	eq
 800c00e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c012:	2340      	movne	r3, #64	; 0x40
 800c014:	2000      	movs	r0, #0
 800c016:	6031      	str	r1, [r6, #0]
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	b016      	add	sp, #88	; 0x58
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
 800c01e:	466a      	mov	r2, sp
 800c020:	f000 f848 	bl	800c0b4 <_fstat_r>
 800c024:	2800      	cmp	r0, #0
 800c026:	dbec      	blt.n	800c002 <__swhatbuf_r+0x12>
 800c028:	9901      	ldr	r1, [sp, #4]
 800c02a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c02e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c032:	4259      	negs	r1, r3
 800c034:	4159      	adcs	r1, r3
 800c036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c03a:	e7eb      	b.n	800c014 <__swhatbuf_r+0x24>

0800c03c <__smakebuf_r>:
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c040:	079d      	lsls	r5, r3, #30
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d507      	bpl.n	800c058 <__smakebuf_r+0x1c>
 800c048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	2301      	movs	r3, #1
 800c052:	6163      	str	r3, [r4, #20]
 800c054:	b002      	add	sp, #8
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	ab01      	add	r3, sp, #4
 800c05a:	466a      	mov	r2, sp
 800c05c:	f7ff ffc8 	bl	800bff0 <__swhatbuf_r>
 800c060:	9900      	ldr	r1, [sp, #0]
 800c062:	4605      	mov	r5, r0
 800c064:	4630      	mov	r0, r6
 800c066:	f7ff fbb5 	bl	800b7d4 <_malloc_r>
 800c06a:	b948      	cbnz	r0, 800c080 <__smakebuf_r+0x44>
 800c06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c070:	059a      	lsls	r2, r3, #22
 800c072:	d4ef      	bmi.n	800c054 <__smakebuf_r+0x18>
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	f043 0302 	orr.w	r3, r3, #2
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	e7e3      	b.n	800c048 <__smakebuf_r+0xc>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	6020      	str	r0, [r4, #0]
 800c084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	6163      	str	r3, [r4, #20]
 800c08e:	9b01      	ldr	r3, [sp, #4]
 800c090:	6120      	str	r0, [r4, #16]
 800c092:	b15b      	cbz	r3, 800c0ac <__smakebuf_r+0x70>
 800c094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c098:	4630      	mov	r0, r6
 800c09a:	f000 f81d 	bl	800c0d8 <_isatty_r>
 800c09e:	b128      	cbz	r0, 800c0ac <__smakebuf_r+0x70>
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	f023 0303 	bic.w	r3, r3, #3
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	81a3      	strh	r3, [r4, #12]
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	431d      	orrs	r5, r3
 800c0b0:	81a5      	strh	r5, [r4, #12]
 800c0b2:	e7cf      	b.n	800c054 <__smakebuf_r+0x18>

0800c0b4 <_fstat_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	; (800c0d4 <_fstat_r+0x20>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	4611      	mov	r1, r2
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	f7f4 fd3e 	bl	8000b42 <_fstat>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d102      	bne.n	800c0d0 <_fstat_r+0x1c>
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	b103      	cbz	r3, 800c0d0 <_fstat_r+0x1c>
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	bd38      	pop	{r3, r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20002830 	.word	0x20002830

0800c0d8 <_isatty_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d06      	ldr	r5, [pc, #24]	; (800c0f4 <_isatty_r+0x1c>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	f7f4 fd3d 	bl	8000b62 <_isatty>
 800c0e8:	1c43      	adds	r3, r0, #1
 800c0ea:	d102      	bne.n	800c0f2 <_isatty_r+0x1a>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	b103      	cbz	r3, 800c0f2 <_isatty_r+0x1a>
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
 800c0f4:	20002830 	.word	0x20002830

0800c0f8 <_sbrk_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d06      	ldr	r5, [pc, #24]	; (800c114 <_sbrk_r+0x1c>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f7f4 fd46 	bl	8000b94 <_sbrk>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_sbrk_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_sbrk_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20002830 	.word	0x20002830

0800c118 <_init>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	bf00      	nop
 800c11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11e:	bc08      	pop	{r3}
 800c120:	469e      	mov	lr, r3
 800c122:	4770      	bx	lr

0800c124 <_fini>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr
